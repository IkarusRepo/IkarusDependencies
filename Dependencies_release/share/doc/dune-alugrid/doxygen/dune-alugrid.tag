<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1" doxygen_gitid="ef9b20ac7f8a8621fcfc299f8bd0b80422390f4b">
  <compound kind="file">
    <name>alu3dinclude.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00005.html</filename>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">aluinline.hh</includes>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <includes id="a00101" name="topology.hh" local="no" imported="no">dune/alugrid/3d/topology.hh</includes>
    <class kind="struct">Dune::ALU3dBasicImplTraits&lt; ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALU3dBasicImplTraits&lt; ALUGridMPIComm &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 2, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 3 &gt;</class>
    <class kind="struct">Dune::ALU3dRefinementTraits</class>
    <class kind="struct">Dune::ALU3dRefinementTraits&lt; MarkRuleType, tetra &gt;</class>
    <class kind="struct">Dune::ALU3dRefinementTraits&lt; MarkRuleType, hexa &gt;</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::RefinementRules</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::Codim</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::RefinementRules</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::Codim</class>
    <class kind="struct">Dune::ALU3dGridVertexList</class>
    <class kind="struct">Dune::ALU3dGridLeafVertexList</class>
    <class kind="class">Dune::ALU3dGridItemList</class>
    <class kind="struct">Dune::ALU3dGridFaceGetter</class>
    <namespace>ALUGrid</namespace>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALU3DSPACE</name>
      <anchorfile>a00005.html</anchorfile>
      <anchor>a4f320a59607c156397ea3f788fbdffa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Gitter::AdaptRestrictProlong</type>
      <name>AdaptRestrictProlongType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a1a31c4a346047cf338b108ade7345c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GatherScatter</type>
      <name>GatherScatterType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aa4e61e182f5f36188220cc7eec074a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9fe7d075e552ef9141775c938aa55a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridItemList</type>
      <name>ALU3dGridItemListType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af8070674a03a310a263a0b22736a2fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ProcessorBoundary_t</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a9fa2c7c251af4019314eefe94e5a01b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alu3diterators.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00008.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <class kind="struct">ALUGrid::BSMacroIterator</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 0, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 1, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 2, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 3, Comm &gt;</class>
    <class kind="class">ALUGrid::IteratorWrapperInterface</class>
    <class kind="struct">ALUGrid::IteratorElType</class>
    <namespace>ALUGrid</namespace>
    <member kind="typedef">
      <type>Dune::PartitionIteratorType</type>
      <name>PartitionIteratorType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a9aee5709baf0aa40ee8d8d6e018d852c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alu3diterators_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00011.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00008" name="alu3diterators.hh" local="yes" imported="no">alu3diterators.hh</includes>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, pitype, Comm &gt;</class>
    <class kind="struct">ALUGrid::LeafStopRule</class>
    <class kind="struct">ALUGrid::LeafStopRule&lt; ElType, Dune::Interior_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::LeafLevelIteratorTTProxy</class>
    <class kind="class">ALUGrid::ALU3dGridGhostIterator</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 1 &gt;</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 2 &gt;</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 3 &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridGhostIteratorHigherCodim</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <namespace>ALUGrid</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALU3DITERATORS_IMP_CC</name>
      <anchorfile>a00011.html</anchorfile>
      <anchor>afd97c76286d5ce962c55a976888c70f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ALUHElementType&lt; 0, Dune::ALUGridMPIComm &gt;::ElementType *, Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType * &gt;</type>
      <name>LeafValType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae35d36514b2a8f02b808b24cdde8b953</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alugrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00014.html</filename>
    <includes id="a00116" name="capabilities.hh" local="no" imported="no">dune/alugrid/common/capabilities.hh</includes>
    <includes id="a00077" name="indexsets.hh" local="no" imported="no">dune/alugrid/3d/indexsets.hh</includes>
    <includes id="a00083" name="iterator.hh" local="no" imported="no">dune/alugrid/3d/iterator.hh</includes>
    <includes id="a00029" name="entity.hh" local="no" imported="no">dune/alugrid/3d/entity.hh</includes>
    <includes id="a00050" name="geometry.hh" local="no" imported="no">dune/alugrid/3d/geometry.hh</includes>
    <includes id="a03379" name="3d/grid.hh" local="no" imported="no">dune/alugrid/3d/grid.hh</includes>
    <class kind="class">Dune::ALUGrid</class>
    <class kind="struct">Dune::ALUGrid::Partition</class>
    <namespace>Dune</namespace>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ALUGridParallelSerial</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7ec1dfb4b161d00e3e9894995465ee2f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>alugrid_assert.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00104.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ALUGRIDDEBUG</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a87e34af7dc24ffe7cb40b98148e5f490</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>alugrid_assert</name>
      <anchorfile>a00104.html</anchorfile>
      <anchor>a06fb7d555d7b6c79a53b01e936aec299</anchor>
      <arglist>(EX)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>aluinline.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00017.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>COMPILE_ALUGRID_LIB</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa3b0333cd3d33af475be01299f8e3f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>COMPILE_ALUGRID_INLINE</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>aa8f61c521e03feed30b8a634f98cc43b</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>alu_inline</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a85f85ff8646d32b14c72b49a213299bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>backuprestore.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00107.html</filename>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <class kind="struct">Dune::BackupRestoreFacility&lt; ALUGrid&lt; dim, dimworld, elType, refineType, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>bisectioncompatibility.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00110.html</filename>
    <class kind="struct">BisectionCompatibilityParameters</class>
    <class kind="class">BisectionCompatibility</class>
  </compound>
  <compound kind="file">
    <name>bndprojection.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00113.html</filename>
    <class kind="class">Dune::ALUGridBoundaryProjection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>capabilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00116.html</filename>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridNoComm &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridMPIComm &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
  </compound>
  <compound kind="file">
    <name>communication.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00020.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="no" imported="no">dune/alugrid/3d/alu3dinclude.hh</includes>
    <includes id="a00026" name="datahandle.hh" local="no" imported="no">dune/alugrid/3d/datahandle.hh</includes>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="class">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="class">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <class kind="class">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="struct">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <class kind="class">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="struct">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>datacollectorcaps.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00023.html</filename>
    <class kind="class">ALUGrid::DataCollectorCaps::HasUserDefinedPartitioning</class>
    <class kind="class">ALUGrid::DataCollectorCaps::HasUserDefinedLoadWeights</class>
    <namespace>ALUGrid</namespace>
    <namespace>ALUGrid::DataCollectorCaps</namespace>
  </compound>
  <compound kind="file">
    <name>datahandle.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00026.html</filename>
    <includes id="a00023" name="datacollectorcaps.hh" local="no" imported="no">dune/alugrid/3d/datacollectorcaps.hh</includes>
    <includes id="a00143" name="ldbhandleif.hh" local="no" imported="no">dune/alugrid/common/ldbhandleif.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <class kind="class">ALUGrid::GatherScatterBaseImpl</class>
    <class kind="class">ALUGrid::GatherScatterBaseImpl&lt; GridType, DataCollectorType, 0 &gt;</class>
    <class kind="class">ALUGrid::GatherScatterLeafData</class>
    <class kind="class">ALUGrid::GatherScatterLevelData</class>
    <class kind="class">ALUGrid::GatherScatterNoData</class>
    <class kind="class">ALUGrid::GatherScatterLevelData&lt; GridType, DataCollectorType, 0 &gt;</class>
    <class kind="class">ALUGrid::GatherScatterLoadBalance</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts&lt; false, D &gt;</class>
    <class kind="class">ALUGrid::GatherScatterLoadBalanceDataHandle</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::Codim</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve&lt; DH, false &gt;</class>
    <class kind="class">ALUGrid::AdaptRestrictProlongImpl</class>
    <class kind="class">ALUGrid::AdaptRestrictProlongGlSet</class>
    <namespace>ALUGrid</namespace>
  </compound>
  <compound kind="file">
    <name>declaration.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00119.html</filename>
    <class kind="struct">Dune::ALUGridNoComm</class>
    <class kind="struct">Dune::ALUGridMPIComm</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ALU3DGRID_PARALLEL</name>
      <anchorfile>a00119.html</anchorfile>
      <anchor>a454b8f0c337536e83b645a406b26ba84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ALUGridElementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>simplex</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96a99d617cb88165a01e8a49c86b63c7f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cube</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96ab0529945b6db45c90977a4c28020665e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ALUGridRefinementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8aab5ca11763954fd862ca1da9e47e8366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonconforming</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8a6368d1515d72b2a8aa43ad0b0b492828</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaultindexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00122.html</filename>
    <includes id="a00104" name="alugrid_assert.hh" local="no" imported="no">dune/alugrid/common/alugrid_assert.hh</includes>
    <class kind="struct">Dune::DefaultLevelIteratorTypes</class>
    <class kind="struct">Dune::DefaultLevelIteratorTypes::Codim</class>
    <class kind="struct">Dune::DefaultLevelIteratorTypes::Codim::Partition</class>
    <class kind="struct">Dune::DefaultLeafIteratorTypes</class>
    <class kind="struct">Dune::DefaultLeafIteratorTypes::Codim</class>
    <class kind="struct">Dune::DefaultLeafIteratorTypes::Codim::Partition</class>
    <class kind="class">Dune::DefaultIndexSet</class>
    <class kind="struct">Dune::DefaultIndexSet::Index</class>
    <class kind="class">Dune::DefaultBoundarySegmentIndexSet</class>
    <class kind="struct">Dune::DefaultBoundarySegmentIndexSet::Index</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgf.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/</path>
    <filename>a00173.html</filename>
    <includes id="a00056" name="grid.hh" local="no" imported="no">dune/alugrid/grid.hh</includes>
    <class kind="struct">Dune::DGFGridInfo&lt; Dune::ALUGrid&lt; dimg, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::DGFBaseFactory</class>
    <class kind="struct">Dune::DGFGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::dgf::ALU2dGridParameterBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>duneassert.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00125.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>ASSERT_HALT</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a715a63c2e02c93cd72c94f09bf833c49</anchor>
      <arglist>(p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>dune_assert_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a7a96d6db7500de277da32b5be2df39d9</anchor>
      <arglist>(x, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>dune_assert0_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a59914bae9355dc070cc905c3d5a2ac82</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>dune_assert1_</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a35f8cc3dfbf3631cd94cd0fbba308e1c</anchor>
      <arglist>(x, p)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>GET_ASSERT_MACRO</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ae27e4f2dbacc7765a6389812b9650012</anchor>
      <arglist>(_1, _2, NAME,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>dune_assert</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a6e3380c8ab311cc0cc2cd079de9987a6</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>entity.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00029.html</filename>
    <includes id="a00140" name="intersectioniteratorwrapper.hh" local="no" imported="no">dune/alugrid/common/intersectioniteratorwrapper.hh</includes>
    <includes id="a00164" name="twists.hh" local="no" imported="no">dune/alugrid/common/twists.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00077" name="indexsets.hh" local="yes" imported="no">indexsets.hh</includes>
    <includes id="a00083" name="iterator.hh" local="yes" imported="no">iterator.hh</includes>
    <includes id="a00038" name="entityseed.hh" local="yes" imported="no">entityseed.hh</includes>
    <includes id="a00035" name="entity_inline.hh" local="yes" imported="no">entity_inline.hh</includes>
    <includes id="a00032" name="entity_imp.cc" local="yes" imported="no">entity_imp.cc</includes>
    <class kind="class">Dune::ALU3dGridEntity</class>
    <class kind="class">Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="struct">Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;::Codim</class>
    <class kind="class">Dune::ALU3dGridEntityPointerBase</class>
    <class kind="class">Dune::ALU3dGridEntityPointer&lt; 0, GridImp &gt;</class>
    <class kind="class">Dune::ALU3dGridEntityPointer</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>entity_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00032.html</filename>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">aluinline.hh</includes>
    <includes id="a00065" name="gridfactory.cc" local="yes" imported="no">gridfactory.cc</includes>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00029" name="entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a00131" name="geostorage.hh" local="no" imported="no">dune/alugrid/common/geostorage.hh</includes>
    <class kind="struct">Dune::IndexWrapper</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 3 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 1 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 2 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 0 &gt;</class>
    <class kind="struct">Dune::SubEntities</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 0 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 1 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, 3, 2 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, 2, 2 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 3 &gt;</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_ENTITY_CC</name>
      <anchorfile>a00032.html</anchorfile>
      <anchor>a54e80688e2b35bd53ddcaf64427a4e69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>entity_inline.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00035.html</filename>
    <includes id="a00050" name="geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>entityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00038.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <class kind="class">Dune::ALU3dGridEntitySeedBase</class>
    <class kind="struct">Dune::ALU3dGridEntitySeedBase::Bnd</class>
    <class kind="struct">Dune::ALU3dGridEntitySeedBase::Bnd&lt; 0, Key &gt;</class>
    <class kind="class">Dune::ALU3dGridEntitySeed</class>
    <class kind="class">Dune::ALU3dGridEntitySeed&lt; 0, GridImp &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std ::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7eae66350b0be208683d7ae278f5cef8</anchor>
      <arglist>(std ::ostream &amp;out, const ALU3dGridEntitySeed&lt; cd, GridImp &gt; &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>faceutility.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00041.html</filename>
    <includes id="a00044" name="faceutility.hh" local="yes" imported="no">faceutility.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>alu3dMap2World</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a24e047ffbfc61e3d47371ffb8e8c9e42</anchor>
      <arglist>(const ALU3DSPACE LinearSurfaceMapping &amp;mapping, const FieldVector&lt; alu3d_ctype, m &gt; &amp;x, FieldVector&lt; alu3d_ctype, n &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alu3dMap2World</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a2bf89713f0f24ddafa11ccb4c42f37b6</anchor>
      <arglist>(const BilinearSurfaceMapping &amp;mapping, const FieldVector&lt; alu3d_ctype, m &gt; &amp;x, FieldVector&lt; alu3d_ctype, n &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>faceutility.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00044.html</filename>
    <includes id="a00092" name="mappings.hh" local="yes" imported="no">mappings.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00047" name="faceutility_imp.cc" local="yes" imported="no">faceutility_imp.cc</includes>
    <class kind="class">Dune::ALU3dGridFaceInfo</class>
    <class kind="struct">Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, tetra, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, hexa, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoBase</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoTetra</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoHexa</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, type, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoTetra&lt; 2, dimworld, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoHexa&lt; 2, dimworld, Comm &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>alu3d_ctype(&amp;</type>
      <name>fieldVector2alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7586763a138318a6973891eadf27c146</anchor>
      <arglist>(FieldVector&lt; alu3d_ctype, dim &gt; &amp;val))[dim]</arglist>
    </member>
    <member kind="function">
      <type>const alu3d_ctype(&amp;</type>
      <name>fieldVector2alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a1cd28d36130f7b41cf55455f4ac3d9f1</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim &gt; &amp;val))[dim]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>faceutility_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00047.html</filename>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_FACEUTILITY_IMP_HH</name>
      <anchorfile>a00047.html</anchorfile>
      <anchor>a33b0ef585b362ec2917850c23a1de51e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fromtogridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00128.html</filename>
    <includes id="a00104" name="alugrid_assert.hh" local="no" imported="no">dune/alugrid/common/alugrid_assert.hh</includes>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <class kind="class">Dune::FromToGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00050.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00092" name="mappings.hh" local="yes" imported="no">mappings.hh</includes>
    <includes id="a00149" name="memory.hh" local="no" imported="no">dune/alugrid/common/memory.hh</includes>
    <includes id="a00053" name="geometry_imp.cc" local="yes" imported="no">geometry_imp.cc</includes>
    <class kind="class">Dune::MyALUGridGeometryImplementation</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImplBase</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 1, eltype &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, tetra &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, hexa &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, hexa &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, tetra &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometry</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometry_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00053.html</filename>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <includes id="a00092" name="mappings.hh" local="yes" imported="no">mappings.hh</includes>
    <includes id="a00050" name="geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a00164" name="twists.hh" local="no" imported="no">dune/alugrid/common/twists.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_GEOMETRY_IMP_CC</name>
      <anchorfile>a00053.html</anchorfile>
      <anchor>a7bb26a021c75a47adc49a04747292e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geostorage.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00131.html</filename>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="no" imported="no">dune/alugrid/3d/alu3dinclude.hh</includes>
    <class kind="class">Dune::ALULocalGeometryStorage</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>3d/grid.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a03379.html</filename>
    <includes id="a00137" name="interfaces.hh" local="no" imported="no">dune/alugrid/common/interfaces.hh</includes>
    <includes id="a00122" name="defaultindexsets.hh" local="no" imported="no">dune/alugrid/common/defaultindexsets.hh</includes>
    <includes id="a00140" name="intersectioniteratorwrapper.hh" local="no" imported="no">dune/alugrid/common/intersectioniteratorwrapper.hh</includes>
    <includes id="a00167" name="typetraits.hh" local="no" imported="no">dune/alugrid/common/typetraits.hh</includes>
    <includes id="a00113" name="bndprojection.hh" local="no" imported="no">dune/alugrid/common/bndprojection.hh</includes>
    <includes id="a00107" name="backuprestore.hh" local="no" imported="no">dune/alugrid/common/backuprestore.hh</includes>
    <includes id="a00146" name="macrogridview.hh" local="no" imported="no">dune/alugrid/common/macrogridview.hh</includes>
    <includes id="a00164" name="twists.hh" local="no" imported="no">dune/alugrid/common/twists.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00077" name="indexsets.hh" local="yes" imported="no">indexsets.hh</includes>
    <includes id="a00026" name="datahandle.hh" local="yes" imported="no">datahandle.hh</includes>
    <includes id="a00020" name="communication.hh" local="no" imported="no">dune/alugrid/3d/communication.hh</includes>
    <includes id="a00071" name="gridview.hh" local="no" imported="no">dune/alugrid/3d/gridview.hh</includes>
    <includes id="a00062" name="grid_inline.hh" local="yes" imported="no">grid_inline.hh</includes>
    <includes id="a00059" name="grid_imp.cc" local="yes" imported="no">grid_imp.cc</includes>
    <class kind="struct">Dune::ALUGridBaseGrid&lt; dim, dimw, cube, Comm &gt;</class>
    <class kind="struct">Dune::ALUGridBaseGrid&lt; dim, dimw, simplex, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dGridCommunications&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, tetra, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, hexa, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, elType, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; 3, elType, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; 2, elType, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, elType, 3 &gt;</class>
    <class kind="struct">Dune::ALU3dGridFamily</class>
    <class kind="struct">Dune::ALU3dGridFamily::Traits</class>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Codim</class>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Codim::Partition</class>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Partition</class>
    <class kind="class">Dune::ALU3dGrid</class>
    <class kind="struct">Dune::ALU3dGrid::Codim</class>
    <class kind="struct">Dune::ALU3dGrid::Partition</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; Dune::ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
    <member kind="function">
      <type>bool</type>
      <name>checkMacroGrid</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9611b8501d3e9a98145b6dfd556a03b7</anchor>
      <arglist>(ALU3dGridElementType elType, const std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>elType2Name</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa316884eb37edef2b1ff168d0dd41e00</anchor>
      <arglist>(ALU3dGridElementType elType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>grid.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/</path>
    <filename>a00056.html</filename>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <includes id="a00014" name="alugrid.hh" local="no" imported="no">dune/alugrid/3d/alugrid.hh</includes>
    <includes id="a00068" name="gridfactory.hh" local="no" imported="no">dune/alugrid/3d/gridfactory.hh</includes>
    <includes id="a00173" name="dgf.hh" local="no" imported="no">dune/alugrid/dgf.hh</includes>
    <includes id="a00158" name="structuredgridfactory.hh" local="no" imported="no">dune/alugrid/common/structuredgridfactory.hh</includes>
    <includes id="a00155" name="persistentcontainer.hh" local="no" imported="no">dune/alugrid/common/persistentcontainer.hh</includes>
    <includes id="a00107" name="backuprestore.hh" local="no" imported="no">dune/alugrid/common/backuprestore.hh</includes>
  </compound>
  <compound kind="file">
    <name>grid_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00059.html</filename>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <includes id="a00011" name="alu3diterators_imp.cc" local="yes" imported="no">alu3diterators_imp.cc</includes>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">aluinline.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_GRID_IMP_CC</name>
      <anchorfile>a00059.html</anchorfile>
      <anchor>ab2db6ae01c97a823c61b50040fffdcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>elType2Name</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa316884eb37edef2b1ff168d0dd41e00</anchor>
      <arglist>(ALU3dGridElementType elType)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>grid_inline.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00062.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00029" name="entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a00083" name="iterator.hh" local="yes" imported="no">iterator.hh</includes>
    <includes id="a00026" name="datahandle.hh" local="yes" imported="no">datahandle.hh</includes>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>alu_inline_tmp</name>
      <anchorfile>a00062.html</anchorfile>
      <anchor>a43c95cd942d92eba5feab911e7cd69b6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gridfactory.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00065.html</filename>
    <includes id="a00068" name="gridfactory.hh" local="no" imported="no">dune/alugrid/3d/gridfactory.hh</includes>
    <includes id="a00110" name="bisectioncompatibility.hh" local="no" imported="no">dune/alugrid/common/bisectioncompatibility.hh</includes>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">dune/alugrid/3d/aluinline.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALU3DGRID_FACTORY_CC</name>
      <anchorfile>a00065.html</anchorfile>
      <anchor>a5e8377abe3e55a34e1037302ecb2c4aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00068.html</filename>
    <includes id="a00161" name="transformation.hh" local="no" imported="no">dune/alugrid/common/transformation.hh</includes>
    <includes id="a00014" name="alugrid.hh" local="no" imported="no">dune/alugrid/3d/alugrid.hh</includes>
    <includes id="a00134" name="hsfc.hh" local="no" imported="no">dune/alugrid/common/hsfc.hh</includes>
    <class kind="class">Dune::ALU3dGridFactory</class>
    <class kind="struct">Dune::ALU3dGridFactory::Codim</class>
    <class kind="struct">Dune::ALU3dGridFactory::FaceLess</class>
    <class kind="class">Dune::GridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="class">Dune::ReferenceGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00071.html</filename>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits</class>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits::Codim</class>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::ALU3dLevelGridView</class>
    <class kind="struct">Dune::ALU3dLevelGridView::Codim</class>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits</class>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits::Codim</class>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::ALU3dLeafGridView</class>
    <class kind="struct">Dune::ALU3dLeafGridView::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hsfc.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00134.html</filename>
    <class kind="class">ALUGridSFC::ZoltanSpaceFillingCurveOrdering</class>
    <class kind="class">Dune::SpaceFillingCurveOrdering</class>
    <namespace>ALUGridSFC</namespace>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>printSpaceFillingCurve</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae8cafb030e5acfde9ce4fd08a6e040d2</anchor>
      <arglist>(const GridView &amp;view, std::string name=&quot;sfc&quot;, const bool vtk=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indexsets.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00074.html</filename>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">aluinline.hh</includes>
    <includes id="a00077" name="indexsets.hh" local="yes" imported="no">indexsets.hh</includes>
    <includes id="a00011" name="alu3diterators_imp.cc" local="yes" imported="no">alu3diterators_imp.cc</includes>
    <includes id="a03379" name="3d/grid.hh" local="no" imported="no">dune/alugrid/3d/grid.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALU3DGRIDINDEXSETS_CC</name>
      <anchorfile>a00074.html</anchorfile>
      <anchor>a62daf604c28393d6845acb7f6902adeb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00077.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00008" name="alu3diterators.hh" local="yes" imported="no">alu3diterators.hh</includes>
    <includes id="a00074" name="indexsets.cc" local="yes" imported="no">indexsets.cc</includes>
    <class kind="class">Dune::ALU3dGridHierarchicIndexSet</class>
    <class kind="class">Dune::ALUMacroKey</class>
    <class kind="class">Dune::ALUGridId</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_DEFINE_HASH</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a0efec7c78db2e28f1abd9ce5f828ceb0</anchor>
      <arglist>(DUNE_HASH_TEMPLATE_ARGS(), DUNE_HASH_TYPE(Dune::ALUMacroKey)) DUNE_DEFINE_HASH(DUNE_HASH_TEMPLATE_ARGS(typename MacroKeyImp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_HASH_TYPE</name>
      <anchorfile>a00077.html</anchorfile>
      <anchor>a84f8ea29d1a279e49e242bb12c874c9b</anchor>
      <arglist>(Dune::ALUGridId&lt; MacroKeyImp &gt;)) namespace Dune</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interfaces.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00137.html</filename>
    <class kind="struct">Dune::HasObjectStream</class>
    <class kind="struct">Dune::GridObjectStreamOrDefaultHelper</class>
    <class kind="struct">Dune::GridObjectStreamOrDefaultHelper&lt; false, GridImp, DefaultImp &gt;</class>
    <class kind="struct">Dune::GridObjectStreamOrDefault</class>
    <class kind="struct">Dune::IsDofManager</class>
    <class kind="struct">Dune::HasHierarchicIndexSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>intersectioniteratorwrapper.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00140.html</filename>
    <includes id="a00146" name="macrogridview.hh" local="no" imported="no">dune/alugrid/common/macrogridview.hh</includes>
    <includes id="a00149" name="memory.hh" local="no" imported="no">dune/alugrid/common/memory.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="no" imported="no">dune/alugrid/3d/alu3dinclude.hh</includes>
    <class kind="class">Dune::IntersectionIteratorWrapper</class>
    <class kind="class">Dune::LeafIntersectionWrapper</class>
    <class kind="class">Dune::LeafIntersectionIteratorWrapper</class>
    <class kind="class">Dune::LevelIntersectionWrapper</class>
    <class kind="class">Dune::LevelIntersectionIteratorWrapper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>iterator.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00080.html</filename>
    <includes id="a00017" name="aluinline.hh" local="yes" imported="no">aluinline.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00050" name="geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a00029" name="entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <includes id="a00044" name="faceutility.hh" local="yes" imported="no">faceutility.hh</includes>
    <includes id="a00083" name="iterator.hh" local="yes" imported="no">iterator.hh</includes>
    <includes id="a00011" name="alu3diterators_imp.cc" local="yes" imported="no">alu3diterators_imp.cc</includes>
    <includes id="a00086" name="iterator_imp.cc" local="yes" imported="no">iterator_imp.cc</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_ITERATOR_CC</name>
      <anchorfile>a00080.html</anchorfile>
      <anchor>a3a76cf51015dd50ba0f13ebeed22d37c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00083.html</filename>
    <includes id="a00140" name="intersectioniteratorwrapper.hh" local="no" imported="no">dune/alugrid/common/intersectioniteratorwrapper.hh</includes>
    <includes id="a00149" name="memory.hh" local="no" imported="no">dune/alugrid/common/memory.hh</includes>
    <includes id="a00164" name="twists.hh" local="no" imported="no">dune/alugrid/common/twists.hh</includes>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <includes id="a00044" name="faceutility.hh" local="yes" imported="no">faceutility.hh</includes>
    <includes id="a00008" name="alu3diterators.hh" local="yes" imported="no">alu3diterators.hh</includes>
    <includes id="a00080" name="iterator.cc" local="yes" imported="no">iterator.cc</includes>
    <class kind="class">Dune::ALU3dGridIntersectionIterator</class>
    <class kind="class">Dune::ALU3dGridLevelIntersectionIterator</class>
    <class kind="class">Dune::ALU3dGridTreeIterator</class>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel</class>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, 0 &gt;</class>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, dim &gt;</class>
    <class kind="class">Dune::ALU3dGridLevelIterator</class>
    <class kind="class">Dune::ALU3dGridLeafIterator</class>
    <class kind="class">Dune::ALU3dGridHierarchicIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>iterator_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00086.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00050" name="geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a00029" name="entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a03379" name="3d/grid.hh" local="yes" imported="no">grid.hh</includes>
    <includes id="a00044" name="faceutility.hh" local="yes" imported="no">faceutility.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_ITERATOR_IMP_CC</name>
      <anchorfile>a00086.html</anchorfile>
      <anchor>a3730ac0e5d0d2124e98d80f0c51ff32e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ldbhandleif.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00143.html</filename>
    <class kind="struct">LoadBalanceHandleWithReserveAndCompress</class>
  </compound>
  <compound kind="file">
    <name>macrogridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00146.html</filename>
    <class kind="struct">Dune::MacroGridViewTraits</class>
    <class kind="struct">Dune::MacroGridViewTraits::Codim</class>
    <class kind="struct">Dune::MacroGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::MacroGridView</class>
    <class kind="struct">Dune::MacroGridView::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/doc/doxygen/</path>
    <filename>a00002.html</filename>
  </compound>
  <compound kind="file">
    <name>mappings.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00089.html</filename>
    <includes id="a00092" name="mappings.hh" local="yes" imported="no">mappings.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mappings.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00092.html</filename>
    <includes id="a00005" name="alu3dinclude.hh" local="yes" imported="no">alu3dinclude.hh</includes>
    <includes id="a00095" name="mappings_imp.cc" local="yes" imported="no">mappings_imp.cc</includes>
    <class kind="class">Dune::TrilinearMapping</class>
    <class kind="class">Dune::SurfaceNormalCalculator</class>
    <class kind="class">Dune::BilinearSurfaceMapping</class>
    <class kind="class">Dune::BilinearMapping</class>
    <class kind="class">Dune::LinearMapping</class>
    <class kind="class">Dune::NonConformingFaceMapping&lt; dim, dimworld, tetra, Comm &gt;</class>
    <class kind="class">Dune::NonConformingFaceMapping&lt; dim, dimworld, hexa, Comm &gt;</class>
    <namespace>Dune</namespace>
    <member kind="variable" static="yes">
      <type>static const alu3d_ctype</type>
      <name>ALUnumericEpsilon</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa9b9dc623f34f04f0447bda1b830d5ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mappings_imp.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00095.html</filename>
    <includes id="a00092" name="mappings.hh" local="yes" imported="no">mappings.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALUGRID_MAPPINGS_IMP_CC</name>
      <anchorfile>a00095.html</anchorfile>
      <anchor>a0dfa9eded6c48ad9d5ab9059a1da7e46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>memory.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00149.html</filename>
    <includes id="a00104" name="alugrid_assert.hh" local="no" imported="no">dune/alugrid/common/alugrid_assert.hh</includes>
    <class kind="class">ALUGrid::ALUMemoryProvider</class>
    <class kind="class">ALUGrid::ReferenceCountedObject</class>
    <class kind="class">ALUGrid::SharedPointer</class>
    <namespace>ALUGrid</namespace>
  </compound>
  <compound kind="file">
    <name>meshquality.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00152.html</filename>
    <namespace>Dune</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>meshQuality</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a13646e1228b7abaf60c7690fdbc975bf</anchor>
      <arglist>(const GridView &amp;gridView, const double time, std::ostream &amp;out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>persistentcontainer.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00155.html</filename>
    <includes id="a00056" name="grid.hh" local="no" imported="no">dune/alugrid/grid.hh</includes>
    <class kind="class">Dune::ALUGridPersistentContainer</class>
    <class kind="class">Dune::PersistentContainer&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, T &gt;</class>
    <class kind="class">Dune::PersistentContainer&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, T &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>structuredgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00158.html</filename>
    <includes id="a00104" name="alugrid_assert.hh" local="no" imported="no">dune/alugrid/common/alugrid_assert.hh</includes>
    <includes id="a00119" name="declaration.hh" local="no" imported="no">dune/alugrid/common/declaration.hh</includes>
    <includes id="a00134" name="hsfc.hh" local="no" imported="no">dune/alugrid/common/hsfc.hh</includes>
    <class kind="class">Dune::StructuredGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>topology.cc</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00098.html</filename>
    <includes id="a00101" name="topology.hh" local="yes" imported="no">topology.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>topology.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/3d/</path>
    <filename>a00101.html</filename>
    <includes id="a00104" name="alugrid_assert.hh" local="no" imported="no">dune/alugrid/common/alugrid_assert.hh</includes>
    <class kind="struct">Dune::EntityCount</class>
    <class kind="struct">Dune::EntityCount&lt; tetra &gt;</class>
    <class kind="struct">Dune::EntityCount&lt; hexa &gt;</class>
    <class kind="class">Dune::ElementTopologyMapping</class>
    <class kind="class">Dune::FaceTopologyMapping</class>
    <namespace>Dune</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ALU3dGridElementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tetra</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada969d6dbcabfde81d0a5eb0eeb7e93199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexa</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada93593f0bad466fc5c94078b72c62db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mixed</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abadac0befe3f15f7161e5dafd307f9360f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>error</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada282c05570191d3aeab891562ca24d1fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformation.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00161.html</filename>
    <class kind="struct">Dune::ALUGridTransformation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>twists.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00164.html</filename>
    <includes id="a00116" name="capabilities.hh" local="no" imported="no">dune/alugrid/common/capabilities.hh</includes>
    <class kind="struct">Dune::ALUTwistIterator</class>
    <class kind="class">Dune::ALUTwist&lt; corners, 2 &gt;</class>
    <class kind="class">Dune::ALUTwist&lt; 2, 1 &gt;</class>
    <class kind="class">Dune::ALUTwists&lt; corners, 2 &gt;</class>
    <class kind="class">Dune::ALUTwists&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::TrivialTwist</class>
    <class kind="struct">Dune::TrivialTwists</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>typetraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00167.html</filename>
    <class kind="struct">Dune::IsDataHandle</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::true_type</type>
      <name>__IsDataHandle</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a105127e1e364bb03d3465981333a03c1</anchor>
      <arglist>(const CommDataHandleIF&lt; Impl, Data &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>__IsDataHandle</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a848b66fe2518d399fcf3099de2924a87</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>writeparalleldgf.hh</name>
    <path>C:/ID/cmake-build-release/dune-alugrid-prefix/src/dune-alugrid/dune/alugrid/common/</path>
    <filename>a00170.html</filename>
    <class kind="class">DGFWriter</class>
  </compound>
  <compound kind="class">
    <name>ALUGrid::AdaptRestrictProlongGlSet</name>
    <filename>a01435.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ALUGrid::AdaptRestrictProlongImpl</base>
    <member kind="function">
      <type></type>
      <name>AdaptRestrictProlongGlSet</name>
      <anchorfile>a01435.html</anchorfile>
      <anchor>a062bd570dda07d3dfbb13f40b37a8daa</anchor>
      <arglist>(GridType &amp;grid, AdaptDataHandle &amp;rp, GlobalIdSetImp &amp;set)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdaptRestrictProlongGlSet</name>
      <anchorfile>a01435.html</anchorfile>
      <anchor>a52a54b9b881f81c99251f5c5802fe42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>postRefinement</name>
      <anchorfile>a01435.html</anchorfile>
      <anchor>a6b65bd85c06eead51866a8fad0a6c975</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preCoarsening</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>abd9586a2a9a6f70826b7c4065f2268d5</anchor>
      <arglist>(HElementType &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preCoarsening</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>a35b94b79e278f8b0c712b580bd494329</anchor>
      <arglist>(HBndSegType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>postRefinement</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>aed4b5cb359199455c6eb676334c060eb</anchor>
      <arglist>(HBndSegType &amp;ghost)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::AdaptRestrictProlongImpl</name>
    <filename>a01431.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AdaptRestrictProlongImpl</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>a060ca49782e31a1c956d6b355c8833d6</anchor>
      <arglist>(GridType &amp;grid, AdaptDataHandle &amp;rp)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AdaptRestrictProlongImpl</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>acfc4346d851c92255d1d8ec8f38e6d63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preCoarsening</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>abd9586a2a9a6f70826b7c4065f2268d5</anchor>
      <arglist>(HElementType &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>postRefinement</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>a5c17483607271df6a21a82fe5c74f005</anchor>
      <arglist>(HElementType &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>preCoarsening</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>a35b94b79e278f8b0c712b580bd494329</anchor>
      <arglist>(HBndSegType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>postRefinement</name>
      <anchorfile>a01431.html</anchorfile>
      <anchor>aed4b5cb359199455c6eb676334c060eb</anchor>
      <arglist>(HBndSegType &amp;ghost)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::ALU2dGridParameterBlock</name>
    <filename>a02243.html</filename>
    <member kind="function">
      <type></type>
      <name>ALU2dGridParameterBlock</name>
      <anchorfile>a02243.html</anchorfile>
      <anchor>acef43282fe410cd80ea087d370f42a5d</anchor>
      <arglist>(std::istream &amp;in, const bool verbose)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>tolerance</name>
      <anchorfile>a02243.html</anchorfile>
      <anchor>ac93d1c4d0638a687733a20d10d0e4deb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>tolerance_</name>
      <anchorfile>a02243.html</anchorfile>
      <anchor>aceccc91c1acf09e49e948c8973957870</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dBasicImplTraits</name>
    <filename>a01003.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dBasicImplTraits&lt; ALUGridMPIComm &gt;</name>
    <filename>a01011.html</filename>
    <member kind="typedef">
      <type>ALU3DSPACE GitterDunePll</type>
      <name>GitterType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a1ed7968b81da88a1d114927a9f4485c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE GitterDunePll</type>
      <name>GitterImplType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a488485c2a0b0b968512eb4f659ab9a11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::helement_STI</type>
      <name>HElementType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a795ae2c48b4985147f5e592a9e9224bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hface_STI</type>
      <name>HFaceType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>aea2245301ad396dcc8c74684f49b31c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hedge_STI</type>
      <name>HEdgeType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>ad84b9c0a89d29e17f7efe56249468e03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::vertex_STI</type>
      <name>VertexType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a358874022cd2f3bcce3fc6c41e538cfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hbndseg_STI</type>
      <name>HBndSegType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a0a2097e4973b782ee08f73409d232562</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::ghostpair_STI</type>
      <name>GhostPairType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>ab94d42001bd4f1cc8c0ff1e2fb4b653a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE ElementPllXIF_t</type>
      <name>PllElementType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>aa36cadc1e76a60bf505b31b71b34b0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hedge1_GEO</type>
      <name>GEOEdgeType</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>ad789809addbc68c7a5ddbe72addc90dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isGhost</name>
      <anchorfile>a01011.html</anchorfile>
      <anchor>a01cefec6017202ff4d4128667f4e7d98</anchor>
      <arglist>(const BndFaceType *ghost)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dBasicImplTraits&lt; ALUGridNoComm &gt;</name>
    <filename>a01007.html</filename>
    <member kind="typedef">
      <type>ALU3DSPACE Gitter</type>
      <name>GitterType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>ae82797c0b1df43d72b17096154c9dc6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE GitterDuneImpl</type>
      <name>GitterImplType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a1d43f328b0207185c3d87bf180a354cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::helement_STI</type>
      <name>HElementType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a0408bdec782f5d31ddd3b2478f9e2b93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hface_STI</type>
      <name>HFaceType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a166079d35509b90dd55cee296b63c48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hedge_STI</type>
      <name>HEdgeType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>ac15ce2fc06c9a6af813fe09f7f98e718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::vertex_STI</type>
      <name>VertexType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>abe6decadb357189511098203e9e1955b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hbndseg_STI</type>
      <name>HBndSegType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>aad40f4f9bb81a06215a90d4329fd2182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::ghostpair_STI</type>
      <name>GhostPairType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>abd7e45249a89df4b83ef9928e9b94952</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HElementType</type>
      <name>PllElementType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>aa85c76beed408b8e5984d7a5c799ee8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hedge1_GEO</type>
      <name>GEOEdgeType</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>aff6434dd06274b6cbcadf0a33c8f56e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isGhost</name>
      <anchorfile>a01007.html</anchorfile>
      <anchor>a4db9b293b5bc1d55a4ce3f3c6841e36b</anchor>
      <arglist>(const BndFaceType *ghost)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits</name>
    <filename>a01015.html</filename>
    <templarg>elType</templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; elType, Comm, 2, 2 &gt;</name>
    <filename>a01039.html</filename>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a624f8b8b580af15740ab527537869f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::vertex_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a08f7b8814483b1767e1e95af545ede88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceType</type>
      <name>EntitySeedType</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a90ea8081da32a4bf61969c8ee32cedcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::VertexGeo</type>
      <name>ImplementationType</name>
      <anchorfile>a01039.html</anchorfile>
      <anchor>a14b1d91f925b801d5a9a3fe0e81dcdb1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 2 &gt;</name>
    <filename>a01035.html</filename>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a15ad2b37c4431dcb6b1755ea275ace6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hedge_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a4964bc8673e5557fa18bbc13bc616973</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceType</type>
      <name>EntitySeedType</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a076e914dd9002692e6885fafbb1fb3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hedge1_GEO</type>
      <name>ImplementationType</name>
      <anchorfile>a01035.html</anchorfile>
      <anchor>a842a4570236dd490cba1c4d13539f8a7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 3 &gt;</name>
    <filename>a01043.html</filename>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a7dffca5e3df6b5b49d229ce491210af9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::vertex_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>af01ba5fed05fcefaf8c23dec8e4bd400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceType</type>
      <name>EntitySeedType</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a16ebf7bba9f3efe8a4e65ffa2d4e415a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::VertexGeo</type>
      <name>ImplementationType</name>
      <anchorfile>a01043.html</anchorfile>
      <anchor>a53492fc86d27189e7c9d42ebc5c85e2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 0 &gt;</name>
    <filename>a01023.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>a2e6365df8e1efd4312ffd72dfb0007d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>abfe4624bca02b9c39870832cf8e331b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::helement_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>a064c1acf2809efcef20a749d503d5cdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hasFace4</type>
      <name>EntitySeedType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>a9582bf4626b24a77739f69241e47ebc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::hexa_IMPL</type>
      <name>ImplementationType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>a5461b1034088b0346e75147f950d2dec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hbndseg_STI</type>
      <name>GhostInterfaceType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>a46f80488136f6910aa8d4499ede8c3ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::Hbnd4Default</type>
      <name>GhostImplementationType</name>
      <anchorfile>a01023.html</anchorfile>
      <anchor>ae1c329bb418d7cb1457bdc3b20182b7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 1 &gt;</name>
    <filename>a01031.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a9edc1cf7830bcb80cff752b50b5418ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hface_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a9a712a28fb5ab6f76963927ab51c112f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceType</type>
      <name>EntitySeedType</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>aad3288693dc757914c4b7700d050c733</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hface4_GEO</type>
      <name>ImplementationType</name>
      <anchorfile>a01031.html</anchorfile>
      <anchor>a75ac15fbadff830903252fb9bbd970e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dCodimImplTraits&lt; hexa, Comm, dim, codim &gt;</name>
    <filename>a01015.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 0 &gt;</name>
    <filename>a01019.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a69eab095fe274bb2dbabd5c43bb0b548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>aa0460dc4b9008326a4fe804b04c246a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::helement_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a61cf9cbfc3003ad118ac4edf30f8f37a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hasFace3</type>
      <name>EntitySeedType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a86a07f520c01917dfb4e587fe40bc065</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::tetra_IMPL</type>
      <name>ImplementationType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a59785c716e1dc6bf5368d2d1b283a5d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hbndseg_STI</type>
      <name>GhostInterfaceType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>aa16185091208ed9c3606dcf8f650bc11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::Hbnd3Default</type>
      <name>GhostImplementationType</name>
      <anchorfile>a01019.html</anchorfile>
      <anchor>a93be12d18052d41051207bebc1de8985</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 1 &gt;</name>
    <filename>a01027.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>acc9badeff48a722dfd812c1d4ec42c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::hface_STI</type>
      <name>InterfaceType</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a95ff4bd0ca13c9091239af4fbd4d6838</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterfaceType</type>
      <name>EntitySeedType</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>abbad9e2f1b9c9921d30b11d7ab69cb44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hface3_GEO</type>
      <name>ImplementationType</name>
      <anchorfile>a01027.html</anchorfile>
      <anchor>a87cef6d974b7440ff500622f44775bdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dCodimImplTraits&lt; tetra, Comm, dim, codim &gt;</name>
    <filename>a01015.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGrid</name>
    <filename>a01311.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <base>Dune::HasObjectStream</base>
    <base>Dune::HasHierarchicIndexSet</base>
    <class kind="struct">Dune::ALU3dGrid::Codim</class>
    <class kind="struct">Dune::ALU3dGrid::Partition</class>
    <member kind="enumvalue">
      <name>refineStepsForHalf</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac9c916e6b6e9b30bb575ff85ac3706a7a7ba11085980eb2fb23082a6f12782818</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridIntersectionIterator&lt; const ThisType &gt;</type>
      <name>IntersectionIteratorImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a19975f354b25a59f2df184fc38bcf877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridIntersectionIterator&lt; const ThisType &gt;</type>
      <name>LeafIntersectionIteratorImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a63552333722b847a17d32ce5241a0d5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridLevelIntersectionIterator&lt; const ThisType &gt;</type>
      <name>LevelIntersectionIteratorImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2baf5e33245238aa5de4e810dcdcdc17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE GatherScatterType::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4f616d63bc56edb13ab40ad37a38b4d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectStreamType</type>
      <name>InStreamType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8d11dddc5ae8e7bbd305d589afe66cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ObjectStreamType</type>
      <name>OutStreamType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa995428d503e051591ba7f1aa217f46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFamily&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aab0fec20a52ab860d9618d9965dcb832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a3deef3a836d845a8852f3086ede6e2ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a9b2300fff0032fb6d64980660b5b3570</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac8e27247e1d9cfcf2450e03759d6a52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::MacroGridView</type>
      <name>MacroGridView</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a7e30a1137ecab4506a6fac825e8f4012</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridHierarchicIndexSet&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>HierarchicIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>afdaf74b14546f67cecddfcfdc8cebdce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::LevelIndexSetImp</type>
      <name>LevelIndexSetImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a768479c21c1f1a284b1c0a040a5151dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::LeafIndexSetImp</type>
      <name>LeafIndexSetImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>abf3cd0c79b26789093365d0eefe6d46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, dim &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>afe1b552fa2095c8d45b0b4aaddfe30e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, dim-1 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8fb47f2b85d03bbdbe5f979205633aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4ce137e9a7c9143740bb2f1576b704a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>acec22e150cba56425949854a60b61517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::DuneBoundaryProjectionType</type>
      <name>DuneBoundaryProjectionType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a41a9dde044d03e41fa811af339def504</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE ProjectVertex</type>
      <name>ALUGridVertexProjectionType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a640b55c82237cb4c86cf9d3f82931542</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE ProjectVertexPtr</type>
      <name>ALUGridVertexProjectionPointerType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a7ff637769ac6a403d27b673074fdf40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE ProjectVertexPtrPair</type>
      <name>ALUGridVertexProjectionPairType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a912d485deb2a320b8a30f1486a9f31d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a159b924df0a6c0b2876b3fcee34e2a7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALULeafCommunication&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>LeafCommunication</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a39bc90b29e5c8c4eb2c43c535214da85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALULevelCommunication&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>LevelCommunication</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4c1bac67de2fa74cd1e1789307ac644d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af00db8819ba971c91cf09bffc07062c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a49f8abed04bfb8f056a58c233241238f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Comm</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac286ee14029d95884e18358d2f83a8ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridCommunications&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>Communications</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a44c04784a5b8ce27f5799d36df8c87f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafIntersectionIteratorWrapper&lt; const ThisType &gt;</type>
      <name>LefInterItWrapperType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6a421faf3f64f8a1e77a8d06f391c02f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIntersectionIteratorWrapper&lt; const ThisType &gt;</type>
      <name>LvlInterItWrapperType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af92ade041bdb5e82839fddaf52eb1864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refineStepsForHalf</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac9c916e6b6e9b30bb575ff85ac3706a7a7ba11085980eb2fb23082a6f12782818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a12f9a312ef56912e9be3e61f842e3a30</anchor>
      <arglist>(const std::string &amp;macroTriangFilename, const MPICommunicatorType mpiComm, const ALUGridVertexProjectionPairType &amp;bndPrj, const ALUGridRefinementType refinementType)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALU3dGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a5afe7babb02383d35fb4226866f282f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a399c53ce1932744042ff9c9b2fe31cf1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa179170f9418a69afaea58e4bc27c425</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad663b0b437dc0b53ff7de29b1f904351</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2857d7a7483b5fe10063be546259eb16</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a84f0c79fa53f9c7229d547171cedc0af</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafIntersectionIterator</type>
      <name>ileafbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a740af35d88551467d70f5eb609a7ce0e</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafIntersectionIterator</type>
      <name>ileafend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a35477f5a8042401c627753c4a8aa5d7b</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelIntersectionIterator</type>
      <name>ilevelbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad5949b671fa4f28b84d9fc16596f2b2b</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelIntersectionIterator</type>
      <name>ilevelend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ae9e1411ded88ec9a951f4d08995de6fe</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad3a98298302c80a779dbb2bc1e9017cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a3c4fbeae1de525ce54c80d468c4f3aba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a24a6e0652968511395277891f1451749</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a80901373891372164b529ea923f37662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ae80d64ec87ef609420247f82b00f7a8a</anchor>
      <arglist>(int level, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aadef61b1f882ab4d75d3c974f84f6a3d</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa1ed5a5aabffd0e95625ce88625e01ac</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aea4656b800ec3cade9f1964124212a48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a36605ad164e067336433922b675d151f</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>global_size</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>adf96f6c47ee6e6add6645ce714ba5bed</anchor>
      <arglist>(int cd) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>hierSetSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a46fcbe2e578ada5e8a254f6b4d0fdb6f</anchor>
      <arglist>(int cd) const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a559e72cb4888d609fd69802e13e29804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Partition&lt; pitype &gt;::MacroGridView</type>
      <name>macroGridView</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2684b6938ad3f3508ca8e120d528d881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MacroGridView</type>
      <name>macroGridView</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad499b47e470ffc9164e8c5b308ed423a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>acadfa7747f9110776effbc620ec3e672</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits ::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a13558c3340497ef03637c07f57317e66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits ::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a41efd4b32de32103d7df7f67b3db8247</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; LevelIndexSetImp &gt;</type>
      <name>accessLevelIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6bc940d58c4640b82b8b28d8ec914e34</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Twists</type>
      <name>twists</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8adbe9934f8a03684b765c1a2f3927e6</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1f69cd3b4ca136cbec788f7bfff91cc6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>adb0dee1bc5f45d6a7412a236b40e8bbb</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImpl, Data &gt; &amp;dataHandleIF)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a53fde8cac59d44a57044b529a55611ed</anchor>
      <arglist>(LBWeights &amp;weights, CommDataHandleIF&lt; DataHandleImpl, Data &gt; &amp;dataHandleIF)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; !IsDataHandle&lt; LBWeights &gt;::value, bool &gt;::type</type>
      <name>loadBalance</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac5d7117ba3567d3f449e8ae7c9c9fd00</anchor>
      <arglist>(LBWeights &amp;weights)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartition</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a64817f4eee6e55db6c30dd868b083099</anchor>
      <arglist>(LBDestinations &amp;destinations)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartition</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a0489b18989f086a5fb079438c2cce458</anchor>
      <arglist>(LBDestinations &amp;destinations, CommDataHandleIF&lt; DataHandleImpl, Data &gt; &amp;dataHandleIF)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ae1ed7e761fabc31a6c74f761616fa6aa</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1e89d00a9786d0cded35ad73f93e3ef5</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6b564e8ac82de96fa377f8f46e4b466c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>afe5cdf86d31e977dcb079838faaeb360</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>LevelCommunication</type>
      <name>communicate</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1d94191dc952ea2981ca17aa8b70c36a</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, int level) const</arglist>
    </member>
    <member kind="function">
      <type>LeafCommunication</type>
      <name>communicate</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8947d1830e8424dc9e1cbb5d08faf258</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac34a2c90d3a73fd1a5be8dcb372bd5d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aab6f07157d8f6491487af400f3cbd7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a9b8017f4e5461663e03c538a01942eda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a621e0849054d09eec8499f11269461df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ae9a30430bf59f1a150dcfb5aef13e84f</anchor>
      <arglist>(AdaptDataHandleInterface&lt; GridImp, DataHandle &gt; &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a5dfb6fb05521c211e01b89d935e7e166</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af2b6eea1286124a40439627e9b4b9b99</anchor>
      <arglist>(int refCount, AdaptDataHandleInterface&lt; GridImp, DataHandle &gt; &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeMacroGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aefe5b97da002d9d852cb67f04d5cd8e2</anchor>
      <arglist>(const std::string path, const std::string filename, const ALU3DSPACE MacroFileHeader::Format format=ALU3DSPACE MacroFileHeader::defaultFormat) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backup</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8b2d4f035bf1701082a7f67cce922b4b</anchor>
      <arglist>(std::ostream &amp;, const ALU3DSPACE MacroFileHeader::Format format) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a9f96f97b72a3b45b425ea29b1e0d81a1</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const HierarchicIndexSet &amp;</type>
      <name>hierarchicIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a10c18c1a42cf7368e35a537d4827a440</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateStatus</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2835399ed9d0c4ba1fe30c2b595fe2f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1b98c336895d28aca2439ba0628b6c28</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac4a8980cba05a99279ef5e83b1ee502a</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>afa4f94b96f2c3bc37e6b736d9045c152</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GitterImplType &amp;</type>
      <name>myGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a49dedbff5730d0b32654e9569cef35d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GitterImplType *</type>
      <name>createALUGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac84f17c5c6a92c6d14773aae587511fa</anchor>
      <arglist>(const std::string &amp;macroName)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual GitterImplType *</type>
      <name>createALUGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac7b76e84a5dea11ba0a731f14e5dc880</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>ALUGridVertexProjectionPairType</type>
      <name>vertexProjections</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad67d75e3e5e8cc8e3444f1c97bef5619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual ALU3DSPACE Gitter::Geometric::BuilderIF &amp;</type>
      <name>getBuilder</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a332b5afa821d56519859cb4062b2a6c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>completeGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac21fbaaee88adc1f62847b7c47ac74cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Traits ::template Codim&lt; EntitySeed ::codimension &gt;::EntityPointer</type>
      <name>entityPointer</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2d95aebe2190b6fb06e6cd5cc6dad770</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>Traits ::template Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6ca2c58cb9a59eaaa9ae517665ecbc11</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nlinks</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a7021817d21dd4da742fdc11d94d9cfc0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeafVertexListType &amp;</type>
      <name>getLeafVertexList</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac35035e19487d41f4fb7cddfcab2eb79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevelOfLeafVertex</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a0772ab9bce1f2db90dede7a556dc1d2e</anchor>
      <arglist>(const typename ALU3dImplTraits&lt; elType, Comm &gt;::VertexType &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>VertexListType &amp;</type>
      <name>getVertexList</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ab01e33cacf84d3d22e065592eb1b93e9</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridItemListType &amp;</type>
      <name>getGhostLeafList</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a78c2f538a521fb990f260da6a999b9fd</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridItemListType &amp;</type>
      <name>getGhostLevelList</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a725f18e1974084a32066e6c0eb2b6aff</anchor>
      <arglist>(int codim, int level) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridItemListType &amp;</type>
      <name>getEdgeList</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa2527b1be3d5cc28248ba798edbc2f62</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conformingRefinement</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa4c58631ea863949ed04ea1a44e46196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ghostCellsEnabled</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a64aded8e3c98df35592b5904d18e57d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BoundarySegmentIndexSetType &amp;</type>
      <name>macroBoundarySegmentIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>adc64320ed091630de4341258c4d39865</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a66b35cf56c3da34ebd835f8357c715bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setLoadBalanceMethod</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a29963e7d19853e94d772846c08fe26de</anchor>
      <arglist>(const int mthd, const double ldbUnder=0.0, const double ldbOver=1.2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPICommunicatorType</type>
      <name>defaultCommunicator</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4bc43221cabb09979ce3b4610103b662</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>referenceElement</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a488be1d54803c67be9c9d32997423411</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ReferenceFaceType &amp;</type>
      <name>faceReferenceElement</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a333cf198d7f178236e9b6572ff3800b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALU3dGridElementType</type>
      <name>elementType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a84e61114e3512f06b1d3390b90219b75</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a68f4493ba538265fa7d8b64188d7093d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1b641efd695a606d0f89976b7775e929</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>newElementsChunk_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad7e610245e2b681eeb1ee2270b11836ca0ec243bb0ad1598c42266cf82aa4658f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>refineEstimate_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a987b80712f81fbb199a6770c413d4d68adb6919a4d51848f52f6b3f2e13f48551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberOfGeomTypes</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa168fe64e4eb09078cdb41e176610fdfab74ccf6bfc5763a7efa82224f2905ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>MakeableInterfaceObject&lt; typename Traits::template Codim&lt; 0 &gt;::Geometry &gt;</type>
      <name>GeometryObject</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a0eea8ed423b7e5ffb35875e29d89625e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridFamily::LocalIdSetImp</type>
      <name>LocalIdSetImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a78c1cb1443503b3073dab4bacc713190</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridFamily::GlobalIdSetImp</type>
      <name>GlobalIdSetImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ada7011c4d85dfb71ace667f3ce66fe2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIterator&lt; 0, All_Partition, const ThisType &gt;</type>
      <name>LeafIteratorImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a668e470a42f325812cdadcd532fdbf29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Traits::template Codim&lt; 0 &gt;::LeafIterator</type>
      <name>LeafIteratorType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ae04c71b6612872fd314c12bbb032680c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Traits::template Codim&lt; 0 &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a37b9faed5c9cf7b463e73c394c17eb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridHierarchicIterator&lt; const ThisType &gt;</type>
      <name>HierarchicIteratorImp</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6d16f47adc195aeb0b85100dff3faf73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; elType, Comm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>acb415f53926200bae0447bebbb24b262</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridVertexList&lt; Comm &gt;</type>
      <name>VertexListType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>abbd5a04c61b5f9596929c2e5df0348ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafVertexList&lt; Comm &gt;</type>
      <name>LeafVertexListType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ab3b3878571c2bb3e4182666fab47f653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DefaultBoundarySegmentIndexSet&lt; ThisType &gt;</type>
      <name>BoundarySegmentIndexSetType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af90848056f49cbdfb0c678c429a85a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3DSPACE GatherScatter</type>
      <name>GatherScatterType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ac338c2a4204bbfcba0797a79b2a6167c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SizeCache&lt; MyType &gt;</type>
      <name>SizeCacheType</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ab8215a0404c590ba7e077dfb0fbd721e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>newElementsChunk_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad7e610245e2b681eeb1ee2270b11836ca0ec243bb0ad1598c42266cf82aa4658f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>refineEstimate_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a987b80712f81fbb199a6770c413d4d68adb6919a4d51848f52f6b3f2e13f48551</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>numberOfGeomTypes</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa168fe64e4eb09078cdb41e176610fdfab74ccf6bfc5763a7efa82224f2905ee6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::shared_ptr&lt; LevelIndexSetImp &gt;</type>
      <name>createLevelIndexSet</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a5abbe0a79aaad6d7fa24ee62bd6d4e99</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a3ef7979c7ea2344f00a9d5874a9e0771</anchor>
      <arglist>(GatherScatterType *lbData)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalizeGridCreation</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a80bff4feebf1f3a0d2f0978073699f5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clearIsNewMarkers</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8cb7c525114f6532646d943ad3d3b6a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ALU3dGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2c4055c47c68fde9065852c40807cd03</anchor>
      <arglist>(const ThisType &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a67631f4b7a9635956871c9fe49261b96</anchor>
      <arglist>(const ThisType &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calcExtras</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aaf85167609246a5fe732923467f0ba32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calcMaxLevel</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa2eb09f55bc4ef68f0bc19d5e4204b3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>recalcGlobalSize</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a810f53e91472c013b47a04bd5c5992b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkMacroGridFile</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a518594dc2fa7ca9adffe0942501ca324</anchor>
      <arglist>(const std::string filename)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkMacroGrid</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aef7237d0aa20a19081a7a3c3580e3929</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Communications &amp;</type>
      <name>communications</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4ba2c7d680d6c5b3801d3eff7fc99327</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makeGeometries</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a65b5782c49d9dfc22a23994ca1438d22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; GitterImplType &gt;</type>
      <name>mygrid_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ab0aba98f648548b3cd66fec8bc74b4ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>maxlevel_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a5d3e21c6fab977eeae31e02ba4695580</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>coarsenMarked_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a2073c9e4761ed5fa7445e7b3f8c1e4cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>refineMarked_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a759d8182b72e4d928d16c1f48ca631ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; GeometryType &gt; &gt;</type>
      <name>geomTypes_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa1ed494b2368fa6ca454c31fc37d469c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HierarchicIndexSet</type>
      <name>hIndexSet_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a33fc709c63290193c86f2ec1c9da9a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; GlobalIdSetImp &gt;</type>
      <name>globalIdSet_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a6bc0c899cc7c8bbab5a93d68b29279f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalIdSetImp</type>
      <name>localIdSet_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>afe01f8fe4785024a4a5bf86fe85dffa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::shared_ptr&lt; LevelIndexSetImp &gt; &gt;</type>
      <name>levelIndexVec_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a38813c608da2ddc2b224844d2be398ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; LeafIndexSetImp &gt;</type>
      <name>leafIndexSet_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>af7fcbd6653b8f5653c51395c90eedb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; VertexListType &gt;</type>
      <name>vertexList_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>acb1b08d556c0d3a0a0969fe621bfc1ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridItemListType</type>
      <name>ghostLeafList_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>abc6425db83924539b10a7c1bd2fc25e5</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ALU3dGridItemListType &gt;</type>
      <name>ghostLevelList_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ada09ca1154df4d5a50c0f29ab168c94d</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ALU3dGridItemListType &gt;</type>
      <name>levelEdgeList_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa562c4fac87afe6b74149c7782da5d7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LeafVertexListType</type>
      <name>leafVertexList_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad61d32cd701ae99bcad8ef0d1b4c083a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; SizeCacheType &gt;</type>
      <name>sizeCache_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a7bdbf36fbe12f4fafa8b5cd955c081fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BoundarySegmentIndexSetType</type>
      <name>macroBoundarySegmentIndexSet_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a609359cdb3c88aae7cb74cc0ff71f676</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>lockPostAdapt_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a671a5738bca3efe1e40d2365203bd82b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALUGridVertexProjectionPairType</type>
      <name>vertexProjections_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa6b62c917aab97806c5403134bb73b9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; Communications &gt;</type>
      <name>communications_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a232cfde941dace06ba78c416f4220a02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ALUGridRefinementType</type>
      <name>refinementType_</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a959bd8845e6dd56e83d1a8584832f56c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aba09e349a841dc950835bba0a750c23a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 1, dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>abf8f9e67c1ab56cda9022ae78a756e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 2, dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ab38ad910046e83b81e303cbca76d24cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; dim, dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a1f8696b8e7c1edd4efac38c4097e767a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridIntersectionIterator&lt; ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a0fc37088f381d8df1b1599b2a78c35ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointerBase&lt; 0, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa8fce25504b544b64f8744402519e2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointerBase&lt; 1, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a34192c633e7c7c722f997497c5d58ce7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointerBase&lt; 2, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa8daa75a101e83881d2c86d7fec2f899</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointerBase&lt; dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a5c382aee47e1563942935eb85221bb97</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointer&lt; 0, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a98eab63c19ec3146bbd39f4f687fc495</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointer&lt; 1, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ada0d4a634c39322547218aadced442db</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointer&lt; 2, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a747a9cc7cf79573c0db13d845f7b4aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntityPointer&lt; dim, const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>adba2c1bee57b81aadf23ae30d729fe13</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridIntersectionIterator&lt; const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a248df63cdae5fa199c79a74036926131</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIterator&lt; const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a3d41143dd0e399f7a168ac942c69ac1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIndexSet&lt; dim, dimworld, elType, Comm &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a8cb7da422182b206180d5f982ced9cc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridGlobalIdSet&lt; dim, dimworld, elType, Comm &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>ad1ff4dadf6c2f8efc4277a1c24c34a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLocalIdSet&lt; dim, dimworld, elType, Comm &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>aa1f2f42d552983b22607fd10af2bb3d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IntersectionIteratorWrapper&lt; const ThisType, LeafIntersectionIteratorImp &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a4d1cf5a8535d591f2d49d084441ed265</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>IntersectionIteratorWrapper&lt; const ThisType, LevelIntersectionIteratorImp &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a7e8cafee849edc462b0e16b9b257028f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LeafIntersectionIteratorWrapper&lt; const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a34008f72e04868b1a88fd4c89489bc12</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelIntersectionIteratorWrapper&lt; const ThisType &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a534ca192def3b6c0ba74cf519927cbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ALULocalGeometryStorage&lt; const ThisType, GeometryObject, 8 &gt;</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a382239f68704355875b29546cba95f02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridCommunications</name>
    <filename>a01667.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridCommunications&lt; dim, dimworld, elType, ALUGridNoComm &gt;</name>
    <filename>a01671.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>ALU3dGridLocalIdSet&lt; dim, dimworld, elType, ALUGridNoComm &gt;</type>
      <name>GlobalIdSet</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>aba52adffd8b69a086975973c7163b3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>GlobalId</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>aced5288d49bd89f771e3d833f1863d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE GitterDuneImpl</type>
      <name>GitterImplType</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ab8dda7854b5981f5964b3a93f29037b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; No_Comm &gt;</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a4ed7e742c631bb568be4faaa75a4d7d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridCommunications</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>ab394d6f88635b13046ad201eb9fc44e8</anchor>
      <arglist>(ALUGridNoComm comm)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nlinks</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a425ab56d7e59b9b88061222f3582887b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GitterImplType *</type>
      <name>createALUGrid</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a8ff5d78c91b2b7d1a0c39ed7bc5a42cc</anchor>
      <arglist>(const std::string &amp;macroName, const ALU3DSPACE ProjectVertexPtrPair &amp;projections, const bool conformingRefinement)</arglist>
    </member>
    <member kind="function">
      <type>GitterImplType *</type>
      <name>createALUGrid</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a37953be843319495d07ca7be9cad7a5e</anchor>
      <arglist>(std::istream &amp;stream, const ALU3DSPACE ProjectVertexPtrPair &amp;projection, const bool conformingRefinement)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a47bb372bc6d6810616b064805391a944</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ALUGridNoComm</type>
      <name>defaultComm</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>adc149ee51c5fff34f6130fc0c0546010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getRank</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a0d9b6dad72457d5051db5aca0337ede8</anchor>
      <arglist>(ALUGridNoComm comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ALU3DSPACE Gitter::Geometric::BuilderIF &amp;</type>
      <name>getBuilder</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a3bf90859031ddafb86918975433f9755</anchor>
      <arglist>(GitterImplType &amp;grid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>completeGrid</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>aa1177629b5d217f152db4cd04f92f24d</anchor>
      <arglist>(GitterImplType &amp;grid)</arglist>
    </member>
    <member kind="variable">
      <type>CollectiveCommunication</type>
      <name>ccobj_</name>
      <anchorfile>a01671.html</anchorfile>
      <anchor>a2f473c27feca283b7b53768616a3bc83</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntity</name>
    <filename>a01439.html</filename>
    <templarg>cd</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ad140db5b21ba17f0f6011b454a4e5d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HItemType</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a718869299d4d231129d6076cf417317c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::ImplementationType</type>
      <name>ItemType</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a75adfa1d5ac739ea7e2da58fd6ca29cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::VertexType</type>
      <name>VertexType</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>acfa1d2d40a99a021f5dc13f66e8a6f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>abc10ad479f347c0e99631cc0303792c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a73e3a06d0f7fef8a5327e2c141aaf833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a050c0c91429daf389f12ecb1a7f5b973</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a725e2acee80b7d47595a9f6633dc01bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a60eb9fde8d15c8113bc4ff292ef270e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>adf83355d50b5988a0491c506b4669712</anchor>
      <arglist>(const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a6e95596fb659e7a6102c6c89ad2aeafe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a0be100f2a513e11f0305211bd9dbe2d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9e51920cd9405fb3d34fccf8854a930c</anchor>
      <arglist>(const HItemType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>aff3f28736859935b7b9bbaead89ed822</anchor>
      <arglist>(const HItemType &amp;item, const GridImp &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ab102482f3320bcbaad075de7ea5bf7b5</anchor>
      <arglist>(const HItemType &amp;item, const int level, int twist=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>adbe5c7ff79b093dd3b8b339408017b43</anchor>
      <arglist>(const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGhost</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>adce7b925232b3eeeb7c8f708f1861847</anchor>
      <arglist>(const HBndSegType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElement</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a3fb3d8294aeaefb5b775709b0adf05a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>afe6213b8e5403c4c5a96679f47dfca79</anchor>
      <arglist>(const ALU3dGridEntity&lt; cd, dim, GridImp &gt; &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntity</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a78be9e56938f9d06ab36b5ef14b72eb4</anchor>
      <arglist>(const ALU3dGridEntity&lt; cd, dim, GridImp &gt; &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a83994c5e566515af7f7e213c42c176f6</anchor>
      <arglist>(int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const ItemType &amp;</type>
      <name>getItem</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a94a696918023ac0462c4116a05f7036a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a8c8c297ae7d03c9ab3927c95eb190912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a3ff8266d776848163c312ba54ffe752f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a49c0e0d72c800bca0fc14dfd10c3b620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>afc685c18ad0fc864cdffba80da10fbcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PartitionType</type>
      <name>convertBndId</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a615b79dc20e2e818909d1089ddfdeaef</anchor>
      <arglist>(const HItemType &amp;item) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryImpl</type>
      <name>geo_</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ac7852d93c4552921f373b71898849afd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntitySeed</type>
      <name>seed_</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a04e081eebcefaa43b382a7ca7636d569</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; GridImp::dimension, GridImp::dimensionworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a17aa36ca39ae4504f846b9850e70fa23</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLevelIterator&lt; cd, All_Partition, GridImp &gt;</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9325c16cacdaa5a4ec968fcf50b93911</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIndexSet&lt; GridImp::dimension, GridImp::dimensionworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a45108291339fb70c397d70986d883b64</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a4da29539e6a93405125c726680ff4a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
    <filename>a01475.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;::Codim</class>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a5735bea92a9c22744d233d5d55c48164</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ad981cad955fa14a78de78a275762e307</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridIntersectionIterator&lt; GridImp &gt;</type>
      <name>IntersectionIteratorImp</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a7f475d551af2c2c5fa6a031d04e98343</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafIntersectionIteratorWrapper&lt; GridImp &gt;</type>
      <name>ALU3dGridIntersectionIteratorType</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae93f74cdffc8372b1cc302e4e94807cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafIntersectionIteratorWrapper&lt; GridImp &gt;</type>
      <name>ALU3dGridLeafIntersectionIteratorType</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ab22ce12d895405f1aaebe3acc063b7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIntersectionIteratorWrapper&lt; GridImp &gt;</type>
      <name>ALU3dGridLevelIntersectionIteratorType</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aecd1b8ea12b89f845ff68e258ce47f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a0d207509b60cb9b5ba09508619164923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a5c313b713b6e0789026e2226d737ec82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a2bdd941e43c55a0264c785cacab75056</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a4d6f2cde21219f2901fcd529e143950c</anchor>
      <arglist>(const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae051287c21dad38402b6cc98d3252ffb</anchor>
      <arglist>(const HElementType &amp;element)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ab7036ff053f1459e93a16d8ce576068f</anchor>
      <arglist>(const HBndSegType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ab66203f61211ac24a63c14cc97717772</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a3dd95a933e5b3c2e3fdff14fa00bcfcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ad81f514033c3d85364ba6f1b85037d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aeabe62d99944e547b043f66844f5c901</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a05027aeda74f25be2c76d376d4c4b133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae7cd531529b5dec410765ce4c740cbc4</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a90c8d6eaccad33390d19ebc4d179b618</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::Twist</type>
      <name>twist</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae8fe0519b3b01fa67c09f54343312491</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>abab05fbe3603a18babe5e4ca7ce95b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>father</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>afd913cd2c97ab1c12ac09e4c81d651d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a57605fd8e49969481d7e5c244f1b4ac9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a654c44d69ecb3448d124f1402ab1e6e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridHierarchicIterator&lt; GridImp &gt;</type>
      <name>hbegin</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a22c5d85177419b3389dd0f20d6ebc67e</anchor>
      <arglist>(int maxlevel) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridHierarchicIterator&lt; GridImp &gt;</type>
      <name>hend</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aeeb824b09b713ef4d7679cf9cfda6999</anchor>
      <arglist>(int maxlevel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>abad2f90a11fd89cf30a93faacaa4d5a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae7f7404c4cd9deb8f2dc0e8ad5ad68b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundaryIntersections</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a25015ff5b3103ea7f795921111fb906a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>abe39533839df5d54cbf190f5d08e5151</anchor>
      <arglist>(const int refCount, const bool conformingRefinement) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>adc0c405ba63e1f6009016ff2fc5c2024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a1d3e99caf339de7e137a41266c295d84</anchor>
      <arglist>(HElementType &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aaa2e96543834d401652e4b053bea184d</anchor>
      <arglist>(const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGhost</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a8a837bdf3596069e2c1f8074a4b9ed3a</anchor>
      <arglist>(HBndSegType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a1b5f40994eccca1ac25ee5bf1159bfe3</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeElement</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a4bdccf53967d222c9fdbe6645ce3c46a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a303e841c936a310518d6282ab1ecde4d</anchor>
      <arglist>(const ALU3dGridEntity&lt; 0, dim, GridImp &gt; &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>abd8102b8fc8972fcde3519a9a399d625</anchor>
      <arglist>(const ALU3dGridEntity&lt; 0, dim, GridImp &gt; &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getSubIndex</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aad016e84f85acf6538e775089a332df5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a9d3fc959ce1e16e26d05059c52cf361f</anchor>
      <arglist>(int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const IMPLElementType &amp;</type>
      <name>getItem</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae5b80ebbcf20d8cfaf1cecfdb708f93e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BNDFaceType &amp;</type>
      <name>getGhost</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a1677358c40678e988eb7d95e28c33694</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>af5fa5fb7c7fef96c7fb5963b8ec9dfc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>adb39d26ee21b3fe43c2aa97070fa8c3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>macroId</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>afc52bc993c7d3a254df2b66b2c3338a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aea38b3f4d42b90f2a8ea008ee25d8cfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>master</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>afb504d4ce81e8c32d2a870bffc37f3ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline int</type>
      <name>count</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ad1894358ce71b2ad105fc1c34dd6a05f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline int</type>
      <name>getSubIndex</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>acb080b1466db58c8839bba317f13a9f7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;::template Codim&lt; cc &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a811fd6f5bfc88205836ba6f19314c45a</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;::template Codim&lt; codim &gt;::Twist</type>
      <name>twist</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a3c3515817b451201532b785249557fea</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>getIndex</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ab31c054d457ea5af9c0deabce54adb35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryImpl</type>
      <name>geo_</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a96bb0363bddfe3f832b6c55b4cf86a01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IMPLElementType *</type>
      <name>item_</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a848ba83f866a3a6eba90a33b0ebf7a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BNDFaceType *</type>
      <name>ghost_</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a44de0b56ca8b79f49bb8c7411c3a86e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; GridImp::dimension, GridImp::dimensionworld, elementType, Comm &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a3f3bcd338243b4bdd80e7f1200bec4ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridIntersectionIterator&lt; GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ae1d88ad57cea4af6b7039d9fc2df8488</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridIntersectionIterator&lt; const GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>abe721f27012239e4eb0cd5ac4e845a95</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIterator&lt; const GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a0e0debc7f8b29af49958a2f9b47d4721</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIterator&lt; GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aef087f06c51306ac7b2ce9f998bd1f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLevelIterator&lt; 0, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a2058e5a67e9d1b37108abb8c367a1fcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLevelIterator&lt; 1, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a12eb195c9abc26f40ee81dd573d11a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLevelIterator&lt; 2, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a6da5feac55a5d502d081ce090e27eb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLevelIterator&lt; 3, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a287ce593ee3ba6ccae03a0f55d767558</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLeafIterator&lt; 0, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a1435c377cd182bd24092f19639aa0a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLeafIterator&lt; 1, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>aa4017ba201580fae3f3fcd9fef345b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLeafIterator&lt; 2, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a7ca599bfddc5667b594e8dd9bb3f274b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridLeafIterator&lt; 3, All_Partition, GridImp &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a1d9081d612e470b1c1bcfd56757ce4f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGridHierarchicIndexSet&lt; GridImp::dimension, GridImp::dimensionworld, elementType, Comm &gt;</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>ac82c02334d1396241f0b3bc2f342c500</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a4da29539e6a93405125c726680ff4a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntityPointer</name>
    <filename>a01447.html</filename>
    <templarg>cd</templarg>
    <templarg></templarg>
    <base>ALU3dGridEntityPointerBase&lt; cd, GridImp &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7b26b654c8c361d06d7cf81229f33bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a20ad6f6744a4c842d53206c50fcec6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a98b47a111cb7fe38919e22f8b94d4257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>af5a117ca0ea938bbac5435fa171e1bfe</anchor>
      <arglist>(const ALU3dGridEntityType &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>abdece47d4e492ec75ab00b0d827eeda0</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>acaecb7786c9fe8f10a9c1abb6843ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad1ebbe945c298379bc49a3eb3974ac9baa4eb87a109259bb9be45b68b8c091fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a65f54f8535d3727f651e87b66a01727bab910c91db684b1b08c2f0531f56d93a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointerBase&lt; cd, GridImp &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ab377b861c4c47b816369c40bf985589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>abf6630423a234a81a48a215514c86285</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a1d7014347c998412c34bce11b5ce2dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a47a2999b1bb098f8573dd6a5b561402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7374ede809eeedb4ad9704a3e345b833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ae7e52c48b56ca1c37bc0caae59636b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aedf60e9733cea37ee2657311b7118adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a75f942d288d76dcc30eaae3137beb6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad1ebbe945c298379bc49a3eb3974ac9baa4eb87a109259bb9be45b68b8c091fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a65f54f8535d3727f651e87b66a01727bab910c91db684b1b08c2f0531f56d93a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad80d6c5e05b734c8d0c144d02536d9fd</anchor>
      <arglist>(HElementType *item, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a2479660b2c4831725399196f3ef22e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ab786292d7bb0b0d8b6973620a0f3bb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; GridImp::dimension, GridImp::dimensionworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a17aa36ca39ae4504f846b9850e70fa23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntityPointer&lt; 0, GridImp &gt;</name>
    <filename>a01487.html</filename>
    <templarg></templarg>
    <base>ALU3dGridEntityPointerBase&lt; 0, GridImp &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a7922f93ab8571212e25061cc13d4d6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a4867a836b63ba7c6d5474f1e78c7f250</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aab08231158d25b5a354953b767a86fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a27fc7454d5269b78a317b913d996b052</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a2f9161d95ba7d892031faf1641708b9f</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aeaa234362bc3eb2808571395de4707c0</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a572a9086d9518860edf5df435855684d</anchor>
      <arglist>(const ALU3dGridEntityType &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a958b842acc83871f40644ea2bd28e691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af99db6c8d6f9d055ff067e34e3d8059fae8b0dd45541102de9a46ae65c939e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aa8d753cd18ad0f5cc11abebe1aef57dcab42167436fc638533c96fb3a6b324145</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a4d588c9ed8ac5cc82b173bb7fed4e535a24c8fd95f75106861c8f9fd95fecf9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointerBase&lt; 0, GridImp &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af3b4282c0388e07432610e6e7903ac77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a030dbb4c45cbb306d4b6860bbfe6adbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>addd075984805914c935c3fc973521531</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a33e3faa2a8ea839a497d3856a917c087</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>ac5a18e6f24374a183e2ccac9f332b120</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a485d714aa62186d9774ff61766567010</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a305334463afd479db3ec774cc45c7680</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>adec0c593b79f9a991531cdd280221eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af99db6c8d6f9d055ff067e34e3d8059fae8b0dd45541102de9a46ae65c939e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aa8d753cd18ad0f5cc11abebe1aef57dcab42167436fc638533c96fb3a6b324145</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a4d588c9ed8ac5cc82b173bb7fed4e535a24c8fd95f75106861c8f9fd95fecf9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>ab786292d7bb0b0d8b6973620a0f3bb90</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; GridImp::dimension, GridImp::dimensionworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a17aa36ca39ae4504f846b9850e70fa23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntityPointer&lt; cdim, GridImp &gt;</name>
    <filename>a01447.html</filename>
    <base>ALU3dGridEntityPointerBase&lt; cd, GridImp &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7b26b654c8c361d06d7cf81229f33bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a20ad6f6744a4c842d53206c50fcec6e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a98b47a111cb7fe38919e22f8b94d4257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>af5a117ca0ea938bbac5435fa171e1bfe</anchor>
      <arglist>(const ALU3dGridEntityType &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>abdece47d4e492ec75ab00b0d827eeda0</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>acaecb7786c9fe8f10a9c1abb6843ad6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointerBase&lt; cd, GridImp &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ab377b861c4c47b816369c40bf985589a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>abf6630423a234a81a48a215514c86285</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a1d7014347c998412c34bce11b5ce2dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a47a2999b1bb098f8573dd6a5b561402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7374ede809eeedb4ad9704a3e345b833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ae7e52c48b56ca1c37bc0caae59636b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aedf60e9733cea37ee2657311b7118adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a75f942d288d76dcc30eaae3137beb6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad1ebbe945c298379bc49a3eb3974ac9baa4eb87a109259bb9be45b68b8c091fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a65f54f8535d3727f651e87b66a01727bab910c91db684b1b08c2f0531f56d93a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad80d6c5e05b734c8d0c144d02536d9fd</anchor>
      <arglist>(HElementType *item, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a2479660b2c4831725399196f3ef22e04</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntityPointerBase</name>
    <filename>a01483.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a048a350c1d87a3f6aef95843880a5596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a246faced56dd3ceb9c88423ea826adc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c914549d50f1a55ecb60bdb2c7dc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a9e12634264db85a2c0e721f2633fb4a2</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6e36b7e5a44202d39e76d619e0a9a88f</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c217881ab8442d373b56781504f6af4</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ac39e74be162f8b3857f5091a4900777f</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>abd5fa4d6612e476f9273764a4b6b1eb5</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2c8074143c5e95d166c77014f1deb7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; codim, dim, GridImp &gt;</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a38902a13351ed3193888649de9e40aac</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; GridImp::dimension, GridImp::dimensionworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a17aa36ca39ae4504f846b9850e70fa23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntityPointerBase&lt; 0, GridImp &gt;</name>
    <filename>a01483.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a048a350c1d87a3f6aef95843880a5596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a246faced56dd3ceb9c88423ea826adc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c914549d50f1a55ecb60bdb2c7dc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a9e12634264db85a2c0e721f2633fb4a2</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6e36b7e5a44202d39e76d619e0a9a88f</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c217881ab8442d373b56781504f6af4</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ac39e74be162f8b3857f5091a4900777f</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2c8074143c5e95d166c77014f1deb7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>abd5fa4d6612e476f9273764a4b6b1eb5</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntityPointerBase&lt; cd, GridImp &gt;</name>
    <filename>a01483.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a048a350c1d87a3f6aef95843880a5596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a246faced56dd3ceb9c88423ea826adc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c914549d50f1a55ecb60bdb2c7dc7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a9e12634264db85a2c0e721f2633fb4a2</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6e36b7e5a44202d39e76d619e0a9a88f</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7c217881ab8442d373b56781504f6af4</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ac39e74be162f8b3857f5091a4900777f</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntityPointerBase</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2c8074143c5e95d166c77014f1deb7b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>abd5fa4d6612e476f9273764a4b6b1eb5</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntitySeed</name>
    <filename>a01535.html</filename>
    <templarg>cd</templarg>
    <templarg></templarg>
    <base>ALU3dGridEntitySeedBase&lt; cd, GridImp &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a50bc16f808f92c37f0c0dc056d97aba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>abea4b81b16eca9b037bbd80353f86a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>afca88dc7a36558ffab273bc835dc8f91</anchor>
      <arglist>(const ImplementationType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>ae2834bf359afc1246e949651c92cbcda</anchor>
      <arglist>(const HElementType &amp;item, const int level, const int twist=defaultTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aaf7ef70111fcd0004570bc2fe5433951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>adc41f900c302aecb0e052151d5b2a46b</anchor>
      <arglist>(const ALU3dGridEntityType &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a31672eabca96464e4a258f351fe5ed8b</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a62d2e53621c9ac8cb272108bf3fce0bf</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aa4e7f6acd2b2b4bb4ced10dc4c2256c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a8d917519c52425f712c865d9480fc90e</anchor>
      <arglist>(const HElementType &amp;item, const int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aaacc6af65dbb2d46c7ca2a97b67f612f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a741fbbedb51ac3943d06a202e8422faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>af03a55bc71e7af3fc78b71bfbb115365</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a8c216360658f138eda16490428aebbdf</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a7adb1c00a4b9632a7cfc013537352701</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab43494ccda1a478526943b6e678857d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>level_</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>acc4bbcf429fa2aa2ab73c18487ab140f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>twist_</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a9e29f79c43b70ba503bfea863d8f40d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntitySeed&lt; 0, GridImp &gt;</name>
    <filename>a01551.html</filename>
    <templarg></templarg>
    <base>ALU3dGridEntitySeedBase&lt; 0, GridImp &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>af550941e7d5ee6c29d199a34c98a32cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>afd5cfbc3efc19217b0cb7272aa79ef26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ac6b15329c44bc33ad4d1752f44663c03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a37ddcc905249fd25ede20da9a8fbf538</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a32575f9435dfff2dfec2c6d1963d5b9d</anchor>
      <arglist>(const HElementType &amp;item, int, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a4177b96b894d2dd7f0bad5b4585d0d92</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a4d6d1a700b4ee6e3cf0f77dc02d7c7df</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a82182e50cbbb5cc015aef8251cfa05ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab75041d282d9dde4c334425b0c0067c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6fe7ecfa00420e954b7dae271d1e8cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a462f0377b6df98e637674b4b34269564a859be8c9c6ef841ea8083e89b3a2223f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>adc39f4121916991541f2cced725c935aaaca6fcff7d7f3a31eb28d3721ab4265a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a126a9ff9dc0da3f6aa4d5006cd34b46fa1b596bdff0b7036288702ab4593d89f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntitySeedBase&lt; 0, GridImp &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ad47e42b662b4ce8fd3d14159089b83e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ac09260be4e44d2ba584ea1d8b1871efa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>af4158c5cdf8a8fe503f002730aa44edc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>aae1f5d18ed6a557f297f14031fa016cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::ImplementationType</type>
      <name>ImplementationType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a2dcbc3a09f3254b76bce3bd787220855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a338c0ff5fc32083c6226b6d031fc3bc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a76e75f2736105bc62108adee78e9efba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>ad00b89511aa5c2bc8d26c2dcd14ab718</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a82633221c86fc41a7b581accd3a6fd6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a462f0377b6df98e637674b4b34269564a859be8c9c6ef841ea8083e89b3a2223f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>adc39f4121916991541f2cced725c935aaaca6fcff7d7f3a31eb28d3721ab4265a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a126a9ff9dc0da3f6aa4d5006cd34b46fa1b596bdff0b7036288702ab4593d89f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</name>
    <filename>a01535.html</filename>
    <base>ALU3dGridEntitySeedBase&lt; cd, GridImp &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a50bc16f808f92c37f0c0dc056d97aba7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>abea4b81b16eca9b037bbd80353f86a52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>afca88dc7a36558ffab273bc835dc8f91</anchor>
      <arglist>(const ImplementationType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>ae2834bf359afc1246e949651c92cbcda</anchor>
      <arglist>(const HElementType &amp;item, const int level, const int twist=defaultTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aaf7ef70111fcd0004570bc2fe5433951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>adc41f900c302aecb0e052151d5b2a46b</anchor>
      <arglist>(const ALU3dGridEntityType &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeed</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a31672eabca96464e4a258f351fe5ed8b</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a62d2e53621c9ac8cb272108bf3fce0bf</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aa4e7f6acd2b2b4bb4ced10dc4c2256c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a8d917519c52425f712c865d9480fc90e</anchor>
      <arglist>(const HElementType &amp;item, const int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>aaacc6af65dbb2d46c7ca2a97b67f612f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a741fbbedb51ac3943d06a202e8422faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>af03a55bc71e7af3fc78b71bfbb115365</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a8c216360658f138eda16490428aebbdf</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a7adb1c00a4b9632a7cfc013537352701</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab43494ccda1a478526943b6e678857d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>level_</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>acc4bbcf429fa2aa2ab73c18487ab140f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>twist_</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>a9e29f79c43b70ba503bfea863d8f40d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridEntitySeedBase</name>
    <filename>a01539.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::ALU3dGridEntitySeedBase::Bnd</class>
    <class kind="struct">Dune::ALU3dGridEntitySeedBase::Bnd&lt; 0, Key &gt;</class>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a139b562c1e3b681ddee436a0de4f631c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a32956534a57b4f74499f34b61bb8e47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abf59b07c547a2cb952c6863665ad81a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac8de9fdcf1eed81211d21e15dd6f8285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aab69fad991b22ad429694230befd17bf</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a4fcce32fe7b53d5066a367e816bfa28b</anchor>
      <arglist>(const HElementType *item, const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa082273e340be335e15da37256195b50</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6204cc5cfe3f6d7c07038586d3d4c5ff</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a3c6d70e569a0854a49b926c61027fd</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a82182e50cbbb5cc015aef8251cfa05ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab75041d282d9dde4c334425b0c0067c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6fe7ecfa00420e954b7dae271d1e8cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a9765ada88002e70244bb9e3a8b306a88c8b5e88f8746d4d2575e01bbdcba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae794399d0deaff3c4cc4dc0b27417629a26f5900dd064199219e6dd9475679bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntitySeedBase&lt; codim, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a722e636523894459eadfe18e6a6260cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a8ea708c46f44dbd4c1ccb54f85710f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a65ecc865a03a359add8a8801286af2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::ImplementationType</type>
      <name>ImplementationType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9026faeb04a24ae336b3f3d2b993599f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa93d13c720dc93ad7223a3d578929840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aac260bd0c7a13ac38be83328b76fe47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab43494ccda1a478526943b6e678857d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a9765ada88002e70244bb9e3a8b306a88c8b5e88f8746d4d2575e01bbdcba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae794399d0deaff3c4cc4dc0b27417629a26f5900dd064199219e6dd9475679bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntitySeedBase&lt; 0, GridImp &gt;</name>
    <filename>a01539.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a139b562c1e3b681ddee436a0de4f631c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a32956534a57b4f74499f34b61bb8e47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abf59b07c547a2cb952c6863665ad81a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac8de9fdcf1eed81211d21e15dd6f8285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aab69fad991b22ad429694230befd17bf</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a4fcce32fe7b53d5066a367e816bfa28b</anchor>
      <arglist>(const HElementType *item, const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa082273e340be335e15da37256195b50</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6204cc5cfe3f6d7c07038586d3d4c5ff</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a3c6d70e569a0854a49b926c61027fd</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a82182e50cbbb5cc015aef8251cfa05ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab75041d282d9dde4c334425b0c0067c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6fe7ecfa00420e954b7dae271d1e8cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntitySeedBase&lt; codim, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a722e636523894459eadfe18e6a6260cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a8ea708c46f44dbd4c1ccb54f85710f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a65ecc865a03a359add8a8801286af2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::ImplementationType</type>
      <name>ImplementationType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9026faeb04a24ae336b3f3d2b993599f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa93d13c720dc93ad7223a3d578929840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aac260bd0c7a13ac38be83328b76fe47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab43494ccda1a478526943b6e678857d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a9765ada88002e70244bb9e3a8b306a88c8b5e88f8746d4d2575e01bbdcba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae794399d0deaff3c4cc4dc0b27417629a26f5900dd064199219e6dd9475679bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridEntitySeedBase&lt; cd, GridImp &gt;</name>
    <filename>a01539.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a139b562c1e3b681ddee436a0de4f631c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codimension &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a28ba2cfb4a21116af34954a68d20fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a32956534a57b4f74499f34b61bb8e47e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; codimension, GridImp &gt;</type>
      <name>EntitySeedImp</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2955d99960b0732cca1f1df050a086c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a451e9557f92e269989ad276860eef90dab6407131d5e3271da430be65cac6e3f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abf59b07c547a2cb952c6863665ad81a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac8de9fdcf1eed81211d21e15dd6f8285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aab69fad991b22ad429694230befd17bf</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a4fcce32fe7b53d5066a367e816bfa28b</anchor>
      <arglist>(const HElementType *item, const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa082273e340be335e15da37256195b50</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridEntitySeedBase</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6204cc5cfe3f6d7c07038586d3d4c5ff</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab5ad2a00a0d3e0e284797a8240bc3b76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>abb68594a55b031effcb7c15018c2995d</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae624f3289c174e6e12e2827666bd1412</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6a3c6d70e569a0854a49b926c61027fd</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>af01208ab039089bf0989d2faa363d7be</anchor>
      <arglist>(const ALU3dGridEntitySeedType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a82182e50cbbb5cc015aef8251cfa05ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>item</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ac268e8839b0cafd4076f36cb6be06a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HElementType *</type>
      <name>interior</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9a755468464f908612e6e103aaf62c87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isGhost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a59d738c76198686b13a56e261ca8d925</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae1f9358b7c675cef9264ab2e582f7467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6f08b5cf1b54c52c3e1ccd8fd1ed2ae5</anchor>
      <arglist>(const HElementType *item)</arglist>
    </member>
    <member kind="function">
      <type>KeyType *</type>
      <name>toKey</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a20f057f895acf0b73e24a358e4542c70</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a5fb94bafc33546ab40dc694000797</anchor>
      <arglist>(const HElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a919b6823aa6c99493f81b281d4be2713</anchor>
      <arglist>(const HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab75041d282d9dde4c334425b0c0067c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a6fe7ecfa00420e954b7dae271d1e8cc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a0f34b7d6adf26654c28d39fa71fed9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>defaultTwist</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a80511c982d618c36154e200520dd11b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntitySeedBase&lt; codim, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a722e636523894459eadfe18e6a6260cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a8ea708c46f44dbd4c1ccb54f85710f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a65ecc865a03a359add8a8801286af2b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::ImplementationType</type>
      <name>ImplementationType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a9026faeb04a24ae336b3f3d2b993599f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aa93d13c720dc93ad7223a3d578929840</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, codim &gt;::EntitySeedType</type>
      <name>KeyType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae6096944846c3a0799f08c25d5c941be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>aac260bd0c7a13ac38be83328b76fe47d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ab43494ccda1a478526943b6e678857d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a53a9765ada88002e70244bb9e3a8b306a88c8b5e88f8746d4d2575e01bbdcba91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>ae794399d0deaff3c4cc4dc0b27417629a26f5900dd064199219e6dd9475679bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyType *</type>
      <name>item_</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a5bf7c90751fa7fcf872f5d3ef7431e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridFaceGeometryInfo</name>
    <filename>a01635.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFaceGetter</name>
    <filename>a01099.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const ALU3dImplTraits&lt; tetra, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01099.html</anchorfile>
      <anchor>a6029ac0ab3e1739eb00f69c0677ebc6f</anchor>
      <arglist>(const typename ALU3dImplTraits&lt; tetra, Comm &gt;::GEOElementType &amp;elem, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ALU3dImplTraits&lt; hexa, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01099.html</anchorfile>
      <anchor>afa25cbf1f1bfdf1cbdafc25ebcb73011</anchor>
      <arglist>(const typename ALU3dImplTraits&lt; hexa, Comm &gt;::GEOElementType &amp;elem, int index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridFaceInfo</name>
    <filename>a01555.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>ConformanceState</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFORMING</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a43de1865ebc7dc26197e8902aae5543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_INNER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a95e90eab9c2f0b9860a59283bc60283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_OUTER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6ace3c3fe233c19c5a616a899fc05478b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a0f619a3b0ad04b8afb9f6531fcc9af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aaa13e3d10f17d853a287d8f562cd40ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a1b87bc85ff72f6e0530da65374a31a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOPeriodicType</type>
      <name>GEOPeriodicType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aa86a85e7f048f8a2a29a6f611ef20a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::IMPLElementType</type>
      <name>IMPLElementType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a8ecadb663ee903fc6a2492afa2d5270e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a29fc5b22f661f3b09608944fdc29c045</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aee9922f79a328a8f3a1d7083e1b2afa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFORMING</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a43de1865ebc7dc26197e8902aae5543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_INNER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a95e90eab9c2f0b9860a59283bc60283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_OUTER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6ace3c3fe233c19c5a616a899fc05478b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a0f619a3b0ad04b8afb9f6531fcc9af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a55adf18c8dbc79c0b82e36d8b9868c01</anchor>
      <arglist>(const bool levelIntersection=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a44aa28c8917d76a30096824477111cfe</anchor>
      <arglist>(const GEOFaceType &amp;face, int innerLevel, int innerTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a9f4c88c6b373349c7ef905c452afd3d9</anchor>
      <arglist>(const GEOFaceType &amp;face, int innerTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>af34fd2b31b6ee1539578a73f3f2c33bb</anchor>
      <arglist>(const ALU3dGridFaceInfo &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a338185bc4ced680cdedc6507a2ba63ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>innerBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a6a348a0307c95ab3d2e68e280e54a377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outerBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a87498f293dc0f90978f915b2e8714605</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a75c4e04baca6e6051bcfff676d3560be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a639ab0f0f1499c21343edb25befebbd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ghostBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a4a4e346732f80e00b264af9206ca73c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOFaceType &amp;</type>
      <name>face</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a79fd9b9bc3fad9ca020c6a9472a44d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOElementType &amp;</type>
      <name>innerEntity</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a46c1b58ad47c8f460cd3c69d7ad23bfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOElementType &amp;</type>
      <name>outerEntity</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aa72df18232edc22f12ddc30c323bce87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BNDFaceType &amp;</type>
      <name>innerFace</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a49728b6b7df45af210bb867cfaa3daa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BNDFaceType &amp;</type>
      <name>boundaryFace</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>accafd62e25b11212812b4bc9f445b191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>innerTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a7bf7a1fe0c52f433cc210a2902978805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outerTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a063b7711c326e8f4032416ddb8426601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>duneTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a5f6c51befa25dd78509a426f9b08d659</anchor>
      <arglist>(const int faceIdx, const int aluTwist) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>innerALUFaceIndex</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a48be76f98d4dca87075083db9b2c8119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outerALUFaceIndex</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a874fd04fb0f772488754f3d92ba31f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outsideLevel</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a04d3ddccc5729b3f6ae17cca195285e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>af231233940e917496d566ac50833e8d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a6ad482d6df640456fbff6327d89f64d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConformanceState</type>
      <name>conformanceState</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>ab38377c8388ac57f6a6de42c3af8bccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parallel</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a9843ac0a0e68d1c89713a7b57011eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conformingRefinement</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a4578199513c006d8ebfdcff827af2964</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ghostCellsEnabled</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a523ab1914d72c3a66723a5c0ba69ec26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlags</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a35f1881a7ca6d6da193dad0d84de0153</anchor>
      <arglist>(const bool conformingRefinement, const bool ghostCellsEnabled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isElementLike</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a00ce7ce9e5397d514686b9ab761c7eb2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridFaceInfo&lt; dim, dimworld, GridImp::elementType, Comm &gt;</name>
    <filename>a01555.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>ConformanceState</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aaa13e3d10f17d853a287d8f562cd40ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a1b87bc85ff72f6e0530da65374a31a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GEOPeriodicType</type>
      <name>GEOPeriodicType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aa86a85e7f048f8a2a29a6f611ef20a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::IMPLElementType</type>
      <name>IMPLElementType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a8ecadb663ee903fc6a2492afa2d5270e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a29fc5b22f661f3b09608944fdc29c045</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aee9922f79a328a8f3a1d7083e1b2afa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CONFORMING</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a43de1865ebc7dc26197e8902aae5543f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_INNER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a95e90eab9c2f0b9860a59283bc60283b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>REFINED_OUTER</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6ace3c3fe233c19c5a616a899fc05478b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UNDEFINED</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a2ace114da39d9c14c014f8f690f65dd6a0f619a3b0ad04b8afb9f6531fcc9af49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a55adf18c8dbc79c0b82e36d8b9868c01</anchor>
      <arglist>(const bool levelIntersection=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a9f4c88c6b373349c7ef905c452afd3d9</anchor>
      <arglist>(const GEOFaceType &amp;face, int innerTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>af34fd2b31b6ee1539578a73f3f2c33bb</anchor>
      <arglist>(const ALU3dGridFaceInfo &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a44aa28c8917d76a30096824477111cfe</anchor>
      <arglist>(const GEOFaceType &amp;face, int innerLevel, int innerTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridFaceInfo</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a338185bc4ced680cdedc6507a2ba63ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>innerBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a6a348a0307c95ab3d2e68e280e54a377</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>outerBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a87498f293dc0f90978f915b2e8714605</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a75c4e04baca6e6051bcfff676d3560be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a639ab0f0f1499c21343edb25befebbd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ghostBoundary</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a4a4e346732f80e00b264af9206ca73c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOFaceType &amp;</type>
      <name>face</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a79fd9b9bc3fad9ca020c6a9472a44d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOElementType &amp;</type>
      <name>innerEntity</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a46c1b58ad47c8f460cd3c69d7ad23bfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOElementType &amp;</type>
      <name>outerEntity</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>aa72df18232edc22f12ddc30c323bce87</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BNDFaceType &amp;</type>
      <name>innerFace</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a49728b6b7df45af210bb867cfaa3daa5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BNDFaceType &amp;</type>
      <name>boundaryFace</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>accafd62e25b11212812b4bc9f445b191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>innerTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a7bf7a1fe0c52f433cc210a2902978805</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outerTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a063b7711c326e8f4032416ddb8426601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>duneTwist</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a5f6c51befa25dd78509a426f9b08d659</anchor>
      <arglist>(const int faceIdx, const int aluTwist) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>innerALUFaceIndex</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a48be76f98d4dca87075083db9b2c8119</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outerALUFaceIndex</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a874fd04fb0f772488754f3d92ba31f28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outsideLevel</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a04d3ddccc5729b3f6ae17cca195285e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>af231233940e917496d566ac50833e8d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a6ad482d6df640456fbff6327d89f64d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConformanceState</type>
      <name>conformanceState</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>ab38377c8388ac57f6a6de42c3af8bccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>parallel</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a9843ac0a0e68d1c89713a7b57011eeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conformingRefinement</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a4578199513c006d8ebfdcff827af2964</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ghostCellsEnabled</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a523ab1914d72c3a66723a5c0ba69ec26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFlags</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a35f1881a7ca6d6da193dad0d84de0153</anchor>
      <arglist>(const bool conformingRefinement, const bool ghostCellsEnabled)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>isElementLike</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a00ce7ce9e5397d514686b9ab761c7eb2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridFactory</name>
    <filename>a01651.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::ALU3dGridFactory::Codim</class>
    <class kind="struct">Dune::ALU3dGridFactory::FaceLess</class>
    <member kind="typedef">
      <type>ALUGrid</type>
      <name>Grid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a611ec8b7966ef95deb54967587b6a5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ae5f2b7d27bcf6701a7933c299e884388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a23acd27d4ae65a7b3472d520380e0943</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0aca10680baa47a31d19c6d4ce1a541c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>GlobalIdType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ad052fe0c173c3b05d69fa93cd0da9dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUGridTransformation&lt; ctype, dimensionworld &gt;</type>
      <name>Transformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a785763d49b9f5011bf0818b6f267ee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldVector</type>
      <name>WorldVector</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8f2eec46fde19f17d7d7f27b699648c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldMatrix</type>
      <name>WorldMatrix</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6d0851ecb9933f17225626dfaf9821c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::CollectiveCommunication</type>
      <name>Communication</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6801c32a640981cd6d7c4c0d93d57b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a600ea6ca04f43a5fbb1180da24d87154</anchor>
      <arglist>(const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator(), bool removeGeneratedFile=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aae28e8d7f4a7812a1c818a60aba0d0a7</anchor>
      <arglist>(const std::string &amp;filename, const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ada67d2db5db43d53b547915c0927ccad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a1c4acedfbbc6a98b452acd51c36b2312</anchor>
      <arglist>(const VertexInputType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0dcdefec68cda092c3626971684e51fc</anchor>
      <arglist>(const VertexInputType &amp;pos, const VertexId globalId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>abe36d39942007f8050b2aa33d8cf0368</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a7d05123b85a91898b55d26f02020624e</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;faceVertices, int boundaryId=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8b81c207cc7904e059b8438255b338f4</anchor>
      <arglist>(int element, int face, int boundaryId=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a82d44f67bbedc5af7a7fced1c90b138d</anchor>
      <arglist>(int element, int face)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ac23fc72a93657edc723020e6ca85ea4c</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; VertexId &gt; &amp;vertices, const DuneBoundaryProjectionType *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6f0b01fcc9904aa26c4e6ed2297ccd8c</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a9c09c2821946b3a4789a885e545b863e</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af379967ac34b966632c8d734c7265bf7</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimensionworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aa1123e94235f569e9f2c1cc340367799</anchor>
      <arglist>(const DuneBoundaryProjectionType &amp;bndProjection, const bool isSurfaceProjection=(dimension !=dimensionworld))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFaceTransformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a546972a00a3c9652ee7dc01aa6901033</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a117b9b6d0ed179cf81fd83c177572eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a385c54e565db5410aae3871098a5c7ba</anchor>
      <arglist>(const bool addMissingBoundaries, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab3e399190af41e796412ba9d1fcae6f1</anchor>
      <arglist>(const bool addMissingBoundaries, bool temporary, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a36e5e07b66521ee98823557740a4342d</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a5bc4737291f11222c7116241dc60bda5</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>acc924a8e1baa88858485f65f643c5dd3</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af3b67c5bed412c1bc9e33ccbea118668</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>adf7d6c381e2e87e7894e0f11231de128</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a3eed36a544a965599de825a6df1b5934</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>ordering</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6b627e5c16688373a3d62d68292a4db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestEdgeFlag</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aee3bfbf82ef57cccde1c0365edfe0b15</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a091050a4cd9c8478fd968a46ea4245f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>decltype(std::declval&lt; Dune::GridFactoryInterface&lt; Grid &gt; * &gt;() -&gt;createGrid()) typede</type>
      <name>GridPtrType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6055cd40957558a86fa3284f81a5cf51</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALU3dGridElementType</type>
      <name>elementType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af31a40471792ce08d2704d8f4c57f170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab1ff1ffbc38e770e6b8a69bd2d184573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimensionworld</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a170c9449d2f1bf9e354ab7a799486ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af1a44e0f14ddf53889bb31bfe1ff653b</anchor>
      <arglist>(const bool verbose, const MPICommunicatorType &amp;communicator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01651.html</filename>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a611ec8b7966ef95deb54967587b6a5fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ae5f2b7d27bcf6701a7933c299e884388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a23acd27d4ae65a7b3472d520380e0943</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0aca10680baa47a31d19c6d4ce1a541c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>GlobalIdType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ad052fe0c173c3b05d69fa93cd0da9dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUGridTransformation&lt; ctype, dimensionworld &gt;</type>
      <name>Transformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a785763d49b9f5011bf0818b6f267ee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldVector</type>
      <name>WorldVector</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8f2eec46fde19f17d7d7f27b699648c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldMatrix</type>
      <name>WorldMatrix</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6d0851ecb9933f17225626dfaf9821c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::CollectiveCommunication</type>
      <name>Communication</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6801c32a640981cd6d7c4c0d93d57b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a600ea6ca04f43a5fbb1180da24d87154</anchor>
      <arglist>(const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator(), bool removeGeneratedFile=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aae28e8d7f4a7812a1c818a60aba0d0a7</anchor>
      <arglist>(const std::string &amp;filename, const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ada67d2db5db43d53b547915c0927ccad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a1c4acedfbbc6a98b452acd51c36b2312</anchor>
      <arglist>(const VertexInputType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0dcdefec68cda092c3626971684e51fc</anchor>
      <arglist>(const VertexInputType &amp;pos, const VertexId globalId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>abe36d39942007f8050b2aa33d8cf0368</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a7d05123b85a91898b55d26f02020624e</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;faceVertices, int boundaryId=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8b81c207cc7904e059b8438255b338f4</anchor>
      <arglist>(int element, int face, int boundaryId=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a82d44f67bbedc5af7a7fced1c90b138d</anchor>
      <arglist>(int element, int face)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a9c09c2821946b3a4789a885e545b863e</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ac23fc72a93657edc723020e6ca85ea4c</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; VertexId &gt; &amp;vertices, const DuneBoundaryProjectionType *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aa1123e94235f569e9f2c1cc340367799</anchor>
      <arglist>(const DuneBoundaryProjectionType &amp;bndProjection, const bool isSurfaceProjection=(dimension !=dimensionworld))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6f0b01fcc9904aa26c4e6ed2297ccd8c</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af379967ac34b966632c8d734c7265bf7</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimensionworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFaceTransformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a546972a00a3c9652ee7dc01aa6901033</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a117b9b6d0ed179cf81fd83c177572eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a385c54e565db5410aae3871098a5c7ba</anchor>
      <arglist>(const bool addMissingBoundaries, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab3e399190af41e796412ba9d1fcae6f1</anchor>
      <arglist>(const bool addMissingBoundaries, bool temporary, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a36e5e07b66521ee98823557740a4342d</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a5bc4737291f11222c7116241dc60bda5</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>acc924a8e1baa88858485f65f643c5dd3</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af3b67c5bed412c1bc9e33ccbea118668</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>adf7d6c381e2e87e7894e0f11231de128</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a3eed36a544a965599de825a6df1b5934</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>ordering</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6b627e5c16688373a3d62d68292a4db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestEdgeFlag</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aee3bfbf82ef57cccde1c0365edfe0b15</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a091050a4cd9c8478fd968a46ea4245f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>decltype(std::declval&lt; Dune::GridFactoryInterface&lt; Grid &gt; * &gt;() -&gt;createGrid()) typede</type>
      <name>GridPtrType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6055cd40957558a86fa3284f81a5cf51</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALU3dGridElementType</type>
      <name>elementType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af31a40471792ce08d2704d8f4c57f170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab1ff1ffbc38e770e6b8a69bd2d184573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimensionworld</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a170c9449d2f1bf9e354ab7a799486ffa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af1a44e0f14ddf53889bb31bfe1ff653b</anchor>
      <arglist>(const bool verbose, const MPICommunicatorType &amp;communicator)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFamily</name>
    <filename>a01703.html</filename>
    <templarg>dimG</templarg>
    <templarg>dimW</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::ALU3dGridFamily::Traits</class>
    <member kind="typedef">
      <type>ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>GridImp</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>ab33063dc1d1135e53370df9383dda1d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFamily&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a3ad346ff240d0eaeeedf14efdc61a1cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridLocalIdSet&lt; dim, dimworld, elType, Comm &gt;</type>
      <name>LocalIdSetImp</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a2d2c2af7a9593794e23d04cd402b8c04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridCommunications&lt; dim, dimworld, elType, Comm &gt;::GlobalIdSet</type>
      <name>GlobalIdSetImp</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a0dbe40201ce29b35e8bb910f52db4b61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridCommunications&lt; dim, dimworld, elType, Comm &gt;::GlobalId</type>
      <name>GlobalIdType</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a1c75eed663c1b0e9435e9cb0a7766a59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>LocalIdType</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>ad8bd17599cffd8c4559ae25e16781975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::LevelIndexSetImp</type>
      <name>LevelIndexSetImp</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a76f2ec00c52ecdb32d06ccc7b78b5967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::LeafIndexSetImp</type>
      <name>LeafIndexSetImp</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>acad9a9f4dbcff9e64e03f93944b2a9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>aeaef00e54d261f64b50b89d6d9a07e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimworld</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a3a77aab1de242ba72e4ce54c7210bc9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfo</name>
    <filename>a01811.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoBase</name>
    <filename>a01571.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <base>Dune::ALU3dGridSurfaceMappingFactory</base>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a792256202c0b398f805860d66a92284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a350d00945b38ab3b568f97367d547e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ad14417d956fde8621c6b9967a060a866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa8606ddb74aebe86384ca301a253281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a52718a985bd55c72c231f2ee70bc9ff0</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a6379d75e0ceb1365005ecc8c55688508</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a982d1597c8b711899ab4d55146c4e544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, hexa, Comm &gt;</name>
    <filename>a01571.html</filename>
    <base>Dune::ALU3dGridSurfaceMappingFactory</base>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a792256202c0b398f805860d66a92284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a350d00945b38ab3b568f97367d547e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ad14417d956fde8621c6b9967a060a866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa8606ddb74aebe86384ca301a253281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a52718a985bd55c72c231f2ee70bc9ff0</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a6379d75e0ceb1365005ecc8c55688508</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a982d1597c8b711899ab4d55146c4e544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, tetra, Comm &gt;</name>
    <filename>a01571.html</filename>
    <base>Dune::ALU3dGridSurfaceMappingFactory</base>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a792256202c0b398f805860d66a92284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a350d00945b38ab3b568f97367d547e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ad14417d956fde8621c6b9967a060a866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa8606ddb74aebe86384ca301a253281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a52718a985bd55c72c231f2ee70bc9ff0</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a6379d75e0ceb1365005ecc8c55688508</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a982d1597c8b711899ab4d55146c4e544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, type, Comm &gt;</name>
    <filename>a01583.html</filename>
    <templarg>dimworld</templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a07dd789b5fb657714ef75d24472f8b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a07dd789b5fb657714ef75d24472f8b43ab44b071ca097adb8cae927669d84048a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a07dd789b5fb657714ef75d24472f8b43a064fb257ac5f6d3e0edd5ca5db64899b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a5ede7cdf95cbc5de7f19ea3f1fdd247ea8a32e65331ebd5bf8613797364ef8d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a780867d3e358b8c76c498322f0c2898a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a2d8e626cc629ee1005cade3bd4fd3aab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>abd7c51284499ea918a295ae5464dcc0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 1 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a829ab476fdb957ae6cc3d5b51f889b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>acfec8df6b4c1d374b4e9d0852689c8d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>ab134f9f27eeb554eeb65b2720135e81c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a5a58b88a71aa4b8ed1e9ac5b7181ad98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>ac3d4a3a812cda9f309ed338c47c53d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, 2 &gt;</type>
      <name>LocalCoordinateType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a9795718e13df9c8f1dff02c117399f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>aac82fd13b8015373caaefdb84ad9f645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>ab30299c7e36503b6ae15e7f96d16128b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a07dd789b5fb657714ef75d24472f8b43ab44b071ca097adb8cae927669d84048a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a07dd789b5fb657714ef75d24472f8b43a064fb257ac5f6d3e0edd5ca5db64899b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a5ede7cdf95cbc5de7f19ea3f1fdd247ea8a32e65331ebd5bf8613797364ef8d7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>aa9a13b6913a7c1f937e93daf94ae09c4</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a9d37ad04ae8262f93244b3953d57a427</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a4add2bfb8719f9ec3949837ca566a83c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LocalCoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a29fe27b2ccd549ce2092444b47b0b9ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalCoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a3aae3a885e7423360105e4ca88152062</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateLocalGeometries</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a8055f1f982e29b447378d5dbc1c307af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a321d3c0a0e33211252f7d08325332937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a3b8932287a2715f115fb1c894ec0a127</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalCoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a60ca347d236f5cffc36bc31ed45a001e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalCoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>aa20cd6689b8c55c9ba54a863e23d97ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a8c038979f8ee75f1153875c6c127f5c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01583.html</anchorfile>
      <anchor>a7623623c9057e109e79bcbdbf7741704</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGeometricFaceInfoBase&lt; dim, dimworld, hexa, Comm &gt;</name>
    <filename>a01571.html</filename>
    <base>Dune::ALU3dGridSurfaceMappingFactory</base>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a792256202c0b398f805860d66a92284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a350d00945b38ab3b568f97367d547e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ad14417d956fde8621c6b9967a060a866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa8606ddb74aebe86384ca301a253281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a52718a985bd55c72c231f2ee70bc9ff0</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a6379d75e0ceb1365005ecc8c55688508</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a982d1597c8b711899ab4d55146c4e544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGeometricFaceInfoBase&lt; dim, dimworld, tetra, Comm &gt;</name>
    <filename>a01571.html</filename>
    <base>Dune::ALU3dGridSurfaceMappingFactory</base>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; type &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a792256202c0b398f805860d66a92284a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a350d00945b38ab3b568f97367d547e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ad14417d956fde8621c6b9967a060a866</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, type, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa8606ddb74aebe86384ca301a253281b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a52718a985bd55c72c231f2ee70bc9ff0</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoBase</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a6379d75e0ceb1365005ecc8c55688508</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a982d1597c8b711899ab4d55146c4e544</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoHexa</name>
    <filename>a01579.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>ALU3dGridGeometricFaceInfoBase&lt; dim, dimworld, hexa, Comm &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>ad3ac9e27ce98c09a333be6f2b0014456</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::FaceTopo</type>
      <name>FaceTopo</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a8711622b7ca8320dd2aa9692ae368722</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, hexa, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a76854f5192a65ca686aeb02e993f5827</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SurfaceNormalCalculator</type>
      <name>SurfaceMappingType</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a2c6b3810558b8c377016ccce8fc3ae1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, hexa, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a1d2444972f811f185d2fbeddd9a64273</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoHexa</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>ae35e4d2be1674b601286498753ad946c</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoHexa</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>ab70e32fe9a4088b4d8e110c2196f379e</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoHexa &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalType &amp;</type>
      <name>outerNormal</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a608eab0cf45e4836d48961cf94631ec1</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 2 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>ae151579945364c332c7a5f54a6c1cd44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalGeom</name>
      <anchorfile>a01579.html</anchorfile>
      <anchor>a5ac26461f44e2c9d08677e7b15d662f9</anchor>
      <arglist>(GeometryImp &amp;geo) const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoHexa&lt; 2, dimworld, Comm &gt;</name>
    <filename>a01591.html</filename>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, hexa, Comm &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>aa96bdf6822d7b66bf47d057864f5d524</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::FaceTopo</type>
      <name>FaceTopo</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a0a7631186f0cdf1379128f649c2d7a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, hexa, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>acb59d611f6da2f60427927cbfcec7e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, hexa, Comm &gt;::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a15d4792e9d3b9315bf10d4a70bec5b0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, hexa, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a02230262027613078384b46f882e5329</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoHexa</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a77cc678fddd7481398c9910b7a268656</anchor>
      <arglist>(const ConnectorType &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoHexa</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>ad03f31be2496914c03b43947fd37bcc5</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoHexa &amp;)</arglist>
    </member>
    <member kind="function">
      <type>NormalType &amp;</type>
      <name>outerNormal</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>aaf754b7fcd4ac1c193e5b3658938d74b</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a51f4498dc1cd5417ab921126dda78bd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalGeom</name>
      <anchorfile>a01591.html</anchorfile>
      <anchor>a9a8d9b71482ae8021225880ed986d3e9</anchor>
      <arglist>(GeometryImp &amp;geo) const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoTetra</name>
    <filename>a01575.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>ALU3dGridGeometricFaceInfoBase&lt; dim, dimworld, tetra, Comm &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>acc8fdc79c17cd14e3e6ca3d81084f0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::FaceTopo</type>
      <name>FaceTopo</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>acb5592f137c2d4e6ac7c7a8b3f46cae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, tetra, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab1c4688c9524970ac6eee261e269ebfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, tetra, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a3080db7d4d6258d0a732ce13464c18fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoTetra</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a413a106f821fecb40d80c0fc4c268095</anchor>
      <arglist>(const ConnectorType &amp;ctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoTetra</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a456939f6f066a06572e28cf54ab83f35</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoTetra &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>NormalType &amp;</type>
      <name>outerNormal</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>aa998fa99bd5a5589ad97a7e65752fc4d</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 2 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a7963b6ffac7067f29ce8643a6e355205</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalGeom</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>a962330d307f6f910c4be11e624ac5029</anchor>
      <arglist>(GeometryImp &amp;geo) const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometricFaceInfoTetra&lt; 2, dimworld, Comm &gt;</name>
    <filename>a01587.html</filename>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, tetra, Comm &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>ac71eb767c6815e39d679e126419d7981</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::FaceTopo</type>
      <name>FaceTopo</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a072c293a7f35d490a7691c9746670c2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, tetra, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a0cb144731359a8548dfb944f440ffad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, tetra, Comm &gt;::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a4058fa6cf43fd0173877d92dbf388092</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; 2, dimworld, tetra, Comm &gt;</type>
      <name>ConnectorType</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a7532673362f1337a2d6b26f4e8a88561</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SideIdentifier</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a5542c4acec9811242102564940fea9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingFaceMapping&lt; dim, dimworld, type, Comm &gt;</type>
      <name>NonConformingMappingType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a314ce56ecceb1344920c27035ab6b263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 3 &gt;</type>
      <name>ReferenceElementContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab197e7f5c094afb48317e530a8c82ec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; alu3d_ctype, 2 &gt;</type>
      <name>ReferenceFaceContainerType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a4b3a373f06cbe63d93e624271e065fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceElementContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aba735b66ccd0018125965d1d9b8d2afb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(ReferenceFaceContainerType::general(std::declval&lt; const Dune::GeometryType &amp; &gt;))) &gt;</type>
      <name>ReferenceFaceType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a655e7369e75b35848a030d01ca212646</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a19b427a83daa92ca76dc7287b5c0ff89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INNER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2aa0cb84fccd1e1671bdce439d47b5f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OUTER</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a59ec96cab0a944e9dfa4d91492a43af2a68e8bcbd0c08e1c39af21042bcb547df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2efb828bd15f73cc4b75e84bc46084e2a2c3a1089650ca41ed7bec6793ed3752e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoTetra</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a3330b87546fa2c8720710835d9ecd23a</anchor>
      <arglist>(const ConnectorType &amp;ctor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGeometricFaceInfoTetra</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a3f1140a0b4aa5cf7b33beb40435b5d1b</anchor>
      <arglist>(const ALU3dGridGeometricFaceInfoTetra &amp;orig)</arglist>
    </member>
    <member kind="function">
      <type>NormalType &amp;</type>
      <name>outerNormal</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>ac1cf1e2915133a628c1b277ec43548e3</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFaceGeom</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>a97563b27f789adc9b7d9c2bfbb78dce1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalGeom</name>
      <anchorfile>a01587.html</anchorfile>
      <anchor>aea71a7c5a28fbfceb8625a4b7c7d61d1</anchor>
      <arglist>(GeometryImp &amp;geo) const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionSelfLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ac23cb866a825d79ad00a344b2b172519</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoordinateType &amp;</type>
      <name>intersectionNeighborLocal</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a2ea13ee36065d4db5e9109078c106157</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const ReferenceElementType &amp;</type>
      <name>getReferenceElement</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>ab80eac4d8847552b1cac6cd643d6d937</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ConnectorType &amp;</type>
      <name>connector_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a510cf55a35c5cc9d25797f7095853b49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; FieldVector&lt; alu3d_ctype, 2 &gt;, type==tetra ? 3 :4 &gt;</type>
      <name>childLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a16f676f913c99e6818d880c170e969f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsSelfLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>aa74386f2af9de8c53478738a9aee9262</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateType</type>
      <name>coordsNeighborLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a21e1ea5c72570b6bd428ac8543dc4a1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedGlobal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>af93ece294f1657194856a7636ccdc064</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>generatedLocal_</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a1cc8b709af25cd2796c2ccd6a10889f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGeometry</name>
    <filename>a01451.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>corners_</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae0b521d4ab7a10dd43c765eb70e5e5c2ab1a69c7b7a89c1e44ec2ffc07963614b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::IMPLElementType</type>
      <name>IMPLElementType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aaf1ef0e14ac8bbabbfb28b9660a01933</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a234c98b3beb2e1a1f04a2cac1c49d66d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::GEOEdgeType</type>
      <name>GEOEdgeType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a897681b7b13ec4b20be6dc1fe39c47fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::GEOVertexType</type>
      <name>GEOVertexType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>add8fd52a87efe12c2959b386c7cf2022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::HFaceType</type>
      <name>HFaceType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>af76dfbb1edfa5ae0816b9e54c2cbeeb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::HEdgeType</type>
      <name>HEdgeType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a56e6a81ef7b752bfe17ee7b145696f82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraitsType::VertexType</type>
      <name>VertexType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a75346077f9f7be2bd959cd9950d39a35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; elementType &gt;</type>
      <name>ElementTopo</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aff2f29206c5a43b83f10989050a5aac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FaceTopologyMapping&lt; elementType &gt;</type>
      <name>FaceTopo</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a589588bf51e0744319b1fd6168bec0d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MyALUGridGeometryImplementation&lt; cdim &gt;::template GeometryImpl&lt; 0, mydim, elementType &gt;</type>
      <name>GeometryImplType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ac323ad9e0f7f91320c89aaa758b1a0c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a0fde390af39bf1cad5299bffab93c65c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ada5ca41aff24f8af69c3174d3137867c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a3b7bec406da431d199c43ea14a891c92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, mydim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2e4514d61ed52d0f15ac2dc22b562aad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydim, cdim &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>af941a0709a634b777dd5a5c94e0daa6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, GridImp::dimension==3 ? EntityCount&lt; elementType &gt;::numVerticesPerFace :2, cdim &gt;</type>
      <name>FaceCoordinatesType</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2c64ce85380590f5153bc4702790ed65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>corners_</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae0b521d4ab7a10dd43c765eb70e5e5c2ab1a69c7b7a89c1e44ec2ffc07963614b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a603f2b15815ca4a943ab38de87339979</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>af8384be01e5a1bda7c45992a5414a256</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a8d8ec5e94a7ac53682fa8467c8ef4cee</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a3aa2ffaac7dc1709093f997c0863b1c4</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a0dc7260ee54356512d88ab33ddaf7ed6</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a12d34003d6511c162d4396483127c617</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>adcedf68ec8093b20515fb60b12083dfc</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a3a92b28bb10e5b75882dcc80682b7c5c</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>adca30c14ed2f972b9e930733ae8d2aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ade803c46887c330f517f3ad58ba57580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa795995a81200e7c29cfbfad3c134025</anchor>
      <arglist>(const IMPLElementType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ad6f7b5df13d8974d48cddf4aefae7223</anchor>
      <arglist>(const HFaceType &amp;item, int twist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a95f2da59c5f07b9a08fbb927c0e34e13</anchor>
      <arglist>(const HEdgeType &amp;item, int twist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>abd323ab7f333c92311f5b96e438e63b9</anchor>
      <arglist>(const VertexType &amp;item, int twist)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2602685c523e4c9e3d5de6662959c922</anchor>
      <arglist>(const FaceCoordinatesType &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a65d3ad67bf1e3736b8675625d93003c2</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1, const coord_t &amp;p2, const coord_t &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a6ff45f9cfa1b0acf7fe68d851db1b343</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1, const coord_t &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a449abb94d503aaffe03feff15dc59165</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildGeomInFather</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ad015faddb8a6b5bd6811848ad9d554a1</anchor>
      <arglist>(const Geometry &amp;fatherGeom, const Geometry &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a75de269cfca382a68f0c61226eb63f7e</anchor>
      <arglist>(std::ostream &amp;ss) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a461d923e88b0a51a8549213c97e53c3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a1be3ff74a07c3d175c5081872253bf9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline bool</type>
      <name>buildGeomInFather</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2cf6de1753eb6fdfdd4e237c5db83174</anchor>
      <arglist>(const Geometry &amp;fatherGeom, const Geometry &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a86fa2a8e22361cf3e82beb56625f19f5</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1, const coord_t &amp;p2, const coord_t &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a9cc7d726fc40b77d897fd57be4f08f9a</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1, const coord_t &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline bool</type>
      <name>buildGeom</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a059078ea47dda224daede6c581ba00c0</anchor>
      <arglist>(const coord_t &amp;p0, const coord_t &amp;p1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GeometryImplType &amp;</type>
      <name>geoImpl</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>afe8604bb7668c6dfdd0a5079618c0739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE SharedPointer&lt; GeometryImplType &gt;</type>
      <name>geoImplPtr_</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a91d9af8c84124c22e7b79b897110f658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridGhostIterator</name>
    <filename>a01183.html</filename>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a32040d5a47ef3f588891b82f44573232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2cefec5592c74d499ea17e95b7c924af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af0ea13ace8b97f38dfcfa438c6633192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafValType</type>
      <name>val_t</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a3d1dd240bb11c4f8f3b9984d958a3992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementPllXIF_t</type>
      <name>ItemType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a21331e6aac24a1c5e34ce1f6fae1ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a7689d2c1ab11aa4736a0ef48edb8bcd1</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ab47e0d89374dad76af733d86ef7e65d1</anchor>
      <arglist>(const ALU3dGridGhostIterator &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridGhostIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a816e38fb16ca9e68f958d36d018bce11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>adaffa665dc27a4831a04851cfd23e29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2414e4b56ac61942cb56e28235cec25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aaab308135532b53f36a8e76f94354c2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad12a24128838b0a291ecfab5de4f0bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1aebe97cb01ac54e6e5131b184828872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALUHElementType&lt; 1, Dune::ALUGridMPIComm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a98d47da01cf54e8e75a6e4a4dce964ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LeafLevelIteratorTTProxy&lt; 1 &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aee6f807e6a30bb76a827976894310211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; ElType &gt;</type>
      <name>InnerIteratorType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1605956b030a0fb4fbef7dae53076002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual IteratorType *</type>
      <name>newIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1522bec8810ee19ae80726c9a77a075f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeIterators</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1857a0c7358da477b866e5081caeea92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af69f89a186f3d21f9d864bd3d44f9ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkInnerOuter</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aef4fc61c1290d3d25ec247de07c66a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>checkLeafEntity</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1fcef634acf82562885b4cf17b2903d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GitterImplType &amp;</type>
      <name>gitter_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a7061f50a93344a35e44a3715ceeeac6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorType *</type>
      <name>iterTT_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ae756f251f7e49ff5e033bcd066baaee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InnerIteratorType *</type>
      <name>it_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad8c2442cb8e156af513ada56cc733f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>nl_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad74ce35a2f982ba10300c828f5131111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>link_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a790249e0968885446acea1e14f1181f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usingInner_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ab9a2274f497eb35788241b2b1d083cde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridGhostIteratorHigherCodim</name>
    <filename>a01211.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a230fb6f82c21570fbb7838467c901328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a438f3a8990dab68f1e5b4fb232bd3220</anchor>
      <arglist>(GhostElementIteratorImp *, const GridImp &amp;grid, int level, const int nlinks, GhostItemListType &amp;ghList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acb4c9d2b9e1ce3f2e3e35393c8fe3a2c</anchor>
      <arglist>(const ALU3dGridGhostIteratorHigherCodim &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGhostIteratorHigherCodim&lt; 1 &gt;</name>
    <filename>a01211.html</filename>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a230fb6f82c21570fbb7838467c901328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a438f3a8990dab68f1e5b4fb232bd3220</anchor>
      <arglist>(GhostElementIteratorImp *, const GridImp &amp;grid, int level, const int nlinks, GhostItemListType &amp;ghList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acb4c9d2b9e1ce3f2e3e35393c8fe3a2c</anchor>
      <arglist>(const ALU3dGridGhostIteratorHigherCodim &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGhostIteratorHigherCodim&lt; 2 &gt;</name>
    <filename>a01211.html</filename>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a230fb6f82c21570fbb7838467c901328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a438f3a8990dab68f1e5b4fb232bd3220</anchor>
      <arglist>(GhostElementIteratorImp *, const GridImp &amp;grid, int level, const int nlinks, GhostItemListType &amp;ghList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acb4c9d2b9e1ce3f2e3e35393c8fe3a2c</anchor>
      <arglist>(const ALU3dGridGhostIteratorHigherCodim &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridGhostIteratorHigherCodim&lt; 3 &gt;</name>
    <filename>a01211.html</filename>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a230fb6f82c21570fbb7838467c901328</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a438f3a8990dab68f1e5b4fb232bd3220</anchor>
      <arglist>(GhostElementIteratorImp *, const GridImp &amp;grid, int level, const int nlinks, GhostItemListType &amp;ghList)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridGhostIteratorHigherCodim</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acb4c9d2b9e1ce3f2e3e35393c8fe3a2c</anchor>
      <arglist>(const ALU3dGridGhostIteratorHigherCodim &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridGlobalIdSet</name>
    <filename>a01639.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridHierarchicIndexSet</name>
    <filename>a01647.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridType::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>EntityCodim0Type</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a868a3d3a4abfe9312e4f5dfbbb2d1e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a60e2f767bd700501e0167a124ed66144</anchor>
      <arglist>(const EntityType &amp;ep) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a783b474ece6708794f8e7a1437cab64d</anchor>
      <arglist>(const typename GridType::Traits::template Codim&lt; codim &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a980dddd417e15fae7e31b3f2d4b6ca48</anchor>
      <arglist>(const Entity &amp;entity, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>afe815c7f6eb49bf0c2b11c8ebfa158ad</anchor>
      <arglist>(const typename GridType::Traits::template Codim&lt; cd &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a0d91169596c819e869210d3d390bbb89</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a2bc50b1985ecfa8478c3f0d28e57d70f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>af02da5fc6ed5ed135ad3a90d5c941315</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a4df0c8906e5c0933b95187005263b36e</anchor>
      <arglist>(const EntityType &amp;) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;</name>
      <anchorfile>a01647.html</anchorfile>
      <anchor>a9319c342deece21c25ef0f88c69b3ea9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridHierarchicIterator</name>
    <filename>a01455.html</filename>
    <templarg></templarg>
    <base>Dune::ALU3dGridEntityPointer&lt; 0, GridImp &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>ab8144c006b8c7a605f06ce2cf7d042f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a614b32c6e4a7f01bd1cc7de6aa9e28c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a7922f93ab8571212e25061cc13d4d6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisType</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aab08231158d25b5a354953b767a86fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridHierarchicIterator</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a42f012442ab0187549860273daef2794</anchor>
      <arglist>(const HElementType &amp;elem, int maxlevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridHierarchicIterator</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a67ded1534ef793390e42ee2b84b718d1</anchor>
      <arglist>(const HBndSegType &amp;ghost, int maxlevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridHierarchicIterator</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>ac9bfd96c1c4fb8796d8ebe5abaa84e00</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridHierarchicIterator</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>abed4dc8c8e5fa292a27a7c805521c352</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>af3887e75736f82f3da4d1d18387d81f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseEntity</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a68a47c9d0d041d3a5002a7f1c2bbda8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>adb4288469af8e0ef4f00d8ef1406e8e0</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline HItemType *</type>
      <name>goNextElement</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a8c71682cb168aafb3866954e355ba8a9</anchor>
      <arglist>(const HItemType *startElem, HItemType *oldelem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af99db6c8d6f9d055ff067e34e3d8059fae8b0dd45541102de9a46ae65c939e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>aa8d753cd18ad0f5cc11abebe1aef57dcab42167436fc638533c96fb3a6b324145</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a4d588c9ed8ac5cc82b173bb7fed4e535a24c8fd95f75106861c8f9fd95fecf9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntityPointerBase&lt; 0, GridImp &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af3b4282c0388e07432610e6e7903ac77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a305334463afd479db3ec774cc45c7680</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>adec0c593b79f9a991531cdd280221eed</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>cd</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>af99db6c8d6f9d055ff067e34e3d8059fae8b0dd45541102de9a46ae65c939e932</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>a4d588c9ed8ac5cc82b173bb7fed4e535a24c8fd95f75106861c8f9fd95fecf9bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridIntersectionIterator</name>
    <filename>a01459.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUTwists&lt;(dim==3) ? GridImp::elementType==tetra ? 3 :4 :2, dim-1 &gt;</type>
      <name>Twists</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>abfd557961f27fa1441aa409bb51a9ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ad85cf7bb55de9ec44c2e2bf07cb7f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a033e7f4b11b02997fbbf26333e685931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aa72363462939e4d5040f3ba242f86e94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3765e61b10a4d01e192005ddeed63848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6f0a6f0867c2403939e5eed6babc8902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridIntersectionIterator&lt; GridImp &gt;</type>
      <name>ImplementationType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a04f2fd5b4965aa16133f690f1adba656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, Dune::ALU3dGridIntersectionIterator&lt; GridImp &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aef7d6c7f62bd09fe4d3060b5b67623af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ac1df8e7ecc537e44c8aa5acc30afe42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridIntersectionIterator</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a99dd738bb84dad85a4ef1bf29196d9a2</anchor>
      <arglist>(const bool levelIntersectionIterator=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridIntersectionIterator</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a93b30004cb19f0fdb9b42fd60e438ed3</anchor>
      <arglist>(const ALU3dGridIntersectionIterator&lt; GridImp &gt; &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ac415b7602768c55922ef910c29a390bb</anchor>
      <arglist>(const ALU3dGridIntersectionIterator&lt; GridImp &gt; &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a72d748c1fafe3cd86326307cfd8c289e</anchor>
      <arglist>(const ALU3dGridIntersectionIterator&lt; GridImp &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a5808d2c424043bf3e2e9f1fb5b9a2255</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EntityImp</type>
      <name>outside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a26a1cb3f18bd7d869aa813b256efe353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntityImp</type>
      <name>inside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a74e1e8dfe766b33f45f7d19498482793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>af0c1a324f645a431f1696b0f385eb0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ab8f880b73a80862f505283522db1ab00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a270d9b90230bab82911e8a4f1297112d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a13b63f39ce7fd766fdc847586413d68c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3136eae0980dbd51c5c9b2bcfcd7c213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a912c9fd386691e7dee417b094f522cc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6852f10131d01dc96c602e5c3b94abc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>abb384d9f3758609b90b742857cfe6da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>afc1141dcdf4bb6d546a155251d12317e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6420464f31381d3e0288b90faf96b2d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a080e88ac9cb49e64201b9a6061c05483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a302b00c902ab61fb2d30881267e5b2eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ab2a49ee2be28b1bb54742b2f16dfcb7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a134bbe05251617dde6161ba2ddd0b5fb</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a56f8f6a7eb1538563c46a6a67ced2eb3</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a0e26eabcc06422ea5901cbbc4b82cc96</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a292451896e97f79a9a0efa1df8ca9ea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outsideLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a11aaf02e8ca33d0dfa78281d4fa7650d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae28613fad1349196199c0a9b69c2ea60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOFaceType &amp;</type>
      <name>getItem</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a13d68735df3ca46f34fb67a215ff0f46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae42d7d889289015b98daf98850992e9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a9ffd04f7a4f0862c834129aa00d84589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a4cf4c1e97053001549053bbb2c8af8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>IntersectionIteratorType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLeaf</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71a1b389c3cf8a27d34ee70c466f3936a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aaa57d4cfe3155d55989b50e4bf8121fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionBoth</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aacc076411e032593e65b7c6fa167b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::Traits::template Codim&lt; 1 &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae0d626472171ed3d8d666a1d827e0597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::Traits::template Codim&lt; 1 &gt;::LocalGeometryImpl</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3c3ad663d79075b82bc3918403509ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLeaf</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71a1b389c3cf8a27d34ee70c466f3936a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aaa57d4cfe3155d55989b50e4bf8121fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionBoth</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aacc076411e032593e65b7c6fa167b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a62708b0b1410e7a97d4e86bb4a666e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a35e862e372c04a3a96d040a4476329b5</anchor>
      <arglist>(const EntityType &amp;en)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setFirstItem</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a5d5efed615b28b768f3d71c5821e94db</anchor>
      <arglist>(const HElementType &amp;elem, int wLevel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setInteriorItem</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a13c45f57561da54c94894db864e4e20d</anchor>
      <arglist>(const HElementType &amp;elem, const BNDFaceType &amp;bnd, int wLevel)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a9dfb01e5606d5d7a561755f4b4ab9558</anchor>
      <arglist>(const EntityImp &amp;en, int wLevel, const GridImp &amp;grid)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNewFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aff00782501be0530f3411bd4bbadf308</anchor>
      <arglist>(const GEOFaceType &amp;newFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildLocalGeometries</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>afba23ab8c4b44ff11d0c044fbd37e06d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; tetra, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aa1032076811b21ac9e8ec71773e52536</anchor>
      <arglist>(const GEOTriangleBndType &amp;bnd, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; hexa, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a03c3dcfef3351e29bdca3dd256b4e54c</anchor>
      <arglist>(const GEOQuadBndType &amp;bnd, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; tetra, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a1839054f8753e5f30bd5f78341284833</anchor>
      <arglist>(const GEOTetraElementType &amp;elem, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; hexa, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a870841fdf8ee965f2a4d99040feb5117</anchor>
      <arglist>(const GEOHexaElementType &amp;elem, int index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceInfoType</type>
      <name>connector_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aaf4773876520e99a94fd14bb51b88351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryInfoType</type>
      <name>geoProvider_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6256071b4139991f5fbb44f2161796ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IMPLElementType *</type>
      <name>item_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae1dcd2dd008681cc40f9f7a6cf205431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BNDFaceType *</type>
      <name>ghost_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3595c48d4ff7fe43cfcdcc8d03ac3e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a8b7f1ada7019f6ddd0d70d4e7fe06567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>innerLevel_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aa0119d2e7d83fdc9d4935c539bce1f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a490c490d55da63760d76759215308ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryImpl</type>
      <name>intersectionGlobal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a607ce8b428c118a10eac31550370eea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalGeometryImpl</type>
      <name>intersectionSelfLocal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>adb80897d2c28177e8662d5597404697c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalGeometryImpl</type>
      <name>intersectionNeighborLocal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a0d630b81a20d08634dc822de3a11b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NormalType</type>
      <name>unitOuterNormal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>acd5981156faf0177e72dd925317953f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntersectionIteratorWrapper&lt; GridImp, ThisType &gt;</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ad38cfba0887e9eee11064e131443b49b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridItemList</name>
    <filename>a01095.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; void * &gt;</type>
      <name>ItemListType</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>afcbaf79949bd220a4d84a97b06cf960b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ItemListType ::iterator</type>
      <name>IteratorType</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a1cecebdb4f76a5c34800831497f73636</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridItemList</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>ac064851c6b1b19abcf1822f41f3ded36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aa37d059ebf1bb0aa6f521699fdc9543a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>up2Date</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a37153904f919b45140d42282468222a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetUp2Date</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aef8b8296c965c7f16eb5df647222c506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsUp2Date</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a449fabc1f911b6a43ddba994f1225e3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>begin</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>aa72666d80963bc7c7d65595523a5e7b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>end</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a6719c89b714654b1571ab2c765813c6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ItemListType &amp;</type>
      <name>getItemList</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>a3b5fc8356761b74be06bc6542f24e19b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridLeafIterator</name>
    <filename>a01463.html</filename>
    <templarg>cdim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <base>ALU3dGridEntityPointer&lt; cdim, GridImp &gt;</base>
    <base>ALU3dGridTreeIterator&lt; ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, GridImp::MPICommunicatorType &gt;::val_t &gt; &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cdim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a185c143d7896cb9162201a1f500139c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>aefac1ce558918b184592e9c1803e904c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorSTI&lt; val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a1b63dd9742fd7f09a80c1b54656ac758</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorType</type>
      <name>InternalIteratorType</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a328e5a649b17283c29033db3a4f12ed4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridLeafIterator&lt; cdim, pitype, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a0c4066af1003af45d7f5d42cb6c2a329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7b26b654c8c361d06d7cf81229f33bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a98b47a111cb7fe38919e22f8b94d4257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIterator</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>ab4250e36e23e978f900376a0a2c23b84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIterator</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a6414a2ead5d4f943e884fcde49a26920</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIterator</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a5f826fbdcd2e15aa7b3ff7bdd94dd132</anchor>
      <arglist>(const GridImp &amp;grid, int level, bool isBegin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIterator</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>adb30863722317ee8b88dc078d488031f</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridLeafIterator</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>adbc32e256b291f845a75c3fc50a14043</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a1d7f36d4461223093480b07ca50ce533</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseEntity</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a5e3879611f8cfc4c31ed2201cddce8be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a7676556a8b2c7579be92a7d49837dc81</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a47a2999b1bb098f8573dd6a5b561402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7374ede809eeedb4ad9704a3e345b833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ae7e52c48b56ca1c37bc0caae59636b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aedf60e9733cea37ee2657311b7118adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a75f942d288d76dcc30eaae3137beb6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a65f54f8535d3727f651e87b66a01727bab910c91db684b1b08c2f0531f56d93a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad80d6c5e05b734c8d0c144d02536d9fd</anchor>
      <arglist>(HElementType *item, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>firstItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a60e03b654383a308b067c074267107e1</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ab071127f5434ad36ac679af02259d646</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, GridImp::MPICommunicatorType &gt;::val_t &gt; &amp;iter, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementIterator</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a48d0388a5bc5341efa8cbce2a8c46271</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a2479660b2c4831725399196f3ef22e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; cdim, dim, GridImp &gt;</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>ab3fea3f21be74b1dc60cfff085dbceda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGridTreeIterator&lt; IteratorType &gt;</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a99f0da09f9080493af730dc9a2ebdc7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper</name>
    <filename>a01151.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01255.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a65242191372dd941f864e2575a3582c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a4f607207d6ea73ddfbfca65a27ed1f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a4891058ac80941ff9d50f61aa1d5d0f1</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>abfeb1585e44e3ca2f0c074394b383e1c</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a9ee4ac31377e6aeac314e1b1c2242366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a59f6f2e63195513d62aacdda2ac3fc80</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a5b9c0ea8b81b6623eb87665ad0157e36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>aaf982b45e9b9725256a1e6828579ae59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>ab7973a026bf92339a43f82fbdf54202c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>ac1782e7598c3e1882415f6b1de7cc9ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>af8682df3953d94b011ee35e1599b2c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01255.html</anchorfile>
      <anchor>a894e3bf33f6007ae7a6bbb862c41735f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01187.html</filename>
    <base>ALUGrid::ALU3dGridGhostIterator</base>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a32040d5a47ef3f588891b82f44573232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2cefec5592c74d499ea17e95b7c924af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af0ea13ace8b97f38dfcfa438c6633192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafValType</type>
      <name>val_t</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a3d1dd240bb11c4f8f3b9984d958a3992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementPllXIF_t</type>
      <name>ItemType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a21331e6aac24a1c5e34ce1f6fae1ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ad903d9ed02d9139dd3b46ef09c0802a3</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>ab415a0acc8887ac0c8b4d2ec25dd8eb0</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>acd030051c4eb6eee36bf49c3a0194c2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>adaffa665dc27a4831a04851cfd23e29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2414e4b56ac61942cb56e28235cec25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aaab308135532b53f36a8e76f94354c2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad12a24128838b0a291ecfab5de4f0bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1aebe97cb01ac54e6e5131b184828872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LeafLevelIteratorTTProxy&lt; 1 &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>aa016ea0fe7ca0a31de0b93be53cbcfce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a60360c811f9d585119d87453980fcf56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>abf25efe11d4d41fa494096ea41eb06ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALUHElementType&lt; 1, Dune::ALUGridMPIComm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a98d47da01cf54e8e75a6e4a4dce964ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; ElType &gt;</type>
      <name>InnerIteratorType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1605956b030a0fb4fbef7dae53076002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IteratorType *</type>
      <name>newIterator</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a332f7976448b7296584e65658a95cfab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkLeafEntity</name>
      <anchorfile>a01187.html</anchorfile>
      <anchor>a42e361fb324c42dfc244de322bb0571b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeIterators</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1857a0c7358da477b866e5081caeea92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af69f89a186f3d21f9d864bd3d44f9ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkInnerOuter</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aef4fc61c1290d3d25ec247de07c66a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GitterImplType &amp;</type>
      <name>gitter_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a7061f50a93344a35e44a3715ceeeac6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorType *</type>
      <name>iterTT_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ae756f251f7e49ff5e033bcd066baaee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InnerIteratorType *</type>
      <name>it_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad8c2442cb8e156af513ada56cc733f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>nl_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad74ce35a2f982ba10300c828f5131111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>link_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a790249e0968885446acea1e14f1181f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usingInner_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ab9a2274f497eb35788241b2b1d083cde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, pitype, Comm &gt;</name>
    <filename>a01155.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 0, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa3039645fac1945d8f5526abf5e0e859</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a126ea0c7561f5f04d99bd71f14e1cb2e</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int links)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af0be6e64d6f27b7c6a92e6db641560aa</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a293e76be42ee90d00225866bd8ac470f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a06df5a37c263cfff7e7d2e2fa0f8fc50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a41760cd9d52036203a45cfac5f91873d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a49d31930445dd7b64bf6c9f9661acb9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>afac88e39a651d56ad21614c749ebda62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a36953a8f20460da8f5d9e895bf119fe9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8c2e42a18a4f7e14c01b4a96c23985ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 0, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa6506eef857a77b8e4b44c883ab1f68a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01259.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>aa24b508f97de93146b7baa74a1d932bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a78e5c14d87bc42158204ada22f9172dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a0da319f5ace6333570760043143a605a</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>aa0df3a12528065b5bb8bb2253bc731ec</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a64341651773ea9904845d98c12a4ce10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>ab685b42dcf6d329ccd82c183f50a76fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a9a58a7172f636f66d40b384bd9dbd764</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a6db461c709d9057a7b097159986f7e7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a15b18d8338bf0310865054efcfacbe9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>aee9201b48dd480579b0e8ea20f8a6629</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a13f308e4b4de602e3d750828de1a8156</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01259.html</anchorfile>
      <anchor>a8d41d1e3f6f9916a47c1d518da940491</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01231.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 1 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 1 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>aef86ef8c52a6f2f65309424e01629b92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>a3d4957be07de3f001f6079f5f26d2a84</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>a4edf23b5a866ff786d87f69ec3d7416a</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>a8bb110cae4f6941b3d7a6c7b2f48ef22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>a2fcb2b1292eaa03df2f31cb23003707d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01231.html</anchorfile>
      <anchor>a225bc76131a9da18a8b45f291e66b74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, pitype, Comm &gt;</name>
    <filename>a01167.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 1, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a8e43ed7ee236950fa98ef50e27bbe8e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>aa796ad1520f7f739c370e7230cb2fd67</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int links)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a14b12460acf6b944da85437d430cd2d4</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a742205b9af416be318c3299668b309b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a41b34357c75b1ea47b374aebdb7b5328</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a5383f609930fbe9533bb84b4c80d34eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a6795a3d9d29d0376c868c44297407b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a3408a342c94fef553d33e3c8a37cec5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a13d440e695f63175262f5e43f7edb58b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>aab7ff163466e323154626d458b3ce3f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a318eca275141b2757a046b1329b293ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 1, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>a96d33286ca4a6b6cbe82054985efd019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01263.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a2f86579c2ed19494a66095a2be9508da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a10268a4d9fc7f92dbce49979af0b446d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>ac15322a9549a555f8df432e78e14c873</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>ae6d78beb712356b2d483edea907f2c9e</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a3ef2cac130a7c1987b45f018fabfc18d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a006da0a4e160b1c18a77ffeed9c7bcab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>aa7dbf96ac88685f6cc83d01f276a535a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a5bb2f3c66966503e308ddfb46bc6ba72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>aa4dc2709baf677476411d193d7089095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a16433006c9e4daab3254c39be081aae3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>ad47fa5b02f2cc96a31c2ea7f72cb8d5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01263.html</anchorfile>
      <anchor>a5c3c6ad6d082dfaf2a3b2a1db8d0d6f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01235.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 2 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 2 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>a34c10595499563ed55d8d281ffcf9c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>a89a9d7c87887ebbc1ab276d42abb7ff8</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>ae558e2fb244b16351bea0cd0f64316be</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>a6a4c70dcb98a1fae0f85dc8f775f5847</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>aeca45ec505ab00eed185a92176a7b679</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01235.html</anchorfile>
      <anchor>a37f377550f12f47b4855c7485fb43f2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, pitype, Comm &gt;</name>
    <filename>a01171.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 2, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a4416251dd9c99cec88e4b48bec012f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>ad5e9b5477f4930171abb47dc7bb48f13</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int links)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a3f8ed93794e8421058ceabc89dfd9b16</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a8b077252981e0ab04271516a54e83b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>ab2cfdc364f8097b9b1b5b7e3c5be947b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>abc1410cebc96e3b2a8e4eb0d9fed9078</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a7acb431fca68a38426626c75c5e32965</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a04566e388a97fa071e92b93b965a74fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a5e313a766553a1aeb81d4b5520cafeec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>ab2799b1ae02fe2eea14b8904b6efcda0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 2, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>aa4fddbbe6aecd041dbfb05ddaaef9416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01267.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a75bdb3abd0d42e9a683c58c25eabcda8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a4a98ef17e41e1958b434a39b7da4c632</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a28bbb2b92cbc862d4801af4ed67a14da</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a9e60b35b94dca82d76083bc5934f24d3</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>ac6aca49263a2d571a8bb70d2091ddc63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>aac49a156b39d0f521c442eaf1ba1f9fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>ac17662797b3f5d53d896603365ca2df6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a7d28de685716e91a2962595b9e4d8d47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a8275520343d625f71bb98bcba4a9f489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a70b35cbc28dd5652745490bf739660d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>a827de348d2e3b1d226ec08a843f7c77a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01267.html</anchorfile>
      <anchor>ac5391f230c2007ec0800ddfafa1f3f9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01239.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 3 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 3 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ab2820c1e5b2126b2d3dce57f617506e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a664acfa975477b48b9874a7a516cf8ca</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aea05ea54800c8bc2e0bffbf701c3c9e0</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a9ab4d13994dd6199594ef79c04047f39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a0b82b7bba48a387f84bb3ed75dbb8e82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a526ed80e047132e521da7c92283cbd92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, pitype, Comm &gt;</name>
    <filename>a01175.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 3, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>af3a9b80e88863062d11ae9476745097a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a93e2bcf2ef18202aeac7dd41bae10460</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafIteratorWrapper</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a8a2439f29adf572ea05a3121ad918b3a</anchor>
      <arglist>(const ALU3dGridLeafIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a63690f7c1a6725be846e464d31289f51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>abe8df7c06ec49793d19265edfad1ff7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a62c4402b65e4257320c02d30cc100d68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a41dfd90f4fa25e774c52d7ec31a20a13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>aa9361fe14de65583719039d305e7470c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>ac7209abde5ec92493eb6b67c7da54a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a99857011c80c8f865d3f676fa907f3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLeafIteratorWrapper&lt; 3, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a4cfe746544210951ecde13d988a616d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LeafVertexListType &amp;</type>
      <name>vxList_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>ae110f99c07776c4edf694b2e6a5c8bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>val_t</type>
      <name>elem_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a5dc7ec04213e0b607e0e20ba59f42b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>af5a0e38fd27efdac00d31ff881d22b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>size_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a1f96fb8b69f4209c84e4c1165278bf8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const StopRule_t</type>
      <name>rule_</name>
      <anchorfile>a01175.html</anchorfile>
      <anchor>a9187a151c10d5fbd38ebac61cc901bc8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridLeafVertexList</name>
    <filename>a01091.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::VertexType</type>
      <name>VertexType</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a0afc93110c7c43cf2725af4a929208f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; VertexType *, int &gt;</type>
      <name>ItemType</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a132d0de07aea3f4fd0d17c1602e40e12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; ItemType &gt;</type>
      <name>VertexListType</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>abcbf1fdf0945e150738fc9ef55b61e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexListType::iterator</type>
      <name>IteratorType</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>acfa3f78f5140f3afe37d11779cc711ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLeafVertexList</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a1bac47b2349ff222a813d33b9cee2d91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>ae178d415887c3a6478a7a52e2f0ffdd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>up2Date</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>ada925093a67f9d5f637b1b71e9a6cb39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetUp2Date</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a79dc1d6742d2499a5c870bb07c8ced97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupVxList</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a3242510b8ae948f81b5f779af3cae8f8</anchor>
      <arglist>(const GridType &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>begin</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a80c170d29878fd3792b1905862a9d3d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>end</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>ac44ee7befc54d5d3eae5ec941914a194</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexListType &amp;</type>
      <name>getItemList</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a8d5ca3ae4ecac74946e48c0b6f1b6f67</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getLevel</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>ad2b7958488a882ffce3a7213803bcc95</anchor>
      <arglist>(const VertexType &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>setupVxList</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>a931bf85de3ef4fd46dda40517b0d0e40</anchor>
      <arglist>(const GridType &amp;grid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridLevelIntersectionIterator</name>
    <filename>a01627.html</filename>
    <templarg></templarg>
    <base>Dune::ALU3dGridIntersectionIterator</base>
    <member kind="typedef">
      <type>ALUTwists&lt;(dim==3) ? GridImp::elementType==tetra ? 3 :4 :2, dim-1 &gt;</type>
      <name>Twists</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>abfd557961f27fa1441aa409bb51a9ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ad85cf7bb55de9ec44c2e2bf07cb7f904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a033e7f4b11b02997fbbf26333e685931</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3765e61b10a4d01e192005ddeed63848</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6f0a6f0867c2403939e5eed6babc8902</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridIntersectionIterator&lt; GridImp &gt;</type>
      <name>ImplementationType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a04f2fd5b4965aa16133f690f1adba656</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, Dune::ALU3dGridIntersectionIterator&lt; GridImp &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aef7d6c7f62bd09fe4d3060b5b67623af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ac1df8e7ecc537e44c8aa5acc30afe42f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIntersectionIterator</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a4f1ad8de618b23e35b406c6dbd0e592f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIntersectionIterator</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a1396fba2e1563c20bb66355bd33055c6</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a77dda530796a33d9c4ad45929aa06379</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a47476740ff6524808a55e4e58c88ba7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a774d8649577ae29718119e4ef14dbdaa</anchor>
      <arglist>(const EntityImp &amp;en, int wLevel, const GridImp &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a5777b20d0083c8d8182d259ee9cf8073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>ae131755f8e89cf636103c047124f2949</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a72d748c1fafe3cd86326307cfd8c289e</anchor>
      <arglist>(const ALU3dGridIntersectionIterator&lt; GridImp &gt; &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>EntityImp</type>
      <name>outside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a26a1cb3f18bd7d869aa813b256efe353</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntityImp</type>
      <name>inside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a74e1e8dfe766b33f45f7d19498482793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>af0c1a324f645a431f1696b0f385eb0ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a270d9b90230bab82911e8a4f1297112d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a13b63f39ce7fd766fdc847586413d68c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3136eae0980dbd51c5c9b2bcfcd7c213</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a912c9fd386691e7dee417b094f522cc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6852f10131d01dc96c602e5c3b94abc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>abb384d9f3758609b90b742857cfe6da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>afc1141dcdf4bb6d546a155251d12317e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6420464f31381d3e0288b90faf96b2d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a080e88ac9cb49e64201b9a6061c05483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a302b00c902ab61fb2d30881267e5b2eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ab2a49ee2be28b1bb54742b2f16dfcb7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a134bbe05251617dde6161ba2ddd0b5fb</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a56f8f6a7eb1538563c46a6a67ced2eb3</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a0e26eabcc06422ea5901cbbc4b82cc96</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a292451896e97f79a9a0efa1df8ca9ea8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>outsideLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a11aaf02e8ca33d0dfa78281d4fa7650d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GEOFaceType &amp;</type>
      <name>getItem</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a13d68735df3ca46f34fb67a215ff0f46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae42d7d889289015b98daf98850992e9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a9ffd04f7a4f0862c834129aa00d84589</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a4cf4c1e97053001549053bbb2c8af8d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration" protection="protected">
      <type></type>
      <name>IntersectionIteratorType</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLeaf</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71a1b389c3cf8a27d34ee70c466f3936a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aaa57d4cfe3155d55989b50e4bf8121fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionBoth</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aacc076411e032593e65b7c6fa167b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::Traits::template Codim&lt; 1 &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae0d626472171ed3d8d666a1d827e0597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::Traits::template Codim&lt; 1 &gt;::LocalGeometryImpl</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3c3ad663d79075b82bc3918403509ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLeaf</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71a1b389c3cf8a27d34ee70c466f3936a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionLevel</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aaa57d4cfe3155d55989b50e4bf8121fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>IntersectionBoth</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a67ef1b706e681d6f49771ed800930c71aacc076411e032593e65b7c6fa167b8e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a62708b0b1410e7a97d4e86bb4a666e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a35e862e372c04a3a96d040a4476329b5</anchor>
      <arglist>(const EntityType &amp;en)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildLocalGeometries</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>afba23ab8c4b44ff11d0c044fbd37e06d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; tetra, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aa1032076811b21ac9e8ec71773e52536</anchor>
      <arglist>(const GEOTriangleBndType &amp;bnd, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; hexa, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a03c3dcfef3351e29bdca3dd256b4e54c</anchor>
      <arglist>(const GEOQuadBndType &amp;bnd, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; tetra, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a1839054f8753e5f30bd5f78341284833</anchor>
      <arglist>(const GEOTetraElementType &amp;elem, int index) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ALU3dImplTraits&lt; hexa, Comm &gt;::GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a870841fdf8ee965f2a4d99040feb5117</anchor>
      <arglist>(const GEOHexaElementType &amp;elem, int index) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceInfoType</type>
      <name>connector_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aaf4773876520e99a94fd14bb51b88351</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryInfoType</type>
      <name>geoProvider_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a6256071b4139991f5fbb44f2161796ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IMPLElementType *</type>
      <name>item_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>ae1dcd2dd008681cc40f9f7a6cf205431</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BNDFaceType *</type>
      <name>ghost_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a3595c48d4ff7fe43cfcdcc8d03ac3e2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a8b7f1ada7019f6ddd0d70d4e7fe06567</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>innerLevel_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>aa0119d2e7d83fdc9d4935c539bce1f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>index_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a490c490d55da63760d76759215308ee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryImpl</type>
      <name>intersectionGlobal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a607ce8b428c118a10eac31550370eea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalGeometryImpl</type>
      <name>intersectionSelfLocal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>adb80897d2c28177e8662d5597404697c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LocalGeometryImpl</type>
      <name>intersectionNeighborLocal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a0d630b81a20d08634dc822de3a11b40c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>NormalType</type>
      <name>unitOuterNormal_</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>acd5981156faf0177e72dd925317953f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IntersectionIteratorWrapper&lt; GridImp, ThisType &gt;</name>
      <anchorfile>a01627.html</anchorfile>
      <anchor>ad38cfba0887e9eee11064e131443b49b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridLevelIterator</name>
    <filename>a01443.html</filename>
    <templarg>cd</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <base>Dune::ALU3dGridEntityPointer</base>
    <base>ALU3dGridTreeIterator&lt; ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, GridImp::MPICommunicatorType &gt;::val_t &gt; &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a51fae9d2d287be57877018663f8e2aa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridVertexList&lt; Comm &gt;</type>
      <name>VertexListType</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a66832902e85fa6673dcc2cf082c822fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridLevelIterator&lt; cd, pitype, GridImp &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a997ed5e479cf27ef77181e5a5a8f1dff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a0a9d72bebd9b20889e92829436cd12d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorSTI&lt; val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ac255d759084be472f9c6b9b5563538ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorType</type>
      <name>InternalIteratorType</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>af26650e5c32b043cda77f0f1e484ebbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntitySeedType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7b26b654c8c361d06d7cf81229f33bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; cd, GridImp &gt;</type>
      <name>ALU3dGridEntityPointerType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a98b47a111cb7fe38919e22f8b94d4257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Entity</type>
      <name>EntityObject</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>afe6a0035a361e1ed1b87670a2be6508e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; codimension, dim, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ae7358f527ccc532dcb9edcf1dcfadee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntityPointer&lt; codimension, GridImp &gt;</type>
      <name>EntityPointerImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a975b05114290993697b8ca6c95db3648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>aa6499f11fe66b16ba80615226d4a4248a91c3019a4b5cc1b7f247403ecc1efd79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ad8d64f103809e09094ddf5620d895a0e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a44ede569621ac6c812c0b2b352aeba56</anchor>
      <arglist>(const GridImp &amp;grid, int level, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a82221e9cd0ddfffc3508f12e85174ec8</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a762e75b7366a49f1e41021d8437af9de</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALU3dGridLevelIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ac1daf8fbbd027204344953bcd4dafe5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a0aa516ad0585319233b620dca7f05a5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>releaseEntity</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a3c38ed139f7396182422cbefee4409b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a6848e3b24ae4a1b101f747b6c0034890</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a63daa87cf9be5bf1fe1aa2cb71b32a25</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a7d3094c2250c9495d85ef41455cdd37c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a2bcd15f9150b116f684b12b5cf72bbe0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad1ebbe945c298379bc49a3eb3974ac9baa4eb87a109259bb9be45b68b8c091fd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a65f54f8535d3727f651e87b66a01727bab910c91db684b1b08c2f0531f56d93a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a47a2999b1bb098f8573dd6a5b561402b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dim, cd &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a7374ede809eeedb4ad9704a3e345b833</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ae7e52c48b56ca1c37bc0caae59636b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::BNDFaceType</type>
      <name>BNDFaceType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aedf60e9733cea37ee2657311b7118adb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridEntity&lt; cd, dim, GridImp &gt;</type>
      <name>ALU3dGridEntityType</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a75f942d288d76dcc30eaae3137beb6c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ad80d6c5e05b734c8d0c144d02536d9fd</anchor>
      <arglist>(HElementType *item, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateEntityPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>af46b6eefa9c61a187e8753e17682e211</anchor>
      <arglist>(HElementType *item, int level=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>clone</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>add2d43bc94e76901ed71bef5741403e8</anchor>
      <arglist>(const ALU3dGridEntityPointerType &amp;org)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>done</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>ad519c0f1bb7f0f9c2d69d298dc02add6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostPointer</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a03b52aa88891c085278880d514cebfca</anchor>
      <arglist>(HBndSegType &amp;ghostFace)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityImp &amp;</type>
      <name>entityImp</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a451d5e7aeca960b23d45c6d7baa8c5a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>firstItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a60e03b654383a308b067c074267107e1</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ab071127f5434ad36ac679af02259d646</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, GridImp::MPICommunicatorType &gt;::val_t &gt; &amp;iter, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementIterator</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a48d0388a5bc5341efa8cbce2a8c46271</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3dGridEntitySeedType</type>
      <name>seed_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a546c8a7fb98eb95d5ffd438eccf66c98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityObject</type>
      <name>entity_</name>
      <anchorfile>a01483.html</anchorfile>
      <anchor>a6eff236e57d2cac4f599756e168afd44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>defaultValue</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a2479660b2c4831725399196f3ef22e04</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 3, dim, GridImp &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a73ddc145aa718afdb3b94155d2589cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 2, dim, GridImp &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ae29b298cb3dcc99071f6077a3b2a7894</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 1, dim, GridImp &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aefd96cb0e8a4789486b5aad788b3d2fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a6fb8b0c9a2e9dd1e9edbe374a59a05b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGrid&lt; dim, dimworld, GridImp::elementType, Comm &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a012b714a68be2fe21f05cccf56a780d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ALU3dGridTreeIterator&lt; typename ALU3DSPACE IteratorSTI&lt; typename ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, typename GridImp::MPICommunicatorType &gt;::val_t &gt; &gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a9e219a3b82c5c55d2fb30f96630ae05b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper</name>
    <filename>a01135.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01271.html</filename>
    <member kind="typedef">
      <type>LeafValType</type>
      <name>val_t</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a762664031484c10dcabd1b139db76b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a377e49830674add349eda1e9deee65b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a2979d4cbd7d92427b1291b03027fd070</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a3a433ac220538e54538d8233be2d28e1</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a26e39c8e7b02c84680bbfdad7fef9f6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a05bb3338e7cd0bbd6065a64bc7c2fd2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>aced701368129996561256e96a13faf9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a911f86b7b7e0b261b9b95abce389cd18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a7a14f3cdd3e442c84cdb0723013bdf47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>ad78332a534c234b9f836a8ca802ee10e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>ac84ba77adf759df7c77b7e33dbf54c72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01271.html</anchorfile>
      <anchor>a71d5a584473737141922e568cc964eca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01191.html</filename>
    <base>ALUGrid::ALU3dGridGhostIterator</base>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a32040d5a47ef3f588891b82f44573232</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2cefec5592c74d499ea17e95b7c924af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af0ea13ace8b97f38dfcfa438c6633192</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LeafValType</type>
      <name>val_t</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a3d1dd240bb11c4f8f3b9984d958a3992</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementPllXIF_t</type>
      <name>ItemType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a21331e6aac24a1c5e34ce1f6fae1ad2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>aa7de2257288d4ca480a9dddd2d7bbe3e</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a0583b7bde9a447b8265a11fb85f5a50d</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a2a6c7535f8e66bd6a9c722a3121eeb4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>adaffa665dc27a4831a04851cfd23e29f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a2414e4b56ac61942cb56e28235cec25e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aaab308135532b53f36a8e76f94354c2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad12a24128838b0a291ecfab5de4f0bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1aebe97cb01ac54e6e5131b184828872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LeafLevelIteratorTTProxy&lt; 1 &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a2ef3942d00d8b20b840b2614ef70cf0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a2affe9c1467f822cb86373eab5f4c98a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>af7689e002bd29dde793c983f31dabb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALUHElementType&lt; 1, Dune::ALUGridMPIComm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a98d47da01cf54e8e75a6e4a4dce964ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; ElType &gt;</type>
      <name>InnerIteratorType</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1605956b030a0fb4fbef7dae53076002</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IteratorType *</type>
      <name>newIterator</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a378591eca92f56363f0860dc3c11440f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkLeafEntity</name>
      <anchorfile>a01191.html</anchorfile>
      <anchor>a430b8276c656c8a25f878be240d9af24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeIterators</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a1857a0c7358da477b866e5081caeea92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createIterator</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>af69f89a186f3d21f9d864bd3d44f9ed4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>checkInnerOuter</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>aef4fc61c1290d3d25ec247de07c66a36</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GitterImplType &amp;</type>
      <name>gitter_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a7061f50a93344a35e44a3715ceeeac6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorType *</type>
      <name>iterTT_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ae756f251f7e49ff5e033bcd066baaee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InnerIteratorType *</type>
      <name>it_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad8c2442cb8e156af513ada56cc733f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>nl_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ad74ce35a2f982ba10300c828f5131111</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>link_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>a790249e0968885446acea1e14f1181f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>usingInner_</name>
      <anchorfile>a01183.html</anchorfile>
      <anchor>ab9a2274f497eb35788241b2b1d083cde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, pitype, Comm &gt;</name>
    <filename>a01139.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 0, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a5d581cff5045197e69ea912955b58a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>ab1109d10f75bcca7762c2c6a9afb1c8a</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>ae1af7d1050d4681b97600b16b28e8fe3</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a50235a576f162ace2a4d67797cfd337a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a7a2442cdab4b6b8bf8f52bf0c0ab2186</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>ade897af5cf7c779ffb0bfe700be8f547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a726494a361a07b4cf97f98b1fb1dba91</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a8f97a5f97fce5f654d3f66133df4bc41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>afe5ee05a11db27a4ff40768629637d3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>val_t</type>
      <name>elem_</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a38489ae32b967f8311ca0efd02a04645</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a000963f4b143a238eeaa22bc6335002c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 0, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>a1b1c4eaeaae28d16499079098afc446b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01279.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a78b38daa5c9d851df073b2e98913b6f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a40e82a1f211900f5d31b53ba960c5f1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>ad7e6d7e0be97409dd9f3989b5f58ad06</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a5ddc50d0ca412b5f84558737895c1e28</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a3b61aa1390aecadf137ff62a5d457d17</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>adc1d27086ce6c9000cab3947e434178f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a6ca32131d95e8adb15b366b102da4445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a14e37983cd1a496190e1bed150161c1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a11049963fd3642fce60f91beba3d164f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a31adb63728ed3aad6ea4d46c7310f9dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>ac1e6f59bb19c5556f63720c83f3f639b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a74d373104ddf95501f9e4ebd9483cd49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01243.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 1 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 1 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>a7319a4974f0a7b9fb3da59cb1a184a3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>aaa5772bb6ee64e922349a6538966acb1</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>acbde8942d08c4d9aa263a328b4e24371</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>ad74bd578cd019245b87fa6f228e6aae9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>a01c28c068a381f1e72d7b48c7a6d4e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>ae07fc2dfce22694e5a04bf49dca81c77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, pitype, Comm &gt;</name>
    <filename>a01143.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 1, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a8c8df6d2d673aecddc68f7c05a59e953</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a08d9468b6bc821b3d20ef99a75f83909</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a8ce35fc32dd948f571af1cecab0c29c3</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a652ed6825fe8f259b9f79c8afb04a54f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>acb8a97242e4afb245205ed3ee036fbe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a6bada915068d3ab0816220d287c8804c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a2eb2f7702b187e4077c6882111437b25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a2423ddb6a358c93351472ec19964a4c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a9e2a03603957951315abeeba1c949116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>val_t</type>
      <name>elem_</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a80c688df68cffa45b2f592d9d4686f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a9918a24401ff36e54da0dd901277b36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 1, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>ac2132a7c4fd2056d253f615e362ac0b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01283.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a0e045460dd20c9c026696cbd6404a48f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a8c1c19c52ea028b940c7147130e35c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a4409c5b04da927a4092d998209dba0f1</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>aa2a9e2cfb9095a40bf33df61ceae6c05</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a13d725204b7a6b2ad361b24ed4f45bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a5c2608ee10aac322e691f84f09f0cbec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a3198e3ebcbd780eeea8ba897efb57ba9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>ac213b914bba7c0657b5dc0f0383eea03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>ada33bc687f320025d3ca941e63dea8f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>ae3dad65985db3a515e67842ff8b6933c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>abb015cd567b8a81ab54fb9ae254ca879</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01283.html</anchorfile>
      <anchor>a01a0816b40e126c796558cccdf5cc7e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01247.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 2 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 2 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a1dd15c611a22060e0eadece6b0f820ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a54b80f7bbcc45864c9e02ff9be32c592</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>af64d4540adab298c946b1f18ef164405</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>aeef5a2a04256916635bfbee88ff9f27d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>aea29cf93044f05764f7c112ee260e7c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01247.html</anchorfile>
      <anchor>a9c8c238d52ef7e990207c888a9640917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, pitype, Comm &gt;</name>
    <filename>a01275.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUHElementType&lt; 2, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>ab9a982a8cd1dfb286efcd8f0940df7f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>ab5f3bb381e3ffb82df07af63e356c019</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::GEOEdgeType</type>
      <name>GEOEdgeType</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a34fc20c74ae4e9bdf519a4a1d60b2cca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; 2, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a509df65f006e369c19663929411d4692</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a58890a6164c6edc9a79b6778d3d278be</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a25e2a8dd9297eb5d197b39afa6e84418</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a9a37ed26ef4f86cdefeb73a737389aa6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a77d6872644dc0027df522d944b3d97c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>af93b66346d5f05a465edb1af450ea41b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a0d486f3d9597e1147d043b77c403b2af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>af08c6fdfae19d7efc7a9d5cf79ea53bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>adbd04ae468a53eb6d77844cb2811791e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a3cd82d87a3e4416f4043ff08f3101050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 2, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01275.html</anchorfile>
      <anchor>a34447321d8671c4e15df4268b2d62885</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01287.html</filename>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a48c44a1886df0625fdd214e2a84c22b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlignIterator&lt; InteriorIteratorType, GhostIteratorType, val_t &gt;</type>
      <name>IteratorType</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>aeb6534028e0a1e13714aaf60fc4b9398</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a62d1728cfa9a3bb7a06ea400a76999c2</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a01468907cb04a482bf87ba300ae1f223</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>aba1706a11e08ce5dc0549d1d4e3b1949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a491402c409317906c3588f167ef1b7fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a4fe8731f41632c67b50379b5dc74a157</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>aaa54437fb889f01b4c7b4599e461ccf2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>ae4fea4b290d5326f23e6e324a591d134</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>a8fb03986a4f4ef05ec803c8717a7f2d2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>ac947ae038289e156608fa323bc617e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01287.html</anchorfile>
      <anchor>ae2830c3883d4977f9ded2e02d38d6bef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01251.html</filename>
    <base>ALU3dGridGhostIteratorHigherCodim&lt; 3 &gt;</base>
    <member kind="typedef">
      <type>ALU3dGridGhostIteratorHigherCodim&lt; 3 &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a13285f9a1e7c30b4298c8b87a5433eda</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ac550090476191a413b01b106a8024c4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>ab8e0ee57192445f9e4f19b30de06906e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::GhostPairType</type>
      <name>GhostPairType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aef488afef32b7e301a1f012970cc27d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;::ElType</type>
      <name>ElType</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a54ac1b44349949d7d4402a9be9a15bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a10acdb33c84300154c199b01a6af4041</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a87bd69fb5aeab6450a927c4600cfe991</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a0d87df1d0430e90619388ff261eb8e49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a05db59b348187f665a0a963bc9f986d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a740b6ef77dc3bff5421c09745a3f50b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a02cc0806ede144c39c29c56e43b92ede</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>aaa440725246871f2db47e38e80107fa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>a26323cff8e854445e76af1e09f3f358b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a9b25d52ef7ac83ed7f844d1e650720f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01251.html</anchorfile>
      <anchor>a845e2ea26e218314fe1789f1ef61e829</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateGhostList</name>
      <anchorfile>a01211.html</anchorfile>
      <anchor>acd60e00b63709ca1ab1578bce5e91101</anchor>
      <arglist>(const GridImp &amp;grid, GhostElementIteratorImp &amp;ghostIter, GhostItemListType &amp;ghList)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, pitype, Comm &gt;</name>
    <filename>a01147.html</filename>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorElType&lt; 3, Comm &gt;::val_t</type>
      <name>val_t</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>aa2376e78ed29f41275adc8a3fcb988da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a030a485c174b310204840f8744ffac02</anchor>
      <arglist>(const GridImp &amp;grid, int level, const int nlinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridLevelIteratorWrapper</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>af19c286e63e5e73cfa8d58fc59a4979c</anchor>
      <arglist>(const ALU3dGridLevelIteratorWrapper &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>ac1e8c5d316e5382475643d42b548c19f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a540fdad548aac07542ab39357225f45c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>first</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>ac2ee9076123fe2d83662ed59d9c151cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>done</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a324a1b503ae72d7300c3102e3f4d4b13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a8b3fcf8d36a70bce4603388959880966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>InterfaceType *</type>
      <name>clone</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a634c6641dcf6236947d20d0875505177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>IteratorSTI&lt; val_t &gt;</type>
      <name>InterfaceType</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>ab42cdc0c0f71d353e1daa05ac5f8992d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALU3dGridLevelIteratorWrapper&lt; 3, pitype, Comm &gt;</type>
      <name>ThisType</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a3335c96f6bb9e556f7e7769307828867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VertexListType &amp;</type>
      <name>vxList_</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a65bd7958f4eea2ff0ab8dcf41400f287</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>val_t</type>
      <name>elem_</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>af894d336d273012e970eded547776bfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>count_</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a3a8290531b06f8802a0ddb0fe1b9b69e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>size_</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a8c510fb0ea8eaba033b21affef375e4f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridLocalIdSet</name>
    <filename>a01643.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridMakeableEntity</name>
    <filename>a01631.html</filename>
    <templarg>mydim</templarg>
    <templarg>coorddim</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridSurfaceMappingFactory</name>
    <filename>a01559.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>type</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, hexa, Comm &gt;</name>
    <filename>a01567.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BilinearSurfaceMapping</type>
      <name>SurfaceMappingType</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>adaa68aa972659c1746124e553a1e91a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, hexa, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a8e5e18a6468b727fbb8a40d8c30aab8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, 3 &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>abdfc511b05edd7c7d7bf41cc2f106ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SurfaceMappingType *</type>
      <name>buildSurfaceMapping</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a0ff727c87a2b85d0b93572f4b243d0af</anchor>
      <arglist>(const CoordinateType &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceMappingType *</type>
      <name>buildSurfaceMapping</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a3c6cecabb148f3008330bc943bd854a9</anchor>
      <arglist>(const GEOFaceType &amp;face) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numVerticesPerFace</name>
      <anchorfile>a01567.html</anchorfile>
      <anchor>a77288da8779f694cc1566e29e85f44cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, tetra, Comm &gt;</name>
    <filename>a01563.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3DSPACE LinearSurfaceMapping</type>
      <name>SurfaceMappingType</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a34a079b5cc722638ce78b50391443480</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridFaceInfo&lt; dim, dimworld, tetra, Comm &gt;::GEOFaceType</type>
      <name>GEOFaceType</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a4415a5c379e6f536528fe68ee5b34cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, numVerticesPerFace, 3 &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a88bba7124f833b4d58fa9dbb73bbfd1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SurfaceMappingType *</type>
      <name>buildSurfaceMapping</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a89aec4e1747387609830cc582173552b</anchor>
      <arglist>(const CoordinateType &amp;coords) const</arglist>
    </member>
    <member kind="function">
      <type>SurfaceMappingType *</type>
      <name>buildSurfaceMapping</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>a19a70a39845caf7d04a19b35eaafcbb8</anchor>
      <arglist>(const GEOFaceType &amp;face) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numVerticesPerFace</name>
      <anchorfile>a01563.html</anchorfile>
      <anchor>aede140588b3f53345e9649010f4da7e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridTreeIterator</name>
    <filename>a01815.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel</class>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, 0 &gt;</class>
    <class kind="class">Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, dim &gt;</class>
    <member kind="typedef">
      <type>InternalIteratorType ::val_t</type>
      <name>val_t</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a4b18fe13d8493666ec08b8a05b1f813c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>firstItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a60e03b654383a308b067c074267107e1</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ab071127f5434ad36ac679af02259d646</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, InternalIteratorType &amp;iter, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementIterator</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a48d0388a5bc5341efa8cbce2a8c46271</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridTreeIterator&lt; ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, GridImp::MPICommunicatorType &gt;::val_t &gt; &gt;</name>
    <filename>a01815.html</filename>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, GridImp::MPICommunicatorType &gt;::val_t &gt; ::val_t</type>
      <name>val_t</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a4b18fe13d8493666ec08b8a05b1f813c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>firstItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a60e03b654383a308b067c074267107e1</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ab071127f5434ad36ac679af02259d646</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cd==2) ? 3 :cd, GridImp::MPICommunicatorType &gt;::val_t &gt; &amp;iter, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementIterator</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a48d0388a5bc5341efa8cbce2a8c46271</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALU3dGridTreeIterator&lt; ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, GridImp::MPICommunicatorType &gt;::val_t &gt; &gt;</name>
    <filename>a01815.html</filename>
    <member kind="typedef">
      <type>ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, GridImp::MPICommunicatorType &gt;::val_t &gt; ::val_t</type>
      <name>val_t</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a4b18fe13d8493666ec08b8a05b1f813c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>firstItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a60e03b654383a308b067c074267107e1</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setItem</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ab071127f5434ad36ac679af02259d646</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, ALU3DSPACE IteratorSTI&lt; ALU3DSPACE IteratorElType&lt;(GridImp::dimension==2 &amp;&amp;cdim==2) ? 3 :cdim, GridImp::MPICommunicatorType &gt;::val_t &gt; &amp;iter, int level)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>incrementIterator</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a48d0388a5bc5341efa8cbce2a8c46271</anchor>
      <arglist>(const GridImp &amp;grid, IteratorImp &amp;it, int level)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists</name>
    <filename>a01675.html</filename>
    <templarg>dim</templarg>
    <templarg>elType</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; 2, elType, 2 &gt;</name>
    <filename>a01695.html</filename>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>TrivialTwists&lt; 0u, 0 &gt;</type>
      <name>Type</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>aeba78edbe02f07205eb874f2d58c92f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; 3, elType, 2 &gt;</name>
    <filename>a01691.html</filename>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>ALUTwists&lt; 2, 1 &gt;</type>
      <name>Type</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>a43781902164908c076cb1e2f24dd44cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; dim, elType, 1 &gt;</name>
    <filename>a01687.html</filename>
    <templarg>dim</templarg>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>ALUTwists&lt; dim==2 ? 2 :ElementTopologyMapping&lt; elType &gt;::numVerticesPerFace, dim-1 &gt;</type>
      <name>Type</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a2d79561bed6e1e0d035307234ce97db8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; dim, elType, 3 &gt;</name>
    <filename>a01699.html</filename>
    <templarg>dim</templarg>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>TrivialTwists&lt; 0u, 0 &gt;</type>
      <name>Type</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a89f800170cd9facde443fbe0dcb9b2e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; dim, hexa, 0 &gt;</name>
    <filename>a01683.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>TrivialTwists&lt; topoId, dim &gt;</type>
      <name>Type</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a3a4becdb3502629ad451dd007e46cd74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topoId</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a5583823d29c6258176fecfcf6536d196</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridTwists&lt; dim, tetra, 0 &gt;</name>
    <filename>a01679.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>TrivialTwists&lt; topoId, dim &gt;</type>
      <name>Type</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a2730f516f597bc0a0394d1595aa98ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topoId</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a79ada3878564da02eb1265a96145c89a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridVertexList</name>
    <filename>a01087.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::VertexType</type>
      <name>VertexType</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>adb29bfc02e0085d4671fb78413af81ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; VertexType * &gt;</type>
      <name>VertexListType</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a2b52347eab53a67ebb0072be3c11546c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexListType::iterator</type>
      <name>IteratorType</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>aebe48db207d80d26a0f36a05edb2b203</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dGridVertexList</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a708a932f8886bc35d89aee17848d9431</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ab226844aa4405c4f1043fafb9e0e06d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>up2Date</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a762297514f7159a72f190dc0db72ea4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetUp2Date</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a7a320e46b4cc3b70673e4045a6189f22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupVxList</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ac76f0edf0f3dacc9fde1935a893c99d1</anchor>
      <arglist>(const GridType &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>begin</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>a7ef832dce2a7bc190c32bc30f3d8957e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType</type>
      <name>end</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>aaae41e89b85b2ed933f508b0ac3be459</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexListType &amp;</type>
      <name>getItemList</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ab85b28104171447b77eee3ada21b1bd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>setupVxList</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>afd8c96ab70a5179b9db9d21a03a5ebcb</anchor>
      <arglist>(const GridType &amp;grid, int level)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits</name>
    <filename>a01059.html</filename>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; hexa, Comm &gt;</name>
    <filename>a01075.html</filename>
    <templarg></templarg>
    <base>Dune::ALU3dBasicImplTraits</base>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::Codim</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::RefinementRules</class>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a96f05d05cb8126b6a86e91a6611a9c3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a5fadcbaa3e7eda8f3e2ffcc832a6c176</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hface4_GEO</type>
      <name>GEOFaceType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a1e4c2dea8c37f718d9d6b4d7be258813</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::VertexGeo</type>
      <name>GEOVertexType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a93e500ffa19043ff7f2def0a0cc75b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::hexa_IMPL</type>
      <name>IMPLElementType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a8b3e1b71812510843d1c35960336afe4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hexa_GEO</type>
      <name>GEOElementType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>ab548be1ff196eddd6e313b4795cc6548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::periodic4_GEO</type>
      <name>GEOPeriodicType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a370d6f48794ec115e658cbd8221c1073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hasFace4</type>
      <name>HasFaceType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>afd400951b3c8d27ae9b05e521a999da5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::Hface4Rule</type>
      <name>HfaceRuleType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a0e5a81c82cedaf86c91cbebd6c667955</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::Hbnd4Default</type>
      <name>BNDFaceType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a16fe596b7450b2cb2929bd6ddad75aca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::hbndseg4_IMPL</type>
      <name>ImplBndFaceType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>ad0a6824979fa64fcfaf3c81a9d98fee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::HexaRule</type>
      <name>MarkRuleType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a37a55734c4923bd711998927263f3712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; GEOFaceType *, int &gt;</type>
      <name>NeighbourFaceType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a6a275eb390a6c75a8f39bcc3b393ce6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; HasFaceType *, int &gt;</type>
      <name>NeighbourPairType</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>a2b747d875d77990b6457bec13f10fe48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01075.html</anchorfile>
      <anchor>ae26e8afb3b13fb87bf052755bc2e6a7f</anchor>
      <arglist>(const Elem &amp;elem, const int aluFace)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; tetra, Comm &gt;</name>
    <filename>a01063.html</filename>
    <templarg></templarg>
    <base>Dune::ALU3dBasicImplTraits</base>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::Codim</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::RefinementRules</class>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterType</type>
      <name>GitterType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a0b062dceda1f9c75dc2066c08cd50830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dBasicImplTraits&lt; Comm &gt;::GitterImplType</type>
      <name>GitterImplType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a10a4a01d1ca74e44161c9eb6f5207a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hface3_GEO</type>
      <name>GEOFaceType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>ab038a510a115c22ea500a87bd13e0f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::VertexGeo</type>
      <name>GEOVertexType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a270717e83e9e952c794cf06eb1e6ba53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::tetra_IMPL</type>
      <name>IMPLElementType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a183e158590e4fbbafdb18e382ba8bb35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::tetra_GEO</type>
      <name>GEOElementType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a7f8dd4784b3e7792b7eb1cd4c27c21b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::periodic3_GEO</type>
      <name>GEOPeriodicType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a3de404a625d98c333585b54240535983</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::hasFace3</type>
      <name>HasFaceType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a00c424941138050538f5154d073f5ea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::Hface3Rule</type>
      <name>HfaceRuleType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a0affef2d51557d33d673b3154076de92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::Hbnd3Default</type>
      <name>BNDFaceType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a2cb92f4829cf2d4101a92005e986de4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterImplType::Objects::hbndseg3_IMPL</type>
      <name>ImplBndFaceType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>ad1fc6f619201575bd958a38746ec1df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GitterType::Geometric::TetraRule</type>
      <name>MarkRuleType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>a94cb11d716b30fc618d30ff70a784a6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; GEOFaceType *, int &gt;</type>
      <name>NeighbourFaceType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>acb8043e7b7c18ef35f66953f3169c48d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; HasFaceType *, int &gt;</type>
      <name>NeighbourPairType</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>ae5dad2fd502895b1be14c560b99b85b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GEOFaceType *</type>
      <name>getFace</name>
      <anchorfile>a01063.html</anchorfile>
      <anchor>aa24bda7c36bd91ba9951cd9091c6a214</anchor>
      <arglist>(const Elem &amp;elem, const int aluFace)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dLeafGridView</name>
    <filename>a01767.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::ALU3dLeafGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ae18be6ce6ad210cf08f6bb18155a8ae6a4db13a722aaf510558384be5d9ab756d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dLeafGridViewTraits&lt; GridImp, pitype &gt;</type>
      <name>Traits</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a684469d15125b6edb0283acdcb32eedb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a5306ff935705102ce38292b616a514f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a8b0219f13451a4394c235ed29ec4e195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a3c013ff7c0598790bd0bff303751b2b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a560feaadb456be18d3c41e35192dc801</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ab0d8984b5aa37d34258fe2f6a46394dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ae18be6ce6ad210cf08f6bb18155a8ae6a4db13a722aaf510558384be5d9ab756d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dLeafGridView</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a8f17c94ec8726fca790eea8b56bb6d4a</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ac866235d4e48350cff6580dde747febe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ad40f2fb8dc5eccfe63bb81fc4a632fdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a7be8d3a47d8b7de0563250ba71c72c83</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a9b536a649c9c61ce9e5c517e9e4b3b74</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>aa2085e3f1c4ac606b55f79e842cf8b59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a0129cb09779f3c864bb026a416e2cd5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a54168f89486a372546a4b001f6f6c85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>afd3ee8962bfa7c8a32d213f557fd71b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a14c46bedfe8d24b8d8e32eccc331aab2</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a9a91c49250d546e470d590a2b67e8de0</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a9c32141a3cf9a0fba735be45b9e5d39a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a877768b1a887d33645a977674eba262f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>ab1c685b66f3524a79f752fc142d7c713</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Grid::LeafCommunication</type>
      <name>communicate</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a24e278ec729a0b1dfd0dab897d739257</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Twists</type>
      <name>twists</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a17e5ae552afd416822f58fa076f7ebf2</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLeafGridViewTraits</name>
    <filename>a01787.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>ab55c55cdbc4529c68ba8d89c5ec67772ad0beeba4324314ecdec27c6deeeca9d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dLeafGridView&lt; GridImp, pitype &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>a6998b430d994253da8e14295c19bec2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>a1f17e61bdc64cc545c22053eabcd1e19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>a84eb2bc7d044d6abedc82c155222bdf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIntersection</type>
      <name>Intersection</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>abdede72273fb67ba0159f855f5d9221f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>a31dcdbe18444322d5d7224257c5d62e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>a5757a0c4986f4c6336337187c13eedeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01787.html</anchorfile>
      <anchor>ab55c55cdbc4529c68ba8d89c5ec67772ad0beeba4324314ecdec27c6deeeca9d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dLevelGridView</name>
    <filename>a01763.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::ALU3dLevelGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a7eba01e7423690b8090134af84364765abddcd7760055b43fff7a36175b72837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dLevelGridViewTraits&lt; GridImp, pitype &gt;</type>
      <name>Traits</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a9b9eabd5e3cf697df267c40a607a7416</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a2787e118d1cbd603a74c9ee2349de062</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ac9591f1723eeb1065eb9528ff816a14e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a52f8b5b141243c7ba21a2fd173e24c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aebca499a8827d6135518cfb595e460a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a31d8c25dcb497d75f4356eb30c812f56</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a7eba01e7423690b8090134af84364765abddcd7760055b43fff7a36175b72837f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALU3dLevelGridView</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a567674fae3d59ed0b2caaa5c4d5709fc</anchor>
      <arglist>(const Grid &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aed755d248f1db277bdd1b3d04b60f2f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aba3423b96f5204559946daa0e981c0a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a1146167216a9a21025779dccbdc24efe</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ac466b1262811b66c2920958f69a747f6</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a0fc2632173a437db1415fdc94b74a20d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a6b6cc1d623dfefd6dfcf534776490f68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ab449afce199519fdfd6c0602eb2af8e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a99348c91c7d07ece685c15702ccb92ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ae1bc4a4719bb9724ed513cd92cfbabcf</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a3df8ff0968d564b35196c759019ac1de</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a67d13d45e2394e420238c55bfecca50c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a295531e25c57dbf5e1b38971ea9fa4cd</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a3385c4616224aaff523d65b0f3721ed4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Grid::LevelCommunication</type>
      <name>communicate</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>afc3eefc046cb1ad8acfe80b17791c257</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Twists</type>
      <name>twists</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>ac46a4c17a7086fb572450de715397ba8</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLevelGridViewTraits</name>
    <filename>a01771.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>ad0041e3ff785ebca39c3e6ba7cc224e9af92a90b0d96a9f6ffb6e3cb019167e1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dLevelGridView&lt; GridImp, pitype &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>a5f7e34b7f0b1df57f67e22b8e499daab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>a4cd73ba616caba5a1aa7918b74d4bfac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>a9e47e461223410f8c0e9189849a6d52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersection</type>
      <name>Intersection</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>a1ef5135b91a7b33fd9edd2bde81c68b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>aaa846878a8bc043481f839cbeda3ba06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>aa4a6581f85aa23dd9305ed58eb57986e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>ad0041e3ff785ebca39c3e6ba7cc224e9af92a90b0d96a9f6ffb6e3cb019167e1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dRefinementTraits</name>
    <filename>a01047.html</filename>
    <templarg></templarg>
    <templarg>elType</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dRefinementTraits&lt; MarkRuleType, hexa &gt;</name>
    <filename>a01055.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ae72ae7aa77b06032b699cda6facd2cb4adb7c2a13df48010c581afff7d18e2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ace73e93a6d04bad22aef638c8caadf1da45f84aedd4badb2691ae2849d08cf5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>a36ef2bfcf1da8802eefe7de5f78dff6aad245a45887afc4ed4b43825d94dffb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ad8bcefbb43d66f20067c6d29fd22e2bdabf7a04269b7c75fb87b2a713ced31eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ae72ae7aa77b06032b699cda6facd2cb4adb7c2a13df48010c581afff7d18e2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ace73e93a6d04bad22aef638c8caadf1da45f84aedd4badb2691ae2849d08cf5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>a36ef2bfcf1da8802eefe7de5f78dff6aad245a45887afc4ed4b43825d94dffb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ad8bcefbb43d66f20067c6d29fd22e2bdabf7a04269b7c75fb87b2a713ced31eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dRefinementTraits&lt; MarkRuleType, tetra &gt;</name>
    <filename>a01051.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a12d1692effd6e4dcd08b0167bfb62232aba27c58852ebd2b073e5e169f8a8dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3975578bc1aac561ef9598a24def2bd0a66c16db353f11182451b652ce70710b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3007076417276038dee6e9f3ee1157f1aa2827d3d38e3bf2df773acc628e28a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ab5760df39fbbffff54925e869cc28fa3aae407cf0b8d207ab3e5abb5697bb8e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a12d1692effd6e4dcd08b0167bfb62232aba27c58852ebd2b073e5e169f8a8dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3975578bc1aac561ef9598a24def2bd0a66c16db353f11182451b652ce70710b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3007076417276038dee6e9f3ee1157f1aa2827d3d38e3bf2df773acc628e28a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ab5760df39fbbffff54925e869cc28fa3aae407cf0b8d207ab3e5abb5697bb8e0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUCommunication</name>
    <filename>a01299.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</name>
    <filename>a01327.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <member kind="typedef">
      <type>ALU3dGrid&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</type>
      <name>Grid</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a2d89952657572a732a1c6ba9f0999df7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3DSPACE GatherScatter</type>
      <name>GatherScatter</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a1c6fc1219620ee5bfc16d9042f2bda0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUCommunication</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>af1bed66bc538d99b1d1910235982d9aa</anchor>
      <arglist>(const Grid &amp;grid, Storage *storage, InterfaceType iftype, CommunicationDirection dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUCommunication</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ace06930adfbbf39a575e7cafb1071546</anchor>
      <arglist>(ALUCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUCommunication &amp;</type>
      <name>operator=</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a248689919ef1dab060f87c1eb548037c</anchor>
      <arglist>(ALUCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a46b8b173a9b45be768cec1c321159148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>af27f57fe992fa51c32569cefde4fcc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a34c9ed93076b4dd78c3457f328dbfacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::Entity</type>
      <name>VertexObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a1573d7cd1882af8f15ddd8463f7d548c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::Entity</type>
      <name>EdgeObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a4361164433f036cd7d131bb4ee068f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::Entity</type>
      <name>FaceObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ad56aceff62a1a07b06e740bdcfc1c880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>ElementObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>aba145df0c3eb1e53d05e924cb4364760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::EntityImp</type>
      <name>VertexImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a70a9f83c369c944d653064e1fd9a0f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::EntityImp</type>
      <name>EdgeImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>accb65cebe6fec83a80c6a8cb1137489c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::EntityImp</type>
      <name>FaceImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a6082b30eca805656cef2287f7b542cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>ElementImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a2e4800eaa86f1cb8ad754037c8be06f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</name>
    <filename>a01315.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <member kind="typedef">
      <type>ALU3dGrid&lt; dim, dimworld, elType, ALUGridNoComm &gt;</type>
      <name>Grid</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a6ac606b2cd109ee7ec3eb6e2afe099ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a1a6debef046656a920a87a940c753ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a236ce0898d9c0ef4298261fa8ad1e0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a3dad6311596054f46f49e379cbd82c5b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUGrid</name>
    <filename>a01291.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg>refineType</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::ALUGrid::Partition</class>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac80c948f3d7bb380f4a33f5f33acc356a6e9933254acbd863774805922f6752f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac80c948f3d7bb380f4a33f5f33acc356af1d715e512ea463cf40e33e5460546fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ae613e9e9779ada2012e40a303f666d50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ALUGridVertexProjectionPairType</type>
      <name>ALUGridVertexProjectionPairType</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a814d1ab4220b718c4bbde652d8eeceae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::ctype</type>
      <name>ctype</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a1be70f2a30ea74afbae0629d99a59cd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::GridFamily</type>
      <name>GridFamily</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a48cf3faf247a069b2b83ae68f3ac46cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>afbb9bf1a1b75756f1bfacd6670b7faac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::LocalIdSetImp</type>
      <name>LocalIdSetImp</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a3e71e56c55afd353eb1725f88d4f4c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a2b632b441ea726024d0c7a3d7996e3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a5746f65a7437c0b22b393dd1baeb1538</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily ::LevelIndexSetImp</type>
      <name>LevelIndexSetImp</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a076492d77aced363ba997800c2e5931e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily ::LeafIndexSetImp</type>
      <name>LeafIndexSetImp</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aa1c0b6c0236bb8bfa37b8700c7935e22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::LeafIteratorImp</type>
      <name>LeafIteratorImp</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ae6910a5f575885cdd5205f9d05120bd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 0 &gt;::LeafIterator</type>
      <name>LeafIteratorType</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a125ed5548a7cb3a85eb764040de4bab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 0 &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ab01e6b059be3a8cc50fbbf9b8122db05</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::HierarchicIteratorImp</type>
      <name>HierarchicIteratorImp</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a4710ed2ad87147d6e6de60f2dbca9347</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ad532bae0cc433488262cdc46df4f57a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a0f2b257973544996be9e93bce3af6efd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aee25b558ead50ca5a1f50db2a8fbfcad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac80c948f3d7bb380f4a33f5f33acc356a6e9933254acbd863774805922f6752f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac80c948f3d7bb380f4a33f5f33acc356af1d715e512ea463cf40e33e5460546fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGrid</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac3032196968216d5aaadadff6977bece</anchor>
      <arglist>(const std::string macroName, const MPICommunicatorType mpiComm=BaseType::defaultCommunicator(), const ALUGridVertexProjectionPairType &amp;bndPrj=ALUGridVertexProjectionPairType(), const bool verb=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGrid</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ab16b02168612f15b552fa0f005f806e9</anchor>
      <arglist>(const MPICommunicatorType mpiComm, const ALUGridVertexProjectionPairType &amp;bndPrj, const std::string macroName, const bool verb=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGrid</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a3491b5157efde4efdc33b18ad6df307a</anchor>
      <arglist>(const MPICommunicatorType mpiComm=BaseType::defaultCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Partition&lt; pitype &gt;::LevelGridView</type>
      <name>levelView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a8d2ac68e8e937fb70b373ed52de26b8b</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Partition&lt; pitype &gt;::LeafGridView</type>
      <name>leafView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ada81aafae3047a3edf3c01dcdea6df81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelGridView</type>
      <name>levelView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ac4c415bc72c4c39336d0fcd3aaf93ab9</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>LeafGridView</type>
      <name>leafView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ade25d266a15d2922bf1445449ef9c858</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Partition&lt; pitype &gt;::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7a9c5086d1312680a6f7a0bd7b87e298</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Partition&lt; pitype &gt;::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a4487ba733899a1a788898e51995488eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>af342e1254faca0b96e842f8f186e2bf1</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a2f17a8051b9a8f30c84f6c7aae9e0a7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7a6599561455a526b6fa7a9c649f5171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>nameSuffix</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7eb046fbb084e8ab5f926cd881cf89f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALUGridRefinementType</type>
      <name>refinementType</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ad7c0b734f24eb7c5b829ba675559a024</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ALU3dGridFactory</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a4da29539e6a93405125c726680ff4a56</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridBaseGrid</name>
    <filename>a01959.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridBaseGrid&lt; dim, dimw, cube, Comm &gt;</name>
    <filename>a01659.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dGrid&lt; dim, dimw, hexa, Comm &gt;</type>
      <name>BaseGrid</name>
      <anchorfile>a01659.html</anchorfile>
      <anchor>aa1904413a325fbf4efa9a153ab655984</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridBaseGrid&lt; dim, dimw, simplex, Comm &gt;</name>
    <filename>a01663.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALU3dGrid&lt; dim, dimw, tetra, Comm &gt;</type>
      <name>BaseGrid</name>
      <anchorfile>a01663.html</anchorfile>
      <anchor>a1e4ee07b7d8ee3112ab686161d3b76c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUGridBoundaryProjection</name>
    <filename>a01915.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridType ::DuneBoundaryProjectionType</type>
      <name>DuneBoundaryProjectionType</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ad27fbd860b0a09a58d9262f9be071026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; const DuneBoundaryProjectionType &gt;</type>
      <name>DuneBoundaryProjectionPointerType</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>af2b49850e17df88ea5d394c0509a56be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ProjectionType</type>
      <name>ProjectionType</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a66140bdebd7ac8a773cbfa01c0c954e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DuneBoundaryProjectionType ::CoordinateType</type>
      <name>CoordinateType</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>af3fbdb7390afa64675bde6b8751dcd1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridBoundaryProjection</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a5f13cc558698fd6207c49a5929267843</anchor>
      <arglist>(const DuneBoundaryProjectionType *ptr, const ProjectionType pt=BaseType::none)</arglist>
    </member>
    <member kind="function">
      <type>ProjectionType</type>
      <name>projectionType</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>aaf0aad854d5903e90fbc8ece275a3ce4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a38d3e91f6ee5babd9efe32f582b4ac4d</anchor>
      <arglist>(const coord_t &amp;orig, coord_t &amp;prj) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a63d3d2491156a64ec6b365e5f0acec84</anchor>
      <arglist>(const coord_t &amp;orig, const int segmentId, coord_t &amp;prj) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backup</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>acdc565f927721c53245bf4c1fda29b3a</anchor>
      <arglist>(BufferType &amp;os) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerFactory</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a68c088a4e428c327fcdaa6d33a561eb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BaseType *</type>
      <name>factory</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>af75424b6f4a4464903edcb03a88879ba</anchor>
      <arglist>(BufferType &amp;os)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DuneBoundaryProjectionPointerType</type>
      <name>projection_</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a78d91349459534e731f232f0a27cd57e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ProjectionType</type>
      <name>projectionType_</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a92f002f51719cd110013575ee3bbf817</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALUGridFiniteStack</name>
    <filename>a02127.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
  </compound>
  <compound kind="class">
    <name>ALUGridFiniteStack&lt; Object *, maxStackObjects &gt;</name>
    <filename>a02127.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::ALUGridId</name>
    <filename>a01807.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IntegerImp</type>
      <name>IntegerType</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ab41a3319b93d73056614db2be3b08ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridId</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a4e251445531c1e91eeaaf6cd4505802d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridId</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a9aa76a254c68686a937cfd8b662513f0</anchor>
      <arglist>(const MacroKeyImp &amp;key, const IntegerType nChild, const int codim, const int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridId</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>af4535e51413f0f112368dc02209a7289</anchor>
      <arglist>(const ALUGridId &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ALUGridId &amp;</type>
      <name>operator=</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a86780fcfb5f68a222d8848543f7f9587</anchor>
      <arglist>(const ALUGridId &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a5f95d9983f9084cffba8a07371d89866</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a2ed26cf81525827d39a4e8bb81ba8b3a</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>adaaa565b97b439fae85027bb08e9f694</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a75654540040115d3e87240a6181ad66f</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a7b651dbe9385dc91d29b081961f0a83b</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>abfd2764db245c56cb32cd3a166e76b68</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>const MacroKeyImp &amp;</type>
      <name>getKey</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aae16ddd4b13bda303fa67c383860ba3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntegerType</type>
      <name>nChild</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a39d70e600384e88bf6a26d5a2432f9c6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codim</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a2c94597338303d75d32319192b4dd514</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ac5d1166cb88571ae19989c2bd3e53de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a55105b261de665193384a4c29b878246</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a7bde65033c1e7f1bd63159eb01cc2d78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ac49d71193bf4cd210ce277582c22f819</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>lesser</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a49658dfec83e0a1d0478ae51187d4a51</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ad7c4ac944a7aa3e77998a8754eb424e2</anchor>
      <arglist>(const ALUGridId &amp;org) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::size_t</type>
      <name>hash_value</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a3f4cd4ca4139b2ae8c1e4d7ac7b86a34</anchor>
      <arglist>(const ALUGridId &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridMPIComm</name>
    <filename>a01955.html</filename>
    <member kind="function">
      <type></type>
      <name>ALUGridMPIComm</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>ab511e346f69675069faa09ae1f567fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridMPIComm</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>aec4fe79d69f7ac95dce2d45640803e4a</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MPI_Comm</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a77c8a6ecafdfdedb5009f9af3d33e6bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>mpiComm_</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>ad9a4225053d5026d0aa149ccfce74942</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridNoComm</name>
    <filename>a01951.html</filename>
    <member kind="function">
      <type></type>
      <name>ALUGridNoComm</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>afec30cca52db8c623f5cafb2a795e73b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridNoComm</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>a1624369a07300f902f9a943c14650ecb</anchor>
      <arglist>(const No_Comm &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridNoComm</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>aac7d77955089e9c551341355b60c5236</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MPI_Comm</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>a135cefad5ff93c0ffdf092a0aa786920</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator No_Comm</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>a3cd4b7f2d0225168ab79c798be39089e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>No_Comm</type>
      <name>noComm_</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>ab13b509e7e7eaac072350ab92ad78f7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUGridPersistentContainer</name>
    <filename>a02143.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a0630139775115cfb186f124c2a5fa78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>aa7f516505fe48f0757ec07b86f6dd76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>GridType</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a9b20c9775dff3359ec99bce3c2592035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridPersistentContainer</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>af347a968d78e8fba54602e81d04bd864</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGridPersistentContainer&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, T &gt;</name>
    <filename>a02143.html</filename>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a0630139775115cfb186f124c2a5fa78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>aa7f516505fe48f0757ec07b86f6dd76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>GridType</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a9b20c9775dff3359ec99bce3c2592035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridPersistentContainer</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>af347a968d78e8fba54602e81d04bd864</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGridPersistentContainer&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, T &gt;</name>
    <filename>a02143.html</filename>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a0630139775115cfb186f124c2a5fa78f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>aa7f516505fe48f0757ec07b86f6dd76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>GridType</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a9b20c9775dff3359ec99bce3c2592035</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridPersistentContainer</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>af347a968d78e8fba54602e81d04bd864</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGridTransformation</name>
    <filename>a02167.html</filename>
    <templarg></templarg>
    <templarg>dimw</templarg>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension &gt;</type>
      <name>WorldVector</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>a871219f20a1e5c844bcc2d1dc4a44e00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, dimension, dimension &gt;</type>
      <name>WorldMatrix</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>a690b11caa9b1e6e64be5b6e8a271efd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUGridTransformation</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>a6f735306c65fdfc48c38e83f73f8d47f</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>WorldVector</type>
      <name>evaluate</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>ad2418c348260a5ce831847da38b3e671</anchor>
      <arglist>(const WorldVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>WorldVector</type>
      <name>evaluateInverse</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>ab02e1741e0a48560174aebc11e03731d</anchor>
      <arglist>(const WorldVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>af75308517337353c9b8916db99d48e9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::ALUHElementType</name>
    <filename>a01107.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::ALUHElementType&lt; 0, Comm &gt;</name>
    <filename>a01111.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HElementType</type>
      <name>ElementType</name>
      <anchorfile>a01111.html</anchorfile>
      <anchor>a18c2000cecc295035e3f58378a981534</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::ALUHElementType&lt; 1, Comm &gt;</name>
    <filename>a01115.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HFaceType</type>
      <name>ElementType</name>
      <anchorfile>a01115.html</anchorfile>
      <anchor>a1e6d6cd9e87f105be0200d5528fa50c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::ALUHElementType&lt; 2, Comm &gt;</name>
    <filename>a01119.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HEdgeType</type>
      <name>ElementType</name>
      <anchorfile>a01119.html</anchorfile>
      <anchor>ab5ab0429ccd22df0de4b8bdbf7b61eb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::ALUHElementType&lt; 3, Comm &gt;</name>
    <filename>a01123.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::VertexType</type>
      <name>ElementType</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a359e21b57c1df94b6f353c552222e724</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALULeafCommunication</name>
    <filename>a01303.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</name>
    <filename>a01335.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <base>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</base>
    <class kind="struct">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>af5160c0f6aa516802594a73a705ce7ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::GatherScatter</type>
      <name>GatherScatter</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a2204e2eafea6586e697322db9a866e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULeafCommunication</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>ac8ca47c40514fbb183da8d612d559696</anchor>
      <arglist>(const Grid &amp;grid, CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULeafCommunication</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>ac594818a569dd21ab2329ca5f6464cfe</anchor>
      <arglist>(ALULeafCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALULeafCommunication &amp;</type>
      <name>operator=</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a4784a2f78aa7699c12e9ace25c9283c7</anchor>
      <arglist>(ALULeafCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a46b8b173a9b45be768cec1c321159148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>af27f57fe992fa51c32569cefde4fcc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a34c9ed93076b4dd78c3457f328dbfacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::Entity</type>
      <name>VertexObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a1573d7cd1882af8f15ddd8463f7d548c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::Entity</type>
      <name>EdgeObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a4361164433f036cd7d131bb4ee068f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::Entity</type>
      <name>FaceObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ad56aceff62a1a07b06e740bdcfc1c880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>ElementObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>aba145df0c3eb1e53d05e924cb4364760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::EntityImp</type>
      <name>VertexImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a70a9f83c369c944d653064e1fd9a0f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::EntityImp</type>
      <name>EdgeImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>accb65cebe6fec83a80c6a8cb1137489c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::EntityImp</type>
      <name>FaceImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a6082b30eca805656cef2287f7b542cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>ElementImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a2e4800eaa86f1cb8ad754037c8be06f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</name>
    <filename>a01319.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <base>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a40c463e1384c0dfff83587446805466d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULeafCommunication</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>ace31f01180124c7dee9c2556d05f268e</anchor>
      <arglist>(const Grid &amp;grid, CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a1a6debef046656a920a87a940c753ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a236ce0898d9c0ef4298261fa8ad1e0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a3dad6311596054f46f49e379cbd82c5b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALULevelCommunication</name>
    <filename>a01307.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</name>
    <filename>a01343.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <base>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</base>
    <class kind="struct">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</class>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>afe5e461914e6b06ee65c32d08f36eaf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::GatherScatter</type>
      <name>GatherScatter</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>aaf316602673a7c71d34b31fc6c013e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULevelCommunication</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>aae2437391259ff283a5041eefb004f8e</anchor>
      <arglist>(const Grid &amp;grid, CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULevelCommunication</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a018c2b5862d4801544df04b3f15fa90d</anchor>
      <arglist>(ALULevelCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALULevelCommunication &amp;</type>
      <name>operator=</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>a89810ecd2159db77533a4d9940a5dece</anchor>
      <arglist>(ALULevelCommunication &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a46b8b173a9b45be768cec1c321159148</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>af27f57fe992fa51c32569cefde4fcc71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a34c9ed93076b4dd78c3457f328dbfacf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::Entity</type>
      <name>VertexObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a1573d7cd1882af8f15ddd8463f7d548c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::Entity</type>
      <name>EdgeObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a4361164433f036cd7d131bb4ee068f8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::Entity</type>
      <name>FaceObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ad56aceff62a1a07b06e740bdcfc1c880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>ElementObject</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>aba145df0c3eb1e53d05e924cb4364760</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; dim &gt;::EntityImp</type>
      <name>VertexImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a70a9f83c369c944d653064e1fd9a0f6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 2 &gt;::EntityImp</type>
      <name>EdgeImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>accb65cebe6fec83a80c6a8cb1137489c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::EntityImp</type>
      <name>FaceImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a6082b30eca805656cef2287f7b542cf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>ElementImpl</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a2e4800eaa86f1cb8ad754037c8be06f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</name>
    <filename>a01323.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <base>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a4df083bf54cc1254b493ac27efe05c6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULevelCommunication</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a6070f588e9dc0677e6582fa787cd20f8</anchor>
      <arglist>(const Grid &amp;grid, CommDataHandleIF&lt; DataHandle, Data &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a1a6debef046656a920a87a940c753ad6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a236ce0898d9c0ef4298261fa8ad1e0af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pending</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a3dad6311596054f46f49e379cbd82c5b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALULocalGeometryStorage</name>
    <filename>a01655.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>nChild</templarg>
    <member kind="function">
      <type></type>
      <name>ALULocalGeometryStorage</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>a23b37fc4f6de206a716f006006f34bee</anchor>
      <arglist>(const GeometryType type, const bool nonConform)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALULocalGeometryStorage</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>aac4c072a73f833abf7d66859d573081a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GeometryImpl &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>ac0545a72ca181e4c5d1cf49062c9ecdf</anchor>
      <arglist>(int child) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const ThisType &amp;</type>
      <name>storage</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>afb72594e82763a902037f6bb085f7601</anchor>
      <arglist>(const GeometryType type, const bool nonConforming)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>geomCreated</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>a0749f8694cb316e55f2aac2829fd6047</anchor>
      <arglist>(int child) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>initialize</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>a4f332b7c890ec3a92fb7edd4e9d04c8f</anchor>
      <arglist>(const GeometryType type, const bool nonConform)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>createGeometries</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>afd3c73b711a37a6404d4f34b79a01d58</anchor>
      <arglist>(const GeometryType &amp;type)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01655.html</anchorfile>
      <anchor>aedec24c77a75ef1ac95323c301113e8f</anchor>
      <arglist>(const Geometry &amp;father, const Geometry &amp;son, const int child)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUMacroKey</name>
    <filename>a01803.html</filename>
    <member kind="function">
      <type></type>
      <name>ALUMacroKey</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>aee1c785fbf8f62941b862cec7b70d50f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUMacroKey</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a496314a78b4bb09add3fbebc3f36f051</anchor>
      <arglist>(const A &amp;a, const A &amp;b, const A &amp;c, const A &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUMacroKey</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a91c5ec7e7debfb26f96c202f541d16bb</anchor>
      <arglist>(const ALUMacroKey &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ALUMacroKey &amp;</type>
      <name>operator=</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a001c928e46fea1d99edceb3f6aeaa144</anchor>
      <arglist>(const ALUMacroKey &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a30636166bdd345ae8d532cc00d52c08b</anchor>
      <arglist>(const ALUMacroKey &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>ab702042c6689aaafb7c42490e2c24d06</anchor>
      <arglist>(const ALUMacroKey &amp;org) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>extractKey</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a120c27aa06ef2361a21213206fc656fc</anchor>
      <arglist>(std::vector&lt; int &gt; &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a3137cb2b110ace5ee8f33ff18c520614</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::size_t</type>
      <name>hash_value</name>
      <anchorfile>a01803.html</anchorfile>
      <anchor>a404a80ca62ec9926a22682176666d5fe</anchor>
      <arglist>(const ALUMacroKey &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ALUMemoryProvider</name>
    <filename>a02131.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Object</type>
      <name>ObjectType</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>ab2448a3b7aad8d554d360d16ea8e42d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUMemoryProvider</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>abe33d280f61c145f018bb205bc86ea94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUMemoryProvider</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>a429d26c15b700a6113d676261cc9b32b</anchor>
      <arglist>(const ALUMemoryProvider &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ALUMemoryProvider</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>a2fe02c53202c3401453a1760841c7b51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>getObject</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>a0a4db86a6b57305eb73825b05e261ae0</anchor>
      <arglist>(const FactoryType &amp;factory, int level)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>getEntityObject</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>ae48e5f753174a67aeeaf97d52bbc82ac</anchor>
      <arglist>(const FactoryType &amp;factory, int level, EntityImp *)</arglist>
    </member>
    <member kind="function">
      <type>ObjectType *</type>
      <name>getEmptyObject</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>abb47580483049961e6a8dfe22533c4ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeObject</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>a70a4a42db7755beec64b780e50285176</anchor>
      <arglist>(ObjectType *obj)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ObjectType *</type>
      <name>stackObject</name>
      <anchorfile>a02131.html</anchorfile>
      <anchor>a86ed93f1a066e556d6eb7bd4037c5c3a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwist</name>
    <filename>a02171.html</filename>
    <templarg>corners</templarg>
    <templarg>dim</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwist&lt; 2, 1 &gt;</name>
    <filename>a02191.html</filename>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a4601192eacbad4a3943d2bade4b315b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a05775a85fe12f5c9457bc38af82618e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a25dbc14ede194018d926fc507785015f</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a8d98a081beb8f9c46500245c907805b1</anchor>
      <arglist>(int aluTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a66204b184fd2998e4661519b4876ac52</anchor>
      <arglist>(bool positive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a73416d9567765f5222be0fa2d7fdcc68</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a1edcf501d69d16985d08eab1b3313dab</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator*</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a5fecb7151ed1c9901c21979d0537ccb2</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator/</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a964d653d80f9db33b671a63abe5c10e4</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a46658df2dbfa06786e2f75bda9db749b</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a2a0558939f85ed52558a97332fe416a3</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>inverse</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ae9281cf07c8c37640ae61d741661c6a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ad12ff0e80776979e0734557ae9e09cd7</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ae277906a3dc935fc2cde3f2d4d8e9a1a</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ad0624f566afa130c2714848ad85076e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a79fe5b6eaa9e5c0b555d7f998c3a7b80</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>acf75056c2e2637dada58aee345f3ac43</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>af289cc2ba876816dbf31c595aee6292d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a9f27c023a32497794000766a4b08a734</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a5098405925e80c01f001e0918aa14943</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>ALUTwistIterator&lt; Twist &gt;</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>af20b65c9b3700d97e12958e585ba8702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a05775a85fe12f5c9457bc38af82618e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a25dbc14ede194018d926fc507785015f</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a8d98a081beb8f9c46500245c907805b1</anchor>
      <arglist>(int aluTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a66204b184fd2998e4661519b4876ac52</anchor>
      <arglist>(bool positive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a73416d9567765f5222be0fa2d7fdcc68</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a1edcf501d69d16985d08eab1b3313dab</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator*</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a5fecb7151ed1c9901c21979d0537ccb2</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator/</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a964d653d80f9db33b671a63abe5c10e4</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a46658df2dbfa06786e2f75bda9db749b</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a2a0558939f85ed52558a97332fe416a3</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>inverse</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ae9281cf07c8c37640ae61d741661c6a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ad12ff0e80776979e0734557ae9e09cd7</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ae277906a3dc935fc2cde3f2d4d8e9a1a</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>ad0624f566afa130c2714848ad85076e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a79fe5b6eaa9e5c0b555d7f998c3a7b80</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>acf75056c2e2637dada58aee345f3ac43</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>af289cc2ba876816dbf31c595aee6292d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02191.html</anchorfile>
      <anchor>a9f27c023a32497794000766a4b08a734</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwist&lt; corners, 2 &gt;</name>
    <filename>a02183.html</filename>
    <templarg>corners</templarg>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3672bd35ca52be1aa2f19f752f1ff8e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>apply</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a4e5cb77183ce8823df27f8521bc583d7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>apply</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ac23565cb017de57f3ff565d6d9633ccd</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a281eb0228c29a74fe6021c27ffaf37d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa59b499f696955877165bd6dab23ca28</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ad1f4ce0158df066dc83b1441d5eeed1c</anchor>
      <arglist>(int aluTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a1fe232ab2130e1d087ee0b8b76ca6b8f</anchor>
      <arglist>(int origin, bool positive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2dd2cb698df0c39d210fb7e4ef121a2c</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>af015caf9611646e2223a46c26298e50d</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator*</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3668516535a766fd601a52b40a7427fe</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator/</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>abd587d22f1f925024d96bcb5f71f150a</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a413e96e8c68f7253f874f0f93dc4ccc3</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a8eb2c62dd9c84f735723278cb449564a</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>inverse</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab7f90787682b0452bd1a4e1770b186be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2fdc03477b4ffa52eea344001f5b4474</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ad78ac90c4c124e81df9aa395194ff6bb</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab3fe5d2fdbcfa44661ee649f655fe928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab8647c7ed4ed6dba0706c7c56e1db4ed</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a892aa7b7eec9acea714605ca283ef480</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aefa5506dca0adf36ed3b51f8f520bc10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa7ce8e9992718ae932ec76e43a5f3215</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ae38396aa1943c328bfeb35d50c921029</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>ALUTwistIterator&lt; Twist &gt;</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>af20b65c9b3700d97e12958e585ba8702</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a281eb0228c29a74fe6021c27ffaf37d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa59b499f696955877165bd6dab23ca28</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ad1f4ce0158df066dc83b1441d5eeed1c</anchor>
      <arglist>(int aluTwist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a1fe232ab2130e1d087ee0b8b76ca6b8f</anchor>
      <arglist>(int origin, bool positive)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ALUTwist</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2dd2cb698df0c39d210fb7e4ef121a2c</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>af015caf9611646e2223a46c26298e50d</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator*</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a3668516535a766fd601a52b40a7427fe</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>operator/</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>abd587d22f1f925024d96bcb5f71f150a</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a413e96e8c68f7253f874f0f93dc4ccc3</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a8eb2c62dd9c84f735723278cb449564a</anchor>
      <arglist>(const ALUTwist &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ALUTwist</type>
      <name>inverse</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab7f90787682b0452bd1a4e1770b186be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a2fdc03477b4ffa52eea344001f5b4474</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ad78ac90c4c124e81df9aa395194ff6bb</anchor>
      <arglist>(const ALUTwist &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab3fe5d2fdbcfa44661ee649f655fe928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>ab8647c7ed4ed6dba0706c7c56e1db4ed</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>a892aa7b7eec9acea714605ca283ef480</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aefa5506dca0adf36ed3b51f8f520bc10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02183.html</anchorfile>
      <anchor>aa7ce8e9992718ae932ec76e43a5f3215</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUTwistIterator</name>
    <filename>a02179.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ALUTwistIterator</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>ad80ad88c2800cd282c95f17856ae4bfa</anchor>
      <arglist>(Twist twist)</arglist>
    </member>
    <member kind="function">
      <type>const Twist &amp;</type>
      <name>operator*</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>a9a8d33629899999ba186426f28647d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Twist *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>a8bb6ab71c74b86e5ee7eb72c09586e1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>a1e50a0e3900054434d2f5db73697bbba</anchor>
      <arglist>(const ALUTwistIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>aa783f10cfd453b180cc3aaa9782ad871</anchor>
      <arglist>(const ALUTwistIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ALUTwistIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>a027381aac466dfc1bd5a9b6f1d451feb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ALUTwistIterator</type>
      <name>operator++</name>
      <anchorfile>a02179.html</anchorfile>
      <anchor>a1f6e2f7a81b81e76ede48f7d9ca6c0ee</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwists</name>
    <filename>a02175.html</filename>
    <templarg>corners</templarg>
    <templarg>dim</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwists&lt; 2, 1 &gt;</name>
    <filename>a02203.html</filename>
    <member kind="typedef">
      <type>ALUTwist&lt; 2, 1 &gt;</type>
      <name>Twist</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>ae5acf92ca472bbecd6793cac8e3d196c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUTwistIterator&lt; Twist &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>ac161346ef2bb417254412e63bff4faec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a5ffde489544beae93855b9153c739f0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>ad21027b3cfe84970e6f722aadc7946b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a17b5bda9412eb7899c8649f0739cd7ab</anchor>
      <arglist>(const Twist &amp;twist) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a6d9dc2495cf5314a5954298449e3a8ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a47f85c5e76e1f0d6a699431cd3ca45b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a05df608c75b717f7a07d253b262b148a</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a99e6c510b56dec8a7b46cb6619a58957</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a6d9dc2495cf5314a5954298449e3a8ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a47f85c5e76e1f0d6a699431cd3ca45b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02203.html</anchorfile>
      <anchor>a05df608c75b717f7a07d253b262b148a</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALUTwists&lt; corners, 2 &gt;</name>
    <filename>a02199.html</filename>
    <templarg>corners</templarg>
    <member kind="typedef">
      <type>ALUTwist&lt; corners, 2 &gt;</type>
      <name>Twist</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>aab91d53fc1075f0dca328c3eb97e73e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUTwistIterator&lt; Twist &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a7f274645a39b1caaa48f786168f7ce33</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>ab64ef3b2764d6b92d92e9a52ac74e521</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>ace4cb3e6f7ae36fffaee787d6e35b7a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a1ad35bc54990ae1404e637bd5fe5d386</anchor>
      <arglist>(const Twist &amp;twist) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a66ed0f00be38d806da7bbf3ece32a35a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a8fd250858bc2e6f3f44ad5f3d69f5b78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a4b381fce4ebcc440d1672f194a9f5937</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a1f8070d7705e8984612bbfbb62ab3d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a66ed0f00be38d806da7bbf3ece32a35a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a8fd250858bc2e6f3f44ad5f3d69f5b78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>a4b381fce4ebcc440d1672f194a9f5937</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; ALUGrid&lt; dim, dimworld, elType, refineType, Comm &gt; &gt;</name>
    <filename>a01903.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg>refineType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimworld, elType, refineType, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a2ce48fbcb2ded32885343d328c51fb94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::ALUGrid::MacroFileHeader</type>
      <name>MacroFileHeaderType</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>af48f774fc11af1c849c5b2eb7a9f56e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MacroFileHeaderType::Format</type>
      <name>MacroFileHeaderFormatType</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a0cb6a4aefe5c34e1734f0bd9968eaac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>createFilename</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a8dcda9269e1898b31e4414185003d067</anchor>
      <arglist>(const std::string &amp;path, const std::string &amp;fileprefix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a0b0bb98108c6f69c22886c324b47c6e7</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename, const MacroFileHeaderFormatType format=MacroFileHeaderType::defaultFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>adda00e0cc63cb2237ab11958232c18b6</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream, const MacroFileHeaderFormatType format=MacroFileHeaderType::defaultFormat)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a8d5762e5b877122b498b28cbcecdd5f5</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a95a87ddd9e39aefbe0c79739274928ef</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BilinearMapping</name>
    <filename>a01863.html</filename>
    <templarg>cdim</templarg>
    <member kind="typedef">
      <type>alu3d_ctype</type>
      <name>ctype</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ac65e4c52bf05237e9468c5ed3f4e8b02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>world_t</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>aacc1d9856edfb3694bb15f30d6061929</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, 2 &gt;</type>
      <name>map_t</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a932450224474fbdc1e407cf00a07020e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, 2, cdim &gt;</type>
      <name>matrix_t</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a25e6d6d60c886b72c82b1a7f995d6fd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, 2 &gt;</type>
      <name>inv_t</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ae4d23ba1e1c2a0bba4e4b05aa31b7b8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearMapping</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a2c9336adfa4a951b0f345809323eccf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearMapping</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ae021fc6042fdc6cfb26c29b206307044</anchor>
      <arglist>(const world_t &amp;p0, const world_t &amp;p1, const world_t &amp;p2, const world_t &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearMapping</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ac7db0445171365c5ebf857851be28364</anchor>
      <arglist>(const ctype(&amp;p0)[cdim], const ctype(&amp;p1)[cdim], const ctype(&amp;p2)[cdim], const ctype(&amp;p3)[cdim])</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a3a1dc79555ea2fc69224bfc3e7aa9325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>world2map</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a6b0ecfe67beb5427d1d6643430109b72</anchor>
      <arglist>(const world_t &amp;, map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a30830ba76bd3e79c60fab111f4bed778</anchor>
      <arglist>(const ctype x, const ctype y, world_t &amp;w) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a03e796ecf199418edc95a73071cba9fe</anchor>
      <arglist>(const map_t &amp;, world_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>det</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>afb29dfaee736ef5e2be9595cc824f4cf</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const matrix_t &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ad45828397f2f4d7967d0d99d97c944e4</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const inv_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ae935197fb2c6a9bec0f00a5400366115</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a13e909c9ad96d2007627a69d41fa4f5b</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline BilinearMapping&lt; 2 &gt;::ctype</type>
      <name>det</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>af3ab1f3a4eabf4f7e436e86a2a8f00c7</anchor>
      <arglist>(const map_t &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline BilinearMapping&lt; 3 &gt;::ctype</type>
      <name>det</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ac23c0e733b1113f38d23f26a841da6d5</anchor>
      <arglist>(const map_t &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>afe346a41a2255efdbbd10a6c3c2d67c4</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1, const vector_t &amp;p2, const vector_t &amp;p3)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>map2worldlinear</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ad6deadb4ba52bbac2877ddc7cd0a771f</anchor>
      <arglist>(const ctype, const ctype) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>aa9457f41d59cbc2ce52b0895fdc68173</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ac07523ad08021e134049281cc6ec06c4</anchor>
      <arglist>(const map_t &amp;m) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>multTransposedMatrix</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a84b3b6da11306813e299a490bd8d81dd</anchor>
      <arglist>(const matrix_t &amp;, FieldMatrix&lt; ctype, 2, 2 &gt; &amp;)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>multMatrix</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a7de8e796fafa009fffe837b65d2b7e2c</anchor>
      <arglist>(const matrix_t &amp;, const FieldMatrix&lt; ctype, 2, 2 &gt; &amp;, inv_t &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ctype</type>
      <name>_b</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a1afd2c8151c2f0f405374b0f659bf9fa</anchor>
      <arglist>[4][cdim]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ctype</type>
      <name>det_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a4235ffcf8a12e2093dba771545f20a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_t</type>
      <name>matrix_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a24f5835df3a83e1a01f7b125746369a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>inv_t</type>
      <name>invTransposed_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a490831e565ddc1d3bf7e31f3e6b94353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>affine_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a42cc5eea6623e916d66841c0bdfd0b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>calcedMatrix_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a0b75974895c2126a7a3c66d224569072</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>calcedDet_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a3eed972e8feac42b3f4e3a7beccdb7cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>calcedInv_</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a9af6a8660c9646f6fc8c6f83a270b786</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BilinearSurfaceMapping</name>
    <filename>a01859.html</filename>
    <base>Dune::SurfaceNormalCalculator</base>
    <member kind="function">
      <type></type>
      <name>BilinearSurfaceMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a1de34393876b1212cfa30b75a1e4c25d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearSurfaceMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a4e209a8e99598ab9788a7e0e832034ec</anchor>
      <arglist>(const coord3_t &amp;, const coord3_t &amp;, const coord3_t &amp;, const coord3_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearSurfaceMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a1af6d809f9d2748027dd742b56f9b9c5</anchor>
      <arglist>(const double3_t &amp;, const double3_t &amp;, const double3_t &amp;, const double3_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BilinearSurfaceMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>aabcd29e364c583a136d5aa35977a422f</anchor>
      <arglist>(const BilinearSurfaceMapping &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BilinearSurfaceMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a6be978804d0a435a318d3c2138f1a615</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>ac4e4307735779836a023cd226d38861d</anchor>
      <arglist>(const coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const inv_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a46f163b8f7dea4497f63ac2629b4e63a</anchor>
      <arglist>(const coord2_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const matrix_t &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a03577d97b039e1f082cb6c039fc725cf</anchor>
      <arglist>(const coord2_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>alu3d_ctype</type>
      <name>det</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a9de5acf0acec1a521f601ac2a295fdd3</anchor>
      <arglist>(const coord2_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>world2map</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a6edf41b74277a35193446527146028f5</anchor>
      <arglist>(const coord3_t &amp;, coord2_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>ac26b39f2a7d9e12cfded822badceefd8</anchor>
      <arglist>(const coord2_t &amp;, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>ab79b396ba3638933413e842e472c6a99</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a2d9b91f8b0a494e4dc23e0e16839b9a8</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a6479be2818ef373a3b4b99e74fa4521e</anchor>
      <arglist>(const vector_t &amp;_p0, const vector_t &amp;_p1, const vector_t &amp;_p2, const vector_t &amp;_p3)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a26d3f29be9076d4e9b68cbed4a3f5347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a1d132bb229f8ee7abea76eaf5e1668c5</anchor>
      <arglist>(const coord2_t &amp;, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a99ca60ea514386da09edc1cd55b0eee7</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negativeNormal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a0d8e2bb52ec17247917a01e4c9dbdc41</anchor>
      <arglist>(const coord2_t &amp;, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negativeNormal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a1d74a9d1a6656aad9746d0a5a63731bc</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, coord3_t &amp;) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>SurfaceNormalCalculator</type>
      <name>BaseType</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>af768ad7f788821acb4c8722d7473d2f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>coord3_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a18a33bdad0f957b436ff3c082aea7185</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldVector&lt; alu3d_ctype, 2 &gt;</type>
      <name>coord2_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a404e9b8fdaff58d21ffbaab4bddc6d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>alu3d_ctype</type>
      <name>double3_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a48512515278c9be059b99b578c028b76</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, 3, 3 &gt;</type>
      <name>mat3_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a2fa9265ea1736be5c40a2599250fd7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, 2, 3 &gt;</type>
      <name>matrix_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a81753713d66c5bafdd09fbe43efe5d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, 3, 2 &gt;</type>
      <name>inv_t</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>ae85f57b89bc19f27d8070b00735918ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a021d94d5b2d8549e532781289b3a1102</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, alu3d_ctype(&amp;_b)[4][3])</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alu3d_ctype</type>
      <name>_b</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a91c1057e1a416ad7a4ec5ce5acad7e37</anchor>
      <arglist>[4][3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mat3_t</type>
      <name>Df</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a04ca2d9dd2c6450cf838add3261eca40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mat3_t</type>
      <name>Dfi</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a3f4ad670cee87f1e7000236019d6245a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>inv_t</type>
      <name>invTransposed_</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a39664fd59d9678fe552c3e28fbcfb611</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_t</type>
      <name>matrix_</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a21a1a9e92af7839758822a4138cbd9a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alu3d_ctype</type>
      <name>DetDf</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>ab507afa84691aa646ef67fbe95e927a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>coord3_t</type>
      <name>normal_</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a8113edf5a98aa5cdec701982b7c75180</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>coord3_t</type>
      <name>tmp_</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>aa90ac9dab16d9ae9c4d857e36d89b8da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_calcedInv</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a869b830e14f042d7a66d158aa8382f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_calcedTransposed</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a3f5c5bac3e961f73edbb63cdf14e66a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_calcedMatrix</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>adfe2c92a607ea56939efc44035f9c45b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alu3d_ctype</type>
      <name>_n</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a9ccfb60db87731cfd506eb42cb1e850b</anchor>
      <arglist>[3][3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_affine</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>ad571d072e17e46966432d2f7b743c5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>_epsilon</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a7ba7a5e4ad307b195b505762af1e15db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BisectionCompatibility</name>
    <filename>a01911.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>VertexVector</type>
      <name>VertexVectorType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a85d4d4d3568f656a835c37e409f7d5e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; unsigned int, 3 &gt;</type>
      <name>FaceType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a3cc93989dff259737180a173b5db06b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a9ac0e32ed9b539c9f8be119bdc1c549f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; unsigned int, 2 &gt;</type>
      <name>EdgeType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>abd428be7ede98791ce273e37dd4df3c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; FaceType, EdgeType &gt;</type>
      <name>FaceMapType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ae71b064076c229bb449167c1ca22c999</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; FaceType, EdgeType &gt;</type>
      <name>FaceElementType</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ace098f369758bc62335aa41ff0dd0522</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BisectionCompatibility</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a0c89be8526608b0a3698975ff6638af1</anchor>
      <arglist>(const VertexVectorType &amp;vertices, const std::vector&lt; ElementType &gt; &amp;elements, const bool stevenson)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>stronglyCompatibleFaces</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a629e97a4300e1d1c24d2ee2dc55f0b3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>compatibilityCheck</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>af9f3aedae76fdb0f9a544c987767e020</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>make6CompatibilityCheck</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ae7df59f0572d62c231ea190cbbd778d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printNB</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a108f5fce7e0a28035edf8791d85a3529</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printElement</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a0c20b61499e336dd389f9429b10bea28</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>type0Algorithm</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>af41bfc0beb122e8ee989ff441203560d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>type1Algorithm</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a07124acf185de1b6b9bbb8f8aef161e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>returnElements</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ad0b8927389bd4643bef211f5db436ebc</anchor>
      <arglist>(std::vector&lt; ElementType &gt; &amp;elements, std::vector&lt; bool &gt; &amp;elementOrientation, std::vector&lt; int &gt; &amp;types, const bool stevenson=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>stevenson2Alberta</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ae46a99c95787d13add1ed94d0ed69015</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alberta2Stevenson</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>abe05c3b50dcf13cc5d57639c81362041</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const VertexVectorType &amp;</type>
      <name>vertices_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a6f1c2a85e73e5a15dce77fd86d9ba149</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; ElementType &gt;</type>
      <name>elements_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ad8724c3865db8ca87a4ec529021c90e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>elementOrientation_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a0f385b741a7a26fbb97f9cdf2169b693</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceMapType</type>
      <name>neighbours_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a38fee60e7d94cfcc4f1a9f8143abb0ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const size_t</type>
      <name>nVertices_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a79903e3e007c05c584fdb6226ea79f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; bool &gt;</type>
      <name>containedInV0_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>aeb731c5aec4c2e0e655570459c1859c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>types_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a2465fc4c825681c1f6e991d148431b99</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>stevensonRefinement_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>aec2e313d502d7dc3f234e7c980e0c3c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeType</type>
      <name>type0nodes_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ab671308485907d9c81ae2145c9974df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeType</type>
      <name>type0faces_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ae948a4e8e46d1aa9a12bdd9ff92b7867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>type1node_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a83923ba072aa5bfd833ec85ac7e47d8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>type1face_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a37f071262299a5f7146437112e102919</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>variant_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a4225cbd1ca4997ecf24bd6db105e496d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>threshold_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a80e286fffdef507f0c18e54d19469fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>useAnnouncedEdge_</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ab646f269f71989d969db6b58371af0cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>BisectionCompatibilityParameters</name>
    <filename>a01907.html</filename>
    <member kind="function" static="yes">
      <type>static int &amp;</type>
      <name>variant</name>
      <anchorfile>a01907.html</anchorfile>
      <anchor>a0fa7fd51a636387b577a8418662327af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int &amp;</type>
      <name>threshold</name>
      <anchorfile>a01907.html</anchorfile>
      <anchor>a797b9f8a1bddb04aae3a6dcb2236cae9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int &amp;</type>
      <name>useAnnouncedEdge</name>
      <anchorfile>a01907.html</anchorfile>
      <anchor>a94840d9283453695f57df5ce7bd9dff6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridEntitySeedBase::Bnd</name>
    <filename>a01543.html</filename>
    <templarg>cd</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Key *</type>
      <name>toKey</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a8ffbca99104e715b900c6d6f7dbb9b3b</anchor>
      <arglist>(const HBndSegType *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HElementType *</type>
      <name>getItem</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>ae5e10a39443b7f03a11a0d56ae72ceec</anchor>
      <arglist>(KeyType *key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isGhost</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a331bbea5f7174bfcf794273241f337f8</anchor>
      <arglist>(KeyType *)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01543.html</anchorfile>
      <anchor>a5edec733187dc6f420eb8817d89635f5</anchor>
      <arglist>(KeyType *)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridEntitySeedBase::Bnd&lt; 0, Key &gt;</name>
    <filename>a01547.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static Key *</type>
      <name>toKey</name>
      <anchorfile>a01547.html</anchorfile>
      <anchor>a458dad13a07fd6954b0e1e7a541aa716</anchor>
      <arglist>(const HBndSegType *ghostFace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static HElementType *</type>
      <name>getItem</name>
      <anchorfile>a01547.html</anchorfile>
      <anchor>ad910592587828e68cd9a7ca6ebe35184</anchor>
      <arglist>(KeyType *key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isGhost</name>
      <anchorfile>a01547.html</anchorfile>
      <anchor>ac4020475f43781c0a0f71958b0d9c19f</anchor>
      <arglist>(KeyType *key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static BNDFaceType *</type>
      <name>ghost</name>
      <anchorfile>a01547.html</anchorfile>
      <anchor>aeb556a11d4c9c3c26e7aa6b868479d3e</anchor>
      <arglist>(KeyType *key)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::BSMacroIterator</name>
    <filename>a01103.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ae5da27f32e27d53b8cd0aa07d8853d26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AccessIterator&lt; HElementType &gt;::Handle</type>
      <name>IteratorType</name>
      <anchorfile>a01103.html</anchorfile>
      <anchor>ad5df9271ac80e6ea1b9b4ddb3c6cb6b7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridMPIComm &gt;, codim &gt;</name>
    <filename>a01935.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a96a6d71a303141fc669b30d0561fb490</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridNoComm &gt;, codim &gt;</name>
    <filename>a01931.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01931.html</anchorfile>
      <anchor>a2416d74c6ff715c1da89a79734984995</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GatherScatterLoadBalanceDataHandle::Codim</name>
    <filename>a01419.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>GridType ::Traits ::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01419.html</anchorfile>
      <anchor>a2f022440d5bbee3c75c6d0d38b01fe33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGrid::Codim</name>
    <filename>a01723.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>aaf7461120724d133d1d079ce6e1694ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::Twists</type>
      <name>Twists</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a3e09984862b2ed9639d698d7ba11c19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>ae19e9026634aefc830bc8ab62ada28b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;::Codim</name>
    <filename>a01479.html</filename>
    <templarg>cd</templarg>
    <member kind="typedef">
      <type>GridImp::Traits::template Codim&lt; cd &gt;::Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01479.html</anchorfile>
      <anchor>a6d2adb831daa8c8f185326fcbd8d81e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01479.html</anchorfile>
      <anchor>a072442e54f891d37a1ad095591f65cef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFactory::Codim</name>
    <filename>a01743.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>adfa25e4aeb0c0bd099574a325a81859b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFamily::Traits::Codim</name>
    <filename>a01711.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Codim::Partition</class>
    <member kind="typedef">
      <type>ALU3dGridTwists&lt; dim, elType, cd &gt;::Type</type>
      <name>Twists</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a28301b5f3f100ce4aee53ad0ec76df3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a5f9ad92213cf428e09a051c618132923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridGeometry&lt; dim-cd, dimworld, const Grid &gt;</type>
      <name>GeometryImpl</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a70dd7bed2ea5b023744dcd9747e17cf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridGeometry&lt; dim-cd, dim, const Grid &gt;</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a546ab66eb08e3689485bca6b742231f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dimworld, const Grid, ALU3dGridGeometry &gt;</type>
      <name>Geometry</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a44f4675b305f99701e4640d306773e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dim, const Grid, ALU3dGridGeometry &gt;</type>
      <name>LocalGeometry</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>aa632906c3d672aaef4ce64498201f59b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; cd, dim, const Grid &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>aa59b2bdc2549d55ecc9fe0c581132203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; cd, dim, const Grid, ALU3dGridEntity &gt;</type>
      <name>Entity</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>ab5b1404d4963daf4020bee9e6941ad47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntitySeed&lt; cd, const Grid &gt;</type>
      <name>EntitySeed</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a8eb961241bf4cdcf266f734557368b2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>ab822929234dffc33584de1f07307d375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>af90216c2decdf7b3c58262464ceb3bc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::Codim</name>
    <filename>a01083.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <base>ALU3dCodimImplTraits&lt; hexa, Comm, dim, codim &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::Codim</name>
    <filename>a01071.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <base>ALU3dCodimImplTraits&lt; tetra, Comm, dim, codim &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLeafGridView::Codim</name>
    <filename>a01799.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLeafGridViewTraits::Codim</name>
    <filename>a01791.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::Twists</type>
      <name>Twists</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>a34f2a1fbfdb86323ea29eeda8c45ef4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>a9ccd95e1f5baa0d1ebc06bd69fe6b726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>a5fc569f4383663a9316888a1b2599753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>a737640aec0d9a173d3562ce85ce0006a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>ae00060fd07538d696eca5931464c1fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01791.html</anchorfile>
      <anchor>ad7e3bd3b8e9fcd556f37596b0c49aa68</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLevelGridView::Codim</name>
    <filename>a01783.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLevelGridViewTraits::Codim</name>
    <filename>a01775.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::Twists</type>
      <name>Twists</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>ac30ae617aae606e1aacb09fe3c6669c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>af9a525aa296bb9f396f6351abbcd24d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>a0e5416902fbb07f814559431bd5b468a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>addeb9484f97ae5e6d40e7af48f4f51ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>aecef6b37da31fdaf79b2a470bcd83517</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>a6ec93bf6eeb3b5c2b509c41fe6b5ebef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafIteratorTypes::Codim</name>
    <filename>a01979.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::DefaultLeafIteratorTypes::Codim::Partition</class>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelIteratorTypes::Codim</name>
    <filename>a01967.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::DefaultLevelIteratorTypes::Codim::Partition</class>
  </compound>
  <compound kind="struct">
    <name>Dune::MacroGridView::Codim</name>
    <filename>a02123.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MacroGridViewTraits::Codim</name>
    <filename>a02115.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::MacroGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02115.html</anchorfile>
      <anchor>a21b113c3b679b1f3b9dcaa5a7d887bf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02115.html</anchorfile>
      <anchor>abc2bc4d1f479d6fd5565254807606b14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02115.html</anchorfile>
      <anchor>a01d1bfadaca7ad93d17a0c560afab556</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02115.html</anchorfile>
      <anchor>a590d04c74690fb334d068a9ba1426266</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve</name>
    <filename>a01423.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static DataHandleImpl &amp;</type>
      <name>asImp</name>
      <anchorfile>a01423.html</anchorfile>
      <anchor>a6c0a7744e8582b5451f554cdb0947d40</anchor>
      <arglist>(DH &amp;dh)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reserveMemory</name>
      <anchorfile>a01423.html</anchorfile>
      <anchor>a11d1a4d05ab391afad0952b1f40dc78f</anchor>
      <arglist>(DH &amp;dataHandle, const size_t newElements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compress</name>
      <anchorfile>a01423.html</anchorfile>
      <anchor>a8997c3d4389c0c7c0da842cddb402798</anchor>
      <arglist>(DH &amp;dataHandle)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve&lt; DH, false &gt;</name>
    <filename>a01427.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>reserveMemory</name>
      <anchorfile>a01427.html</anchorfile>
      <anchor>a57474283c56a56e4897ab401858d4afe</anchor>
      <arglist>(DH &amp;dataHandle, const size_t newElements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>compress</name>
      <anchorfile>a01427.html</anchorfile>
      <anchor>aca732b1269c0efdb983b61b844784cb8</anchor>
      <arglist>(DH &amp;dataHandle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DefaultBoundarySegmentIndexSet</name>
    <filename>a02007.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultBoundarySegmentIndexSet::Index</class>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2440b775374eb5080c4ce192af72d1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Index &gt;</type>
      <name>SegmentIndexVectorType</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a62f3dce577fa81d8999cb51175fb4c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultBoundarySegmentIndexSet</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2dbcbd1e67828aaec6b92692375de89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a7b38d202cae031573114af30e4732275</anchor>
      <arglist>(const int segmentId) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a03948b25ef2cd03dd84aa1a6475b9a6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a56c83bc1faab37996b6b8e224d462af7</anchor>
      <arglist>(const GridViewType &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>aa422c997bc29913af76637a95494445b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2c9b8c0c690dd9167946faaca5e1a851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentIndexVectorType</type>
      <name>segmentIndex_</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a04115130b64ff7807ce3e6467de94336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSegments_</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a01af35a8bd3a71f6625a8a32a1fc41b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultBoundarySegmentIndexSet&lt; ThisType &gt;</name>
    <filename>a02007.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2440b775374eb5080c4ce192af72d1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Index &gt;</type>
      <name>SegmentIndexVectorType</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a62f3dce577fa81d8999cb51175fb4c86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultBoundarySegmentIndexSet</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2dbcbd1e67828aaec6b92692375de89e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a7b38d202cae031573114af30e4732275</anchor>
      <arglist>(const int segmentId) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a03948b25ef2cd03dd84aa1a6475b9a6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a56c83bc1faab37996b6b8e224d462af7</anchor>
      <arglist>(const GridViewType &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>aa422c997bc29913af76637a95494445b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a2c9b8c0c690dd9167946faaca5e1a851</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SegmentIndexVectorType</type>
      <name>segmentIndex_</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a04115130b64ff7807ce3e6467de94336</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>numSegments_</name>
      <anchorfile>a02007.html</anchorfile>
      <anchor>a01af35a8bd3a71f6625a8a32a1fc41b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DefaultIndexSet</name>
    <filename>a01987.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultIndexSet::Index</class>
    <member kind="enumvalue">
      <name>ncodim</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>ad9367a0e80ad8ca89c33ae1137695864ad8a1fe0b14c52aaf8c77461c6fef74fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>IndexType</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>acb1138f26e1894c9ab85b7c1ed01b8e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; GeometryType &gt;</type>
      <name>Types</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a1f1c4c5efcb197aec8372209ae6bdd2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; GridType, Index &gt;</type>
      <name>PersistentContainerType</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a818ac6fd6767440f31702b1f5ff21654</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; std::unique_ptr&lt; PersistentContainerType &gt; &gt;</type>
      <name>PersistentContainerVectorType</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a7a106ed9159686704f25067c5926cc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ncodim</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>ad9367a0e80ad8ca89c33ae1137695864ad8a1fe0b14c52aaf8c77461c6fef74fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultIndexSet</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>af35b5704061e37e7a638ea35684cfc13</anchor>
      <arglist>(const GridType &amp;grid, const IteratorType &amp;begin, const IteratorType &amp;end, const int level=-1)</arglist>
    </member>
    <member kind="function">
      <type>const PersistentContainerType &amp;</type>
      <name>indexContainer</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>aa7d337756f03ce43e0b84ee503058d5b</anchor>
      <arglist>(const size_t codim) const</arglist>
    </member>
    <member kind="function">
      <type>PersistentContainerType &amp;</type>
      <name>indexContainer</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>ad463d6b2bab3b56f94325872bf22ac5b</anchor>
      <arglist>(const size_t codim)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>ae764786d206b8108226de18298313fce</anchor>
      <arglist>(const EntityType &amp;en) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a7f1c82bca477297d286c7f548444fe04</anchor>
      <arglist>(const typename GridImp::template Codim&lt; cd &gt;::Entity &amp;en) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>aebe62b7e3745f1b0206730ffe044013a</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a9aca16d121f8d470ba4eafb5e250b2fc</anchor>
      <arglist>(const EntityType &amp;en) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a2bdb1aa1d22d1d46a82157505b235d65</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>size</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a0021bc6d34841108335d60c1f98d38f2</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcNewIndex</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>aab6a4ae5eede50ea745a121032375adc</anchor>
      <arglist>(const IteratorType &amp;begin, const IteratorType &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a54efe1f95bed68d17c76aaaf85c8b8ac</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>a2645d34b9846037756ca618fbc1846de</anchor>
      <arglist>(const int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsIndex</name>
      <anchorfile>a01987.html</anchorfile>
      <anchor>ad25339942561cb063c6cc5b7e267abb5</anchor>
      <arglist>(const int cd, const int idx) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafIteratorTypes</name>
    <filename>a01975.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLeafIteratorTypes::Codim</class>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelIteratorTypes</name>
    <filename>a01963.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLevelIteratorTypes::Codim</class>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFBaseFactory</name>
    <filename>a02235.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8a7e3ef32d91e7ad10ab8ded6f5420f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>ae7c19919c69cc054ddaaaca6f170f281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a5718d86bbd4f71683a3c2decd630dd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8876deba329d3269f4d0144a95f44d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridFactory&lt; Grid &gt;</type>
      <name>GridFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af2165e8ab3cd28d1a058ce9f212f9c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFBaseFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a3d7d5a3f846803a422f2e652ea28fbac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFBaseFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8c7e1e0d0e54ae89c19c3e0beb3f485c</anchor>
      <arglist>(MPICommunicatorType comm)</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a13e87df7ec42f04c1e02e0727308c771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a170f6e11e0a8f7d02e1d967bba71bf44</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a9c91258e4eff079aee206d99367b7254</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4c94e3cb80a8eda03868e0e142e86650</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa701d938689611973ab302e605caedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a65812e38085b9ecd090ae791871e4ef6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6f4599782ca8a389882e1dc5f2f6475e</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>abcb8bf49300cde5ac91a96e12b58ca6b</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6838ef1c6668d3dddef502bb589d67c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>generateALUGrid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af9897a08f3c15b8d9b12de341a958f6d</anchor>
      <arglist>(const ALUGridElementType eltype, const ALUGridRefinementType refinementtype, std::istream &amp;file, MPICommunicatorType communicator, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectly</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2cbe6b5a98c2bd95c56ecd726947220c</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6de47340546a70014927c49817d64a8b</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::false_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>ac14b95deab55d619d9d51842a3c8580d</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::true_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>fileExists</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a61e4ec0e8afe4ec4a24c0bc2dd139a5b</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>rank</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2304cf86ae15e5f6bb8e2c71c75f2d00</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af87ef590f6f72ebfc4553baf4958c0d3</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Grid *</type>
      <name>grid_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4f83b4298548824064ad1b5023f18386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridFactory</type>
      <name>factory_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa3834153a5292b799f3e39fd48610994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DuneGridFormatParser</type>
      <name>dgf_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a0c1a8d44701a3c72ea81df23ddb28be0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGFBaseFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a02235.html</filename>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8a7e3ef32d91e7ad10ab8ded6f5420f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>ae7c19919c69cc054ddaaaca6f170f281</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a5718d86bbd4f71683a3c2decd630dd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8876deba329d3269f4d0144a95f44d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridFactory&lt; Grid &gt;</type>
      <name>GridFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af2165e8ab3cd28d1a058ce9f212f9c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFBaseFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a3d7d5a3f846803a422f2e652ea28fbac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFBaseFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8c7e1e0d0e54ae89c19c3e0beb3f485c</anchor>
      <arglist>(MPICommunicatorType comm)</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a13e87df7ec42f04c1e02e0727308c771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a170f6e11e0a8f7d02e1d967bba71bf44</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a9c91258e4eff079aee206d99367b7254</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4c94e3cb80a8eda03868e0e142e86650</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa701d938689611973ab302e605caedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a65812e38085b9ecd090ae791871e4ef6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6f4599782ca8a389882e1dc5f2f6475e</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>abcb8bf49300cde5ac91a96e12b58ca6b</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6838ef1c6668d3dddef502bb589d67c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>generateALUGrid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af9897a08f3c15b8d9b12de341a958f6d</anchor>
      <arglist>(const ALUGridElementType eltype, const ALUGridRefinementType refinementtype, std::istream &amp;file, MPICommunicatorType communicator, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectly</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2cbe6b5a98c2bd95c56ecd726947220c</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6de47340546a70014927c49817d64a8b</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::false_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>ac14b95deab55d619d9d51842a3c8580d</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::true_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>fileExists</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a61e4ec0e8afe4ec4a24c0bc2dd139a5b</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>rank</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2304cf86ae15e5f6bb8e2c71c75f2d00</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af87ef590f6f72ebfc4553baf4958c0d3</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Grid *</type>
      <name>grid_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4f83b4298548824064ad1b5023f18386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridFactory</type>
      <name>factory_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa3834153a5292b799f3e39fd48610994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DuneGridFormatParser</type>
      <name>dgf_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a0c1a8d44701a3c72ea81df23ddb28be0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a02239.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <base>DGFBaseFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</base>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt;</type>
      <name>DGFGridType</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>a7e9d4e301841bad2489661ff6035ed11</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGFBaseFactory&lt; DGFGridType &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>a50aa56d4cfcbe60d602610a01991b5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>af35fe6112a19a81d0c7b0cd74d62f2cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8a7e3ef32d91e7ad10ab8ded6f5420f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a5718d86bbd4f71683a3c2decd630dd4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a8876deba329d3269f4d0144a95f44d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridFactory&lt; Grid &gt;</type>
      <name>GridFactory</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af2165e8ab3cd28d1a058ce9f212f9c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>ad2e888d9eb4b18cc68e39854d060a0bd</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>aba8b840908258512b58c5e05b2957aa7</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>aa3afdc08584fa298d86da7db6dc0aa07</anchor>
      <arglist>(std::istream &amp;input, Comm comm=Comm())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>a25b60eb16fb6d9716babf41020c3e506</anchor>
      <arglist>(const std::string &amp;filename, Comm comm=Comm())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a13e87df7ec42f04c1e02e0727308c771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a170f6e11e0a8f7d02e1d967bba71bf44</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a9c91258e4eff079aee206d99367b7254</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4c94e3cb80a8eda03868e0e142e86650</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa701d938689611973ab302e605caedd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a65812e38085b9ecd090ae791871e4ef6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6f4599782ca8a389882e1dc5f2f6475e</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>abcb8bf49300cde5ac91a96e12b58ca6b</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6838ef1c6668d3dddef502bb589d67c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>generate</name>
      <anchorfile>a02239.html</anchorfile>
      <anchor>a63dccc3f485dc6ccc83fdc9314bfee03</anchor>
      <arglist>(std::istream &amp;file, MPICommunicatorType comm, const std::string &amp;filename=&quot;&quot;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>generateALUGrid</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af9897a08f3c15b8d9b12de341a958f6d</anchor>
      <arglist>(const ALUGridElementType eltype, const ALUGridRefinementType refinementtype, std::istream &amp;file, MPICommunicatorType communicator, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectly</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2cbe6b5a98c2bd95c56ecd726947220c</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a6de47340546a70014927c49817d64a8b</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::false_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static Grid *</type>
      <name>callDirectlyImpl</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>ac14b95deab55d619d9d51842a3c8580d</anchor>
      <arglist>(const std::string &amp;gridname, const int rank, const char *filename, MPICommunicatorType communicator, std::true_type)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>fileExists</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a61e4ec0e8afe4ec4a24c0bc2dd139a5b</anchor>
      <arglist>(const char *fileName)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>rank</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a2304cf86ae15e5f6bb8e2c71c75f2d00</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>af87ef590f6f72ebfc4553baf4958c0d3</anchor>
      <arglist>(MPICommunicatorType mpiComm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Grid *</type>
      <name>grid_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a4f83b4298548824064ad1b5023f18386</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridFactory</type>
      <name>factory_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>aa3834153a5292b799f3e39fd48610994</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DuneGridFormatParser</type>
      <name>dgf_</name>
      <anchorfile>a02235.html</anchorfile>
      <anchor>a0c1a8d44701a3c72ea81df23ddb28be0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; Dune::ALUGrid&lt; dimg, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a02231.html</filename>
    <templarg>dimg</templarg>
    <templarg>dimw</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a02231.html</anchorfile>
      <anchor>aab9c7a59e5c1b9dadba962fd05c3b80a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a02231.html</anchorfile>
      <anchor>a0ad969785aad7836494aba65141643c9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGFWriter</name>
    <filename>a02219.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV</type>
      <name>GridView</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>a919df1be3c7647e623634e47cd8393a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridView::Grid</type>
      <name>Grid</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>a6c67b9f8cd41707978a2614758f8b649</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFWriter</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>ae7ab2bb5e4ca1be42bfcd8f759d5a462</anchor>
      <arglist>(const GridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>af679e170cb4937f4e719e3d1e9b9b836</anchor>
      <arglist>(const std::string &amp;fileName, const LoadBalanceHandle &amp;ldb, const int size, const int rank) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>a0493fe42d38827da153f6f5b46e5d5ea</anchor>
      <arglist>(const std::string &amp;fileName, const LoadBalanceHandle &amp;ldb, const int size) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimGrid</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>acd196840328552e5612974813114f560</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeElement</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>a0bca80e75721e54c0e3b7d76a03900c8</anchor>
      <arglist>(const Element &amp;element, const IndexSet &amp;indexSet, const Dune::GeometryType &amp;elementType, const std::vector&lt; Index &gt; &amp;vertexIndex, std::ostream &amp;gridout) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridView</type>
      <name>gridView_</name>
      <anchorfile>a02219.html</anchorfile>
      <anchor>ab3be23925efad67c75443c90015e75a6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ElementTopologyMapping</name>
    <filename>a01895.html</filename>
    <templarg>type</templarg>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a6e30fa54523082bccc883b450fe353bfa44e2d1c28a8bf8489b7e99c2a33046ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a0cf15f6df838b651310cf4713391f63da9428d9414594a03a7be63c55f5300abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ac4627c21b463eaeaf3ca9f144ae9d7faaff46c09fdd1680acada01b88146861c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a565f71b121e17ba6e9ab8d9c4c095b28a3e3a047f23b8df6af58c49f0033a5a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a6e30fa54523082bccc883b450fe353bfa44e2d1c28a8bf8489b7e99c2a33046ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a0cf15f6df838b651310cf4713391f63da9428d9414594a03a7be63c55f5300abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ac4627c21b463eaeaf3ca9f144ae9d7faaff46c09fdd1680acada01b88146861c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a565f71b121e17ba6e9ab8d9c4c095b28a3e3a047f23b8df6af58c49f0033a5a34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>affffea0daf4095ea343a463b5bf4d069</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a590325e83d340386bad6b03012c8dc6e</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluEdge</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a41b6676487af3af09e841d227cc67351</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneEdge</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a7efc713eda609125b418804faa41ae52</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ae5f4e361219d9c0b354e352848ffb7db</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a40e427098f76e8042a9023d554774872</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generic2aluFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a2c33b1190a75be8618001d41bb56525f</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2genericFace</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a0ec365586090989fb54e565698db6e7e</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>generic2aluVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a9d5950ff7aaf83071c7ed38a418ba33c</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2genericVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>acaea7a72bbae5476e8b3ee8362fd6b31</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>faceOrientation</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a6f81ef324a9caaa5138d3f87039d12da</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluFaceVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ad8da2c934fd89a479dfc636b0aa338cc</anchor>
      <arglist>(int face, int localVertex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneFaceVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a666c98b51aa53e2a31a24d012d6db236</anchor>
      <arglist>(int face, int localVertex)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>duneFaceTwist</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>a2ba4718bffeac18d04110024750450f5</anchor>
      <arglist>(int face)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::pair&lt; int, int &gt;</type>
      <name>duneEdgeMap</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ad6c409693cb1a5cfd0a4caee7069f269</anchor>
      <arglist>(int edge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>faceVertex</name>
      <anchorfile>a01895.html</anchorfile>
      <anchor>ae05399503c9ca241c8149da8de7c9d47</anchor>
      <arglist>(int face, int local)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCount</name>
    <filename>a01883.html</filename>
    <templarg>type</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCount&lt; hexa &gt;</name>
    <filename>a01891.html</filename>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>adbec7e3bfd0b8e6fad6f7c7e3487600fa38bc6144828e8f00d60d60ac7e9a506a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a3fb398f97837608ffc5fa50a50844562a32a52a3248fd41702fd05914bebf334d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a7d87986a589aa6d91ecec08668956cf4a9baee8fcae0ac67b1134dbff3463bef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>ae3578528c3ffe394e4fbdd7aabe99515ac9c58a3af5a867d23323bb91fbe63af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdgesPerFace</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>af452f99c47dc7dbada86badae53504a1a26f45e8609dbb03ca3d691084debbf81</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>adbec7e3bfd0b8e6fad6f7c7e3487600fa38bc6144828e8f00d60d60ac7e9a506a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a3fb398f97837608ffc5fa50a50844562a32a52a3248fd41702fd05914bebf334d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a7d87986a589aa6d91ecec08668956cf4a9baee8fcae0ac67b1134dbff3463bef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>ae3578528c3ffe394e4fbdd7aabe99515ac9c58a3af5a867d23323bb91fbe63af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdgesPerFace</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>af452f99c47dc7dbada86badae53504a1a26f45e8609dbb03ca3d691084debbf81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCount&lt; tetra &gt;</name>
    <filename>a01887.html</filename>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a0e1577f3f0ca0b1899a477b489c06696a9c246c71e816a26738d260521eccc89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a2c05f750ab486233e07d37bb41dbea5ca69c4886a458b582f632d886f3bf02b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>ac6c21dce24b09bfeb6520da0f8e3a70daf23939881dbb0da49e598c95afad1c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>af74236ab4510b8bac5eae399e6ff9420a4156076d5f48e75663e09eec95703e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdgesPerFace</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a15ad5816c971b3ef2e90b950a5d25000a719e398620306e3d7543c837d7712c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numFaces</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a0e1577f3f0ca0b1899a477b489c06696a9c246c71e816a26738d260521eccc89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVertices</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a2c05f750ab486233e07d37bb41dbea5ca69c4886a458b582f632d886f3bf02b63</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdges</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>ac6c21dce24b09bfeb6520da0f8e3a70daf23939881dbb0da49e598c95afad1c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numVerticesPerFace</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>af74236ab4510b8bac5eae399e6ff9420a4156076d5f48e75663e09eec95703e89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>numEdgesPerFace</name>
      <anchorfile>a01887.html</anchorfile>
      <anchor>a15ad5816c971b3ef2e90b950a5d25000a719e398620306e3d7543c837d7712c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFactory::FaceLess</name>
    <filename>a01747.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a3e2d977e20c492a23478ad34f063d88d</anchor>
      <arglist>(const FaceType &amp;a, const FaceType &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FaceTopologyMapping</name>
    <filename>a01899.html</filename>
    <templarg>type</templarg>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>ae6d08573bf504b247db62121fc4d8f40</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>ac2766d3e07e86e9ad553c09cb879c4bd</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invTwist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a6668daac61769191b5de913617e26209</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>invTwist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a5d0db40efed72ca84e033be2f2e77201</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluVertex</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>ad5c8957f655ee505f95e274bbf39ae89</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluVertex</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a56da2bcc34778786260351297de15d14</anchor>
      <arglist>(int index, int twist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneVertex</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a928f5cea532f71ed70d942696146a63c</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneVertex</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a8d9e5124dd7f85ad8fdcf04cfbb81d54</anchor>
      <arglist>(int index, int twist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>dune2aluEdge</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a6d32923ce29f2a645c137204309ff780</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>alu2duneEdge</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a4dde56c8a2a01241631c01ca002f489f</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>ad2d52fa7ae385b450efadfa82c65e6fb</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>invTwist</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a0d364f21475df3d39658d9414ef7f916</anchor>
      <arglist>(int index, int faceTwist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twistedDuneIndex</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a6abd6d29b386a3f925897858fa6fd9b1</anchor>
      <arglist>(const int idx, const int twist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>aluTwistMap</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a114945e65178aeec2280e8f294b0a10c</anchor>
      <arglist>(const int aluTwist)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FromToGridFactory</name>
    <filename>a02015.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::FromToGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</name>
    <filename>a02019.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refineType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>a479606a1ef490557a7edae7c36443f17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>convert</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>ab83ad19134914b7dffad2128eb6ff9af</anchor>
      <arglist>(const FromGrid &amp;grid, Vector &amp;cellData, std::vector&lt; unsigned int &gt; &amp;ordering)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>convert</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>adf61c57ddaa7a922aa3546ab6a9991de</anchor>
      <arglist>(const FromGrid &amp;fromGrid, Vector &amp;cellData)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>convert</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>acd657e57bfba04b13a0408e06104cec4</anchor>
      <arglist>(const FromGrid &amp;fromGrid)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FromToGridFactory&lt; Grid &gt;</type>
      <name>This</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>a2f9a1aa0c604803d767927ec398c77b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>subEntities</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>a31c05e099f285734c4832b6cda265c81</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>decltype(std::declval&lt; Dune::GridFactoryInterface&lt; Grid &gt; * &gt;() -&gt;createGrid()) typede</type>
      <name>GridPtrType</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>a111211714067ed023091c4a3e91a304c</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; unsigned int &gt;</type>
      <name>ordering_</name>
      <anchorfile>a02019.html</anchorfile>
      <anchor>a3fff07b5f8f87a41cbc9b07f9f463f62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterBaseImpl</name>
    <filename>a01379.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="function">
      <type></type>
      <name>GatherScatterBaseImpl</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a9a2db96a93a98f968ee99275aad0ace9</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a250e307357a6c2e7c7152fa0e53f16ae</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsItem</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aca7de506352042bce047b7226b6713b4</anchor>
      <arglist>(const HElementType &amp;elem) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>setElement</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a0032bca34a5e3642162c885b2ed73dca</anchor>
      <arglist>(const HElementType &amp;elem)=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a710d7c1e28dcbd5eac16bc057d269bf0</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ac1c6f54854ecf8991818d23b72f78670</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a6718f1be8a9508559b19c0f05a395987</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::template Codim&lt; codim &gt;::Entity</type>
      <name>EntityType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1c761a8e65b79c8a3d4447f554371a4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::template Codim&lt; codim &gt;::EntityImp</type>
      <name>RealEntityType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aa422eda9946900f8e4250b8e63cf9809</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a17e60b95867f806f0610a25a550813d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ALU3dImplTraits&lt; GridType::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a2a4336921a02ebecf5bce0b211ecbdac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1171f5efd3cf66275cb5fa914c135bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1a969e2c6772659099b8aa19a3ecc15f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a4295e23f30fafd628b40b93c02cd001d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DataCollectorType::DataType</type>
      <name>DataType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab99f9da1f7fb99da64dc6ba73c82df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab9ee80884e47abd422cdaf743e96c9b9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab518e06b41060f647bb7affc481c4b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a422bf69d57390482954e7470c66d6594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a480f46b4ea43f835cd184f3aa5e9557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a8f651805716ab75b39c1abcbb16b2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a191f96f066bcd43ec7bac500bb6444b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterBaseImpl&lt; GridType, DataCollectorType, 0 &gt;</name>
    <filename>a01383.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GatherScatterBaseImpl</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a2ae6f6fa026e014465d453126a2af496</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a935acaab9ecd2cb2b5ff6c1491a87115</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>containsItem</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a7ba9a17c27ed6a86960f20965a0ed095</anchor>
      <arglist>(const HElementType &amp;elem) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>containsItem</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>ad5bb4879bd6bc10c540471c3fc8b5d33</anchor>
      <arglist>(const HGhostType &amp;ghost) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af2cf6fab6ada5aa4a51b6e039ca5eb2a</anchor>
      <arglist>(ObjectStreamType &amp;str, const HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a34f9f04670f73f4db57bffd2f44ff15c</anchor>
      <arglist>(ObjectStreamType &amp;str, const HGhostType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>afc3a1e2299d744f0563545a4a8885841</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a5e9885be1e9be6458b8cb1de59f710d4</anchor>
      <arglist>(ObjectStreamType &amp;str, HGhostType &amp;ghost)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>codim</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>ac4243fe602968797bbbe7a0928ea577cabf39c8fd9b2dd6672d9ccd27a4f7242b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>aebed53df2ca9abcf29a1fd3f3ed4087eab1afa5d08dd9b635375e9ac75800fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::template Codim&lt; 0 &gt;::Entity</type>
      <name>EntityType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a4916181a4901ff6d1c7fb704dbd2af8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>RealEntityType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a8916061c3ad020031a1a8e5ae0fa0536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>ab9a936d436cf986ad8b3b7c819a091ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ALU3dImplTraits&lt; GridType::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a7989c46f7aa58e5751b5d1133d986b4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a02cc464ddb462e0ae2a2fcca0f882ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a7ae5ab51fd1711918bc1803ae0881714</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, 1 &gt;::InterfaceType</type>
      <name>HFaceType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a895a8a4e32faf7ac0aef3901b86af60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::GhostInterfaceType</type>
      <name>HGhostType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a15f9d3b86bd1d778d17656414e80fe86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::GhostImplementationType</type>
      <name>ImplGhostType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a36cfe6b5c1dfb9cf4411eb4a302e818b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::PllElementType</type>
      <name>PllElementType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a9b601f13fa08198b57af862c98715a9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>abfa28e521586d799471752901582edad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>codim</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>ac4243fe602968797bbbe7a0928ea577cabf39c8fd9b2dd6672d9ccd27a4f7242b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>aebed53df2ca9abcf29a1fd3f3ed4087eab1afa5d08dd9b635375e9ac75800fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a3043781b9b932d42ba446f2cee425eb9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeSize</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af30a283731c18797c653fadf9e6ce90f</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a38d500382417094dc17563fbafc6b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a87c6c1f20b556f93a17e492da971d184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a16c4479b64a393b8e712c09c12edf798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af7656f28350d3c087fe4f6345008c36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a33311a46d73f6a99a9704ddba3734f27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterLeafData</name>
    <filename>a01387.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <base>ALUGrid::GatherScatterBaseImpl</base>
    <member kind="function">
      <type></type>
      <name>GatherScatterLeafData</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a4012ead663e41d55da2c6f6bef911737</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>adfc42e166b3b7ed74e787f02eb11913b</anchor>
      <arglist>(const HElementType &amp;elem) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a6341bbbb20c300bc03f94ee56296c5a1</anchor>
      <arglist>(const HGhostType &amp;ghost) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsInterior</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>a9fcc0ec28eeb2838bd16bdeb4319c5d3</anchor>
      <arglist>(const HFaceType &amp;face, PllElementType &amp;pll) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsGhost</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>aaa418163d0c89b17db0c3d2b8bedaec0</anchor>
      <arglist>(const HFaceType &amp;face, PllElementType &amp;pll) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01387.html</anchorfile>
      <anchor>adde7027c6f20446d9ddb0e800f6e884e</anchor>
      <arglist>(const HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a250e307357a6c2e7c7152fa0e53f16ae</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a710d7c1e28dcbd5eac16bc057d269bf0</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ac1c6f54854ecf8991818d23b72f78670</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a6718f1be8a9508559b19c0f05a395987</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1171f5efd3cf66275cb5fa914c135bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a4295e23f30fafd628b40b93c02cd001d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DataCollectorType::DataType</type>
      <name>DataType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab99f9da1f7fb99da64dc6ba73c82df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab9ee80884e47abd422cdaf743e96c9b9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab518e06b41060f647bb7affc481c4b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a422bf69d57390482954e7470c66d6594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a480f46b4ea43f835cd184f3aa5e9557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a8f651805716ab75b39c1abcbb16b2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a191f96f066bcd43ec7bac500bb6444b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterLevelData</name>
    <filename>a01391.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <base>ALUGrid::GatherScatterBaseImpl</base>
    <member kind="function">
      <type></type>
      <name>GatherScatterLevelData</name>
      <anchorfile>a01391.html</anchorfile>
      <anchor>ae77e366f36559cc3168704c97270438e</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc, const LevelIndexSetImp &amp;levelSet, const int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01391.html</anchorfile>
      <anchor>a8887894f4e397a024b229541c57ce6ef</anchor>
      <arglist>(const HElementType &amp;elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01391.html</anchorfile>
      <anchor>af817dcdb8290a2c0d0742b1ac55fe76f</anchor>
      <arglist>(const HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a250e307357a6c2e7c7152fa0e53f16ae</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a710d7c1e28dcbd5eac16bc057d269bf0</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ac1c6f54854ecf8991818d23b72f78670</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a6718f1be8a9508559b19c0f05a395987</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1171f5efd3cf66275cb5fa914c135bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a4295e23f30fafd628b40b93c02cd001d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DataCollectorType::DataType</type>
      <name>DataType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab99f9da1f7fb99da64dc6ba73c82df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab9ee80884e47abd422cdaf743e96c9b9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab518e06b41060f647bb7affc481c4b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a422bf69d57390482954e7470c66d6594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a480f46b4ea43f835cd184f3aa5e9557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a8f651805716ab75b39c1abcbb16b2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a191f96f066bcd43ec7bac500bb6444b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterLevelData&lt; GridType, DataCollectorType, 0 &gt;</name>
    <filename>a01399.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ALUGrid::GatherScatterBaseImpl&lt; GridType, DataCollectorType, 0 &gt;</base>
    <member kind="function">
      <type></type>
      <name>GatherScatterLevelData</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>a9509ddd91fb48b5d2528ec1ca86a9456</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc, const LevelIndexSetImp &amp;levelSet, const int level)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>aecfed00448a8558252d72996514a40fd</anchor>
      <arglist>(const HElementType &amp;elem) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>aba411dc51ee9916253eeb359c88df28e</anchor>
      <arglist>(const HGhostType &amp;ghost) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsInterior</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>aae0a7607178d42a9d847e8ad93b972a9</anchor>
      <arglist>(const HFaceType &amp;face, PllElementType &amp;pll) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsGhost</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>aabdb037f1ba67bc71667bf670388e594</anchor>
      <arglist>(const HFaceType &amp;face, PllElementType &amp;pll) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a935acaab9ecd2cb2b5ff6c1491a87115</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af2cf6fab6ada5aa4a51b6e039ca5eb2a</anchor>
      <arglist>(ObjectStreamType &amp;str, const HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a34f9f04670f73f4db57bffd2f44ff15c</anchor>
      <arglist>(ObjectStreamType &amp;str, const HGhostType &amp;ghost)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>afc3a1e2299d744f0563545a4a8885841</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a5e9885be1e9be6458b8cb1de59f710d4</anchor>
      <arglist>(ObjectStreamType &amp;str, HGhostType &amp;ghost)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>codim</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>ac4243fe602968797bbbe7a0928ea577cabf39c8fd9b2dd6672d9ccd27a4f7242b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>aebed53df2ca9abcf29a1fd3f3ed4087eab1afa5d08dd9b635375e9ac75800fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a02cc464ddb462e0ae2a2fcca0f882ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>abfa28e521586d799471752901582edad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>aebed53df2ca9abcf29a1fd3f3ed4087eab1afa5d08dd9b635375e9ac75800fc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a3043781b9b932d42ba446f2cee425eb9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeSize</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af30a283731c18797c653fadf9e6ce90f</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a38d500382417094dc17563fbafc6b13c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a87c6c1f20b556f93a17e492da971d184</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a16c4479b64a393b8e712c09c12edf798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>af7656f28350d3c087fe4f6345008c36f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01383.html</anchorfile>
      <anchor>a33311a46d73f6a99a9704ddba3734f27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterLoadBalance</name>
    <filename>a01403.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>useExternal</templarg>
    <class kind="struct">ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts&lt; false, D &gt;</class>
    <member kind="function">
      <type></type>
      <name>GatherScatterLoadBalance</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>aff4fedaefa727e7c3a1498ff0dd87e52</anchor>
      <arglist>(GridType &amp;grid, LoadBalanceHandleType &amp;ldb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatherScatterLoadBalance</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a9510777218638ddb1678bd39675cbe20</anchor>
      <arglist>(GridType &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserData</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af164e90766db1db6b9d12ff3ae16a8f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userDefinedPartitioning</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a34d9f9de94c5c665d202d1580d3112c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userDefinedLoadWeights</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2a81c8c1cbe62bf0cf7e08341736ef35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartition</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af3f2d39608cb2e8607c40e0a5795313e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importRanks</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af0f2af840940e8601e35b165575fbc6d</anchor>
      <arglist>(std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportRanks</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ae2a6428a348dfe3506cf09cc04e2d612</anchor>
      <arglist>(std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destination</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ae23c6f28bd24093848ccac99e991e189</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadWeight</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ac03d56c17aaeadf920060adb40bf4cbc</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ace2d5b84db2521e42d9c538319bbce23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ALU3dImplTraits&lt; GridType::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>aae22634254145ad2a95e09c4d1aa1c00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; GridType::dimension, 0 &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a7d7e3dace14abfe20365edc445f4c1a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType ::template Codim&lt; 0 &gt;::Entity</type>
      <name>EntityType</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a33b0eaa1f26e9b9e6c14fcc431d8d35a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType ::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>EntityImpType</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ade5d73b60badaae62e6d1ed742165493</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityType &amp;</type>
      <name>setEntity</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>adbd36f086d04f33e45dec755b9261174</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LoadBalanceHandleType &amp;</type>
      <name>ldbHandle</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af147e9e35e01d28150933c67c0a58114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const LoadBalanceHandleType &amp;</type>
      <name>ldbHandle</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4fbe49edf086e1ff2cd942d159e5a70a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a377602141a2483930fa15c456fb6592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType</type>
      <name>entity_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a0715ab183901d589e42943aff822409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LoadBalanceHandleType *</type>
      <name>ldbHandle_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2e2fad0d7bcf78672240e2752d6ddd1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterLoadBalanceDataHandle</name>
    <filename>a01415.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>useExternal</templarg>
    <base>ALUGrid::GatherScatterLoadBalance</base>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::Codim</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve</class>
    <class kind="struct">ALUGrid::GatherScatterLoadBalanceDataHandle::CompressAndReserve&lt; DH, false &gt;</class>
    <member kind="function">
      <type></type>
      <name>GatherScatterLoadBalanceDataHandle</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a115ee457a7a20f4885d8b563434fe4c5</anchor>
      <arglist>(GridType &amp;grid, DataHandleType &amp;dh, LoadBalanceHandleType &amp;ldb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatherScatterLoadBalanceDataHandle</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a1b966c8e17583b7bdfe3d92bdcbf43b8</anchor>
      <arglist>(GridType &amp;grid, DataHandleType &amp;dh)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a6466511bd470e0e25f67006fb98e1ef4</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasUserData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a950bf01fbc742f67092b5b54b0581027</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>inlineData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>af4b99a4516678d0295ba2c935fce0a7f</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem, const int estimatedElements)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>xtractData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ac4e210d8e39b32b49cc27e2f90312d15</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>compress</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a9743c074f472c0ddf7f988155be6fc92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userDefinedPartitioning</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a34d9f9de94c5c665d202d1580d3112c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>userDefinedLoadWeights</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2a81c8c1cbe62bf0cf7e08341736ef35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartition</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af3f2d39608cb2e8607c40e0a5795313e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>importRanks</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af0f2af840940e8601e35b165575fbc6d</anchor>
      <arglist>(std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exportRanks</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ae2a6428a348dfe3506cf09cc04e2d612</anchor>
      <arglist>(std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destination</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ae23c6f28bd24093848ccac99e991e189</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadWeight</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ac03d56c17aaeadf920060adb40bf4cbc</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType ::Traits ::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>aa2ef6362dd7ad19404ff6c4bd57006e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ad21c64a676cde65b9ee2cf488049bc68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ALU3dImplTraits&lt; GridType::elementType, Comm &gt;</type>
      <name>ImplTraits</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>aad3df44e8cfc0d18218c6b181f03e548</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; GridType::dimension, 0 &gt;::InterfaceType</type>
      <name>HElementType</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a6640e089c4547477051275db81c630c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::EntityType</type>
      <name>EntityType</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>add9e443380fa25e0eb1505a8c35dccee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::CommDataHandleIF&lt; DataHandleImpl, Data &gt;</type>
      <name>DataHandleType</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a8222079afa62141dcf004e4c5424f4ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CompressAndReserve&lt; DataHandleType, hasCompressAndReserve &gt;</type>
      <name>CompressAndReserveType</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>aad030ff08e83a0914e5b3fa77bab2c6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>abaf404b837586aaefcd99102a4e71184</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType ::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>EntityImpType</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ade5d73b60badaae62e6d1ed742165493</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>maxLevelConsistency</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ab721706760e1d717479917024800ea1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inlineHierarchy</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a34d22acbad44e87d2cf8fe4af1f65b0c</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>xtractHierarchy</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>aada9e00ba9a9d4f13981be6c25edfdb5</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inlineElementData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a0f95ad1184396519cecd237621316927</anchor>
      <arglist>(ObjectStreamType &amp;stream, const EntityType &amp;element)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>xtractElementData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>abd0ac6d88490020400addcec9f4ca33b</anchor>
      <arglist>(ObjectStreamType &amp;stream, const EntityType &amp;element)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>subEntities</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a7c186fd7716cb92100c22344da49fe31</anchor>
      <arglist>(const EntityType &amp;element) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inlineCodimData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a92c8d7a09e1eb622ff81bed664f24f1b</anchor>
      <arglist>(ObjectStreamType &amp;stream, const EntityType &amp;element) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>xtractCodimData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a379670970bb3aaee63b923ed4c19d7f8</anchor>
      <arglist>(ObjectStreamType &amp;stream, const EntityType &amp;element)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inlineEntityData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a9a7cd163dddbfb10cd822f2687ca6fff</anchor>
      <arglist>(ObjectStreamType &amp;stream, const typename Codim&lt; codim &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>xtractEntityData</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ade11074c5c853466440ec7579b8b2fe4</anchor>
      <arglist>(ObjectStreamType &amp;stream, const typename Codim&lt; codim &gt; ::Entity &amp;entity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>EntityType &amp;</type>
      <name>setEntity</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>adbd36f086d04f33e45dec755b9261174</anchor>
      <arglist>(HElementType &amp;elem)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>LoadBalanceHandleType &amp;</type>
      <name>ldbHandle</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>af147e9e35e01d28150933c67c0a58114</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const LoadBalanceHandleType &amp;</type>
      <name>ldbHandle</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4fbe49edf086e1ff2cd942d159e5a70a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataHandleType &amp;</type>
      <name>dataHandle_</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a3bd3b6c946ea14b183345ffe079cb290</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a377602141a2483930fa15c456fb6592d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType</type>
      <name>entity_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a0715ab183901d589e42943aff822409f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>LoadBalanceHandleType *</type>
      <name>ldbHandle_</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2e2fad0d7bcf78672240e2752d6ddd1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>a918ed11157b72568221820664d395ec8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>hasCompressAndReserve</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ae7294b3d059f09f141dcb18fab7d3486</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const bool</type>
      <name>transmitSize</name>
      <anchorfile>a01415.html</anchorfile>
      <anchor>ae35717a3ed1d33e4a91208ffd8703bfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::GatherScatterNoData</name>
    <filename>a01395.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <base>ALUGrid::GatherScatterBaseImpl</base>
    <member kind="function">
      <type></type>
      <name>GatherScatterNoData</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>ab74044082f82011deb1adcd3072e6643</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc, const LevelIndexSetImp &amp;levelSet, const int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GatherScatterNoData</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>aae199f0010d7eee49848b24dd1e30396</anchor>
      <arglist>(const GridType &amp;grid, EntityType &amp;en, RealEntityType &amp;realEntity, DataCollectorType &amp;dc)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>a92b88a2108ad4bb7a84bced38e3414c7</anchor>
      <arglist>(const HElementType &amp;elem) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>containsItem</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>afca1a20d11d658eb6f6f11af7f6543ea</anchor>
      <arglist>(const RealHElementType &amp;elem) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>a294970ca4a26e3daced0245854c63797</anchor>
      <arglist>(const HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01395.html</anchorfile>
      <anchor>ae79ef488d888865457da03715b68eebf</anchor>
      <arglist>(const RealHElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a250e307357a6c2e7c7152fa0e53f16ae</anchor>
      <arglist>(int dim, int cd) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a710d7c1e28dcbd5eac16bc057d269bf0</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sendData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ac1c6f54854ecf8991818d23b72f78670</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recvData</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a6718f1be8a9508559b19c0f05a395987</anchor>
      <arglist>(ObjectStreamType &amp;str, HElementType &amp;elem)</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ImplTraits::template Codim&lt; dimension, codim &gt;::ImplementationType</type>
      <name>ImplElementType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a1171f5efd3cf66275cb5fa914c135bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GatherScatter ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a4295e23f30fafd628b40b93c02cd001d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DataCollectorType::DataType</type>
      <name>DataType</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab99f9da1f7fb99da64dc6ba73c82df82</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimension</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>aba66905b4addac84eca1f37006ea1d34a6ddbaf7d3605951ca6f2f2273e5d1ae9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_t</type>
      <name>getSize</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab9ee80884e47abd422cdaf743e96c9b9</anchor>
      <arglist>(ObjectStreamType &amp;str, EntityType &amp;en)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridType &amp;</type>
      <name>grid_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>ab518e06b41060f647bb7affc481c4b68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EntityType &amp;</type>
      <name>entity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a422bf69d57390482954e7470c66d6594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>RealEntityType &amp;</type>
      <name>realEntity_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a480f46b4ea43f835cd184f3aa5e9557d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DataCollectorType &amp;</type>
      <name>dc_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a8f651805716ab75b39c1abcbb16b2ad7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>variableSize_</name>
      <anchorfile>a01379.html</anchorfile>
      <anchor>a191f96f066bcd43ec7bac500bb6444b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl</name>
    <filename>a01603.html</filename>
    <templarg>dummy</templarg>
    <templarg>dim</templarg>
    <templarg>eltype</templarg>
    <base>GeometryImplBase&lt; dim, dim+1, LinearMapping&lt; cdim, dim &gt; &gt;</base>
    <member kind="function">
      <type>const CoordinateVectorType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01603.html</anchorfile>
      <anchor>a4be1b21652ace942a79bbd175e970ef6</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01603.html</anchorfile>
      <anchor>a03f3840bef1267e339d511bf3baece7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01603.html</anchorfile>
      <anchor>a0c3979b0040e54055a2848bb13b69bd4</anchor>
      <arglist>(const CoordPtrType &amp;p0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GeometryImplBase&lt; dim, dim+1, LinearMapping&lt; cdim, dim &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01603.html</anchorfile>
      <anchor>a604502825636520f8cea939d8e6b2a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::MappingType</type>
      <name>MappingType</name>
      <anchorfile>a01603.html</anchorfile>
      <anchor>a3bd2be46366aafecc6ec25299b27fb93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 1, eltype &gt;</name>
    <filename>a01607.html</filename>
    <templarg>dummy</templarg>
    <templarg>eltype</templarg>
    <base>GeometryImplBase&lt; 1, 2, LinearMapping&lt; cdim, 1 &gt; &gt;</base>
    <member kind="function">
      <type>const CoordinateVectorType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a1c31c798f2d8154628b9052010244e5c</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a567150bebe5fe0ef8d292f6d6539793f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a907ebbd8185eeecbebfc3176e0e84cc4</anchor>
      <arglist>(const CoordPtrType &amp;p0, const CoordPtrType &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a62043720d4d55b4157f4746fc43db5a3a0cc900ece549ec8e4b9ba80db4eafa39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GeometryImplBase&lt; dim, dim+1, LinearMapping&lt; cdim, dim &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>aaa8acc357c3ac1f4b6352367f607e7c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::MappingType</type>
      <name>MappingType</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a102cacfa31943036f816ddbc89eb98ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dim</name>
      <anchorfile>a01607.html</anchorfile>
      <anchor>a62043720d4d55b4157f4746fc43db5a3a0cc900ece549ec8e4b9ba80db4eafa39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, hexa &gt;</name>
    <filename>a01615.html</filename>
    <templarg>dummy</templarg>
    <base>GeometryImplBase&lt; 2, 4, BilinearMapping&lt; cdim &gt; &gt;</base>
    <member kind="function">
      <type>const CoordinateVectorType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>afc0e6de91ba59985eca91cf40d6a92a6</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>af5cd0f6207fd621a8772dd524da17856</anchor>
      <arglist>(const CoordPtrType &amp;p0, const CoordPtrType &amp;p1, const CoordPtrType &amp;p2, const CoordPtrType &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ae850ee500475fde5a0da0ea304e538a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GeometryImplBase&lt; 2, 4, BilinearMapping&lt; cdim &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>a7d903ea0294e973263ccb66e26d26ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::MappingType</type>
      <name>MappingType</name>
      <anchorfile>a01615.html</anchorfile>
      <anchor>ab177b1226b6f095c090cc946bc0b7a65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, tetra &gt;</name>
    <filename>a01611.html</filename>
    <templarg>dummy</templarg>
    <base>GeometryImplBase&lt; 2, 3, LinearMapping&lt; cdim, 2 &gt; &gt;</base>
    <member kind="function">
      <type>const CoordinateVectorType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01611.html</anchorfile>
      <anchor>a79bc2b908363620d20f96bd1690d6427</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01611.html</anchorfile>
      <anchor>a35a1d876d791f280f88d793f6318b86a</anchor>
      <arglist>(const CoordPtrType &amp;p0, const CoordPtrType &amp;p1, const CoordPtrType &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01611.html</anchorfile>
      <anchor>af53912eda258c58f28ff178d72508a89</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GeometryImplBase&lt; 2, 3, LinearMapping&lt; cdim, 2 &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01611.html</anchorfile>
      <anchor>ab8a8b4a3dd16c92080817da59a730d1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::MappingType</type>
      <name>MappingType</name>
      <anchorfile>a01611.html</anchorfile>
      <anchor>a2ef5df9143ec680279da65c366c8dedc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, hexa &gt;</name>
    <filename>a01619.html</filename>
    <templarg>dummy</templarg>
    <base>GeometryImplBase&lt; 3, 8, TrilinearMapping &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeometryImpl</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a95e2233a85c62c8a2c0d215c2e392d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const alu3d_ctype *</type>
      <name>point</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a7f89b110d1034ca8319c4f6422eb4fdc</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>CoordinateVectorType</type>
      <name>operator[]</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a8b06cee3ed8c0ebe7457320c6c4c286c</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>afd679c9a2e0d5943ba99425be824ed0a</anchor>
      <arglist>(const CoordPtrType &amp;p0, const CoordPtrType &amp;p1, const CoordPtrType &amp;p2, const CoordPtrType &amp;p3, const CoordPtrType &amp;p4, const CoordPtrType &amp;p5, const CoordPtrType &amp;p6, const CoordPtrType &amp;p7)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>aa037a276523de7cb50fb67f0028c205f</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>aa3f486733c8fb5976e355dd238afc7d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a483d1ce7bef3e8a10db55de07e53c0f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>ad93961badf947944c8b8be30f539ba93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GeometryImplBase&lt; 3, 8, TrilinearMapping &gt;</type>
      <name>BaseType</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a16da3715e6ae9f1d944d7e0480aeaf76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::MappingType</type>
      <name>MappingType</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a95257d41fdd8b500b52c2952c04ff0d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BaseType ::CoordinateMatrixType</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a3f67de0b1a3545447f888b18d3dc9426</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>alu3d_ctype</type>
      <name>CoordPtrType</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>abba4d13b5f38d9ccb6d456a0d58b2a2b</anchor>
      <arglist>[cdim]</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const alu3d_ctype *</type>
      <name>coordPtr_</name>
      <anchorfile>a01619.html</anchorfile>
      <anchor>a2a8729ca20d8cfb5f96a8588b0048e06</anchor>
      <arglist>[corners_]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, tetra &gt;</name>
    <filename>a01623.html</filename>
    <templarg>dummy</templarg>
    <base>GeometryImplBase&lt; 3, 4, LinearMapping&lt; cdim, cdim &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>GeometryImpl</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>aff6408ed3c9386fdaa90b4c5f9fe58e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const alu3d_ctype *</type>
      <name>point</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>a027d6fe02ab2cd5854ab407c7c6f829f</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>CoordinateVectorType</type>
      <name>operator[]</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>a7bd3ac1f0889b5121b8eaa3d8fe58ccb</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>a7c8f577e49e13c7969e9878b2ec3352f</anchor>
      <arglist>(const CoordPtrType &amp;p0, const CoordPtrType &amp;p1, const CoordPtrType &amp;p2, const CoordPtrType &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>ada5f0e173baf3aec3f85e12436000267</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>MappingType &amp;</type>
      <name>mapping</name>
      <anchorfile>a01623.html</anchorfile>
      <anchor>ae31d25a859e458b268ac5f5b66893bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation::GeometryImplBase</name>
    <filename>a01599.html</filename>
    <templarg>dim</templarg>
    <templarg>corners</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Mapping</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; 1, 2, LinearMapping&lt; cdim, 1 &gt; &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LinearMapping&lt; cdim, 1 &gt;</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; 2, 3, LinearMapping&lt; cdim, 2 &gt; &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LinearMapping&lt; cdim, 2 &gt;</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; 2, 4, BilinearMapping&lt; cdim &gt; &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BilinearMapping&lt; cdim &gt;</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; 3, 4, LinearMapping&lt; cdim, cdim &gt; &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LinearMapping&lt; cdim, cdim &gt;</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; 3, 8, TrilinearMapping &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>TrilinearMapping</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryImplBase&lt; dim, dim+1, LinearMapping&lt; cdim, dim &gt; &gt;</name>
    <filename>a01599.html</filename>
    <member kind="function">
      <type></type>
      <name>GeometryImplBase</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aedecdd27a823ae0b6318bd73bf0ed63f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0c810e33071f2bd5f3d185290c7cc7fe</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad341c8b5233f68fb0652b5d48e4a4906</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a976d6308fe840a8e265d05344978679c</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a1d26db91dccbafd6f8c687994f99977d</anchor>
      <arglist>(const CoordPtrType &amp;, const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>ad936f0559b11722fce51582a72d1bc03</anchor>
      <arglist>(const CoordPtrType &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>updateInFather</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8e4cc2564a21bb75fc690038fb8c2a55</anchor>
      <arglist>(const GeometryImp &amp;fatherGeom, const GeometryImp &amp;myGeom)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a6651ee595c3f88dbef492921416dc4a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8c91205aff2739f0ed2682c14f036f96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVolume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aa85abdc0db7e895f6e3ef412f977d53f</anchor>
      <arglist>(const double volume)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>volume</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7bcdb3668a17333cab6866883e359585</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a35627e6e1834df48cb02850fcd410174</anchor>
      <arglist>(const CoordPtrType &amp;p, CoordinateVectorType &amp;c)</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a7901dd544ce538ce1e2c432e2084eebb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldMatrix&lt; alu3d_ctype, corners, cdim &gt;</type>
      <name>CoordinateMatrixType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a8b6efc91508db230e5576bfc2116f5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::conditional&lt; dim==3, std::unique_ptr&lt; CoordinateMatrixType &gt;, CoordinateMatrixType &gt;::type</type>
      <name>CoordinateStorageType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a0745abf9b1e4245cdfe12bf74da2b251</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LinearMapping&lt; cdim, dim &gt;</type>
      <name>MappingType</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a837844824cae082661e70012955e9f18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoordinateStorageType</type>
      <name>coord_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>aaf998d59e5ca966e85a8ca15cda3894c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MappingType</type>
      <name>map_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a861d919b532868f57abb172e38599bac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>volume_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a4cb4651a84f0144558a91f70f9650cdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>signed char</type>
      <name>status_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>abcbb85e639c1065c58a4c71fae192259</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>corners_</name>
      <anchorfile>a01599.html</anchorfile>
      <anchor>a176b513dcc1fbb13ed6a6db7d6f98617</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GetItem</name>
    <filename>a01195.html</filename>
    <templarg></templarg>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GetItem&lt; GridImp, 1 &gt;</name>
    <filename>a01199.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>aec2e102e51f57399fe81e6d4bef0cc98ae779a2329489d1c25c688363d0946ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a1f6522b87fba2ba00faf014ce1662e83a3b6517e1c47b93c7ef2b95a4f84f6996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>abb2aaf2dc2d1e3cb4ba02baebfbc4397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a4154ac217f7c435151db625a6a766c20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>ac643900ddcdf90f75e46ce1bf6a1cff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; 1, Comm &gt;::ElType</type>
      <name>ItemType</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>ae5b603c5bbc71d40e40cffe80cc01362</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>aec2e102e51f57399fe81e6d4bef0cc98ae779a2329489d1c25c688363d0946ce2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a1f6522b87fba2ba00faf014ce1662e83a3b6517e1c47b93c7ef2b95a4f84f6996</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ItemType *</type>
      <name>getItem</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>a1b53e6eee04909d52f4c0c9b64fc1a5a</anchor>
      <arglist>(HElementType &amp;el, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numItems</name>
      <anchorfile>a01199.html</anchorfile>
      <anchor>ab740ce61a97c1c4d3a7ef6b1bbfd394c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GetItem&lt; GridImp, 2 &gt;</name>
    <filename>a01203.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>aaffe2fbd9d795d73754fc04078aba2e7a321578cd570a87b32c092385af643bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a4553f4bfe28617e285faa7d9b41b46f7aad067b6a0e95c70de6ff9b84ecb1c282</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>ac494f2deb2e0508fce9ba61f6170c49a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a4304d178903a5011d6ed4dd7c05ae49d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a92e578676ed067d76bab0d00bb0585ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; 2, Comm &gt;::ElType</type>
      <name>ItemType</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a6874bf67feacf83ae87d0b547c45e32e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>aaffe2fbd9d795d73754fc04078aba2e7a321578cd570a87b32c092385af643bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a4553f4bfe28617e285faa7d9b41b46f7aad067b6a0e95c70de6ff9b84ecb1c282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ItemType *</type>
      <name>getItem</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>afdabf83fa2a6d6113fbbb1a690cd914d</anchor>
      <arglist>(HElementType &amp;el, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numItems</name>
      <anchorfile>a01203.html</anchorfile>
      <anchor>a25bbefd6a6333b13e451263803a5d360</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GetItem&lt; GridImp, 3 &gt;</name>
    <filename>a01207.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aae9fbebfda1117387f068cb376f986d2a40c6aa588651fc3a624ae047beb43085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ae95e0a893938f9be6536ca9b456f66e8ac37cc195473422ff8f6768f4a8e72338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::MPICommunicatorType</type>
      <name>Comm</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>acb3b33dc1c2a8b5e66ee84972d78fd7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HElementType</type>
      <name>HElementType</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a1ceedd91424a04baf65767ab7cf391e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dImplTraits&lt; GridImp::elementType, Comm &gt;::GEOElementType</type>
      <name>GEOElementType</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a1ee2c1b6b6b267858e915cf23522e576</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorElType&lt; 3, Comm &gt;::ElType</type>
      <name>ItemType</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ae3aeb80678501a74ac7bf14d69128a36</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cd</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>aae9fbebfda1117387f068cb376f986d2a40c6aa588651fc3a624ae047beb43085</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elType</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>ae95e0a893938f9be6536ca9b456f66e8ac37cc195473422ff8f6768f4a8e72338</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ItemType *</type>
      <name>getItem</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>a560f2904c4cbcfe401e3883467e8867c</anchor>
      <arglist>(HElementType &amp;el, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>numItems</name>
      <anchorfile>a01207.html</anchorfile>
      <anchor>afc68cd8b7558c08fafc054bac192adfd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridTreeIterator::GetLevel</name>
    <filename>a01819.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getLevel</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a60c5db880093556b4c88c601b3ed6bba</anchor>
      <arglist>(const GridImp &amp;grid, const ItemType &amp;item, int level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, 0 &gt;</name>
    <filename>a01823.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getLevel</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a8b94baab269d7b98c202aa9d16d0ce99</anchor>
      <arglist>(const GridImp &amp;grid, const ItemType &amp;item, int level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ALU3dGridTreeIterator::GetLevel&lt; GridImp, dim, dim &gt;</name>
    <filename>a01827.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getLevel</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a47cd2b7151e64e3780cae2e5d05a0363</anchor>
      <arglist>(const GridImp &amp;grid, const ItemType &amp;item, int level)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01751.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <base>ALU3dGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</base>
    <member kind="typedef">
      <type>BaseType::Grid</type>
      <name>Grid</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>aeb0b9cf64a8f9bae944e29047b5c858f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>aef4b32faeb536274f53dbf0bc42af2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ae5f2b7d27bcf6701a7933c299e884388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0aca10680baa47a31d19c6d4ce1a541c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>GlobalIdType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ad052fe0c173c3b05d69fa93cd0da9dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUGridTransformation&lt; ctype, dimensionworld &gt;</type>
      <name>Transformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a785763d49b9f5011bf0818b6f267ee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldVector</type>
      <name>WorldVector</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8f2eec46fde19f17d7d7f27b699648c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldMatrix</type>
      <name>WorldMatrix</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6d0851ecb9933f17225626dfaf9821c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::CollectiveCommunication</type>
      <name>Communication</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6801c32a640981cd6d7c4c0d93d57b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a19f18f3f00135332465dddc9f0651467</anchor>
      <arglist>(const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a2a724d9f2e1b6374b46fb0a6045c3ee3</anchor>
      <arglist>(const MPIComm &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a79839327b82b4c77667690d03e52cde0</anchor>
      <arglist>(const std::string &amp;filename, const MPICommunicatorType &amp;communicator=Grid::defaultCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a20e12e7e3c151cf6d3e09c92742b97aa</anchor>
      <arglist>(const std::string &amp;filename, const MPIComm &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a1c4acedfbbc6a98b452acd51c36b2312</anchor>
      <arglist>(const VertexInputType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0dcdefec68cda092c3626971684e51fc</anchor>
      <arglist>(const VertexInputType &amp;pos, const VertexId globalId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>abe36d39942007f8050b2aa33d8cf0368</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a7d05123b85a91898b55d26f02020624e</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;faceVertices, int boundaryId=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8b81c207cc7904e059b8438255b338f4</anchor>
      <arglist>(int element, int face, int boundaryId=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a82d44f67bbedc5af7a7fced1c90b138d</anchor>
      <arglist>(int element, int face)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a9c09c2821946b3a4789a885e545b863e</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ac23fc72a93657edc723020e6ca85ea4c</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; VertexId &gt; &amp;vertices, const DuneBoundaryProjectionType *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aa1123e94235f569e9f2c1cc340367799</anchor>
      <arglist>(const DuneBoundaryProjectionType &amp;bndProjection, const bool isSurfaceProjection=(dimension !=dimensionworld))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6f0b01fcc9904aa26c4e6ed2297ccd8c</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af379967ac34b966632c8d734c7265bf7</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimensionworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFaceTransformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a546972a00a3c9652ee7dc01aa6901033</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a117b9b6d0ed179cf81fd83c177572eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a385c54e565db5410aae3871098a5c7ba</anchor>
      <arglist>(const bool addMissingBoundaries, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab3e399190af41e796412ba9d1fcae6f1</anchor>
      <arglist>(const bool addMissingBoundaries, bool temporary, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a36e5e07b66521ee98823557740a4342d</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a5bc4737291f11222c7116241dc60bda5</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>acc924a8e1baa88858485f65f643c5dd3</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af3b67c5bed412c1bc9e33ccbea118668</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>adf7d6c381e2e87e7894e0f11231de128</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a3eed36a544a965599de825a6df1b5934</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>ordering</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6b627e5c16688373a3d62d68292a4db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestEdgeFlag</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aee3bfbf82ef57cccde1c0365edfe0b15</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a091050a4cd9c8478fd968a46ea4245f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>decltype(std::declval&lt; Dune::GridFactoryInterface&lt; Grid &gt; * &gt;() -&gt;createGrid()) typede</type>
      <name>GridPtrType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6055cd40957558a86fa3284f81a5cf51</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALU3dGridElementType</type>
      <name>elementType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af31a40471792ce08d2704d8f4c57f170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab1ff1ffbc38e770e6b8a69bd2d184573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimensionworld</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a170c9449d2f1bf9e354ab7a799486ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridObjectStreamOrDefault</name>
    <filename>a02071.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridObjectStreamOrDefaultHelper&lt; std::is_base_of&lt; HasObjectStream, GridImp &gt;::value, GridImp, DefaultImp &gt;</type>
      <name>GridObjectStreamTraits</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a487210c06a89443b8c0543d800356c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridObjectStreamTraits ::InStreamType</type>
      <name>InStreamType</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a6f8862958e673acbbcae5fef5055e3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridObjectStreamTraits ::OutStreamType</type>
      <name>OutStreamType</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a7077594772bf50c2760ef546d18d61d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridObjectStreamOrDefaultHelper</name>
    <filename>a02063.html</filename>
    <templarg>hasStream</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::InStreamType</type>
      <name>InStreamType</name>
      <anchorfile>a02063.html</anchorfile>
      <anchor>a82b78d2a7867c78c9d3472f706ad9da9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::OutStreamType</type>
      <name>OutStreamType</name>
      <anchorfile>a02063.html</anchorfile>
      <anchor>a5f81e2d63f09419bd65128c9bf696cca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridObjectStreamOrDefaultHelper&lt; false, GridImp, DefaultImp &gt;</name>
    <filename>a02067.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultImp</type>
      <name>InStreamType</name>
      <anchorfile>a02067.html</anchorfile>
      <anchor>af95915ae55de403b1567ebc77ff9340d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultImp</type>
      <name>OutStreamType</name>
      <anchorfile>a02067.html</anchorfile>
      <anchor>a92beddd66641cc5b8364b59fd86d48af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</name>
    <filename>a01739.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>a9324a51ef87912a87e38fb0aee558b49</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01947.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01947.html</anchorfile>
      <anchor>ac8e9902eaf9aedbc5327dc70d62da94d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</name>
    <filename>a01923.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <templarg>cdim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01923.html</anchorfile>
      <anchor>a681c1703231bd4c397bbde916aad4294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; Dune::ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, cdim &gt;</name>
    <filename>a01731.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <templarg>cdim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>ad428d0de08839dba1a0a1709b45ad706</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</name>
    <filename>a01927.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <templarg>cdim</templarg>
    <base>Dune::Capabilities::hasEntity&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</base>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01923.html</anchorfile>
      <anchor>a681c1703231bd4c397bbde916aad4294</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::HasHierarchicIndexSet</name>
    <filename>a02079.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::HasObjectStream</name>
    <filename>a02059.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01919.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01919.html</anchorfile>
      <anchor>a01aedec2a02052e480c7473b3bc69d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a01919.html</anchorfile>
      <anchor>ad10061ca329ad747bdef6e647279bfb7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::DataCollectorCaps::HasUserDefinedLoadWeights</name>
    <filename>a01363.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a071ed45ef3513a7412706e749a701330</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::DataCollectorCaps::HasUserDefinedPartitioning</name>
    <filename>a01351.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>af583265d2a9bcc09b830bc7d8d62c0e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultBoundarySegmentIndexSet::Index</name>
    <filename>a02011.html</filename>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>abe552c22fdaf7da083dc8cf1ac3533b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a693401757b3dc73d92159fdb048c3e72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a1a0ed198a173d937dd1962f20e4da6b2</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="variable">
      <type>IndexType</type>
      <name>index_</name>
      <anchorfile>a02011.html</anchorfile>
      <anchor>a40aa1de7f1a19753d5a783c1632b550e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultIndexSet::Index</name>
    <filename>a01991.html</filename>
    <member kind="function">
      <type></type>
      <name>Index</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>af3050b85d2cca97053d389e179934e0b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a491b5f31d679d1336cca6bb1928ff877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a05e25d667563c42677e7c0407835e3eb</anchor>
      <arglist>(const int index)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>index_</name>
      <anchorfile>a01991.html</anchorfile>
      <anchor>a87ab0e6d246983a04029d77f736503e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexWrapper</name>
    <filename>a01491.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 0 &gt;</name>
    <filename>a01507.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>subIndex</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>a274111c89d6629f5bb1e6818185aee7c</anchor>
      <arglist>(const IMPLElemType &amp;elem, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 1 &gt;</name>
    <filename>a01499.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>subIndex</name>
      <anchorfile>a01499.html</anchorfile>
      <anchor>a20c66fb0d147e759efb0928f0f188a8c</anchor>
      <arglist>(const IMPLElemType &amp;elem, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 2 &gt;</name>
    <filename>a01503.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElemTopo</name>
      <anchorfile>a01503.html</anchorfile>
      <anchor>a2342b74e0325d072b957aef7bbe7fc48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>subIndex</name>
      <anchorfile>a01503.html</anchorfile>
      <anchor>a829248d41a3052063dacd1d2111aaca1</anchor>
      <arglist>(const IMPLElemType &amp;elem, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 3 &gt;</name>
    <filename>a01495.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>type</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; type &gt;</type>
      <name>ElemTopo</name>
      <anchorfile>a01495.html</anchorfile>
      <anchor>ab74bce3f6e45014a0ee3acdadc6f0fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>subIndex</name>
      <anchorfile>a01495.html</anchorfile>
      <anchor>a94fcc9f1a9fd8c7582cd9fa31ad6ab65</anchor>
      <arglist>(const IMPLElemType &amp;elem, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IntersectionIteratorWrapper</name>
    <filename>a02083.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1a67fba1e2272b4cd4457f3a18ba4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5e6a4f34c8ceca5dd8992de0c9a0126f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac5a9f246b62a22f882b9793ebef60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7486787826f481aaea6821d3ec30f7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aa6a930e390a4366df8abde3e1f527ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionIteratorImpl::Twists</type>
      <name>Twists</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a263667af88b14a79ac5aa220c32a61e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a6d017aff2fa75249b96c5e6f65a9d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a513e8a77e6a808cb9a656b6b4693d7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a8e6646a04bb3b4c04aebe3e7c4980a57</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a26ca749ca6ca7a442f23f1e5754b1574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>af53979b166d4db58d10ea7e6194dd655</anchor>
      <arglist>(const ThisType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a3084e064215c6e3dd1856e254a138ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5520609c7fc47a361ffad0063c9b3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2546279c394892d01e97f0d8f3910342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a24db1513f5d16ad9e0e816b85ea01235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aec4c24cf515da9727b837ed8b0bae557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a559058ff42f2b10dd50ef5012984fa0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1ba2b506b675c913966c2a61e659815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2d3afdd0dc3342ae10175d1867c2c356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a973519c799bff80d8c26905c7d425588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a05252123c9f0931b14ddb579246fc93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7475e230d50d2aaf293d913c97e30856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad0e580fa698caebdfc63574648310c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ab9c60c9241455761a7b096b73dfa5384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad53e559114038e76fda3180da48e2eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ace066e9cd9f28b51b63daadd7278b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac8cbd2ddaf715687e675ef03749c52cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aefd873241d788d210d10a6e43eab880f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a0224ffc32d112bb323b0ecf6bc94240b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a149102037a03c91cf3d4a3b2541454cb</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a86b39ccb24d0d7097ee03715fa0c2a51</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a993a6ea9b2cc31f3f7dfd444a15f58fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a52b6742e94646236b9f858b02b532b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a73a8b1bd5cd6a4d642b7c697917186ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2e6d50e4d95a97aa6d725e792afe72ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a22fd64396254cf2ce30669c238eda443</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntersectionIteratorWrapper&lt; GridImp, GridImp::LeafIntersectionIteratorImp &gt;</name>
    <filename>a02083.html</filename>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1a67fba1e2272b4cd4457f3a18ba4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5e6a4f34c8ceca5dd8992de0c9a0126f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac5a9f246b62a22f882b9793ebef60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7486787826f481aaea6821d3ec30f7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aa6a930e390a4366df8abde3e1f527ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionIteratorImpl::Twists</type>
      <name>Twists</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a263667af88b14a79ac5aa220c32a61e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a6d017aff2fa75249b96c5e6f65a9d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a513e8a77e6a808cb9a656b6b4693d7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a8e6646a04bb3b4c04aebe3e7c4980a57</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a26ca749ca6ca7a442f23f1e5754b1574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>af53979b166d4db58d10ea7e6194dd655</anchor>
      <arglist>(const ThisType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a3084e064215c6e3dd1856e254a138ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5520609c7fc47a361ffad0063c9b3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2546279c394892d01e97f0d8f3910342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a24db1513f5d16ad9e0e816b85ea01235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aec4c24cf515da9727b837ed8b0bae557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a559058ff42f2b10dd50ef5012984fa0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1ba2b506b675c913966c2a61e659815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2d3afdd0dc3342ae10175d1867c2c356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a973519c799bff80d8c26905c7d425588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a05252123c9f0931b14ddb579246fc93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7475e230d50d2aaf293d913c97e30856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad0e580fa698caebdfc63574648310c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ab9c60c9241455761a7b096b73dfa5384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad53e559114038e76fda3180da48e2eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ace066e9cd9f28b51b63daadd7278b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac8cbd2ddaf715687e675ef03749c52cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aefd873241d788d210d10a6e43eab880f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a0224ffc32d112bb323b0ecf6bc94240b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a149102037a03c91cf3d4a3b2541454cb</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a86b39ccb24d0d7097ee03715fa0c2a51</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a993a6ea9b2cc31f3f7dfd444a15f58fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a52b6742e94646236b9f858b02b532b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a73a8b1bd5cd6a4d642b7c697917186ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2e6d50e4d95a97aa6d725e792afe72ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a22fd64396254cf2ce30669c238eda443</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IntersectionIteratorWrapper&lt; GridImp, GridImp::LevelIntersectionIteratorImp &gt;</name>
    <filename>a02083.html</filename>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1a67fba1e2272b4cd4457f3a18ba4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5e6a4f34c8ceca5dd8992de0c9a0126f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac5a9f246b62a22f882b9793ebef60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7486787826f481aaea6821d3ec30f7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aa6a930e390a4366df8abde3e1f527ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionIteratorImpl::Twists</type>
      <name>Twists</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a263667af88b14a79ac5aa220c32a61e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a6d017aff2fa75249b96c5e6f65a9d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a513e8a77e6a808cb9a656b6b4693d7d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIteratorWrapper</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a8e6646a04bb3b4c04aebe3e7c4980a57</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a26ca749ca6ca7a442f23f1e5754b1574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>af53979b166d4db58d10ea7e6194dd655</anchor>
      <arglist>(const ThisType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a3084e064215c6e3dd1856e254a138ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5520609c7fc47a361ffad0063c9b3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2546279c394892d01e97f0d8f3910342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a24db1513f5d16ad9e0e816b85ea01235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aec4c24cf515da9727b837ed8b0bae557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a559058ff42f2b10dd50ef5012984fa0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1ba2b506b675c913966c2a61e659815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2d3afdd0dc3342ae10175d1867c2c356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a973519c799bff80d8c26905c7d425588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a05252123c9f0931b14ddb579246fc93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7475e230d50d2aaf293d913c97e30856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad0e580fa698caebdfc63574648310c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ab9c60c9241455761a7b096b73dfa5384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad53e559114038e76fda3180da48e2eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ace066e9cd9f28b51b63daadd7278b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac8cbd2ddaf715687e675ef03749c52cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aefd873241d788d210d10a6e43eab880f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a0224ffc32d112bb323b0ecf6bc94240b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a149102037a03c91cf3d4a3b2541454cb</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a86b39ccb24d0d7097ee03715fa0c2a51</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a993a6ea9b2cc31f3f7dfd444a15f58fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a52b6742e94646236b9f858b02b532b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a73a8b1bd5cd6a4d642b7c697917186ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2e6d50e4d95a97aa6d725e792afe72ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a22fd64396254cf2ce30669c238eda443</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDataHandle</name>
    <filename>a02215.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDofManager</name>
    <filename>a02075.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01943.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01943.html</anchorfile>
      <anchor>a6df317ada85f4075261ccea46de23c1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</name>
    <filename>a01735.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01735.html</anchorfile>
      <anchor>a627be6e51c84694c8161a3fea20f0ec5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01939.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01939.html</anchorfile>
      <anchor>a945f2fe9e44c1cb0a1d98b36fd446253</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::IteratorElType</name>
    <filename>a01131.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IteratorElType&lt; 0, Comm &gt;</name>
    <filename>a01131.html</filename>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IteratorElType&lt; 1, Comm &gt;</name>
    <filename>a01131.html</filename>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IteratorElType&lt; 2, Comm &gt;</name>
    <filename>a01131.html</filename>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IteratorElType&lt; 3, Comm &gt;</name>
    <filename>a01131.html</filename>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Comm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Comm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IteratorElType&lt; codim, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01131.html</filename>
    <member kind="typedef">
      <type>ALUHElementType&lt; codim, Dune::ALUGridMPIComm &gt;::ElementType</type>
      <name>ElType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a20850e027a0e4c5084e7340364b5b774</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType</type>
      <name>HBndSegType</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>af89a7f9dfee2dfa2092f82e50d15795c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ElType *, HBndSegType * &gt;</type>
      <name>val_t</name>
      <anchorfile>a01131.html</anchorfile>
      <anchor>a0eadb51e2c851e8dafb92775bce95a4d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::IteratorWrapperInterface</name>
    <filename>a01127.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~IteratorWrapperInterface</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a99bc290c583794d205722dd2114ead82</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>size</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>ad88a6b139c78a75d1a69f9bae1b12182</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>next</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a32a59a2c685acc45050b810f11b5f864</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>first</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a498ca043fd6c1eb87e6802a051b50642</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>done</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a49623d2b7f8ef4ffb2a8ad28e0293e2a</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual val_t &amp;</type>
      <name>item</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a6e6d310f6984a38731b9e4ad36c1c16e</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual IteratorSTI&lt; val_t &gt; *</type>
      <name>clone</name>
      <anchorfile>a01127.html</anchorfile>
      <anchor>a1ac1eff55801b4469fb9a60eca8ce939</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafIntersectionIteratorWrapper</name>
    <filename>a02091.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a98579063b992923ea3888b56da422ac7a9f9b5b2316a047b7df30ddcd5a77e441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>ad325fd274ff7659b07912e0df91d2430a21450e8c939c1d4504a7583ea1a76736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, IntersectionImp &gt;</type>
      <name>Intersection</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a83b3a6fb6504b82fbc486071331498c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a95f355ae4d9bb0647924d0c5607bf414</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a1f0b11fba5627fa5c50b8692b86e66e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>abe527121be4006168721c295a00f5e4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a0b799a2f5b74068b8760f17c3bb952a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>af70c7e826a41bcf24f9d29f15c0b6193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a98579063b992923ea3888b56da422ac7a9f9b5b2316a047b7df30ddcd5a77e441</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>ad325fd274ff7659b07912e0df91d2430a21450e8c939c1d4504a7583ea1a76736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionIteratorWrapper</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>aca6e7b0a558ab78fcb3363eb735711e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionIteratorWrapper</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a98a666ac1f6f8612338ff0aadc009c15</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionIteratorWrapper</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a52783ed1c5b1c1dbc143d13e87b91430</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>af5408e3b3644952b99d02a3d887f891a</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>const Intersection &amp;</type>
      <name>dereference</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>ad4c727cda151b0372a4b9e01dd1ae62e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a06d8783e229f1dba874e9cfd9f0c104c</anchor>
      <arglist>(const ThisType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a9af09344e8b81cacbd0131529e964e3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntersectionImp &amp;</type>
      <name>impl</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>ad1fd4c223ca9dd8b22161713c4502b24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IntersectionImp &amp;</type>
      <name>impl</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a2a33cf1ca2a36e1ab41a4252f618d5f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Intersection</type>
      <name>intersection_</name>
      <anchorfile>a02091.html</anchorfile>
      <anchor>a249acbf8ba8218236a928aa13e3131e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafIntersectionWrapper</name>
    <filename>a02087.html</filename>
    <templarg></templarg>
    <base>IntersectionIteratorWrapper&lt; GridImp, GridImp::LeafIntersectionIteratorImp &gt;</base>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1a67fba1e2272b4cd4457f3a18ba4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5e6a4f34c8ceca5dd8992de0c9a0126f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac5a9f246b62a22f882b9793ebef60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7486787826f481aaea6821d3ec30f7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aa6a930e390a4366df8abde3e1f527ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionIteratorImpl::Twists</type>
      <name>Twists</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a263667af88b14a79ac5aa220c32a61e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a6d017aff2fa75249b96c5e6f65a9d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionWrapper</name>
      <anchorfile>a02087.html</anchorfile>
      <anchor>aef52afe398770077d6a3243f47d60525</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionWrapper</name>
      <anchorfile>a02087.html</anchorfile>
      <anchor>ae8f4545dc322fa6d53767978e2ca14d7</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafIntersectionWrapper</name>
      <anchorfile>a02087.html</anchorfile>
      <anchor>a013a773059f3be78bf38a46a1bba2c77</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a26ca749ca6ca7a442f23f1e5754b1574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>af53979b166d4db58d10ea7e6194dd655</anchor>
      <arglist>(const ThisType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a3084e064215c6e3dd1856e254a138ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5520609c7fc47a361ffad0063c9b3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2546279c394892d01e97f0d8f3910342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a24db1513f5d16ad9e0e816b85ea01235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aec4c24cf515da9727b837ed8b0bae557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a559058ff42f2b10dd50ef5012984fa0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1ba2b506b675c913966c2a61e659815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2d3afdd0dc3342ae10175d1867c2c356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a973519c799bff80d8c26905c7d425588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a05252123c9f0931b14ddb579246fc93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7475e230d50d2aaf293d913c97e30856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad0e580fa698caebdfc63574648310c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ab9c60c9241455761a7b096b73dfa5384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad53e559114038e76fda3180da48e2eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ace066e9cd9f28b51b63daadd7278b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac8cbd2ddaf715687e675ef03749c52cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aefd873241d788d210d10a6e43eab880f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a0224ffc32d112bb323b0ecf6bc94240b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a149102037a03c91cf3d4a3b2541454cb</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a86b39ccb24d0d7097ee03715fa0c2a51</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a993a6ea9b2cc31f3f7dfd444a15f58fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a52b6742e94646236b9f858b02b532b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a73a8b1bd5cd6a4d642b7c697917186ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2e6d50e4d95a97aa6d725e792afe72ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a22fd64396254cf2ce30669c238eda443</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::LeafLevelIteratorTTProxy</name>
    <filename>a01179.html</filename>
    <templarg>codim</templarg>
    <member kind="function">
      <type></type>
      <name>LeafLevelIteratorTTProxy</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>a5f629dec98cdd1774388b4ae0deac2fd</anchor>
      <arglist>(GitterImplType &amp;gitter, int link)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafLevelIteratorTTProxy</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>a87da6472aff7fc12a60910d03d65ec36</anchor>
      <arglist>(GitterImplType &amp;gitter, int link, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafLevelIteratorTTProxy</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>ac007c0cd8375b46f7f46c397027ed89f</anchor>
      <arglist>(const LeafLevelIteratorTTProxy &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LeafLevelIteratorTTProxy</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>a91c109901b5995b457bb6e91153bc81a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType &amp;</type>
      <name>inner</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>aebd8db2b5d2aeb8b56f5cc50fdca950c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IteratorType &amp;</type>
      <name>outer</name>
      <anchorfile>a01179.html</anchorfile>
      <anchor>a39d24f5ecbaec31c6a45af37abad9a2c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::LeafStopRule</name>
    <filename>a01159.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>is_leaf_entity&lt; ElType &gt;</type>
      <name>StopRule_t</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>aed43385bab2cfdf2002628f5bf89b935</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::LeafStopRule&lt; ElType, Dune::Interior_Partition, Dune::ALUGridMPIComm &gt;</name>
    <filename>a01163.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>is_interior_leaf_entity&lt; ElType &gt;</type>
      <name>StopRule_t</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a307bafd1294aef4d3a5cbd6e6d00f97c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelIntersectionIteratorWrapper</name>
    <filename>a02099.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a0caa18dc66a07480fbd5ff9892cd710dac5517c31e51255699519e311e35e74ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>abc4ed5dd00145b932b5c86b75227d4f6ab0db160f02334dd6457f1e2475fb30b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, IntersectionImp &gt;</type>
      <name>Intersection</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>af087d9a0f777dcc6945d645acd822f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>ab6a63b54eef1faf3d95f217af9fa27e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a1c8c6d410b37a034bb6b97f730d670b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a870ecdce583de1c9bc439e4ca6663c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a9061ff8622cdc4ed795bd64680055a3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a8b681cadef8e7f3b790b0c33c63d054f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a0caa18dc66a07480fbd5ff9892cd710dac5517c31e51255699519e311e35e74ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>abc4ed5dd00145b932b5c86b75227d4f6ab0db160f02334dd6457f1e2475fb30b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionIteratorWrapper</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a23b26b48718108d7eeb9600b6bd5d95c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionIteratorWrapper</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>aec4d4057166e7251233f3ecc9c11be96</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionIteratorWrapper</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>abd0fc33105bff92f828d86dedfb75292</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>afe48466e2cf7e463873281d15c4f6770</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>const Intersection &amp;</type>
      <name>dereference</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>ab95dc17844cc1d048befc0036aecb731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a2768ef430b18d320230ec6858b829918</anchor>
      <arglist>(const ThisType &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>aa51d2273a1cc5fa9c920059be54c1167</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>IntersectionImp &amp;</type>
      <name>impl</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a0f770b24466f51a270bb397f5973ae18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IntersectionImp &amp;</type>
      <name>impl</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a95cb35244869fb64729f16fc2b95b3c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Intersection</type>
      <name>intersection_</name>
      <anchorfile>a02099.html</anchorfile>
      <anchor>a1a4ebd75fff66a45966161a70e6340a9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelIntersectionWrapper</name>
    <filename>a02095.html</filename>
    <templarg></templarg>
    <base>IntersectionIteratorWrapper&lt; GridImp, GridImp::LevelIntersectionIteratorImp &gt;</base>
    <member kind="typedef">
      <type>GridImp ::ctype</type>
      <name>ctype</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1a67fba1e2272b4cd4457f3a18ba4682</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5e6a4f34c8ceca5dd8992de0c9a0126f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac5a9f246b62a22f882b9793ebef60379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7486787826f481aaea6821d3ec30f7bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalType</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aa6a930e390a4366df8abde3e1f527ae1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionIteratorImpl::Twists</type>
      <name>Twists</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a263667af88b14a79ac5aa220c32a61e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Twists::Twist</type>
      <name>Twist</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a6d017aff2fa75249b96c5e6f65a9d418</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a9d0dd59a4946b17e176ecb38725974bcad75e720f09317c107b1e1a60d4f7153f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a421747f486d9db51e02e33e8d055ea51abc2ad2a27f21f93aafa8fd8dd23b8403</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionWrapper</name>
      <anchorfile>a02095.html</anchorfile>
      <anchor>a52b454c7a22b19dcf382da2e71d9bc85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionWrapper</name>
      <anchorfile>a02095.html</anchorfile>
      <anchor>ab0dca43b83ba6aabe8be04122321e595</anchor>
      <arglist>(const GridImp &amp;grid, const EntityImp &amp;en, int wLevel, bool end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIntersectionWrapper</name>
      <anchorfile>a02095.html</anchorfile>
      <anchor>aa38d312201c13a32e1a25b0f007568cc</anchor>
      <arglist>(const ThisType &amp;org)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a26ca749ca6ca7a442f23f1e5754b1574</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>af53979b166d4db58d10ea7e6194dd655</anchor>
      <arglist>(const ThisType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a3084e064215c6e3dd1856e254a138ad6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a5520609c7fc47a361ffad0063c9b3a17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2546279c394892d01e97f0d8f3910342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a24db1513f5d16ad9e0e816b85ea01235</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aec4c24cf515da9727b837ed8b0bae557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a559058ff42f2b10dd50ef5012984fa0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a1ba2b506b675c913966c2a61e659815b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>segmentId</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2d3afdd0dc3342ae10175d1867c2c356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a973519c799bff80d8c26905c7d425588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a05252123c9f0931b14ddb579246fc93c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a7475e230d50d2aaf293d913c97e30856</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad0e580fa698caebdfc63574648310c75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ab9c60c9241455761a7b096b73dfa5384</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ad53e559114038e76fda3180da48e2eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInInside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ace066e9cd9f28b51b63daadd7278b9d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Twist</type>
      <name>twistInOutside</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>ac8cbd2ddaf715687e675ef03749c52cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>aefd873241d788d210d10a6e43eab880f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a0224ffc32d112bb323b0ecf6bc94240b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>outerNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a149102037a03c91cf3d4a3b2541454cb</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const NormalType</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a86b39ccb24d0d7097ee03715fa0c2a51</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a993a6ea9b2cc31f3f7dfd444a15f58fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a52b6742e94646236b9f858b02b532b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a73a8b1bd5cd6a4d642b7c697917186ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IntersectionIteratorImp &amp;</type>
      <name>it</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a2e6d50e4d95a97aa6d725e792afe72ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02083.html</anchorfile>
      <anchor>a22fd64396254cf2ce30669c238eda443</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LinearMapping</name>
    <filename>a01867.html</filename>
    <templarg>cdim</templarg>
    <templarg>mydim</templarg>
    <member kind="typedef">
      <type>alu3d_ctype</type>
      <name>ctype</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a737b4b05da308a9c735687f80c69a5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctype</type>
      <name>double_t</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aedf081e6c080f567cc013033ee20b822</anchor>
      <arglist>[cdim]</arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>world_t</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a554655b60a0b90c1f7fcae16a3934a43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>map_t</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a9aa1bfffc65975cfbf692ec544ae2eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydim, cdim &gt;</type>
      <name>matrix_t</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a45790b223df0bba36be106e43b7a58f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, mydim &gt;</type>
      <name>inv_t</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a7decd69171f68887c47d3810b717d632</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ac7f169e64a29a91e6717b2651f06da15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LinearMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aea97988faf2e60f52291ff143421112c</anchor>
      <arglist>(const LinearMapping &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a496b2943771528e57b7985ae4ff87787</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const matrix_t &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ade8c16d2d324d92f87a8eda4861774a3</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const inv_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ae3ca44edc8b02dcf9e59130ac1990f46</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>det</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a9f04764e9b017cabd5897de15d514927</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>world2map</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aff6e85f3e7313b5266a44978f577e355</anchor>
      <arglist>(const world_t &amp;, map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a9a7af9d3b8e91646ca6448a015e837cc</anchor>
      <arglist>(const map_t &amp;, world_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>adb114b601a6e44bf8114e345bbbcd715</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aea50e5f7bc5e5a47d29b003cee1ae1a7</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a5e95748c804a453fe86702ed9d3fa838</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ad31d76066c40cdd99045e245f3671659</anchor>
      <arglist>(const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a5341cc73dbda589f8b0d9157e5a5ef1e</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1, const vector_t &amp;p2, const vector_t &amp;p3)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a9ea49a2620eb9bf2c5bfa1426780c732</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1, const vector_t &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a9a2746577d79e3db4bf5fcd79eb75e43</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a78975eb7411eed6578c30dba9a185fea</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1, const vector_t &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a43e065c298132339b22a31b9f8271028</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>abfc7a9e03cbb78e76a4dc3fdd3694819</anchor>
      <arglist>(const vector_t &amp;p0)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>acbbb570684b46b28851115182a03d01c</anchor>
      <arglist>(const vector_t &amp;p0)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline const LinearMapping&lt; 3, 0 &gt;::inv_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a23a516f4b77f21ea61bc06c109afa116</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline const LinearMapping&lt; 2, 0 &gt;::inv_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aeccb5868a90a5adcab36830dc2174128</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a1662d233990ae201c276645d85f14c54</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>inverseCodimOne</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a436d1682ada9ca909c1aab11a03f466a</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>calculateDeterminant</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a909a4e4cc9bf882d68559a31293ad473</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multTransposedMatrix</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aa97e1efb39a474112bfe8c46a9710a6f</anchor>
      <arglist>(const matrix_t &amp;matrix, FieldMatrix&lt; ctype, mydim, mydim &gt; &amp;result) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>multMatrix</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a3876f61fec37afcbf05017313243a688</anchor>
      <arglist>(const matrix_t &amp;A, const FieldMatrix&lt; ctype, mydim, mydim &gt; &amp;B, inv_t &amp;ret) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aa05016e41a624be25d843edaef800fb3</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a0c5e82faa43c5d5a24037bc8981fb243</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a41f89715b324076c100ecd4854242939</anchor>
      <arglist>(const map_t &amp;local) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a8ad6ba969946ef3601a7cbf197c74922</anchor>
      <arglist>(const map_t &amp;local) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverseCodimOne</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aa1b35435b0c81899ab618a1b0182f122</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverseCodimOne</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ae0eabde32bf065dfb6fda6217f4951a0</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>calculateDeterminant</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aaa5518af3a1598f89be1f01c913aeb65</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>inverse</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>acca355d7d471ccf2fbdabc5c6c2ba21b</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>calculateDeterminant</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>abe899f507f35cc048bf636fb8f95d10c</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>alu_inline void</type>
      <name>calculateDeterminant</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a0695e2fe7afcbf0c7a6d51b507824c20</anchor>
      <arglist>(const map_t &amp;) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_t</type>
      <name>_matrix</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>af383ed9d1a366a23efd39ca1f270f44d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>inv_t</type>
      <name>_invTransposed</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a060f99677b80ca85cff1e7587cdfb7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>world_t</type>
      <name>_p0</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a8af4b18c59c756539b45e4d21f9e5543</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ctype</type>
      <name>_det</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>af52731d64d0053dc9946442973456c7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_calcedInv</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ae935dd996799be76660c0ba169919505</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_calcedDet</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>aef6878e421b229ac5268095d62cd26a8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>LoadBalanceHandleWithReserveAndCompress</name>
    <filename>a02103.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::MacroGridView</name>
    <filename>a02107.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::MacroGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aced656105261cc5d1fc1ec51fa93ccdda2969a46b808b06e8f3a3129f09fae80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a97344bfade4be10f3eb828a3b6266a83adeb3a2c333ee52709193e4cc9520a9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>af7de05387110f8959c1c596c6a32db06ac0a7c058985217a4c84ad4a9be34ee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MacroGridViewTraits&lt; GridImp, pitype &gt;</type>
      <name>Traits</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a8d757eb5ae18253622ec7be7bc9c9e62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>ab95a359e4b6985bfeaf3dc16301f7b19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a37eddf22c62460155fad8699d3e2ff41</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>af0044cee457249c9c31ee15d01276428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a53329ee1b18acd5ffd466f85e8335ad0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aa38423824f27be69efcdde6bcaafff02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a9863e174800877e73b8fef1d78a5d7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aced656105261cc5d1fc1ec51fa93ccdda2969a46b808b06e8f3a3129f09fae80a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a97344bfade4be10f3eb828a3b6266a83adeb3a2c333ee52709193e4cc9520a9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>af7de05387110f8959c1c596c6a32db06ac0a7c058985217a4c84ad4a9be34ee91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacroGridView</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aaa960a0ef08813e4d62aaf33ae96b93a</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a909b33f0f08d8a35bf79d5b83ab53c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a6b4431e3880c0db94eb91e371379627c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>adcb786a9ad8c00331caead60af629132</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>ac7935bf41d42439a431684f343d1ff25</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a8d8a27ffec28d97ac953477e62c8f7f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a7f9cef951738ab41642bbd857a426b08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>ac2f445318a1615813e8c48e0ed93175a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a298e4a52cc7c7d81f81a67abb78482ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aa82451c1d639718cfef2e6be2bd0a289</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>ae3768bf3080bfd6a2660dd3ee12e43d3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a5c6c8df40c368fb8e7318e243e0c8604</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a979cf68b5f9d4bb764712a1521e3105c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a602cb87eaad28edba37512ee0256c606</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aa58b4a4ebe2c1de5eb5c28f2c11a08d1</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>master</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>ae05c31c6ced052f62c30c58fa4688518</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>macroId</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a7ab9a2d65df9f16859b769ea176d2947</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a2f97aa0d1b9159414446f07cbb7a3b00</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>weight</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>af0bb5d842f3cd6b204d0e60860ba9c36</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>aee425758b2c48fd375412cd76a7cef6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>level_</name>
      <anchorfile>a02107.html</anchorfile>
      <anchor>a9a0ece7a9ab8ed27b3106fa58bade4a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MacroGridViewTraits</name>
    <filename>a02111.html</filename>
    <templarg></templarg>
    <templarg>pitype</templarg>
    <class kind="struct">Dune::MacroGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>ad6dde600adc442cdf8ae8075869e04afa84c7d7a5bacdfb9cb55cbad73237354c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MacroGridView&lt; GridImp, pitype &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>a11cc3399715d3a5a8a4b92da06ebeaea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>aab27ddaee459e57fb71a8633a00ce2fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>a5cf00ed0afc9ff127274201283116e47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersection</type>
      <name>Intersection</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>a2c19d4d2273b7d56878d15f75bf3129e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>ad8fe80dd3a7cca58a181aa0c23511f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>a9050584e967e88f69b9ea0f1e452f26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02111.html</anchorfile>
      <anchor>ad6dde600adc442cdf8ae8075869e04afa84c7d7a5bacdfb9cb55cbad73237354c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MyALUGridGeometryImplementation</name>
    <filename>a01595.html</filename>
    <templarg>cdim</templarg>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 1, eltype &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, hexa &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 2, tetra &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, hexa &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImpl&lt; dummy, 3, tetra &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation::GeometryImplBase</class>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, cdim &gt;</type>
      <name>CoordinateVectorType</name>
      <anchorfile>a01595.html</anchorfile>
      <anchor>a7480d011b91a03d131aa6374c60eb0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const signed char</type>
      <name>invalid</name>
      <anchorfile>a01595.html</anchorfile>
      <anchor>a807c7fb8db83347119fe999826563636</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const signed char</type>
      <name>updated</name>
      <anchorfile>a01595.html</anchorfile>
      <anchor>a94625aaa2dcf7e397b823568dc8e791c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const signed char</type>
      <name>buildmapping</name>
      <anchorfile>a01595.html</anchorfile>
      <anchor>a127e550131bcb0af4a4a22013ac09d2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NonConformingFaceMapping</name>
    <filename>a01871.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>type</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::NonConformingFaceMapping&lt; dim, dimworld, hexa, Comm &gt;</name>
    <filename>a01879.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 2 &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01879.html</anchorfile>
      <anchor>aaaf494800399bd4c31c3faf56907d90a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; hexa, Comm &gt;::HfaceRuleType</type>
      <name>RefinementRuleType</name>
      <anchorfile>a01879.html</anchorfile>
      <anchor>a8426a8a2a708b8c7c7212eaa41d903ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonConformingFaceMapping</name>
      <anchorfile>a01879.html</anchorfile>
      <anchor>a81233be0e2075d22616c25d58cf32b32</anchor>
      <arglist>(RefinementRuleType rule, int nChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>child2parent</name>
      <anchorfile>a01879.html</anchorfile>
      <anchor>a6abf16244aac603cd557f35e1b00b952</anchor>
      <arglist>(const CoordinateType &amp;childCoordinates, CoordinateType &amp;parentCoordinates) const</arglist>
    </member>
    <member kind="function">
      <type>CoordinateType</type>
      <name>child2parent</name>
      <anchorfile>a01879.html</anchorfile>
      <anchor>aba9acbefc704a74c72904b0ff1a49a03</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 2 &gt; &amp;childCoordinates) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NonConformingFaceMapping&lt; dim, dimworld, tetra, Comm &gt;</name>
    <filename>a01875.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>a48366a531d36caaf0b132ac1513571e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; tetra, Comm &gt;::HfaceRuleType</type>
      <name>RefinementRuleType</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>a3467ef4e68c17fee9611cc4ef1336e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonConformingFaceMapping</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>a93f24f9dab82dc57491200694bd9b772</anchor>
      <arglist>(RefinementRuleType rule, int nChild)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>child2parent</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>a2e51df36ecca6a8b735a6dd02407b8fa</anchor>
      <arglist>(const CoordinateType &amp;childCoordinates, CoordinateType &amp;parentCoordinates) const</arglist>
    </member>
    <member kind="function">
      <type>CoordinateType</type>
      <name>child2parent</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>a56d417f80b332df6143eca785ea5a324</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, 2 &gt; &amp;childCoordinates) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGrid::Partition</name>
    <filename>a01727.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>GridFamily::Traits::template Partition&lt; pitype &gt;::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a7df495758a4b7b795c10d3613bedf022</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Partition&lt; pitype &gt;::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a35037f10812a69e3a3a894cfc7bae3c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Partition&lt; pitype &gt;::MacroGridView</type>
      <name>MacroGridView</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>a702370359c2effe820ad1253bb7bf6f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFamily::Traits::Codim::Partition</name>
    <filename>a01715.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const Grid, ALU3dGridLevelIterator&lt; cd, pitype, const Grid &gt; &gt;</type>
      <name>LevelIterator</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>ae6902e6d9f7bc731a63d84cbf487ba55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const Grid, ALU3dGridLeafIterator&lt; cd, pitype, const Grid &gt; &gt;</type>
      <name>LeafIterator</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a0480e609b4d145ae10759e650230bdc4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFamily::Traits::Partition</name>
    <filename>a01719.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Dune::GridView&lt; ALU3dLevelGridViewTraits&lt; const Grid, pitype &gt; &gt;</type>
      <name>LevelGridView</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>ae507049d9fad32df6bc0db9b061d27c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; ALU3dLeafGridViewTraits&lt; const Grid, pitype &gt; &gt;</type>
      <name>LeafGridView</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>a63d18af3c8a5becd06b8c9a9788c8aa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::MacroGridView&lt; const Grid, pitype &gt;</type>
      <name>MacroGridView</name>
      <anchorfile>a01719.html</anchorfile>
      <anchor>aefc83ce348e81757f6cecc976cdbbc0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLeafGridViewTraits::Codim::Partition</name>
    <filename>a01795.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a01795.html</anchorfile>
      <anchor>a9009a5435b330eb0e65ecdb0ac491a47</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dLevelGridViewTraits::Codim::Partition</name>
    <filename>a01779.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a01779.html</anchorfile>
      <anchor>aa3acbf6c8e1d1bd731a366af99d2d6cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUGrid::Partition</name>
    <filename>a01295.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Dune::GridView&lt; ALU3dLevelGridViewTraits&lt; const This, pitype &gt; &gt;</type>
      <name>LevelGridView</name>
      <anchorfile>a01295.html</anchorfile>
      <anchor>a7dfb2a3210c056702ced13f89f297499</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; ALU3dLeafGridViewTraits&lt; const This, pitype &gt; &gt;</type>
      <name>LeafGridView</name>
      <anchorfile>a01295.html</anchorfile>
      <anchor>a6b297511f58fb4a8b705348fdf7d8240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafIteratorTypes::Codim::Partition</name>
    <filename>a01983.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>GridImp::Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a01983.html</anchorfile>
      <anchor>aa68b59ce6a03e68564b8526dee3cb769</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelIteratorTypes::Codim::Partition</name>
    <filename>a01971.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>GridImp::Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a01971.html</anchorfile>
      <anchor>a9d49e4539da5508ff9f90fe1d5025923</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MacroGridViewTraits::Codim::Partition</name>
    <filename>a02119.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02119.html</anchorfile>
      <anchor>ae01dd68305eb73559b04cfb9f08a63c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, T &gt;</name>
    <filename>a02151.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>elType</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ALUGridPersistentContainer&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, T &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>a7f8f0d25660ab9644f75aa3a99f569a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>a9d32d2e6e5d7de5b9694a9d4b5f16f9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>GridType</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>aca282eb8f1ba414efab4cda7c7246cb6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>a016a0a6eaa4dd8b16d337e916d98e78f</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, T &gt;</name>
    <filename>a02147.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ALUGridPersistentContainer&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, T &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>acc551793ed04b9c16361a277da4f8eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>a7b006c41a1076e97a9b735d3fa15331f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>GridType</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>a5f5029cf88504d21bca2c7cca5ceda2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>afe720370c99c93bf77e520e9ae7b6345</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::ReferenceCountedObject</name>
    <filename>a02135.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>aa7db5bb631186d31abc4e43f0c6e8948</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a0cf00f8d9801c1d3fb50a89c6740a802</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator--</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>aee54cfef1bcaa8a118e0521774d82557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>aa238c87b26604f0c3947f33d49b4eab3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>aeaf96a686fe0f6a38ef7078d450d2bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ObjectType &amp;</type>
      <name>object</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a8201e906a827e98f23d82b2e7b91eaf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>object</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a8e654aabc36f9b4e2100f12812d00d92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ObjectImp</type>
      <name>ObjectType</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a75e565f790f7f8df008c6b2fb0506f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>unsigned int &amp;</type>
      <name>refCount</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a95779e9246b9a60888ab21e845dc452b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const unsigned int &amp;</type>
      <name>refCount</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>a2a2dcbb4648b24e0ee78dd33c61bd4fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ObjectType</type>
      <name>object_</name>
      <anchorfile>a02135.html</anchorfile>
      <anchor>ae396e2fa2cfc521bd25651a08771a292</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ReferenceGridFactory</name>
    <filename>a01755.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ReferenceGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</name>
    <filename>a01759.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg>eltype</templarg>
    <templarg>refinementtype</templarg>
    <templarg></templarg>
    <base>ALU3dGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</base>
    <member kind="typedef">
      <type>BaseType::Grid</type>
      <name>Grid</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>aac9a9f288d936dd6029d1309bd713a66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType::MPICommunicatorType</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a05fed5b04e9ff7ba3bd3c40772615d48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ae5f2b7d27bcf6701a7933c299e884388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>VertexId</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0aca10680baa47a31d19c6d4ce1a541c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>GlobalIdType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ad052fe0c173c3b05d69fa93cd0da9dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALUGridTransformation&lt; ctype, dimensionworld &gt;</type>
      <name>Transformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a785763d49b9f5011bf0818b6f267ee0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldVector</type>
      <name>WorldVector</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8f2eec46fde19f17d7d7f27b699648c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transformation::WorldMatrix</type>
      <name>WorldMatrix</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6d0851ecb9933f17225626dfaf9821c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::CollectiveCommunication</type>
      <name>Communication</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6801c32a640981cd6d7c4c0d93d57b95</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReferenceGridFactory</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a1bc8c64d27ce7869658c3909b591182d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a1c4acedfbbc6a98b452acd51c36b2312</anchor>
      <arglist>(const VertexInputType &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertVertex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a0dcdefec68cda092c3626971684e51fc</anchor>
      <arglist>(const VertexInputType &amp;pos, const VertexId globalId)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>abe36d39942007f8050b2aa33d8cf0368</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a7d05123b85a91898b55d26f02020624e</anchor>
      <arglist>(const GeometryType &amp;geometry, const std::vector&lt; VertexId &gt; &amp;faceVertices, int boundaryId=1)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a8b81c207cc7904e059b8438255b338f4</anchor>
      <arglist>(int element, int face, int boundaryId=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a82d44f67bbedc5af7a7fced1c90b138d</anchor>
      <arglist>(int element, int face)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertProcessBorder</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a9c09c2821946b3a4789a885e545b863e</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ac23fc72a93657edc723020e6ca85ea4c</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; VertexId &gt; &amp;vertices, const DuneBoundaryProjectionType *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aa1123e94235f569e9f2c1cc340367799</anchor>
      <arglist>(const DuneBoundaryProjectionType &amp;bndProjection, const bool isSurfaceProjection=(dimension !=dimensionworld))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6f0b01fcc9904aa26c4e6ed2297ccd8c</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af379967ac34b966632c8d734c7265bf7</anchor>
      <arglist>(const std::vector&lt; VertexId &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimensionworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFaceTransformation</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a546972a00a3c9652ee7dc01aa6901033</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a117b9b6d0ed179cf81fd83c177572eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a385c54e565db5410aae3871098a5c7ba</anchor>
      <arglist>(const bool addMissingBoundaries, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>GridPtrType</type>
      <name>createGrid</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab3e399190af41e796412ba9d1fcae6f1</anchor>
      <arglist>(const bool addMissingBoundaries, bool temporary, const std::string dgfName=&quot;&quot;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a36e5e07b66521ee98823557740a4342d</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a5bc4737291f11222c7116241dc60bda5</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>acc924a8e1baa88858485f65f643c5dd3</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af3b67c5bed412c1bc9e33ccbea118668</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>adf7d6c381e2e87e7894e0f11231de128</anchor>
      <arglist>(const typename Grid::LevelIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a3eed36a544a965599de825a6df1b5934</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>ordering</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6b627e5c16688373a3d62d68292a4db1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLongestEdgeFlag</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>aee3bfbf82ef57cccde1c0365edfe0b15</anchor>
      <arglist>(bool flag=true)</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a091050a4cd9c8478fd968a46ea4245f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>decltype(std::declval&lt; Dune::GridFactoryInterface&lt; Grid &gt; * &gt;() -&gt;createGrid()) typede</type>
      <name>GridPtrType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a6055cd40957558a86fa3284f81a5cf51</anchor>
      <arglist>)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const ALU3dGridElementType</type>
      <name>elementType</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>af31a40471792ce08d2704d8f4c57f170</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>ab1ff1ffbc38e770e6b8a69bd2d184573</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimensionworld</name>
      <anchorfile>a01651.html</anchorfile>
      <anchor>a170c9449d2f1bf9e354ab7a799486ffa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; hexa, Comm &gt;::RefinementRules</name>
    <filename>a01079.html</filename>
    <base>Dune::ALU3dRefinementTraits&lt; MarkRuleType, hexa &gt;</base>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ae72ae7aa77b06032b699cda6facd2cb4adb7c2a13df48010c581afff7d18e2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ace73e93a6d04bad22aef638c8caadf1da45f84aedd4badb2691ae2849d08cf5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>a36ef2bfcf1da8802eefe7de5f78dff6aad245a45887afc4ed4b43825d94dffb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ad8bcefbb43d66f20067c6d29fd22e2bdabf7a04269b7c75fb87b2a713ced31eba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ae72ae7aa77b06032b699cda6facd2cb4adb7c2a13df48010c581afff7d18e2d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ace73e93a6d04bad22aef638c8caadf1da45f84aedd4badb2691ae2849d08cf5b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>a36ef2bfcf1da8802eefe7de5f78dff6aad245a45887afc4ed4b43825d94dffb50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01055.html</anchorfile>
      <anchor>ad8bcefbb43d66f20067c6d29fd22e2bdabf7a04269b7c75fb87b2a713ced31eba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dImplTraits&lt; tetra, Comm &gt;::RefinementRules</name>
    <filename>a01067.html</filename>
    <base>Dune::ALU3dRefinementTraits&lt; MarkRuleType, tetra &gt;</base>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a12d1692effd6e4dcd08b0167bfb62232aba27c58852ebd2b073e5e169f8a8dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3975578bc1aac561ef9598a24def2bd0a66c16db353f11182451b652ce70710b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3007076417276038dee6e9f3ee1157f1aa2827d3d38e3bf2df773acc628e28a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ab5760df39fbbffff54925e869cc28fa3aae407cf0b8d207ab3e5abb5697bb8e0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bisect_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a12d1692effd6e4dcd08b0167bfb62232aba27c58852ebd2b073e5e169f8a8dc2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>refine_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3975578bc1aac561ef9598a24def2bd0a66c16db353f11182451b652ce70710b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coarse_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>a3007076417276038dee6e9f3ee1157f1aa2827d3d38e3bf2df773acc628e28a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nosplit_element_t</name>
      <anchorfile>a01051.html</anchorfile>
      <anchor>ab5760df39fbbffff54925e869cc28fa3aae407cf0b8d207ab3e5abb5697bb8e0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGrid::SharedPointer</name>
    <filename>a02139.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SharedPointer</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a8698b962ec809f10a62f9b462afa689e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SharedPointer</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a4e5e763ac04e66292f17377cd1322e6f</anchor>
      <arglist>(const SharedPointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SharedPointer</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>ac816a4201b6b2a08c1dd8cf05c17b104</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getObject</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a515c333ddf7d8d2dca120c81084ec0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a4cf27daa0eb094907132d21be4eb1650</anchor>
      <arglist>(const SharedPointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>removeObject</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a420d6566159bfc89a71a1ebbac67686a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a5b09af76181196d45905f10be6f2fcef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SharedPointer &amp;</type>
      <name>operator=</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a4e526a7acba335b3b52e92a89877903d</anchor>
      <arglist>(const SharedPointer &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a867b31a54881241328c631f87495e6ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>af68dce920f62da59b166ea77da23792e</anchor>
      <arglist>(const SharedPointer &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>unique</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>ad7b745c84ce102f5e7447dad6c23097f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a7f4fddd23b05e35f94e8c76fba0da63b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ObjectType &amp;</type>
      <name>operator*</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a9087f4876e032cf95d69a8dae16bb1ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ObjectImp</type>
      <name>ObjectType</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a99ba8ec9d434b6b008e054e5d913c24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ReferenceCountedObject&lt; ObjectType &gt;</type>
      <name>ReferenceCountedObjectType</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>acede96fa2f94685e108d332520f9e1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ALUMemoryProvider&lt; ReferenceCountedObjectType &gt;</type>
      <name>MemoryPoolType</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>aea2e546588b52c6a5a6fa1cc3d06c8a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>ReferenceCountedObjectType &amp;</type>
      <name>ptr</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>ab233058de199f07ba3df71bce19616e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const ReferenceCountedObjectType &amp;</type>
      <name>ptr</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a86da8385fe38a894def477b3f6082c2d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static MemoryPoolType &amp;</type>
      <name>memoryPool</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a9e7bd3ac9a082bac29770ede58947c7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ReferenceCountedObjectType *</type>
      <name>ptr_</name>
      <anchorfile>a02139.html</anchorfile>
      <anchor>a4d90e3b7806c1f207263b9876c01988a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SpaceFillingCurveOrdering</name>
    <filename>a02055.html</filename>
    <templarg></templarg>
    <member kind="enumeration">
      <type></type>
      <name>CurveType</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZCurve</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a7325e1538017949d7eb1605b7da85022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hilbert</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a2c4c0220eb9f19bebf9919bd33c5f7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a8ba65502b522e06ba58d3f5ff08b0bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ZCurve</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a7325e1538017949d7eb1605b7da85022</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Hilbert</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a2c4c0220eb9f19bebf9919bd33c5f7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>None</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>af17a5b59d79ba04e63941a707ed14bd2a8ba65502b522e06ba58d3f5ff08b0bce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpaceFillingCurveOrdering</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a82906493077b25ae506cfead666fe585</anchor>
      <arglist>(const CurveType &amp;curveType, const Coordinate &amp;lower, const Coordinate &amp;upper, const CollectiveCommunication &amp;comm=CollectiveCommunication(Dune::MPIHelper::getCommunicator()))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SpaceFillingCurveOrdering</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a1ca3024b7598c95fa96afed281e5c17f</anchor>
      <arglist>(const CurveType &amp;curveType, const Coordinate &amp;lower, const Coordinate &amp;upper, const OtherComm &amp;otherComm)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a4ba5d68dbe1e18a790df635b0aab11b1</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const CurveType</type>
      <name>DefaultCurve</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a70613711a23f6ea7bfd6b2f3f3ca2dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ZCurveOrderingType</type>
      <name>zCurve_</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a38e35eaeee32cdf0f0977358eb713871</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HilbertOrderingType</type>
      <name>hilbert_</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>ae4eca5115c827c9ee1d5dea23ebe1bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CurveType</type>
      <name>curveType_</name>
      <anchorfile>a02055.html</anchorfile>
      <anchor>a08fe4c2552b643fd4d1eb7dbe13f2c3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</name>
    <filename>a01331.html</filename>
    <member kind="function">
      <type></type>
      <name>Storage</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a0727620780060b810ed3a151d6453cb5</anchor>
      <arglist>(const Grid &amp;grid, int level)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Storage</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>aaee085d986d0ba97768f81b99af15e78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GatherScatter &amp;</type>
      <name>vertexGatherScatter</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>aa069a70dc8a7bd3bf69671be2375729a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GatherScatter &amp;</type>
      <name>edgeGatherScatter</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a4046717cb17f0f7cfd07d1bea064cb6b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GatherScatter &amp;</type>
      <name>faceGatherScatter</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a9b84b3d96780188823cb2fd139b8509d</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual GatherScatter &amp;</type>
      <name>elementGatherScatter</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a5cec442f0a1db9567eebac309bf6de9a</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VertexObject</type>
      <name>vertex</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>ae5285d4e1e0ae78b58dc6a9f0e2a8dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeObject</type>
      <name>edge</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>aeb4055dd24dfab20e5ba31977f5fb16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FaceObject</type>
      <name>face</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>af62a43846c851dc7fc45854e4d2117ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ElementObject</type>
      <name>element</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>ab63e23ffccd66121d9a2a787cfd55d7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</name>
    <filename>a01339.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::CommDataHandleIF&lt; DataHandle, Data &gt;</type>
      <name>CommDataHandleIF</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>aafc1322eb90689584620e3a35715fdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; dim==2, ALU3DSPACE GatherScatterNoData&lt; Grid, CommDataHandleIF, 2 &gt;, ALU3DSPACE GatherScatterLeafData&lt; Grid, CommDataHandleIF, 2 &gt; &gt;::type</type>
      <name>EdgeGatherScatterType</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>af02dacd3b23fcd6ee810b068b06b1bf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Storage</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a3a6340acbbaec5cab8b3e0db8db2e964</anchor>
      <arglist>(const Grid &amp;grid, CommDataHandleIF &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>vertexGatherScatter</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a055a0200dc21caf92733dc1842ba6fb0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>edgeGatherScatter</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a25cd203d8b00ed9acf41379ea5ccbacf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>faceGatherScatter</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a60273cf10aae4460fe9b047b17912edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>elementGatherScatter</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a905e06cac9a5b32e003970539012ba85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLeafData&lt; Grid, CommDataHandleIF, dim &gt;</type>
      <name>vertexGatherScatter_</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a5f227e90ca4cda9611ec7a8da61ba83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeGatherScatterType</type>
      <name>edgeGatherScatter_</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a7b3ce4a253df52b6e538bff2172ecde8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLeafData&lt; Grid, CommDataHandleIF, 1 &gt;</type>
      <name>faceGatherScatter_</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>aef793b7808975fd0a8b41b74c9ddf7ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLeafData&lt; Grid, CommDataHandleIF, 0 &gt;</type>
      <name>elementGatherScatter_</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a6aecaa86f731b65bc1be6df8275a2a1b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;::Storage</name>
    <filename>a01347.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::CommDataHandleIF&lt; DataHandle, Data &gt;</type>
      <name>CommDataHandleIF</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>aada8ff269f07052ce3bf6287602917a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; dim==2, ALU3DSPACE GatherScatterNoData&lt; Grid, CommDataHandleIF, 2 &gt;, ALU3DSPACE GatherScatterLevelData&lt; Grid, CommDataHandleIF, 2 &gt; &gt;::type</type>
      <name>EdgeGatherScatterType</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a44d19aaa4cd016feacb9ea57f6af7ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Storage</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>ae0b73233430e21fe4a18d6b92df1a1fb</anchor>
      <arglist>(const Grid &amp;grid, int level, CommDataHandleIF &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>vertexGatherScatter</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>afc916f541833a563c139f2428e6a6141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>edgeGatherScatter</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a627f501b85c0b293861c7640226c13db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>faceGatherScatter</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a565443064d3f65107d5a4b13db9a09a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GatherScatter &amp;</type>
      <name>elementGatherScatter</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a3e63e25a5383523af43685e3869a3203</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; typename Grid::LevelIndexSetImp &gt;</type>
      <name>indexSet_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>ac308c8a243400034d751ab4b1313ffad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLevelData&lt; Grid, CommDataHandleIF, dim &gt;</type>
      <name>vertexGatherScatter_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a488272bc17045398da276fa11e078d33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>EdgeGatherScatterType</type>
      <name>edgeGatherScatter_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a5d0d92855ae3cf1dcdf71c0cd7d310c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLevelData&lt; Grid, CommDataHandleIF, 1 &gt;</type>
      <name>faceGatherScatter_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a8e2c5b9eeb95178f991adfe66ffcdf28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ALU3DSPACE GatherScatterLevelData&lt; Grid, CommDataHandleIF, 0 &gt;</type>
      <name>elementGatherScatter_</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a539fa98decb3b782a291773ffbe1ed74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory</name>
    <filename>a02155.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</name>
    <filename>a02159.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>eltype</templarg>
    <templarg>refineType</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt;</type>
      <name>Grid</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a628d2a365dd65472227f0d06c56d1af0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridPtr&lt; Grid &gt;::mygrid_ptr</type>
      <name>SharedPtrType</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a778f4b5541955866f482f2baa6c9f36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>aeb7752487d9fb7dd350dc2fe4c014195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper ::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a53a6636c855827354f279e6681d620f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune ::CollectiveCommunication&lt; MPICommunicatorType &gt;</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a2eee57ddb2a0daaa4729e5ea4bccd4d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SharedPtrType</type>
      <name>createCubeGrid</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a4f4187c7d24413d947d29d5fa8cbf48f</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType mpiComm=MPIHelper ::getCommunicator())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SharedPtrType</type>
      <name>createCubeGrid</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a5013fe05c546c3efbaa736c734f9c174</anchor>
      <arglist>(std::istream &amp;input, const std::string &amp;name, MPICommunicatorType mpiComm=MPIHelper ::getCommunicator())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SharedPtrType</type>
      <name>createSimplexGrid</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>adae9cba8d1d03ff332a73884425821c9</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; int_t, dim &gt; &amp;elements, MPICommunicatorType mpiComm=MPIHelper ::getCommunicator())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static SharedPtrType</type>
      <name>createCubeGrid</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>adb17e7b27ddff9e1f361841b35082cb4</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; int_t, dim &gt; &amp;elements, MPICommunicatorType mpiComm=MPIHelper ::getCommunicator())</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>StructuredGridFactory&lt; Grid &gt;</type>
      <name>This</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>ad7cccc8e5681d4fd275c06dfdb54f5c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>int</type>
      <name>subEntities</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>a76f01904d0910d5f7b6404b1104701be</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static SharedPtrType</type>
      <name>createCubeGridImpl</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>ae9af2e3ece9e858bc08e071160d42572</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; int_t, dim &gt; &amp;elements, const CollectiveCommunication &amp;comm, const std::string &amp;name)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities</name>
    <filename>a01511.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities&lt; GridImp, 2, 2 &gt;</name>
    <filename>a01527.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; GridImp::elementType &gt;</type>
      <name>Topo</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a637bf624e7c080058c65526223f27427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; 0, 2, GridImp &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a5aa047362b28df847717bb5d6fb85e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>coordType</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a63821632187bb53951faa05d480562ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a59e630943a856a722e71d649b353c445</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>abae46d4af971e9d04b544643ae875639</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a20772f7a4829d42086295a6698a8164e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::IMPLElementType</type>
      <name>Item</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>ac7e2db5394914cfd77628aeaa3341dd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::Twist</type>
      <name>Twist</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a7da4fc966499a61e12193c6493116ab3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Entity</type>
      <name>entity</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a8160c743472eb3866d276f91bbde4d25</anchor>
      <arglist>(const int level, const ElementType &amp;entity, const Item &amp;item, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Twist</type>
      <name>twist</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>a146eea5c75c22d70b46d9dae26dc56a1</anchor>
      <arglist>(const Item &amp;item, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities&lt; GridImp, 3, 2 &gt;</name>
    <filename>a01523.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; GridImp::elementType &gt;</type>
      <name>Topo</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a9c8406acf1284d91229c2bd316745458</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; 0, 3, GridImp &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>af94fdaddc2ca38012f522978cb41998c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>af1542fdd2f4f336bdbbc9b6878eb2936</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a0cb02136b1638d052bb030ba6d119414</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 2 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a136478abbcd37f4a5d13f516fc447218</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>coordType</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a2014a24982bdc3556f4113721a44b021</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp ::ReferenceElementType</type>
      <name>ReferenceElementType</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>ad06992fb4cffb766cb96d71815154322</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::IMPLElementType</type>
      <name>Item</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a630ab1e16121e12a15428ec982dcae3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::GEOFaceType</type>
      <name>Face</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a093c5d2553a555c23f12a6dd9ba101f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementType::template Codim&lt; 2 &gt;::Twist</type>
      <name>Twist</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>ad527eea1fa7d86118e3b1bd4a183f542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Entity</type>
      <name>entity</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>ac34c5d255c24f7d53e3686466bf7d7c1</anchor>
      <arglist>(int level, const ElementType &amp;entity, const Item &amp;item, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Twist</type>
      <name>twist</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a3dbe38673c5c16bcc8306cba7e99421f</anchor>
      <arglist>(const Item &amp;item, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities&lt; GridImp, dim, 0 &gt;</name>
    <filename>a01515.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a2ee5fd87174bc87f6fb83167978017df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a9cbd78ef5321a438a71c0d27a04bb319</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a8b14beeb90d600e27bfec77cfc89b1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::IMPLElementType</type>
      <name>Item</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>af57205877025b80b6d2bd0ca895a92ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementType::template Codim&lt; 0 &gt;::Twist</type>
      <name>Twist</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a8f1e938bf8427eb94f769f315d2c9455</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Entity</type>
      <name>entity</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a0c0683c6da015f882b54460a3301cedc</anchor>
      <arglist>(int level, const ElementType &amp;entity, const Item &amp;item, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Twist</type>
      <name>twist</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a2e548d37f2f166090d3c21a5acef59e0</anchor>
      <arglist>(const Item &amp;item, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities&lt; GridImp, dim, 1 &gt;</name>
    <filename>a01519.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; GridImp::elementType &gt;</type>
      <name>Topo</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a4fba66fb1fcdb8752676305c171ecee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>aa5a331d4a307623016f1747ec7c3461a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a1f11842ae9ebf8d16b829c2f85b4268b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a6d7ee7bb5166309cb5c7d791935d564c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a6f543e2c673c72fd02f54c0848aafa73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::IMPLElementType</type>
      <name>Item</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>ad51710aa117df7f38672344d316a0b46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementType::template Codim&lt; 1 &gt;::Twist</type>
      <name>Twist</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a063c63f14f3b36385fb5a53d8be01386</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Entity</type>
      <name>entity</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>a0e6592361eb84fff4c03bd3e9b005709</anchor>
      <arglist>(int level, const ElementType &amp;entity, const Item &amp;item, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Twist</type>
      <name>twist</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>adb6317d9ea7a1e6ecc89ed94a0dda410</anchor>
      <arglist>(const Item &amp;item, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SubEntities&lt; GridImp, dim, 3 &gt;</name>
    <filename>a01531.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ElementTopologyMapping&lt; GridImp::elementType &gt;</type>
      <name>Topo</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a09524165ea37aecfbe2d5c4fa6ba7d5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridEntity&lt; 0, dim, GridImp &gt;</type>
      <name>ElementType</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>ac7e1e5f5690123de9a746d4dd8fc11aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 3 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a269b0178388aea28be4a2c336400abb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 3 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a248ab6fecb00672405a7b0c38d7dfcf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 3 &gt;::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a9c9154dc745664fde606dbb398def810</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dImplTraits&lt; GridImp::elementType, typename GridImp::MPICommunicatorType &gt;::IMPLElementType</type>
      <name>Item</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a072275ba8fc8e7f863fbd551dbb0a5ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 3 &gt;::Twist</type>
      <name>Twist</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>afb36301e2d94f5ed2a55a740e09d90c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Entity</type>
      <name>entity</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a67d9228b0ea26a1207627fb4ffe1f914</anchor>
      <arglist>(int level, const ElementType &amp;entity, const Item &amp;item, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Twist</type>
      <name>twist</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a18ecbb0ac0add229a662e559af3ef035</anchor>
      <arglist>(const Item &amp;item, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SurfaceNormalCalculator</name>
    <filename>a01855.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>coord3_t</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a617414b6866c99e34f24de902144e070</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 2 &gt;</type>
      <name>coord2_t</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a999f5de3fcecdc39f065acde5257b790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>alu3d_ctype</type>
      <name>double3_t</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>af07638ebdb79c5bbae6a704b4b1ee37c</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceNormalCalculator</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a957bcc27666373415e1d884edcb77b7d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SurfaceNormalCalculator</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a28efe98abf083f73511c5ecb8e19c2ef</anchor>
      <arglist>(const SurfaceNormalCalculator &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SurfaceNormalCalculator</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>acc267839827907a21a3471962767822a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a26d3f29be9076d4e9b68cbed4a3f5347</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a1d132bb229f8ee7abea76eaf5e1668c5</anchor>
      <arglist>(const coord2_t &amp;, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a99ca60ea514386da09edc1cd55b0eee7</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negativeNormal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a0d8e2bb52ec17247917a01e4c9dbdc41</anchor>
      <arglist>(const coord2_t &amp;, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>negativeNormal</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a1d74a9d1a6656aad9746d0a5a63731bc</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, coord3_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>aab64a6e9358db760711b31b4d26d5a74</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a7a5cadfbb0cca6704b976feadfc0a711</anchor>
      <arglist>(const vector_t &amp;_p0, const vector_t &amp;_p1, const vector_t &amp;_p2, const vector_t &amp;_p3)</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a0d97d427b1aef9a7cae6988b27e728c1</anchor>
      <arglist>(const vector_t &amp;_p0, const vector_t &amp;_p1, const vector_t &amp;_p2, const vector_t &amp;_p3, alu3d_ctype(&amp;_b)[4][3])</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a021d94d5b2d8549e532781289b3a1102</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, alu3d_ctype(&amp;_b)[4][3])</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>alu3d_ctype</type>
      <name>_n</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a9ccfb60db87731cfd506eb42cb1e850b</anchor>
      <arglist>[3][3]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_affine</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>ad571d072e17e46966432d2f7b743c5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const double</type>
      <name>_epsilon</name>
      <anchorfile>a01855.html</anchorfile>
      <anchor>a4d9fc161d347476efd86399979f36430</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ALU3dGridFamily::Traits</name>
    <filename>a01707.html</filename>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Codim</class>
    <class kind="struct">Dune::ALU3dGridFamily::Traits::Partition</class>
    <member kind="typedef">
      <type>GridFamily::LocalIdType</type>
      <name>LocalIdType</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a07fe17179f3a3103ebc52ce874763f08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::GlobalIdType</type>
      <name>GlobalIdType</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aa112dc4fb473a07a5f7c60b424d7751b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::GridImp</type>
      <name>Grid</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a7a7d2276d7a995d43e4bec9a87be2e81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const Grid, LeafIntersectionWrapper&lt; const Grid &gt; &gt;</type>
      <name>LeafIntersection</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>af92e0cb1c0dc0f22fbbd98f285720ce3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const Grid, LevelIntersectionWrapper&lt; const Grid &gt; &gt;</type>
      <name>LevelIntersection</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aeb5ea680eb0d5175ba7da346f8a7821d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, LeafIntersectionIteratorWrapper&lt; const Grid &gt;, LeafIntersectionWrapper&lt; const Grid &gt; &gt;</type>
      <name>IntersectionIterator</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>acdd37166e7486723e05bd8da7bf15795</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, LeafIntersectionIteratorWrapper&lt; const Grid &gt;, LeafIntersectionWrapper&lt; const Grid &gt; &gt;</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a6f24c32e33b074a587031332daae1796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, LevelIntersectionIteratorWrapper&lt; const Grid &gt;, LevelIntersectionWrapper&lt; const Grid &gt; &gt;</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a6ee497ead241ab0a274e60109ad0ea01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; 0, const Grid, ALU3dGridHierarchicIterator&lt; const Grid &gt; &gt;</type>
      <name>HierarchicIterator</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a667ae1ed541ec07c427ea934b19625f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>DuneBoundaryProjectionType</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>af72aa929c5a014fad6e989d83ddb1881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; const DuneBoundaryProjectionType * &gt;</type>
      <name>DuneBoundaryProjectionVector</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>afdaee1f3fadb4e35ea400ad4b846e906</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::MacroGridView</type>
      <name>MacroGridView</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a1338cb82bad0f40da6a777a98e98cf3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aa35be3e88e104684d8366ce3a323ecb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>ae9294f1a3cc303e2e9d6b6e115a03947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultIndexSet&lt; Grid, typename Codim&lt; 0 &gt;::LevelIterator &gt;</type>
      <name>LevelIndexSetImp</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a06f95947756e99a640f3ab84a21bcf7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultIndexSet&lt; Grid, typename Codim&lt; 0 &gt;::LeafIterator &gt;</type>
      <name>LeafIndexSetImp</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>afbc1491192bcc45f846105285bd9b482</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; Grid, LevelIndexSetImp &gt;</type>
      <name>LevelIndexSet</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aa22d3e2ee2ea1643bb7e6045d74c19e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; Grid, LeafIndexSetImp &gt;</type>
      <name>LeafIndexSet</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a050ff7f1c0116aacd705dc26b2be203b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; Grid, LocalIdSetImp, LocalIdType &gt;</type>
      <name>LocalIdSet</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>aa0cbc4634e15e703bcd8d5cdcd58b453</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; Grid, GlobalIdSetImp, GlobalIdType &gt;</type>
      <name>GlobalIdSet</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a6e03f5f08ae0082de312e5844dcdd34d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridCommunications&lt; dim, dimworld, elType, Comm &gt;::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a4d698b9f88c156929791aeef21a66408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TrilinearMapping</name>
    <filename>a01851.html</filename>
    <member kind="typedef">
      <type>alu3d_ctype</type>
      <name>double_t</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>aaadc352ee6a7ee980e6e86a34c17f2ba</anchor>
      <arglist>[3]</arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; alu3d_ctype, 3 &gt;</type>
      <name>coord_t</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a35bb0ca24aade1e73924fcc17d17ac59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; alu3d_ctype, 3, 3 &gt;</type>
      <name>mat_t</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a33cd149e02b6a1a79f0e71a9f633ec92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrilinearMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a2083e5804ca87e8044870e6a7d547596</anchor>
      <arglist>(const coord_t &amp;, const coord_t &amp;, const coord_t &amp;, const coord_t &amp;, const coord_t &amp;, const coord_t &amp;, const coord_t &amp;, const coord_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrilinearMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a0403691acd48ea7f96b8aff7da4ea121</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrilinearMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>acb32efb03d5d95e55c1b5e8d8ba5527f</anchor>
      <arglist>(const TrilinearMapping &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TrilinearMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>abf08057192a8b8ac532311e8be46f8d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>alu3d_ctype</type>
      <name>det</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a86353d1a2555c782db4244745c770956</anchor>
      <arglist>(const coord_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const mat_t &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>ada97c0fdee7b9922b551141696670942</anchor>
      <arglist>(const coord_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const mat_t &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a40ab4230318e0d210ad2d8bca36b0786</anchor>
      <arglist>(const coord_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a0209ae9ff57388cff8d33ed49341e99c</anchor>
      <arglist>(const coord_t &amp;, coord_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>map2world</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a5b18a5a6e1a8484d0c41ef601eba8df2</anchor>
      <arglist>(const alu3d_ctype, const alu3d_ctype, const alu3d_ctype, coord_t &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>world2map</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a0e2d61cfa2ec5bee164c3c6585771a01</anchor>
      <arglist>(const coord_t &amp;, coord_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a723495af0b501aa8d720776a61ba0627</anchor>
      <arglist>(const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;, const vector_t &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a85895e246c9a8a3d2665d3e071642090</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>alu_inline void</type>
      <name>buildMapping</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a5a13817dad3af59a967d96661fb5a8f0</anchor>
      <arglist>(const vector_t &amp;p0, const vector_t &amp;p1, const vector_t &amp;p2, const vector_t &amp;p3, const vector_t &amp;p4, const vector_t &amp;p5, const vector_t &amp;p6, const vector_t &amp;p7)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TrivialTwist</name>
    <filename>a02207.html</filename>
    <templarg>topologyId</templarg>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>operator int</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a09c2548676ef3149e143cedc6a5aefa4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>ababfbd39c3d2607fc0d0c1e189a7a78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a35caf09d2451264cb37ee13939d574be</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>adec4ee170ee5cb36d96e7149bbf7b8f9</anchor>
      <arglist>(const TrivialTwist &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a02e43ba12fb1d4cf5ff8a38335e14f8c</anchor>
      <arglist>(const TrivialTwist &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>operator*</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a104a6ec65b0104a6ace7828eea3be060</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>operator/</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aecc0dc49901f2514a4117ad9b1ad2b59</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a6798f8589e8757b8ce2d2b1acec53d7b</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a46bef6df31c44605bf64bb637d29034b</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>inverse</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a3c862a9dff8b463857c8804eb162d5fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a6fc64c83bb016e9f720e80b4fe6f658e</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>afd06057c4838e01309003e132a36abc9</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>ae3772dde96e514d50bb35713487b5402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a0a251b0401e935c4acf045871d421794</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a709a09acf2083cf1593cf7fcb0c6d43c</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a929d95df9ca18965ec4e3ba607578c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a999bd965e0ec8478c61ceb3db946001c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a5f014ea2b590cccc4aa9ab594e21d24b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>ababfbd39c3d2607fc0d0c1e189a7a78f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a35caf09d2451264cb37ee13939d574be</anchor>
      <arglist>(GeometryType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwist</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>adec4ee170ee5cb36d96e7149bbf7b8f9</anchor>
      <arglist>(const TrivialTwist &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a02e43ba12fb1d4cf5ff8a38335e14f8c</anchor>
      <arglist>(const TrivialTwist &amp;)</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>operator*</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a104a6ec65b0104a6ace7828eea3be060</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>operator/</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>aecc0dc49901f2514a4117ad9b1ad2b59</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a6798f8589e8757b8ce2d2b1acec53d7b</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a46bef6df31c44605bf64bb637d29034b</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>TrivialTwist</type>
      <name>inverse</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a3c862a9dff8b463857c8804eb162d5fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a6fc64c83bb016e9f720e80b4fe6f658e</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>afd06057c4838e01309003e132a36abc9</anchor>
      <arglist>(const TrivialTwist &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>ae3772dde96e514d50bb35713487b5402</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a0a251b0401e935c4acf045871d421794</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a709a09acf2083cf1593cf7fcb0c6d43c</anchor>
      <arglist>(int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator AffineGeometry&lt; ctype, dimension, dimension &gt;</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a929d95df9ca18965ec4e3ba607578c34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>positive</name>
      <anchorfile>a02207.html</anchorfile>
      <anchor>a999bd965e0ec8478c61ceb3db946001c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TrivialTwists</name>
    <filename>a02211.html</filename>
    <templarg>topologyId</templarg>
    <templarg>dim</templarg>
    <base protection="private">Dune::TrivialTwist</base>
    <member kind="typedef">
      <type>TrivialTwist&lt; topologyId, dim &gt;</type>
      <name>Twist</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a49cf2cae242d6cfab3566fba7d661ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Twist *</type>
      <name>Iterator</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a932ffdfe99574d0a6ae6441517edcec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwists</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a703c7c310223c713ad1fb936a200d8a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TrivialTwists</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a6ceb8c13a3cc9fd5bde717c9b6c82a34</anchor>
      <arglist>(GeometryType type)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a9268758bdb9605267029e74a2d2a3ae0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>ad492c7017e70266c0c06c3e10dcf430f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a6e19e25e37d771f877e45719d58dd3f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a0d27ddb35a6b9eac1de2dd9eee624add</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>size</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a58bd31f49ab205f928798a631bc2c7a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>index</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a231491ebe8acb50496e2cf89a3d613e0</anchor>
      <arglist>(const Twist &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>aec76a5d29339197771dd6b3a53850a0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>ad492c7017e70266c0c06c3e10dcf430f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a6e19e25e37d771f877e45719d58dd3f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02211.html</anchorfile>
      <anchor>a0d27ddb35a6b9eac1de2dd9eee624add</anchor>
      <arglist>(const Permutation &amp;permutation) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts</name>
    <filename>a01407.html</filename>
    <templarg>useHandlerOpts</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>importRank</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a535babf0dae14f8b79cfb2c478321ffa</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destination</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a9446c94632fe061b7c0d51096ec6fe40</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, const EntityType &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadWeight</name>
      <anchorfile>a01407.html</anchorfile>
      <anchor>a7e4cb52d790b6982742c7e494ff04d87</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, const EntityType &amp;entity) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ALUGrid::GatherScatterLoadBalance::UseExternalHandlerOpts&lt; false, D &gt;</name>
    <filename>a01411.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>importRank</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a83202d068eb7fdc3364dea6cd0c5620f</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, std::set&lt; int &gt; &amp;ranks) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>destination</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a6604f90902dbdb3ae89cfa8a2229194e</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, const EntityType &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>loadWeight</name>
      <anchorfile>a01411.html</anchorfile>
      <anchor>a159c3092f2cc6ed7914e2c27932cefcf</anchor>
      <arglist>(const LoadBalanceHandleType &amp;lb, const EntityType &amp;entity) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ALUGridSFC::ZoltanSpaceFillingCurveOrdering</name>
    <filename>a02051.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ZoltanSpaceFillingCurveOrdering</name>
      <anchorfile>a02051.html</anchorfile>
      <anchor>a08e5e66ae08330b05f7980eeef08da80</anchor>
      <arglist>(const Coordinate &amp;lower, const Coordinate &amp;upper, const CollectiveCommunication &amp;comm=CollectiveCommunication(Dune::MPIHelper::getCommunicator()))</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>hilbertIndex</name>
      <anchorfile>a02051.html</anchorfile>
      <anchor>afd6360430cf1fe6eee98c06e070971c3</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>index</name>
      <anchorfile>a02051.html</anchorfile>
      <anchor>ac0c16f181335fcbcf346f03d03c1e27c</anchor>
      <arglist>(const Coordinate &amp;point) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ALUGrid</name>
    <filename>a00179.html</filename>
    <namespace>ALUGrid::DataCollectorCaps</namespace>
    <class kind="struct">ALUGrid::BSMacroIterator</class>
    <class kind="struct">ALUGrid::ALUHElementType</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 0, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 1, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 2, Comm &gt;</class>
    <class kind="struct">ALUGrid::ALUHElementType&lt; 3, Comm &gt;</class>
    <class kind="class">ALUGrid::IteratorWrapperInterface</class>
    <class kind="struct">ALUGrid::IteratorElType</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, pitype, Comm &gt;</class>
    <class kind="struct">ALUGrid::LeafStopRule</class>
    <class kind="struct">ALUGrid::LeafStopRule&lt; ElType, Dune::Interior_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::LeafLevelIteratorTTProxy</class>
    <class kind="class">ALUGrid::ALU3dGridGhostIterator</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="struct">ALUGrid::GetItem</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 1 &gt;</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 2 &gt;</class>
    <class kind="struct">ALUGrid::GetItem&lt; GridImp, 3 &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridGhostIteratorHigherCodim</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::Ghost_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLeafIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 0, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, pitype, Comm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 1, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 2, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::ALU3dGridLevelIteratorWrapper&lt; 3, Dune::All_Partition, Dune::ALUGridMPIComm &gt;</class>
    <class kind="class">ALUGrid::GatherScatterBaseImpl</class>
    <class kind="class">ALUGrid::GatherScatterBaseImpl&lt; GridType, DataCollectorType, 0 &gt;</class>
    <class kind="class">ALUGrid::GatherScatterLeafData</class>
    <class kind="class">ALUGrid::GatherScatterLevelData</class>
    <class kind="class">ALUGrid::GatherScatterNoData</class>
    <class kind="class">ALUGrid::GatherScatterLevelData&lt; GridType, DataCollectorType, 0 &gt;</class>
    <class kind="class">ALUGrid::GatherScatterLoadBalance</class>
    <class kind="class">ALUGrid::GatherScatterLoadBalanceDataHandle</class>
    <class kind="class">ALUGrid::AdaptRestrictProlongImpl</class>
    <class kind="class">ALUGrid::AdaptRestrictProlongGlSet</class>
    <class kind="class">ALUGrid::ALUGridFiniteStack</class>
    <class kind="class">ALUGrid::ALUMemoryProvider</class>
    <class kind="class">ALUGrid::ReferenceCountedObject</class>
    <class kind="class">ALUGrid::SharedPointer</class>
    <member kind="typedef">
      <type>Gitter::AdaptRestrictProlong</type>
      <name>AdaptRestrictProlongType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a1a31c4a346047cf338b108ade7345c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GatherScatter</type>
      <name>GatherScatterType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>aa4e61e182f5f36188220cc7eec074a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::PartitionIteratorType</type>
      <name>PartitionIteratorType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a9aee5709baf0aa40ee8d8d6e018d852c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ALUHElementType&lt; 0, Dune::ALUGridMPIComm &gt;::ElementType *, Dune::ALU3dBasicImplTraits&lt; Dune::ALUGridMPIComm &gt;::HBndSegType * &gt;</type>
      <name>LeafValType</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>ae35d36514b2a8f02b808b24cdde8b953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>ProcessorBoundary_t</name>
      <anchorfile>a00179.html</anchorfile>
      <anchor>a9fa2c7c251af4019314eefe94e5a01b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ALUGrid::DataCollectorCaps</name>
    <filename>a00181.html</filename>
    <class kind="class">ALUGrid::DataCollectorCaps::HasUserDefinedPartitioning</class>
    <class kind="class">ALUGrid::DataCollectorCaps::HasUserDefinedLoadWeights</class>
  </compound>
  <compound kind="namespace">
    <name>ALUGridSFC</name>
    <filename>a00185.html</filename>
    <class kind="class">ALUGridSFC::ZoltanSpaceFillingCurveOrdering</class>
    <member kind="function">
      <type>void</type>
      <name>printSpaceFillingCurve</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae8cafb030e5acfde9ce4fd08a6e040d2</anchor>
      <arglist>(const GridView &amp;view, std::string name=&quot;sfc&quot;, const bool vtk=false)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune</name>
    <filename>a00180.html</filename>
    <namespace>Dune::Capabilities</namespace>
    <namespace>Dune::dgf</namespace>
    <class kind="struct">Dune::ALU3dBasicImplTraits</class>
    <class kind="struct">Dune::ALU3dBasicImplTraits&lt; ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALU3dBasicImplTraits&lt; ALUGridMPIComm &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; tetra, Comm, dim, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; hexa, Comm, dim, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 2, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dCodimImplTraits&lt; elType, Comm, 3, 3 &gt;</class>
    <class kind="struct">Dune::ALU3dRefinementTraits</class>
    <class kind="struct">Dune::ALU3dRefinementTraits&lt; MarkRuleType, tetra &gt;</class>
    <class kind="struct">Dune::ALU3dRefinementTraits&lt; MarkRuleType, hexa &gt;</class>
    <class kind="struct">Dune::ALU3dImplTraits</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; tetra, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dImplTraits&lt; hexa, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dGridVertexList</class>
    <class kind="struct">Dune::ALU3dGridLeafVertexList</class>
    <class kind="class">Dune::ALU3dGridItemList</class>
    <class kind="struct">Dune::ALU3dGridFaceGetter</class>
    <class kind="class">Dune::ALUGrid</class>
    <class kind="struct">Dune::ALUCommunication</class>
    <class kind="class">Dune::ALULeafCommunication</class>
    <class kind="class">Dune::ALULevelCommunication</class>
    <class kind="class">Dune::ALU3dGrid</class>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="class">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="class">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALUCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="class">Dune::ALULeafCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="class">Dune::ALULevelCommunication&lt; dim, dimworld, elType, ALUGridMPIComm &gt;</class>
    <class kind="class">Dune::ALU3dGridEntity</class>
    <class kind="class">Dune::ALU3dGridLevelIterator</class>
    <class kind="class">Dune::ALU3dGridEntityPointer</class>
    <class kind="class">Dune::ALU3dGridGeometry</class>
    <class kind="class">Dune::ALU3dGridHierarchicIterator</class>
    <class kind="class">Dune::ALU3dGridIntersectionIterator</class>
    <class kind="class">Dune::ALU3dGridLeafIterator</class>
    <class kind="class">Dune::ALU3dGridEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="class">Dune::ALU3dGridEntityPointerBase</class>
    <class kind="class">Dune::ALU3dGridEntityPointer&lt; 0, GridImp &gt;</class>
    <class kind="struct">Dune::IndexWrapper</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 3 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 1 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 2 &gt;</class>
    <class kind="struct">Dune::IndexWrapper&lt; dim, IMPLElemType, type, Comm, 0 &gt;</class>
    <class kind="struct">Dune::SubEntities</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 0 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 1 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, 3, 2 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, 2, 2 &gt;</class>
    <class kind="struct">Dune::SubEntities&lt; GridImp, dim, 3 &gt;</class>
    <class kind="class">Dune::ALU3dGridEntitySeed</class>
    <class kind="class">Dune::ALU3dGridEntitySeedBase</class>
    <class kind="class">Dune::ALU3dGridEntitySeed&lt; 0, GridImp &gt;</class>
    <class kind="class">Dune::ALU3dGridFaceInfo</class>
    <class kind="struct">Dune::ALU3dGridSurfaceMappingFactory</class>
    <class kind="struct">Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, tetra, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dGridSurfaceMappingFactory&lt; dim, dimworld, hexa, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoBase</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoTetra</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoHexa</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoBase&lt; 2, dimworld, type, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoTetra&lt; 2, dimworld, Comm &gt;</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfoHexa&lt; 2, dimworld, Comm &gt;</class>
    <class kind="class">Dune::MyALUGridGeometryImplementation</class>
    <class kind="class">Dune::ALU3dGridLevelIntersectionIterator</class>
    <class kind="class">Dune::ALU3dGridMakeableEntity</class>
    <class kind="class">Dune::ALU3dGridFaceGeometryInfo</class>
    <class kind="class">Dune::ALU3dGridGlobalIdSet</class>
    <class kind="class">Dune::ALU3dGridLocalIdSet</class>
    <class kind="class">Dune::ALU3dGridHierarchicIndexSet</class>
    <class kind="class">Dune::ALU3dGridFactory</class>
    <class kind="class">Dune::ALULocalGeometryStorage</class>
    <class kind="struct">Dune::ALUGridBaseGrid&lt; dim, dimw, cube, Comm &gt;</class>
    <class kind="struct">Dune::ALUGridBaseGrid&lt; dim, dimw, simplex, Comm &gt;</class>
    <class kind="struct">Dune::ALU3dGridCommunications</class>
    <class kind="struct">Dune::ALU3dGridCommunications&lt; dim, dimworld, elType, ALUGridNoComm &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, tetra, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, hexa, 0 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, elType, 1 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; 3, elType, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; 2, elType, 2 &gt;</class>
    <class kind="struct">Dune::ALU3dGridTwists&lt; dim, elType, 3 &gt;</class>
    <class kind="struct">Dune::ALU3dGridFamily</class>
    <class kind="class">Dune::GridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="class">Dune::ReferenceGridFactory</class>
    <class kind="class">Dune::ReferenceGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="class">Dune::ALU3dLevelGridView</class>
    <class kind="class">Dune::ALU3dLeafGridView</class>
    <class kind="struct">Dune::ALU3dLevelGridViewTraits</class>
    <class kind="struct">Dune::ALU3dLeafGridViewTraits</class>
    <class kind="class">Dune::ALUMacroKey</class>
    <class kind="class">Dune::ALUGridId</class>
    <class kind="class">Dune::ALU3dGridGeometricFaceInfo</class>
    <class kind="class">Dune::ALU3dGridTreeIterator</class>
    <class kind="class">Dune::TrilinearMapping</class>
    <class kind="class">Dune::SurfaceNormalCalculator</class>
    <class kind="class">Dune::BilinearSurfaceMapping</class>
    <class kind="class">Dune::BilinearMapping</class>
    <class kind="class">Dune::LinearMapping</class>
    <class kind="class">Dune::NonConformingFaceMapping</class>
    <class kind="class">Dune::NonConformingFaceMapping&lt; dim, dimworld, tetra, Comm &gt;</class>
    <class kind="class">Dune::NonConformingFaceMapping&lt; dim, dimworld, hexa, Comm &gt;</class>
    <class kind="struct">Dune::EntityCount</class>
    <class kind="struct">Dune::EntityCount&lt; tetra &gt;</class>
    <class kind="struct">Dune::EntityCount&lt; hexa &gt;</class>
    <class kind="class">Dune::ElementTopologyMapping</class>
    <class kind="class">Dune::FaceTopologyMapping</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; ALUGrid&lt; dim, dimworld, elType, refineType, Comm &gt; &gt;</class>
    <class kind="class">Dune::ALUGridBoundaryProjection</class>
    <class kind="struct">Dune::ALUGridNoComm</class>
    <class kind="struct">Dune::ALUGridMPIComm</class>
    <class kind="struct">Dune::ALUGridBaseGrid</class>
    <class kind="struct">Dune::DefaultLevelIteratorTypes</class>
    <class kind="struct">Dune::DefaultLeafIteratorTypes</class>
    <class kind="class">Dune::DefaultIndexSet</class>
    <class kind="class">Dune::DefaultBoundarySegmentIndexSet</class>
    <class kind="class">Dune::FromToGridFactory</class>
    <class kind="class">Dune::FromToGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</class>
    <class kind="class">Dune::SpaceFillingCurveOrdering</class>
    <class kind="struct">Dune::HasObjectStream</class>
    <class kind="struct">Dune::GridObjectStreamOrDefaultHelper</class>
    <class kind="struct">Dune::GridObjectStreamOrDefaultHelper&lt; false, GridImp, DefaultImp &gt;</class>
    <class kind="struct">Dune::GridObjectStreamOrDefault</class>
    <class kind="struct">Dune::IsDofManager</class>
    <class kind="struct">Dune::HasHierarchicIndexSet</class>
    <class kind="class">Dune::IntersectionIteratorWrapper</class>
    <class kind="class">Dune::LeafIntersectionWrapper</class>
    <class kind="class">Dune::LeafIntersectionIteratorWrapper</class>
    <class kind="class">Dune::LevelIntersectionWrapper</class>
    <class kind="class">Dune::LevelIntersectionIteratorWrapper</class>
    <class kind="class">Dune::MacroGridView</class>
    <class kind="struct">Dune::MacroGridViewTraits</class>
    <class kind="class">Dune::ALUGridPersistentContainer</class>
    <class kind="class">Dune::PersistentContainer&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, T &gt;</class>
    <class kind="class">Dune::PersistentContainer&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, T &gt;</class>
    <class kind="class">Dune::StructuredGridFactory</class>
    <class kind="class">Dune::StructuredGridFactory&lt; ALUGrid&lt; dim, dimworld, eltype, refineType, Comm &gt; &gt;</class>
    <class kind="struct">Dune::ALUGridTransformation</class>
    <class kind="class">Dune::ALUTwist</class>
    <class kind="class">Dune::ALUTwists</class>
    <class kind="struct">Dune::ALUTwistIterator</class>
    <class kind="class">Dune::ALUTwist&lt; corners, 2 &gt;</class>
    <class kind="class">Dune::ALUTwist&lt; 2, 1 &gt;</class>
    <class kind="class">Dune::ALUTwists&lt; corners, 2 &gt;</class>
    <class kind="class">Dune::ALUTwists&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::TrivialTwist</class>
    <class kind="struct">Dune::TrivialTwists</class>
    <class kind="struct">Dune::IsDataHandle</class>
    <class kind="struct">Dune::DGFGridInfo&lt; Dune::ALUGrid&lt; dimg, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::DGFBaseFactory</class>
    <class kind="struct">Dune::DGFGridFactory&lt; ALUGrid&lt; dim, dimw, eltype, refinementtype, Comm &gt; &gt;</class>
    <member kind="typedef">
      <type>double</type>
      <name>alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9fe7d075e552ef9141775c938aa55a56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALU3dGridItemList</type>
      <name>ALU3dGridItemListType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>af8070674a03a310a263a0b22736a2fb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ALU3dGridElementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tetra</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada969d6dbcabfde81d0a5eb0eeb7e93199</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexa</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada93593f0bad466fc5c94078b72c62db41</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mixed</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abadac0befe3f15f7161e5dafd307f9360f61</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>error</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a28c61c16c6ca0c3caf651fc17ca6abada282c05570191d3aeab891562ca24d1fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ALUGridElementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>simplex</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96a99d617cb88165a01e8a49c86b63c7f2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cube</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a430a0b679f340d428647485aed97fa96ab0529945b6db45c90977a4c28020665e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ALUGridRefinementType</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8aab5ca11763954fd862ca1da9e47e8366</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonconforming</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>afa7335a892b5d4b1fef3def64aec39a8a6368d1515d72b2a8aa43ad0b0b492828</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const char *</type>
      <name>ALUGridParallelSerial</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7ec1dfb4b161d00e3e9894995465ee2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std ::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7eae66350b0be208683d7ae278f5cef8</anchor>
      <arglist>(std ::ostream &amp;out, const ALU3dGridEntitySeed&lt; cd, GridImp &gt; &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alu3dMap2World</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a24e047ffbfc61e3d47371ffb8e8c9e42</anchor>
      <arglist>(const ALU3DSPACE LinearSurfaceMapping &amp;mapping, const FieldVector&lt; alu3d_ctype, m &gt; &amp;x, FieldVector&lt; alu3d_ctype, n &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>alu3dMap2World</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a2bf89713f0f24ddafa11ccb4c42f37b6</anchor>
      <arglist>(const BilinearSurfaceMapping &amp;mapping, const FieldVector&lt; alu3d_ctype, m &gt; &amp;x, FieldVector&lt; alu3d_ctype, n &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>alu3d_ctype(&amp;</type>
      <name>fieldVector2alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a7586763a138318a6973891eadf27c146</anchor>
      <arglist>(FieldVector&lt; alu3d_ctype, dim &gt; &amp;val))[dim]</arglist>
    </member>
    <member kind="function">
      <type>const alu3d_ctype(&amp;</type>
      <name>fieldVector2alu3d_ctype</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a1cd28d36130f7b41cf55455f4ac3d9f1</anchor>
      <arglist>(const FieldVector&lt; alu3d_ctype, dim &gt; &amp;val))[dim]</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkMacroGrid</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a9611b8501d3e9a98145b6dfd556a03b7</anchor>
      <arglist>(ALU3dGridElementType elType, const std::string filename)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>elType2Name</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa316884eb37edef2b1ff168d0dd41e00</anchor>
      <arglist>(ALU3dGridElementType elType)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>meshQuality</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a13646e1228b7abaf60c7690fdbc975bf</anchor>
      <arglist>(const GridView &amp;gridView, const double time, std::ostream &amp;out)</arglist>
    </member>
    <member kind="function">
      <type>std::true_type</type>
      <name>__IsDataHandle</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a105127e1e364bb03d3465981333a03c1</anchor>
      <arglist>(const CommDataHandleIF&lt; Impl, Data &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::false_type</type>
      <name>__IsDataHandle</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>a848b66fe2518d399fcf3099de2924a87</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const alu3d_ctype</type>
      <name>ALUnumericEpsilon</name>
      <anchorfile>a00180.html</anchorfile>
      <anchor>aa9b9dc623f34f04f0447bda1b830d5ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Capabilities</name>
    <filename>a00183.html</filename>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; Dune::ALU3dGrid&lt; dim, dimworld, elType, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; ALU3dGrid&lt; dim, dimworld, elType, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridNoComm &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, ALUGridMPIComm &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; ALUGrid&lt; dim, dimworld, eltype, refinementtype, Comm &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::dgf</name>
    <filename>a00187.html</filename>
    <class kind="struct">Dune::dgf::ALU2dGridParameterBlock</class>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>DUNE-ALUGrid Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html">Introduction</docanchor>
    <docanchor file="index.html">License</docanchor>
    <docanchor file="index.html">Installation</docanchor>
  </compound>
</tagfile>
