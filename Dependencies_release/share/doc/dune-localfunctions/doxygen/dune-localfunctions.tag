<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1" doxygen_gitid="ef9b20ac7f8a8621fcfc299f8bd0b80422390f4b">
  <compound kind="file">
    <name>meta/power/basis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/meta/power/</path>
    <filename>a04301.html</filename>
    <class kind="class">Dune::PowerBasis</class>
    <class kind="struct">Dune::PowerBasis::Traits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>whitney/edges0.5/basis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/whitney/edges0.5/</path>
    <filename>a04304.html</filename>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="no" imported="no">dune/localfunctions/common/localtoglobaladaptors.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <includes id="a00539" name="common.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/common.hh</includes>
    <class kind="class">Dune::EdgeS0_5Basis</class>
    <class kind="struct">Dune::EdgeS0_5Basis::Traits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>basisevaluator.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00494.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a00530" name="multiindex.hh" local="no" imported="no">dune/localfunctions/utility/multiindex.hh</includes>
    <includes id="a00536" name="tensor.hh" local="no" imported="no">dune/localfunctions/utility/tensor.hh</includes>
    <class kind="struct">Dune::MonomialEvaluator</class>
    <class kind="struct">Dune::MonomialEvaluator::Iterator</class>
    <class kind="struct">Dune::MonomialEvaluator::BaseIterator</class>
    <class kind="struct">Dune::StandardEvaluator</class>
    <class kind="struct">Dune::StandardEvaluator::Iterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>basismatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00497.html</filename>
    <includes id="a00521" name="lfematrix.hh" local="no" imported="no">dune/localfunctions/utility/lfematrix.hh</includes>
    <includes id="a00527" name="monomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/monomialbasis.hh</includes>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <class kind="struct">Dune::BasisMatrixBase</class>
    <class kind="struct">Dune::BasisMatrix&lt; const MonomialBasis&lt; geometryId, F &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const Dune::VirtualMonomialBasis&lt; dim, F &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const PolynomialBasis&lt; Eval, CM, D, R &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const PolynomialBasisWithMatrix&lt; Eval, CM &gt;, Interpolation, Field &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>basisprint.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00500.html</filename>
    <includes id="a00530" name="multiindex.hh" local="no" imported="no">dune/localfunctions/utility/multiindex.hh</includes>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>basisPrint</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa65dc65e5daa187d5ac6e61620dc5d47</anchor>
      <arglist>(std::ostream &amp;out, typename BasisFactory::Object &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisPrint</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a598a8acbb3ce5c8f71dbdbdc4a63eaf0</anchor>
      <arglist>(std::ostream &amp;out, typename BasisFactory::Key &amp;key)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bdfmcube.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasfortinmarini/</path>
    <filename>a00008.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04322" name="brezzidouglasfortinmarini/cube/localbasis.hh" local="no" imported="no">dune/localfunctions/brezzidouglasfortinmarini/cube/localbasis.hh</includes>
    <includes id="a00014" name="localcoefficients.hh" local="no" imported="no">dune/localfunctions/brezzidouglasfortinmarini/cube/localcoefficients.hh</includes>
    <includes id="a04334" name="brezzidouglasfortinmarini/cube/localinterpolation.hh" local="no" imported="no">dune/localfunctions/brezzidouglasfortinmarini/cube/localinterpolation.hh</includes>
    <class kind="class">Dune::BDFMCubeLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00086.html</filename>
    <includes id="a00080" name="brezzidouglasmarinicube.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarinicube.hh</includes>
    <includes id="a00083" name="brezzidouglasmarinisimplex.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarinisimplex.hh</includes>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00029.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00020" name="brezzidouglasmarini1cube2dlocalbasis.hh" local="yes" imported="no">brezzidouglasmarini1cube2d/brezzidouglasmarini1cube2dlocalbasis.hh</includes>
    <includes id="a00023" name="brezzidouglasmarini1cube2dlocalcoefficients.hh" local="yes" imported="no">brezzidouglasmarini1cube2d/brezzidouglasmarini1cube2dlocalcoefficients.hh</includes>
    <includes id="a00026" name="brezzidouglasmarini1cube2dlocalinterpolation.hh" local="yes" imported="no">brezzidouglasmarini1cube2d/brezzidouglasmarini1cube2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::BDM1Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube2d/</path>
    <filename>a00020.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::BDM1Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube2d/</path>
    <filename>a00023.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::BDM1Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube2d/</path>
    <filename>a00026.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::BDM1Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube3d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00041.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00032" name="brezzidouglasmarini1cube3dlocalbasis.hh" local="yes" imported="no">brezzidouglasmarini1cube3d/brezzidouglasmarini1cube3dlocalbasis.hh</includes>
    <includes id="a00035" name="brezzidouglasmarini1cube3dlocalcoefficients.hh" local="yes" imported="no">brezzidouglasmarini1cube3d/brezzidouglasmarini1cube3dlocalcoefficients.hh</includes>
    <includes id="a00038" name="brezzidouglasmarini1cube3dlocalinterpolation.hh" local="yes" imported="no">brezzidouglasmarini1cube3d/brezzidouglasmarini1cube3dlocalinterpolation.hh</includes>
    <class kind="class">Dune::BDM1Cube3DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube3dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube3d/</path>
    <filename>a00032.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::BDM1Cube3DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube3dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube3d/</path>
    <filename>a00035.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::BDM1Cube3DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1cube3dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube3d/</path>
    <filename>a00038.html</filename>
    <class kind="class">Dune::BDM1Cube3DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1simplex2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00053.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00044" name="brezzidouglasmarini1simplex2dlocalbasis.hh" local="yes" imported="no">brezzidouglasmarini1simplex2d/brezzidouglasmarini1simplex2dlocalbasis.hh</includes>
    <includes id="a00047" name="brezzidouglasmarini1simplex2dlocalcoefficients.hh" local="yes" imported="no">brezzidouglasmarini1simplex2d/brezzidouglasmarini1simplex2dlocalcoefficients.hh</includes>
    <includes id="a00050" name="brezzidouglasmarini1simplex2dlocalinterpolation.hh" local="yes" imported="no">brezzidouglasmarini1simplex2d/brezzidouglasmarini1simplex2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::BDM1Simplex2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1simplex2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1simplex2d/</path>
    <filename>a00044.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::BDM1Simplex2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1simplex2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1simplex2d/</path>
    <filename>a00047.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::BDM1Simplex2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini1simplex2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1simplex2d/</path>
    <filename>a00050.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::BDM1Simplex2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00065.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00056" name="brezzidouglasmarini2cube2dlocalbasis.hh" local="yes" imported="no">brezzidouglasmarini2cube2d/brezzidouglasmarini2cube2dlocalbasis.hh</includes>
    <includes id="a00059" name="brezzidouglasmarini2cube2dlocalcoefficients.hh" local="yes" imported="no">brezzidouglasmarini2cube2d/brezzidouglasmarini2cube2dlocalcoefficients.hh</includes>
    <includes id="a00062" name="brezzidouglasmarini2cube2dlocalinterpolation.hh" local="yes" imported="no">brezzidouglasmarini2cube2d/brezzidouglasmarini2cube2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::BDM2Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2cube2d/</path>
    <filename>a00056.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::BDM2Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2cube2d/</path>
    <filename>a00059.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::BDM2Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2cube2d/</path>
    <filename>a00062.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::BDM2Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2simplex2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00077.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00068" name="brezzidouglasmarini2simplex2dlocalbasis.hh" local="yes" imported="no">brezzidouglasmarini2simplex2d/brezzidouglasmarini2simplex2dlocalbasis.hh</includes>
    <includes id="a00071" name="brezzidouglasmarini2simplex2dlocalcoefficients.hh" local="yes" imported="no">brezzidouglasmarini2simplex2d/brezzidouglasmarini2simplex2dlocalcoefficients.hh</includes>
    <includes id="a00074" name="brezzidouglasmarini2simplex2dlocalinterpolation.hh" local="yes" imported="no">brezzidouglasmarini2simplex2d/brezzidouglasmarini2simplex2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::BDM2Simplex2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2simplex2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2simplex2d/</path>
    <filename>a00068.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::BDM2Simplex2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2simplex2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2simplex2d/</path>
    <filename>a00071.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::BDM2Simplex2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarini2simplex2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2simplex2d/</path>
    <filename>a00074.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::BDM2Simplex2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarinicube.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00080.html</filename>
    <includes id="a00029" name="brezzidouglasmarini1cube2d.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube2d.hh</includes>
    <includes id="a00041" name="brezzidouglasmarini1cube3d.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1cube3d.hh</includes>
    <includes id="a00065" name="brezzidouglasmarini2cube2d.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2cube2d.hh</includes>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasmarinisimplex.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasmarini/</path>
    <filename>a00083.html</filename>
    <includes id="a00053" name="brezzidouglasmarini1simplex2d.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini1simplex2d.hh</includes>
    <includes id="a00077" name="brezzidouglasmarini2simplex2d.hh" local="no" imported="no">dune/localfunctions/brezzidouglasmarini/brezzidouglasmarini2simplex2d.hh</includes>
    <class kind="class">Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>meta/power/coefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/meta/power/</path>
    <filename>a04307.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::PowerCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>whitney/edges0.5/coefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/whitney/edges0.5/</path>
    <filename>a04310.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00539" name="common.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/common.hh</includes>
    <class kind="class">Dune::EdgeS0_5Coefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>coeffmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00503.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a00536" name="tensor.hh" local="no" imported="no">dune/localfunctions/utility/tensor.hh</includes>
    <class kind="struct">Dune::Mult</class>
    <class kind="struct">Dune::Mult&lt; Field, FieldVector&lt; Field2, dimRange &gt; &gt;</class>
    <class kind="class">Dune::SparseCoeffMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/whitney/edges0.5/</path>
    <filename>a00539.html</filename>
    <class kind="struct">Dune::EdgeS0_5Common</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>crouzeixraviart.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00116.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::CrouzeixRaviartLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>defaultbasisfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00506.html</filename>
    <includes id="a00497" name="basismatrix.hh" local="no" imported="no">dune/localfunctions/utility/basismatrix.hh</includes>
    <class kind="struct">Dune::Identity</class>
    <class kind="struct">Dune::DefaultBasisFactory</class>
    <class kind="struct">Dune::DefaultBasisFactory::EvaluationBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dglocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00509.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::DGLocalCoefficients</class>
    <class kind="struct">Dune::DGLocalCoefficientsFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualmortarbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00146.html</filename>
    <includes id="a00128" name="dualp1.hh" local="no" imported="no">dune/localfunctions/dualmortarbasis/dualp1.hh</includes>
    <includes id="a00143" name="dualq1.hh" local="no" imported="no">dune/localfunctions/dualmortarbasis/dualq1.hh</includes>
  </compound>
  <compound kind="file">
    <name>dualp1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/</path>
    <filename>a00128.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00119" name="dualp1localbasis.hh" local="yes" imported="no">dualp1/dualp1localbasis.hh</includes>
    <includes id="a00122" name="dualp1localcoefficients.hh" local="yes" imported="no">dualp1/dualp1localcoefficients.hh</includes>
    <includes id="a00125" name="dualp1localinterpolation.hh" local="yes" imported="no">dualp1/dualp1localinterpolation.hh</includes>
    <class kind="class">Dune::DualP1LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualp1localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualp1/</path>
    <filename>a00119.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::DualP1LocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualp1localcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualp1/</path>
    <filename>a00122.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::DualP1LocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualp1localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualp1/</path>
    <filename>a00125.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::DualP1LocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualpq1factory.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/</path>
    <filename>a00131.html</filename>
    <includes id="a00110" name="virtualinterface.hh" local="no" imported="no">dune/localfunctions/common/virtualinterface.hh</includes>
    <includes id="a00113" name="virtualwrappers.hh" local="no" imported="no">dune/localfunctions/common/virtualwrappers.hh</includes>
    <includes id="a00146" name="dualmortarbasis.hh" local="no" imported="no">dune/localfunctions/dualmortarbasis.hh</includes>
    <class kind="class">Dune::DualPQ1LocalFiniteElementCache</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualq1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/</path>
    <filename>a00143.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00191" name="lagrangecube.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecube.hh</includes>
    <includes id="a00134" name="dualq1localbasis.hh" local="yes" imported="no">dualq1/dualq1localbasis.hh</includes>
    <includes id="a00137" name="dualq1localcoefficients.hh" local="yes" imported="no">dualq1/dualq1localcoefficients.hh</includes>
    <includes id="a00140" name="dualq1localinterpolation.hh" local="yes" imported="no">dualq1/dualq1localinterpolation.hh</includes>
    <class kind="class">Dune::DualQ1LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualq1localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualq1/</path>
    <filename>a00134.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::DualQ1LocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualq1localcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualq1/</path>
    <filename>a00137.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::DualQ1LocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dualq1localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/dualmortarbasis/dualq1/</path>
    <filename>a00140.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::DualQ1LocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>edges0.5.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/whitney/</path>
    <filename>a00542.html</filename>
    <includes id="a04304" name="whitney/edges0.5/basis.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/basis.hh</includes>
    <includes id="a04310" name="whitney/edges0.5/coefficients.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/coefficients.hh</includes>
    <includes id="a04319" name="whitney/edges0.5/interpolation.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/interpolation.hh</includes>
    <class kind="class">Dune::EdgeS0_5FiniteElement</class>
    <class kind="struct">Dune::EdgeS0_5FiniteElement::Traits</class>
    <class kind="struct">Dune::EdgeS0_5FiniteElementFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>emptypoints.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00176.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LagrangePoint</class>
    <class kind="class">Dune::EmptyPointSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>equidistantpoints.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00179.html</filename>
    <includes id="a00176" name="emptypoints.hh" local="no" imported="no">dune/localfunctions/lagrange/emptypoints.hh</includes>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <class kind="class">Dune::EquidistantPointSet</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1cd5cc7e4a3db569f40875b51febffe4</anchor>
      <arglist>(const GeometryType &amp;gt, std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9274e9f9c0e33d6f079594c6c9cdde9f</anchor>
      <arglist>(unsigned int topologyId, unsigned int dim, std::size_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>equidistantLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a4526cca5c0c55d6449dbd64a5fdf46</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int codim, std::size_t order, unsigned int *count, LagrangePoint&lt; ct, cdim &gt; *points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>equidistantLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae6f981433d37cd15cb7bc2be9c360903</anchor>
      <arglist>(unsigned int topologyId, unsigned int dim, unsigned int codim, std::size_t order, unsigned int *count, LagrangePoint&lt; ct, cdim &gt; *points)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>field.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00512.html</filename>
    <class kind="struct">Dune::Unity</class>
    <class kind="struct">Dune::Zero</class>
    <class kind="struct">Dune::FieldCast</class>
    <class kind="struct">Dune::FieldCast&lt; F2, Dune::FieldVector&lt; F1, dim &gt; &gt;</class>
    <class kind="struct">Dune::FieldCast&lt; F2, Dune::FieldMatrix&lt; F1, dim1, dim2 &gt; &gt;</class>
    <class kind="struct">Dune::Precision&lt; double &gt;</class>
    <class kind="struct">Dune::Precision&lt; long double &gt;</class>
    <class kind="struct">Dune::Precision&lt; float &gt;</class>
    <class kind="struct">Dune::ComputeField</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>Field</type>
      <name>operator+</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a70799efc758478ecf434b9e8786001</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator-</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1f36ac9f98478852168894c57daa5da1</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af99cedd10c1c4dc63a021ee661b974d0</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator/</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a966b8d739e48d676c3480e2288d3f382</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3e55443d9ff5419cfce9a70e6c37c6e0</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56b7b4941be3583597c6a42d05dfcbc7</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24127181970eebb5e704dc32ca520ec0</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6fdd9bf1e7d01f03808ebcc168bd6415</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a831e5d02dd0babbe210cd90e8e017dc9</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;z, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29d512452c1abe87010be877afcaaa42</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a21dc7d62b42eb19c5bf573afa02f4701</anchor>
      <arglist>(const F1 &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60c721e6fe8850994e436325493fde01</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, dim &gt; &amp;f1, Dune::FieldVector&lt; F2, dim &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af20c41112e186985c51be6b19c828e58</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6be8eab69ad9479d456107338e12207f</anchor>
      <arglist>(const F1 &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0feaa87f8ccc1704f72cf19118524b2</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, rdim, cdim &gt; &amp;f1, Dune::FieldMatrix&lt; F2, rdim, cdim &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af4880906b28dfc75e2c7f120f4a025af</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b0a354bfee3933bb1b4ef3983a6cfd6</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a353bbbc4c4acc563352e1fdf9f5d4619</anchor>
      <arglist>(const F1 &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aca73d5455b9faf76e0c4b171b16a86a8</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a99dd7ad57e6aac992a7eeb80ec01729d</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37e751795d9423b374e6ddceb0365531</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>FieldCast&lt; F2, V &gt;::type</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a99dca4e0151b30e5e122884feda8e766</anchor>
      <arglist>(const V &amp;f1)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hierarchical.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00173.html</filename>
    <includes id="a00155" name="hierarchicalp2.hh" local="no" imported="no">dune/localfunctions/hierarchical/hierarchicalp2.hh</includes>
    <includes id="a00161" name="hierarchicalp2withelementbubble.hh" local="no" imported="no">dune/localfunctions/hierarchical/hierarchicalp2withelementbubble.hh</includes>
    <includes id="a00170" name="hierarchicalprismp2.hh" local="no" imported="no">dune/localfunctions/hierarchical/hierarchicalprismp2.hh</includes>
  </compound>
  <compound kind="file">
    <name>hierarchicalp2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/</path>
    <filename>a00155.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00227" name="pk.hh" local="no" imported="no">dune/localfunctions/lagrange/pk.hh</includes>
    <includes id="a00149" name="hierarchicalsimplexp2localbasis.hh" local="yes" imported="no">hierarchicalp2/hierarchicalsimplexp2localbasis.hh</includes>
    <includes id="a00152" name="hierarchicalsimplexp2localinterpolation.hh" local="yes" imported="no">hierarchicalp2/hierarchicalsimplexp2localinterpolation.hh</includes>
    <class kind="class">Dune::HierarchicalP2LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalp2withelementbubble.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/</path>
    <filename>a00161.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00158" name="hierarchicalsimplexp2withelementbubble.hh" local="no" imported="no">dune/localfunctions/hierarchical/hierarchicalp2withelementbubble/hierarchicalsimplexp2withelementbubble.hh</includes>
    <class kind="class">Dune::HierarchicalP2WithElementBubbleLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalprismp2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/</path>
    <filename>a00170.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00197" name="lagrangeprism.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangeprism.hh</includes>
    <includes id="a00164" name="hierarchicalprismp2localbasis.hh" local="yes" imported="no">hierarchicalprismp2/hierarchicalprismp2localbasis.hh</includes>
    <includes id="a00167" name="hierarchicalprismp2localinterpolation.hh" local="yes" imported="no">hierarchicalprismp2/hierarchicalprismp2localinterpolation.hh</includes>
    <class kind="class">Dune::HierarchicalPrismP2LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalprismp2localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/hierarchicalprismp2/</path>
    <filename>a00164.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::HierarchicalPrismP2LocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalprismp2localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/hierarchicalprismp2/</path>
    <filename>a00167.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::HierarchicalPrismP2LocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalsimplexp2localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/hierarchicalp2/</path>
    <filename>a00149.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalsimplexp2localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/hierarchicalp2/</path>
    <filename>a00152.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::HierarchicalSimplexP2LocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicalsimplexp2withelementbubble.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/hierarchical/hierarchicalp2withelementbubble/</path>
    <filename>a00158.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 3 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalCoefficients</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>interface.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00089.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::FiniteElementInterface</class>
    <class kind="struct">Dune::FiniteElementInterface::Traits</class>
    <class kind="class">Dune::FiniteElementFactoryInterface</class>
    <class kind="class">Dune::BasisInterface</class>
    <class kind="struct">Dune::BasisInterface::Traits</class>
    <class kind="struct">Dune::InterpolationInterface</class>
    <class kind="struct">Dune::CoefficientsInterface</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>interfaceswitch.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00092.html</filename>
    <class kind="struct">Dune::FiniteElementInterfaceSwitch</class>
    <class kind="struct">Dune::BasisInterfaceSwitch</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrange/interpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a04313.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00188" name="lagrangecoefficients.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecoefficients.hh</includes>
    <class kind="class">Dune::LocalLagrangeInterpolation</class>
    <class kind="struct">Dune::LagrangeInterpolationFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>meta/power/interpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/meta/power/</path>
    <filename>a04316.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::PowerInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>whitney/edges0.5/interpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/whitney/edges0.5/</path>
    <filename>a04319.html</filename>
    <includes id="a00539" name="common.hh" local="no" imported="no">dune/localfunctions/whitney/edges0.5/common.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::EdgeS0_5Interpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>interpolationhelper.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00515.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="struct">Dune::InterpolationHelper</class>
    <class kind="struct">Dune::InterpolationHelper::Helper&lt; Func, Vector, true &gt;</class>
    <class kind="struct">Dune::InterpolationHelper::Helper&lt; Basis, Matrix, false &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>l2interpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00518.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00521" name="lfematrix.hh" local="no" imported="no">dune/localfunctions/utility/lfematrix.hh</includes>
    <class kind="class">Dune::LocalL2InterpolationBase</class>
    <class kind="struct">Dune::LocalL2Interpolation&lt; B, Q, true &gt;</class>
    <class kind="struct">Dune::LocalL2Interpolation&lt; B, Q, false &gt;</class>
    <class kind="struct">Dune::LocalL2InterpolationFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrange.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00266.html</filename>
    <includes id="a04328" name="localfunctions/utility/localfiniteelement.hh" local="no" imported="no">dune/localfunctions/utility/localfiniteelement.hh</includes>
    <includes id="a00509" name="dglocalcoefficients.hh" local="no" imported="no">dune/localfunctions/utility/dglocalcoefficients.hh</includes>
    <includes id="a00188" name="lagrangecoefficients.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecoefficients.hh</includes>
    <includes id="a04313" name="lagrange/interpolation.hh" local="no" imported="no">dune/localfunctions/lagrange/interpolation.hh</includes>
    <includes id="a00185" name="lagrangebasis.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangebasis.hh</includes>
    <includes id="a00191" name="lagrangecube.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecube.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <includes id="a00215" name="p0.hh" local="no" imported="no">dune/localfunctions/lagrange/p0.hh</includes>
    <includes id="a00218" name="p1.hh" local="no" imported="no">dune/localfunctions/lagrange/p1.hh</includes>
    <includes id="a00221" name="p2.hh" local="no" imported="no">dune/localfunctions/lagrange/p2.hh</includes>
    <includes id="a00224" name="p23d.hh" local="no" imported="no">dune/localfunctions/lagrange/p23d.hh</includes>
    <includes id="a00227" name="pk.hh" local="no" imported="no">dune/localfunctions/lagrange/pk.hh</includes>
    <includes id="a00230" name="pk1d.hh" local="no" imported="no">dune/localfunctions/lagrange/pk1d.hh</includes>
    <includes id="a00233" name="pk2d.hh" local="no" imported="no">dune/localfunctions/lagrange/pk2d.hh</includes>
    <includes id="a00236" name="pk3d.hh" local="no" imported="no">dune/localfunctions/lagrange/pk3d.hh</includes>
    <includes id="a00239" name="pq22d.hh" local="no" imported="no">dune/localfunctions/lagrange/pq22d.hh</includes>
    <includes id="a00257" name="q1.hh" local="no" imported="no">dune/localfunctions/lagrange/q1.hh</includes>
    <includes id="a00260" name="q2.hh" local="no" imported="no">dune/localfunctions/lagrange/q2.hh</includes>
    <includes id="a00263" name="qk.hh" local="no" imported="no">dune/localfunctions/lagrange/qk.hh</includes>
    <includes id="a00245" name="prismp1.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp1.hh</includes>
    <includes id="a00248" name="prismp2.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp2.hh</includes>
    <includes id="a00251" name="pyramidp1.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp1.hh</includes>
    <includes id="a00254" name="pyramidp2.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp2.hh</includes>
    <class kind="class">Dune::LagrangeLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangebasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00185.html</filename>
    <includes id="a00506" name="defaultbasisfactory.hh" local="no" imported="no">dune/localfunctions/utility/defaultbasisfactory.hh</includes>
    <includes id="a00527" name="monomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/monomialbasis.hh</includes>
    <includes id="a04313" name="lagrange/interpolation.hh" local="no" imported="no">dune/localfunctions/lagrange/interpolation.hh</includes>
    <class kind="struct">Dune::LagrangeBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangecoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00188.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="struct">Dune::LagrangeCoefficientsFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangecube.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00191.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LagrangeCubeLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangelfecache.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00194.html</filename>
    <includes id="a00215" name="p0.hh" local="no" imported="no">dune/localfunctions/lagrange/p0.hh</includes>
    <includes id="a00227" name="pk.hh" local="no" imported="no">dune/localfunctions/lagrange/pk.hh</includes>
    <includes id="a00263" name="qk.hh" local="no" imported="no">dune/localfunctions/lagrange/qk.hh</includes>
    <includes id="a00245" name="prismp1.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp1.hh</includes>
    <includes id="a00248" name="prismp2.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp2.hh</includes>
    <includes id="a00251" name="pyramidp1.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp1.hh</includes>
    <includes id="a00254" name="pyramidp2.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp2.hh</includes>
    <includes id="a00101" name="localfiniteelementvariantcache.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementvariantcache.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LocalFiniteElementVariantCache&lt; Impl::ImplementedLagrangeFiniteElements&lt; D, R, dim, order &gt; &gt;</type>
      <name>LagrangeLocalFiniteElementCache</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab585b20191b64f3ff507227d45718aae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lagrangeprism.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00197.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LagrangePrismLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangepyramid.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00200.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LagrangePyramidLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lagrangesimplex.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00203.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LagrangeSimplexLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>lfematrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00521.html</filename>
    <includes id="a00512" name="field.hh" local="yes" imported="no">field.hh</includes>
    <class kind="class">Dune::LFEMatrix</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab3fdad87f2673dbe165a6628ff204718</anchor>
      <arglist>(std::ostream &amp;out, const LFEMatrix&lt; Field &gt; &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>brezzidouglasfortinmarini/cube/localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasfortinmarini/cube/</path>
    <filename>a04322.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::BDFMCubeLocalBasis</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a04325.html</filename>
    <class kind="struct">Dune::LocalBasisTraits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasfortinmarini/cube/</path>
    <filename>a00014.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::BDFMCubeLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localfunctions/utility/localfiniteelement.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a04328.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00518" name="l2interpolation.hh" local="no" imported="no">dune/localfunctions/utility/l2interpolation.hh</includes>
    <includes id="a00509" name="dglocalcoefficients.hh" local="no" imported="no">dune/localfunctions/utility/dglocalcoefficients.hh</includes>
    <class kind="struct">Dune::GenericLocalFiniteElement</class>
    <class kind="struct">Dune::DGLocalFiniteElement</class>
    <class kind="struct">Dune::L2LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>python/localfunctions/localfiniteelement.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/python/localfunctions/</path>
    <filename>a04331.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00110" name="virtualinterface.hh" local="no" imported="no">dune/localfunctions/common/virtualinterface.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Python</namespace>
    <member kind="function">
      <type>DUNE_EXPORT auto</type>
      <name>registerLocalFiniteElement</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a9e2f7c8d9bdba1910978f3281344f0d9</anchor>
      <arglist>(pybind11::handle scope, const char *name=&quot;LocalFiniteElement&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>localfiniteelementtraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00095.html</filename>
    <class kind="struct">Dune::LocalFiniteElementTraits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localfiniteelementvariant.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00098.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::LocalFiniteElementVariant</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localfiniteelementvariantcache.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00101.html</filename>
    <includes id="a00098" name="localfiniteelementvariant.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementvariant.hh</includes>
    <class kind="class">Dune::LocalFiniteElementVariantCache</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>brezzidouglasfortinmarini/cube/localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/brezzidouglasfortinmarini/cube/</path>
    <filename>a04334.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::BDFMCubeLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a04337.html</filename>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localkey.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00104.html</filename>
    <class kind="class">Dune::LocalKey</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localtoglobaladaptors.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00107.html</filename>
    <class kind="struct">Dune::LocalToGlobalBasisAdaptorTraits</class>
    <class kind="class">Dune::ScalarLocalToGlobalBasisAdaptor</class>
    <class kind="class">Dune::LocalToGlobalInterpolationAdaptor</class>
    <class kind="struct">Dune::ScalarLocalToGlobalFiniteElementAdaptor</class>
    <class kind="struct">Dune::ScalarLocalToGlobalFiniteElementAdaptor::Traits</class>
    <class kind="class">Dune::ScalarLocalToGlobalFiniteElementAdaptorFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/doc/doxygen/</path>
    <filename>a00002.html</filename>
  </compound>
  <compound kind="file">
    <name>mimetic.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00281.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">common/localfiniteelementtraits.hh</includes>
    <includes id="a00278" name="mimeticall.hh" local="yes" imported="no">mimetic/mimeticall.hh</includes>
    <class kind="class">Dune::MimeticLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mimeticall.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/mimetic/</path>
    <filename>a00278.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../common/localkey.hh</includes>
    <class kind="class">Dune::MimeticLocalBasis</class>
    <class kind="class">Dune::MimeticLocalInterpolation</class>
    <class kind="class">Dune::MimeticLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/doc/doxygen/</path>
    <filename>a00005.html</filename>
  </compound>
  <compound kind="file">
    <name>monomial.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00293.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">common/localfiniteelementtraits.hh</includes>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="yes" imported="no">common/localtoglobaladaptors.hh</includes>
    <includes id="a00284" name="monomiallocalbasis.hh" local="yes" imported="no">monomial/monomiallocalbasis.hh</includes>
    <includes id="a00287" name="monomiallocalcoefficients.hh" local="yes" imported="no">monomial/monomiallocalcoefficients.hh</includes>
    <includes id="a00290" name="monomiallocalinterpolation.hh" local="yes" imported="no">monomial/monomiallocalinterpolation.hh</includes>
    <class kind="class">Dune::MonomialLocalFiniteElement</class>
    <class kind="class">Dune::MonomialFiniteElementFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>monomialbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00527.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a00530" name="multiindex.hh" local="no" imported="no">dune/localfunctions/utility/multiindex.hh</includes>
    <includes id="a00536" name="tensor.hh" local="no" imported="no">dune/localfunctions/utility/tensor.hh</includes>
    <class kind="class">Dune::MonomialBasisSize</class>
    <class kind="struct">Dune::MonomialBasisHelper</class>
    <class kind="class">Dune::MonomialBasisImpl</class>
    <class kind="class">Dune::MonomialBasis</class>
    <class kind="class">Dune::StandardMonomialBasis</class>
    <class kind="class">Dune::StandardBiMonomialBasis</class>
    <class kind="class">Dune::VirtualMonomialBasis</class>
    <class kind="class">Dune::VirtualMonomialBasisImpl</class>
    <class kind="struct">Dune::MonomialBasisFactory</class>
    <class kind="struct">Dune::MonomialBasisFactory::EvaluationBasisFactory</class>
    <class kind="struct">Dune::MonomialBasisProvider</class>
    <class kind="struct">Dune::MonomialBasisProvider::EvaluationBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>monomiallocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/monomial/</path>
    <filename>a00284.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../common/localbasis.hh</includes>
    <class kind="class">Dune::MonomImp::EvalAccess</class>
    <class kind="class">Dune::MonomImp::JacobianAccess</class>
    <class kind="struct">Dune::MonomImp::Evaluate</class>
    <class kind="struct">Dune::MonomImp::Evaluate&lt; Traits, 1 &gt;</class>
    <class kind="class">Dune::MonomialLocalBasis</class>
    <namespace>Dune</namespace>
    <namespace>Dune::MonomImp</namespace>
  </compound>
  <compound kind="file">
    <name>monomiallocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/monomial/</path>
    <filename>a00287.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../common/localkey.hh</includes>
    <class kind="class">Dune::MonomialLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>monomiallocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/monomial/</path>
    <filename>a00290.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::MonomialLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>multiindex.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00530.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <class kind="class">Dune::MultiIndex</class>
    <class kind="struct">Dune::Unity&lt; MultiIndex&lt; dim, F &gt; &gt;</class>
    <class kind="struct">Dune::Zero&lt; MultiIndex&lt; dim, F &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a48356fd6fae1020532a63b79f4a3527e</anchor>
      <arglist>(std::ostream &amp;, const MultiIndex&lt; dim, Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afb2c1b9aa389270f5cb4c3359e5b3d13</anchor>
      <arglist>(const F &amp;f, const MultiIndex&lt; dim, Field &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>operator/</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a556e575cab91370af35ceb1389e66aa9</anchor>
      <arglist>(const F &amp;f, const MultiIndex&lt; dim, Field &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5a09420108b7b407129c3a8deffa8f6</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; MultiIndex&lt; d, F &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ada33a3f2b2ce6eef7576d920971396af</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Dune::FieldVector&lt; MultiIndex&lt; d, F &gt;, dimR &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab110785adde82ff9776bb845bff0b1a6</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Dune::FieldMatrix&lt; MultiIndex&lt; d, F &gt;, dimR1, dimR2 &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3509e62417222c2214a755b3f0ee06b1</anchor>
      <arglist>(std::ostream &amp;out, const MultiIndex&lt; d, F &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8d0e4680bac6d2e2f8cee122ae9d8f45</anchor>
      <arglist>(const Zero&lt; MultiIndex&lt; dim, Field &gt; &gt; &amp;, const MultiIndex&lt; dim, Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7bbbdb77ac7ed9df36c91e084535545a</anchor>
      <arglist>(const MultiIndex&lt; dim, Field &gt; &amp;f, const Zero&lt; MultiIndex&lt; dim, Field &gt; &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nedelec.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00311.html</filename>
    <includes id="a00299" name="nedelec1stkindsimplex.hh" local="no" imported="no">dune/localfunctions/nedelec/nedelec1stkindsimplex.hh</includes>
    <includes id="a00296" name="nedelec1stkindcube.hh" local="no" imported="no">dune/localfunctions/nedelec/nedelec1stkindcube.hh</includes>
  </compound>
  <compound kind="file">
    <name>nedelec1stkindcube.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/nedelec/</path>
    <filename>a00296.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::Nedelec1stKindCubeLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>nedelec1stkindsimplex.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/nedelec/</path>
    <filename>a00299.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::Nedelec1stKindSimplexLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>nedelecsimplexbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/nedelec/nedelecsimplex/</path>
    <filename>a00302.html</filename>
    <includes id="a00506" name="defaultbasisfactory.hh" local="no" imported="no">dune/localfunctions/utility/defaultbasisfactory.hh</includes>
    <includes id="a00305" name="nedelecsimplexinterpolation.hh" local="yes" imported="no">nedelecsimplexinterpolation.hh</includes>
    <includes id="a00308" name="nedelecsimplexprebasis.hh" local="yes" imported="no">nedelecsimplexprebasis.hh</includes>
    <class kind="struct">Dune::NedelecBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>nedelecsimplexinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/nedelec/nedelecsimplex/</path>
    <filename>a00305.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00515" name="interpolationhelper.hh" local="no" imported="no">dune/localfunctions/utility/interpolationhelper.hh</includes>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <includes id="a00314" name="orthonormalbasis.hh" local="no" imported="no">dune/localfunctions/orthonormal/orthonormalbasis.hh</includes>
    <class kind="class">Dune::LocalCoefficientsContainer</class>
    <class kind="struct">Dune::NedelecCoefficientsFactory</class>
    <class kind="struct">Dune::NedelecL2InterpolationBuilder</class>
    <class kind="class">Dune::NedelecL2Interpolation</class>
    <class kind="struct">Dune::NedelecL2InterpolationFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>nedelecsimplexprebasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/nedelec/nedelecsimplex/</path>
    <filename>a00308.html</filename>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <class kind="struct">Dune::NedelecPreBasisFactory</class>
    <class kind="struct">Dune::NedelecPreBasisFactory::EvaluationBasisFactory</class>
    <class kind="struct">Dune::NedelecVecMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>orthonormal.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00320.html</filename>
    <includes id="a04328" name="localfunctions/utility/localfiniteelement.hh" local="no" imported="no">dune/localfunctions/utility/localfiniteelement.hh</includes>
    <includes id="a00509" name="dglocalcoefficients.hh" local="no" imported="no">dune/localfunctions/utility/dglocalcoefficients.hh</includes>
    <includes id="a00518" name="l2interpolation.hh" local="no" imported="no">dune/localfunctions/utility/l2interpolation.hh</includes>
    <includes id="a00314" name="orthonormalbasis.hh" local="no" imported="no">dune/localfunctions/orthonormal/orthonormalbasis.hh</includes>
    <class kind="class">Dune::OrthonormalLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>orthonormalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/orthonormal/</path>
    <filename>a00314.html</filename>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <includes id="a00317" name="orthonormalcompute.hh" local="no" imported="no">dune/localfunctions/orthonormal/orthonormalcompute.hh</includes>
    <class kind="struct">Dune::OrthonormalBasisFactory</class>
    <class kind="struct">Dune::OrthonormalBasisFactory::EvaluationBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>orthonormalcompute.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/orthonormal/</path>
    <filename>a00317.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <includes id="a00521" name="lfematrix.hh" local="no" imported="no">dune/localfunctions/utility/lfematrix.hh</includes>
    <includes id="a00527" name="monomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/monomialbasis.hh</includes>
    <includes id="a00530" name="multiindex.hh" local="no" imported="no">dune/localfunctions/utility/multiindex.hh</includes>
    <class kind="struct">ONBCompute::Integral</class>
    <class kind="class">ONBCompute::ONBMatrix</class>
    <namespace>ONBCompute</namespace>
    <member kind="function">
      <type>scalar_t</type>
      <name>factorial</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a2469aecd2f524a96e9306d349878b356</anchor>
      <arglist>(int start, int end)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>p0.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00215.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00206" name="p0localbasis.hh" local="yes" imported="no">p0/p0localbasis.hh</includes>
    <includes id="a00209" name="p0localcoefficients.hh" local="yes" imported="no">p0/p0localcoefficients.hh</includes>
    <includes id="a00212" name="p0localinterpolation.hh" local="yes" imported="no">p0/p0localinterpolation.hh</includes>
    <class kind="class">Dune::P0LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>p0localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/p0/</path>
    <filename>a00206.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::P0LocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>p0localcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/p0/</path>
    <filename>a00209.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::P0LocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>p0localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/p0/</path>
    <filename>a00212.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::P0LocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>p1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00218.html</filename>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, dim, 1 &gt;</type>
      <name>P1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9cbe31c47dd72aa557e361ff43287fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>p2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00221.html</filename>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, d, 2 &gt;</type>
      <name>P2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af6ad2bbf13d0be739ccd1fc0c16d27bb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>p23d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00224.html</filename>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 3, 2 &gt;</type>
      <name>P23DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb9efedb2dfb2d21e6df328af385de01</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pk.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00227.html</filename>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, d, k &gt;</type>
      <name>PkLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaff625586b0cf6d0676b7ead05383b72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pk1d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00230.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="no" imported="no">dune/localfunctions/common/localtoglobaladaptors.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <class kind="class">Dune::Pk1DFiniteElement</class>
    <class kind="struct">Dune::Pk1DFiniteElement::Traits</class>
    <class kind="struct">Dune::Pk1DFiniteElementFactory</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 1, k &gt;</type>
      <name>Pk1DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a09cb741c7682af02985555c1211cafce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pk2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00233.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="no" imported="no">dune/localfunctions/common/localtoglobaladaptors.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <class kind="class">Dune::Pk2DFiniteElement</class>
    <class kind="struct">Dune::Pk2DFiniteElement::Traits</class>
    <class kind="struct">Dune::Pk2DFiniteElementFactory</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 2, k &gt;</type>
      <name>Pk2DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af44702636762c4497f93c275404c358e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pk3d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00236.html</filename>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 3, k &gt;</type>
      <name>Pk3DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3dc7c1ac1b5a65ece0bad1fe0ba4b91c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>polynomialbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00533.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00503" name="coeffmatrix.hh" local="no" imported="no">dune/localfunctions/utility/coeffmatrix.hh</includes>
    <includes id="a00527" name="monomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/monomialbasis.hh</includes>
    <includes id="a00530" name="multiindex.hh" local="no" imported="no">dune/localfunctions/utility/multiindex.hh</includes>
    <includes id="a00494" name="basisevaluator.hh" local="no" imported="no">dune/localfunctions/utility/basisevaluator.hh</includes>
    <class kind="class">Dune::PolynomialBasis</class>
    <class kind="struct">Dune::PolynomialBasis::Convert</class>
    <class kind="struct">Dune::PolynomialBasis::Convert&lt; dummy, DomainVector &gt;</class>
    <class kind="class">Dune::PolynomialBasisWithMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>power.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/meta/</path>
    <filename>a00275.html</filename>
    <includes id="a04301" name="meta/power/basis.hh" local="no" imported="no">dune/localfunctions/meta/power/basis.hh</includes>
    <includes id="a04307" name="meta/power/coefficients.hh" local="no" imported="no">dune/localfunctions/meta/power/coefficients.hh</includes>
    <includes id="a04316" name="meta/power/interpolation.hh" local="no" imported="no">dune/localfunctions/meta/power/interpolation.hh</includes>
    <class kind="class">Dune::PowerFiniteElement</class>
    <class kind="struct">Dune::PowerFiniteElement::Traits</class>
    <class kind="class">Dune::PowerFiniteElementFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>pq22d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00239.html</filename>
    <includes id="a00098" name="localfiniteelementvariant.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementvariant.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <includes id="a00191" name="lagrangecube.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecube.hh</includes>
    <class kind="class">Dune::PQ22DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>pqkfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00242.html</filename>
    <includes id="a00110" name="virtualinterface.hh" local="no" imported="no">dune/localfunctions/common/virtualinterface.hh</includes>
    <includes id="a00113" name="virtualwrappers.hh" local="no" imported="no">dune/localfunctions/common/virtualwrappers.hh</includes>
    <includes id="a00215" name="p0.hh" local="no" imported="no">dune/localfunctions/lagrange/p0.hh</includes>
    <includes id="a00227" name="pk.hh" local="no" imported="no">dune/localfunctions/lagrange/pk.hh</includes>
    <includes id="a00257" name="q1.hh" local="no" imported="no">dune/localfunctions/lagrange/q1.hh</includes>
    <includes id="a00263" name="qk.hh" local="no" imported="no">dune/localfunctions/lagrange/qk.hh</includes>
    <includes id="a00245" name="prismp1.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp1.hh</includes>
    <includes id="a00248" name="prismp2.hh" local="no" imported="no">dune/localfunctions/lagrange/prismp2.hh</includes>
    <includes id="a00251" name="pyramidp1.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp1.hh</includes>
    <includes id="a00254" name="pyramidp2.hh" local="no" imported="no">dune/localfunctions/lagrange/pyramidp2.hh</includes>
    <class kind="struct">Dune::DimSpecificPQkLocalFiniteElementFactory</class>
    <class kind="struct">Dune::DimSpecificPQkLocalFiniteElementFactory&lt; D, R, 3, k &gt;</class>
    <class kind="struct">Dune::PQkLocalFiniteElementFactory</class>
    <class kind="class">Dune::PQkLocalFiniteElementCache</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>prismp1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00245.html</filename>
    <includes id="a00197" name="lagrangeprism.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangeprism.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangePrismLocalFiniteElement&lt; D, R, 1 &gt;</type>
      <name>PrismP1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a715613d9ab83a92edaafa924ed314e09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>prismp2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00248.html</filename>
    <includes id="a00197" name="lagrangeprism.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangeprism.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangePrismLocalFiniteElement&lt; D, R, 2 &gt;</type>
      <name>PrismP2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6ce456d71a630bbc7e8779588e9748df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pyramidp1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00251.html</filename>
    <includes id="a00200" name="lagrangepyramid.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangepyramid.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangePyramidLocalFiniteElement&lt; D, R, 1 &gt;</type>
      <name>PyramidP1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa452b8a2c96f0017af7dda4547d27a23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pyramidp2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00254.html</filename>
    <includes id="a00200" name="lagrangepyramid.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangepyramid.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangePyramidLocalFiniteElement&lt; D, R, 2 &gt;</type>
      <name>PyramidP2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae8cbbb31613326d6c3c60089a16186ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>q1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00257.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="no" imported="no">dune/localfunctions/common/localtoglobaladaptors.hh</includes>
    <includes id="a00191" name="lagrangecube.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecube.hh</includes>
    <class kind="class">Dune::Q1FiniteElementFactory</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeCubeLocalFiniteElement&lt; D, R, dim, 1 &gt;</type>
      <name>Q1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a493fad3b04a69017e323c1b332067137</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>q2.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00260.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00107" name="localtoglobaladaptors.hh" local="no" imported="no">dune/localfunctions/common/localtoglobaladaptors.hh</includes>
    <includes id="a00227" name="pk.hh" local="yes" imported="no">pk.hh</includes>
    <includes id="a00263" name="qk.hh" local="yes" imported="no">qk.hh</includes>
    <class kind="class">Dune::Q2FiniteElementFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>qk.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/lagrange/</path>
    <filename>a00263.html</filename>
    <includes id="a00191" name="lagrangecube.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangecube.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LagrangeCubeLocalFiniteElement&lt; D, R, d, k &gt;</type>
      <name>QkLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51b6c1a44d0c8a206a6ab35609208691</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rannacherturek/rannacherturek.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/</path>
    <filename>a04340.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00332" name="rannachertureklocalbasis.hh" local="yes" imported="no">rannachertureklocalbasis.hh</includes>
    <includes id="a00335" name="rannachertureklocalcoefficients.hh" local="yes" imported="no">rannachertureklocalcoefficients.hh</includes>
    <includes id="a00338" name="rannachertureklocalinterpolation.hh" local="yes" imported="no">rannachertureklocalinterpolation.hh</includes>
    <class kind="struct">Dune::RannacherTurekLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>rannacherturek.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00323.html</filename>
    <includes id="a04340" name="rannacherturek/rannacherturek.hh" local="no" imported="no">dune/localfunctions/rannacherturek/rannacherturek.hh</includes>
  </compound>
  <compound kind="file">
    <name>rannacherturek2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/rannacherturek2d/</path>
    <filename>a00326.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="struct">Dune::RannacherTurek2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>rannacherturek3dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/rannacherturek3d/</path>
    <filename>a00329.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::RannacherTurek3DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>rannachertureklocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/</path>
    <filename>a00332.html</filename>
    <includes id="a00326" name="rannacherturek2dlocalbasis.hh" local="yes" imported="no">rannacherturek2d/rannacherturek2dlocalbasis.hh</includes>
    <includes id="a00329" name="rannacherturek3dlocalbasis.hh" local="yes" imported="no">rannacherturek3d/rannacherturek3dlocalbasis.hh</includes>
    <class kind="struct">Dune::RannacherTurekLocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="struct">Dune::RannacherTurekLocalBasis&lt; D, R, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>rannachertureklocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/</path>
    <filename>a00335.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="struct">Dune::RannacherTurekLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>rannachertureklocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/rannacherturek/</path>
    <filename>a00338.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RannacherTurekLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00467.html</filename>
    <includes id="a00449" name="raviartthomascube.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomascube.hh</includes>
    <includes id="a00464" name="raviartthomassimplex.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomassimplex.hh</includes>
    <includes id="a00350" name="raviartthomas02d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas02d.hh</includes>
    <includes id="a00386" name="raviartthomas12d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas12d.hh</includes>
    <includes id="a00362" name="raviartthomas03d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas03d.hh</includes>
    <includes id="a00368" name="raviartthomas0cube2d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas0cube2d.hh</includes>
    <includes id="a00398" name="raviartthomas1cube2d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas1cube2d.hh</includes>
    <includes id="a00422" name="raviartthomas2cube2d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas2cube2d.hh</includes>
    <includes id="a00434" name="raviartthomas3cube2d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas3cube2d.hh</includes>
    <includes id="a00374" name="raviartthomas0cube3d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas0cube3d.hh</includes>
    <includes id="a00410" name="raviartthomas1cube3d.hh" local="no" imported="no">dune/localfunctions/raviartthomas/raviartthomas1cube3d.hh</includes>
  </compound>
  <compound kind="file">
    <name>raviartthomas02d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00350.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00341" name="raviartthomas02dlocalbasis.hh" local="yes" imported="no">raviartthomas02d/raviartthomas02dlocalbasis.hh</includes>
    <includes id="a00344" name="raviartthomas02dlocalcoefficients.hh" local="yes" imported="no">raviartthomas02d/raviartthomas02dlocalcoefficients.hh</includes>
    <includes id="a00347" name="raviartthomas02dlocalinterpolation.hh" local="yes" imported="no">raviartthomas02d/raviartthomas02dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT02DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas02dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas02d/</path>
    <filename>a00341.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::RT02DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas02dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas02d/</path>
    <filename>a00344.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::RT02DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas02dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas02d/</path>
    <filename>a00347.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT02DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas03d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00362.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00353" name="raviartthomas03dlocalbasis.hh" local="yes" imported="no">raviartthomas03d/raviartthomas03dlocalbasis.hh</includes>
    <includes id="a00356" name="raviartthomas03dlocalcoefficients.hh" local="yes" imported="no">raviartthomas03d/raviartthomas03dlocalcoefficients.hh</includes>
    <includes id="a00359" name="raviartthomas03dlocalinterpolation.hh" local="yes" imported="no">raviartthomas03d/raviartthomas03dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT03DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas03dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas03d/</path>
    <filename>a00353.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::RT03DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas03dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas03d/</path>
    <filename>a00356.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::RT03DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas03dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas03d/</path>
    <filename>a00359.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT03DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas0cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00368.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00365" name="raviartthomas0cube2dall.hh" local="yes" imported="no">raviartthomas0cube2d/raviartthomas0cube2dall.hh</includes>
    <class kind="class">Dune::RT0Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas0cube2dall.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas0cube2d/</path>
    <filename>a00365.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT0Cube2DLocalBasis</class>
    <class kind="class">Dune::RT0Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT0Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas0cube3d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00374.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00371" name="raviartthomas0cube3dall.hh" local="yes" imported="no">raviartthomas0cube3d/raviartthomas0cube3dall.hh</includes>
    <class kind="class">Dune::RT0Cube3DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas0cube3dall.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas0cube3d/</path>
    <filename>a00371.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT0Cube3DLocalBasis</class>
    <class kind="class">Dune::RT0Cube3DLocalInterpolation</class>
    <class kind="class">Dune::RT0Cube3DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas12d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00386.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00377" name="raviartthomas12dlocalbasis.hh" local="yes" imported="no">raviartthomas12d/raviartthomas12dlocalbasis.hh</includes>
    <includes id="a00380" name="raviartthomas12dlocalcoefficients.hh" local="yes" imported="no">raviartthomas12d/raviartthomas12dlocalcoefficients.hh</includes>
    <includes id="a00383" name="raviartthomas12dlocalinterpolation.hh" local="yes" imported="no">raviartthomas12d/raviartthomas12dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT12DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas12dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas12d/</path>
    <filename>a00377.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT12DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas12dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas12d/</path>
    <filename>a00380.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT12DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas12dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas12d/</path>
    <filename>a00383.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT12DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00398.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00389" name="raviartthomas1cube2dlocalbasis.hh" local="yes" imported="no">raviartthomas1cube2d/raviartthomas1cube2dlocalbasis.hh</includes>
    <includes id="a00395" name="raviartthomas1cube2dlocalinterpolation.hh" local="yes" imported="no">raviartthomas1cube2d/raviartthomas1cube2dlocalinterpolation.hh</includes>
    <includes id="a00392" name="raviartthomas1cube2dlocalcoefficients.hh" local="yes" imported="no">raviartthomas1cube2d/raviartthomas1cube2dlocalcoefficients.hh</includes>
    <class kind="class">Dune::RT1Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube2d/</path>
    <filename>a00389.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT1Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube2d/</path>
    <filename>a00392.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT1Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube2d/</path>
    <filename>a00395.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT1Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube3d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00410.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00401" name="raviartthomas1cube3dlocalbasis.hh" local="yes" imported="no">raviartthomas1cube3d/raviartthomas1cube3dlocalbasis.hh</includes>
    <includes id="a00404" name="raviartthomas1cube3dlocalcoefficients.hh" local="yes" imported="no">raviartthomas1cube3d/raviartthomas1cube3dlocalcoefficients.hh</includes>
    <includes id="a00407" name="raviartthomas1cube3dlocalinterpolation.hh" local="yes" imported="no">raviartthomas1cube3d/raviartthomas1cube3dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT1Cube3DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube3dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube3d/</path>
    <filename>a00401.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT1Cube3DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube3dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube3d/</path>
    <filename>a00404.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT1Cube3DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas1cube3dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas1cube3d/</path>
    <filename>a00407.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT1Cube3DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas2cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00422.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00413" name="raviartthomas2cube2dlocalbasis.hh" local="yes" imported="no">raviartthomas2cube2d/raviartthomas2cube2dlocalbasis.hh</includes>
    <includes id="a00416" name="raviartthomas2cube2dlocalcoefficients.hh" local="yes" imported="no">raviartthomas2cube2d/raviartthomas2cube2dlocalcoefficients.hh</includes>
    <includes id="a00419" name="raviartthomas2cube2dlocalinterpolation.hh" local="yes" imported="no">raviartthomas2cube2d/raviartthomas2cube2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT2Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas2cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas2cube2d/</path>
    <filename>a00413.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT2Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas2cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas2cube2d/</path>
    <filename>a00416.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT2Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas2cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas2cube2d/</path>
    <filename>a00419.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT2Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas3cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00434.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00425" name="raviartthomas3cube2dlocalbasis.hh" local="yes" imported="no">raviartthomas3cube2d/raviartthomas3cube2dlocalbasis.hh</includes>
    <includes id="a00428" name="raviartthomas3cube2dlocalcoefficients.hh" local="yes" imported="no">raviartthomas3cube2d/raviartthomas3cube2dlocalcoefficients.hh</includes>
    <includes id="a00431" name="raviartthomas3cube2dlocalinterpolation.hh" local="yes" imported="no">raviartthomas3cube2d/raviartthomas3cube2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT3Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas3cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas3cube2d/</path>
    <filename>a00425.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT3Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas3cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas3cube2d/</path>
    <filename>a00428.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT3Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas3cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas3cube2d/</path>
    <filename>a00431.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT3Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas4cube2d.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00446.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="yes" imported="no">../common/localfiniteelementtraits.hh</includes>
    <includes id="a00437" name="raviartthomas4cube2dlocalbasis.hh" local="yes" imported="no">raviartthomas4cube2d/raviartthomas4cube2dlocalbasis.hh</includes>
    <includes id="a00440" name="raviartthomas4cube2dlocalcoefficients.hh" local="yes" imported="no">raviartthomas4cube2d/raviartthomas4cube2dlocalcoefficients.hh</includes>
    <includes id="a00443" name="raviartthomas4cube2dlocalinterpolation.hh" local="yes" imported="no">raviartthomas4cube2d/raviartthomas4cube2dlocalinterpolation.hh</includes>
    <class kind="class">Dune::RT4Cube2DLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas4cube2dlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas4cube2d/</path>
    <filename>a00437.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="yes" imported="no">../../common/localbasis.hh</includes>
    <class kind="class">Dune::RT4Cube2DLocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas4cube2dlocalcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas4cube2d/</path>
    <filename>a00440.html</filename>
    <includes id="a00104" name="localkey.hh" local="yes" imported="no">../../common/localkey.hh</includes>
    <class kind="class">Dune::RT4Cube2DLocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomas4cube2dlocalinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomas4cube2d/</path>
    <filename>a00443.html</filename>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RT4Cube2DLocalInterpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomascube.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00449.html</filename>
    <includes id="a00368" name="raviartthomas0cube2d.hh" local="yes" imported="no">raviartthomas0cube2d.hh</includes>
    <includes id="a00374" name="raviartthomas0cube3d.hh" local="yes" imported="no">raviartthomas0cube3d.hh</includes>
    <includes id="a00398" name="raviartthomas1cube2d.hh" local="yes" imported="no">raviartthomas1cube2d.hh</includes>
    <includes id="a00410" name="raviartthomas1cube3d.hh" local="yes" imported="no">raviartthomas1cube3d.hh</includes>
    <includes id="a00422" name="raviartthomas2cube2d.hh" local="yes" imported="no">raviartthomas2cube2d.hh</includes>
    <includes id="a00434" name="raviartthomas3cube2d.hh" local="yes" imported="no">raviartthomas3cube2d.hh</includes>
    <includes id="a00446" name="raviartthomas4cube2d.hh" local="yes" imported="no">raviartthomas4cube2d.hh</includes>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 0 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 3 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 4 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 0 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomaslfecache.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00452.html</filename>
    <includes id="a00467" name="raviartthomas.hh" local="no" imported="no">dune/localfunctions/raviartthomas.hh</includes>
    <includes id="a00101" name="localfiniteelementvariantcache.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementvariantcache.hh</includes>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>LocalFiniteElementVariantCache&lt; Impl::ImplementedRaviartThomasLocalFiniteElements&lt; D, R, dim, order &gt; &gt;</type>
      <name>RaviartThomasLocalFiniteElementCache</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a819bbc5d411d26deab8f6c9683d6d762</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>raviartthomassimplex.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/</path>
    <filename>a00464.html</filename>
    <includes id="a04328" name="localfunctions/utility/localfiniteelement.hh" local="no" imported="no">dune/localfunctions/utility/localfiniteelement.hh</includes>
    <includes id="a00455" name="raviartthomassimplexbasis.hh" local="yes" imported="no">raviartthomassimplex/raviartthomassimplexbasis.hh</includes>
    <class kind="class">Dune::RaviartThomasSimplexLocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomassimplexbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomassimplex/</path>
    <filename>a00455.html</filename>
    <includes id="a00506" name="defaultbasisfactory.hh" local="no" imported="no">dune/localfunctions/utility/defaultbasisfactory.hh</includes>
    <includes id="a00458" name="raviartthomassimplexinterpolation.hh" local="yes" imported="no">raviartthomassimplexinterpolation.hh</includes>
    <includes id="a00461" name="raviartthomassimplexprebasis.hh" local="yes" imported="no">raviartthomassimplexprebasis.hh</includes>
    <class kind="struct">Dune::RaviartThomasBasisFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomassimplexinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomassimplex/</path>
    <filename>a00458.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00515" name="interpolationhelper.hh" local="no" imported="no">dune/localfunctions/utility/interpolationhelper.hh</includes>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <includes id="a00314" name="orthonormalbasis.hh" local="no" imported="no">dune/localfunctions/orthonormal/orthonormalbasis.hh</includes>
    <class kind="class">Dune::LocalCoefficientsContainer</class>
    <class kind="struct">Dune::RaviartThomasCoefficientsFactory</class>
    <class kind="struct">Dune::RTL2InterpolationBuilder</class>
    <class kind="class">Dune::RaviartThomasL2Interpolation</class>
    <class kind="struct">Dune::RaviartThomasL2InterpolationFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>raviartthomassimplexprebasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/raviartthomas/raviartthomassimplex/</path>
    <filename>a00461.html</filename>
    <includes id="a00533" name="polynomialbasis.hh" local="no" imported="no">dune/localfunctions/utility/polynomialbasis.hh</includes>
    <class kind="struct">Dune::RTPreBasisFactory</class>
    <class kind="struct">Dune::RTPreBasisFactory::EvaluationBasisFactory</class>
    <class kind="struct">Dune::RTVecMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refined.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/</path>
    <filename>a00491.html</filename>
    <includes id="a00482" name="refinedp0.hh" local="no" imported="no">dune/localfunctions/refined/refinedp0.hh</includes>
    <includes id="a00488" name="refinedp1.hh" local="no" imported="no">dune/localfunctions/refined/refinedp1.hh</includes>
  </compound>
  <compound kind="file">
    <name>refinedp0.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/</path>
    <filename>a00482.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00215" name="p0.hh" local="no" imported="no">dune/localfunctions/lagrange/p0.hh</includes>
    <includes id="a00473" name="refinedp0localbasis.hh" local="yes" imported="no">refinedp0/refinedp0localbasis.hh</includes>
    <includes id="a00476" name="refinedp0localcoefficients.hh" local="yes" imported="no">refinedp0/refinedp0localcoefficients.hh</includes>
    <includes id="a00479" name="refinedp0localinterpolation.hh" local="yes" imported="no">refinedp0/refinedp0localinterpolation.hh</includes>
    <class kind="class">Dune::RefinedP0LocalFiniteElement</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedp0localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/refinedp0/</path>
    <filename>a00473.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00470" name="refinedsimplexlocalbasis.hh" local="no" imported="no">dune/localfunctions/refined/common/refinedsimplexlocalbasis.hh</includes>
    <class kind="class">Dune::RefinedP0LocalBasis</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedp0localcoefficients.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/refinedp0/</path>
    <filename>a00476.html</filename>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <class kind="class">Dune::RefinedP0LocalCoefficients</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedp0localinterpolation.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/refinedp0/</path>
    <filename>a00479.html</filename>
    <includes id="a00473" name="refinedp0localbasis.hh" local="no" imported="no">dune/localfunctions/refined/refinedp0/refinedp0localbasis.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <class kind="class">Dune::RefinedP0LocalInterpolation</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 1 &gt; &gt;</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 2 &gt; &gt;</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 3 &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedp1.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/</path>
    <filename>a00488.html</filename>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <includes id="a00215" name="p0.hh" local="no" imported="no">dune/localfunctions/lagrange/p0.hh</includes>
    <includes id="a00203" name="lagrangesimplex.hh" local="no" imported="no">dune/localfunctions/lagrange/lagrangesimplex.hh</includes>
    <includes id="a00485" name="refinedp1localbasis.hh" local="no" imported="no">dune/localfunctions/refined/refinedp1/refinedp1localbasis.hh</includes>
    <class kind="class">Dune::RefinedP1LocalFiniteElement</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedp1localbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/refinedp1/</path>
    <filename>a00485.html</filename>
    <includes id="a00470" name="refinedsimplexlocalbasis.hh" local="no" imported="no">dune/localfunctions/refined/common/refinedsimplexlocalbasis.hh</includes>
    <class kind="class">Dune::RefinedP1LocalBasis</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>refinedsimplexlocalbasis.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/refined/common/</path>
    <filename>a00470.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <class kind="class">Dune::RefinedSimplexLocalBasis</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 1 &gt;</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 2 &gt;</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 3 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>tensor.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/utility/</path>
    <filename>a00536.html</filename>
    <includes id="a00512" name="field.hh" local="no" imported="no">dune/localfunctions/utility/field.hh</includes>
    <class kind="class">Dune::LFETensor</class>
    <class kind="struct">Dune::LFETensor&lt; F, 0, deriv &gt;</class>
    <class kind="struct">Dune::LFETensor&lt; F, 0, 0 &gt;</class>
    <class kind="class">Dune::LFETensor&lt; F, dimD, 0 &gt;</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt;</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::DerivativeAssign</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, layout &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, F2 &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, 1 &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, 1 &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::DerivativeLayoutNS</namespace>
    <member kind="enumeration">
      <type></type>
      <name>DerivativeLayout</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0a811ae86f7133497672d9229a382f754a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>derivative</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0a0767ce89090503f50f831b6c9f97080c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ababbc30af3b42910049bb59c5ad6a234</anchor>
      <arglist>(std::ostream &amp;out, const LFETensor&lt; F, dimD, deriv &gt; &amp;tensor)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a49c7ebe4f6eb581f5ffc2cf89e0bde10</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c35b72dabe6e9c81ce0dcba81b3a8eb</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a124997eb4c57b0e3798cd84821f1952e</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::derivative &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22b80ec060c84ec5be5a7b6626dd86bb</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2408f4a688b117c70a341eb9fda18830</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Derivatives&lt; F, dimD, dimR, deriv, layout &gt; &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>virtualinterface.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00110.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a04337" name="common/localinterpolation.hh" local="no" imported="no">dune/localfunctions/common/localinterpolation.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00095" name="localfiniteelementtraits.hh" local="no" imported="no">dune/localfunctions/common/localfiniteelementtraits.hh</includes>
    <class kind="class">Dune::LocalFiniteElementFunctionBase</class>
    <class kind="struct">Dune::LocalFiniteElementFunctionBase::FunctionBaseDummy::Traits</class>
    <class kind="class">Dune::LocalBasisVirtualInterface</class>
    <class kind="class">Dune::LocalInterpolationVirtualInterfaceBase</class>
    <class kind="class">Dune::LocalInterpolationVirtualInterface</class>
    <class kind="class">Dune::LocalCoefficientsVirtualInterface</class>
    <class kind="class">Dune::LocalFiniteElementVirtualInterface</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>virtualwrappers.hh</name>
    <path>C:/ID/cmake-build-release/dune-localfunctions-prefix/src/dune-localfunctions/dune/localfunctions/common/</path>
    <filename>a00113.html</filename>
    <includes id="a04325" name="common/localbasis.hh" local="no" imported="no">dune/localfunctions/common/localbasis.hh</includes>
    <includes id="a00104" name="localkey.hh" local="no" imported="no">dune/localfunctions/common/localkey.hh</includes>
    <includes id="a00110" name="virtualinterface.hh" local="no" imported="no">dune/localfunctions/common/virtualinterface.hh</includes>
    <class kind="struct">Dune::LocalFiniteElementCloneFactoryHelper</class>
    <class kind="struct">Dune::LocalFiniteElementCloneFactory</class>
    <class kind="class">Dune::LocalBasisVirtualImp</class>
    <class kind="class">Dune::LocalInterpolationVirtualImp</class>
    <class kind="class">Dune::LocalCoefficientsVirtualImp</class>
    <class kind="class">Dune::LocalFiniteElementVirtualImp</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialEvaluator::BaseIterator</name>
    <filename>a02549.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Deriv</type>
      <name>Derivatives</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>ab9a9daf27dd501a117ef2d8224a1eb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Deriv::Field</type>
      <name>Field</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>af521230591e21a98c32ad92c5208cfa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, blockSize &gt;</type>
      <name>Block</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a20b3e4ef77e47648a8a50a91a7cb15c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Field &gt;</type>
      <name>Container</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>ad2b3fa19009ad663dfa41fe4c6006df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Container::iterator</type>
      <name>CIter</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a70860602ab3611674d79a1e7e37c92b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BaseIterator</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a02624963780a16bb73fe481595cd732b</anchor>
      <arglist>(Container &amp;container)</arglist>
    </member>
    <member kind="function">
      <type>const Deriv &amp;</type>
      <name>operator*</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>acf078d804ec3a2867418790d3ec49c10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Deriv *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a5cbd8a18c3abd305460c228363472fc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a3e0cf439cdb81dd380f47f2b23ef3b85</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BaseIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>ac3c6305b88de6415e734b612df8a600d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BaseIterator &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a26b9aaa67be3875bc0f47e6df5d810c0</anchor>
      <arglist>(unsigned int skip)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>blockSize</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a7b4f827877d1f82dd346f14630df02a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DerivativeLayoutNS::DerivativeLayout</type>
      <name>layout</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a143c2b6139d75c6c5098f377647d5c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a88d9d72d58a953e775d7438a1634ddb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>aca72fcd1460b2e644a75e311c58d2da7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BasisInterface</name>
    <filename>a01529.html</filename>
    <class kind="struct">Dune::BasisInterface::Traits</class>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>accfaf1a9bb85d91e09b17b4caa1bdfd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a944f2c96f209df7b828dcdc350a39a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a654af6793cae8b2d25380c48c46b6188</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>aa201c35d4810e5675155e746b7d9c5f7</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a1280c3573e90e38b75d17ee5b35ac0ac</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisInterfaceSwitch</name>
    <filename>a01549.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Basis::Traits::DomainField</type>
      <name>DomainField</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>adb94285f3f49b4f6e350d1b1c03e5643</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::Traits::DomainLocal</type>
      <name>DomainLocal</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>ac9756ae9068f4701ca55f6ab8e65efa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::Traits::RangeField</type>
      <name>RangeField</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a3dfe820863fd9388f6136f3224cd344b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::Traits::Range</type>
      <name>Range</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a80d839c9f9787aba5df2e23fb62a2cec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>gradient</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a98cda3aa6f2ba72b6cf14a83479b3db7</anchor>
      <arglist>(const Basis &amp;basis, const Geometry &amp;geometry, const DomainLocal &amp;xl, std::vector&lt; FieldMatrix&lt; RangeField, 1, Geometry::coorddimension &gt; &gt; &amp;grad)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimDomainLocal</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a226c4dafdf567dd9544d70528d240fa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimRange</name>
      <anchorfile>a01549.html</anchorfile>
      <anchor>a19ccf9e056197b829e0d2a146d2d9353</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrix</name>
    <filename>a02565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrix&lt; const Dune::VirtualMonomialBasis&lt; dim, F &gt;, Interpolation, Field &gt;</name>
    <filename>a02577.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>BasisMatrixBase&lt; const VirtualMonomialBasis&lt; dim, F &gt;, Interpolation, Field &gt;</base>
    <member kind="typedef">
      <type>const VirtualMonomialBasis&lt; dim, F &gt;</type>
      <name>PreBasis</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a779bb070a333aaca637768685185012e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisMatrixBase&lt; PreBasis, Interpolation, Field &gt;</type>
      <name>Base</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a444b53ce62fa10b410afb4fb16afab56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Matrix</type>
      <name>Matrix</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a5f40405851b9a338ce73620ac5f32096</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrix</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>ad0e04ee3162e72e2b46d53d1ed5e60cc</anchor>
      <arglist>(const PreBasis &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a07223dce10438e54471abc08f68435eb</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrix&lt; const MonomialBasis&lt; geometryId, F &gt;, Interpolation, Field &gt;</name>
    <filename>a02573.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>BasisMatrixBase&lt; const MonomialBasis&lt; geometryId, F &gt;, Interpolation, Field &gt;</base>
    <member kind="typedef">
      <type>const MonomialBasis&lt; geometryId, F &gt;</type>
      <name>PreBasis</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>a4c14dc213149625224f37eeb58369233</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisMatrixBase&lt; PreBasis, Interpolation, Field &gt;</type>
      <name>Base</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>af11eb83ee215d88be017ed9c5a24074e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Matrix</type>
      <name>Matrix</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>a8b7ca31fc058996062da7c475f07d465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrix</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>ad91804cb473b711fa2fc6a80420a719c</anchor>
      <arglist>(const PreBasis &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02573.html</anchorfile>
      <anchor>a1fce44ea8aef68692b9236c86683b7da</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrix&lt; const PolynomialBasis&lt; Eval, CM, D, R &gt;, Interpolation, Field &gt;</name>
    <filename>a02581.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>BasisMatrixBase&lt; const PolynomialBasis&lt; Eval, CM, D, R &gt;, Interpolation, Field &gt;</base>
    <member kind="typedef">
      <type>const PolynomialBasis&lt; Eval, CM, D, R &gt;</type>
      <name>PreBasis</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aefca0c3067ae9aa2d645250b96972699</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisMatrixBase&lt; PreBasis, Interpolation, Field &gt;</type>
      <name>Base</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a44161aa903b42b8ac4924f3838c76401</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Matrix</type>
      <name>Matrix</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a26035a6e30a7d9f4f86528055805505f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrix</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a5dee6a9e5e65229fe2089228e14e5752</anchor>
      <arglist>(const PreBasis &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>acaf855e1e9452f552af53b36e0a5e5b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>ae9459f2d49e7952d9fd10217e1a35dac</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrix&lt; const PolynomialBasisWithMatrix&lt; Eval, CM &gt;, Interpolation, Field &gt;</name>
    <filename>a02585.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>BasisMatrixBase&lt; const PolynomialBasisWithMatrix&lt; Eval, CM &gt;, Interpolation, Field &gt;</base>
    <member kind="typedef">
      <type>const PolynomialBasisWithMatrix&lt; Eval, CM &gt;</type>
      <name>PreBasis</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a4b0e899b21aaee4d832e2fdda3f5d48e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisMatrixBase&lt; PreBasis, Interpolation, Field &gt;</type>
      <name>Base</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a4fd8ce4bf5022aa373c658c1acfa5297</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Matrix</type>
      <name>Matrix</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a83f7e60d9aee2d41e34fc4b0f339c4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrix</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>aa9330b36e2f16f88aac7546718592312</anchor>
      <arglist>(const PreBasis &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>aedeb9a368e38582fb5f4813c7097b698</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>a829c143e1392226516280e4c8fbb81ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>abe9eabfcd83259055475e694bf5d8d88</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisMatrixBase</name>
    <filename>a02569.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>LFEMatrix&lt; Field &gt;</base>
    <member kind="typedef">
      <type>LFEMatrix&lt; Field &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a88a3ba8b1193d5f4af7506bb30254138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrixBase</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a806fa09c0e6baaf70e36efac683ddb29</anchor>
      <arglist>(const PreBasis &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasisMatrixBase&lt; const MonomialBasis&lt; geometryId, F &gt;, Interpolation, Field &gt;</name>
    <filename>a02569.html</filename>
    <base>LFEMatrix&lt; Field &gt;</base>
    <member kind="typedef">
      <type>LFEMatrix&lt; Field &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a88a3ba8b1193d5f4af7506bb30254138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrixBase</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a806fa09c0e6baaf70e36efac683ddb29</anchor>
      <arglist>(const const MonomialBasis&lt; geometryId, F &gt; &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasisMatrixBase&lt; const PolynomialBasis&lt; Eval, CM, D, R &gt;, Interpolation, Field &gt;</name>
    <filename>a02569.html</filename>
    <base>LFEMatrix&lt; Field &gt;</base>
    <member kind="typedef">
      <type>LFEMatrix&lt; Field &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a88a3ba8b1193d5f4af7506bb30254138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrixBase</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a806fa09c0e6baaf70e36efac683ddb29</anchor>
      <arglist>(const const PolynomialBasis&lt; Eval, CM, D, R &gt; &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasisMatrixBase&lt; const PolynomialBasisWithMatrix&lt; Eval, CM &gt;, Interpolation, Field &gt;</name>
    <filename>a02569.html</filename>
    <base>LFEMatrix&lt; Field &gt;</base>
    <member kind="typedef">
      <type>LFEMatrix&lt; Field &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a88a3ba8b1193d5f4af7506bb30254138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrixBase</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a806fa09c0e6baaf70e36efac683ddb29</anchor>
      <arglist>(const const PolynomialBasisWithMatrix&lt; Eval, CM &gt; &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasisMatrixBase&lt; const VirtualMonomialBasis&lt; dim, F &gt;, Interpolation, Field &gt;</name>
    <filename>a02569.html</filename>
    <base>LFEMatrix&lt; Field &gt;</base>
    <member kind="typedef">
      <type>LFEMatrix&lt; Field &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a88a3ba8b1193d5f4af7506bb30254138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasisMatrixBase</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a806fa09c0e6baaf70e36efac683ddb29</anchor>
      <arglist>(const const VirtualMonomialBasis&lt; dim, F &gt; &amp;preBasis, const Interpolation &amp;localInterpolation)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a2905ed60959e7eea31968f18c2f18380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a73bebf6f135baf4948d699fd41383ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalBasis</name>
    <filename>a01385.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalBasis&lt; D, R, 2, 1 &gt;</name>
    <filename>a01389.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, DomainType, R, 2, RangeType, JacobianType &gt;</type>
      <name>Traits</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>ae1dad2c9d29d65e18be503f0a1535f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a594c411038a197c6b8594cc7fa15fbed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>abafb4afa72a609868eee656dcc0691f6</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a13c66cc8df8ad72d36d52710f67a619d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a3d7fbe0bb973035dfb1704c9a7e4da31</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a86a4fdebffaae632dc9b1bb7d6bd291b</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a7096b29cba288208838c30efeb5ba3c4</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01389.html</anchorfile>
      <anchor>a34217d6c5ff788cb6567c77fbd9bdb19</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalBasis&lt; D, R, 2, 2 &gt;</name>
    <filename>a01393.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, DomainType, R, 2, RangeType, JacobianType &gt;</type>
      <name>Traits</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7fa52c2c890e99f8bb4de8eb319b884d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb466872ac5a618e4b37c3faaea150cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afbfdfb0ed585220bc48706448b07d051</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab6a24ee95d62ae5c4e4105724da62e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6315edc3362ed425449160ceeff6b42a</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac6212fd450a01cfc1bf237572198835a</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a97da36bef7773faa039796ce17dd46f6</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad4ee4a4243bf93fb0839f03c277b0ab1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalBasis&lt; D, R, 2, 3 &gt;</name>
    <filename>a01397.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, DomainType, R, 2, RangeType, JacobianType &gt;</type>
      <name>Traits</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>af418af77a9431051e921ecd24c587082</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a09bd0d5b45207483769b109c2b4b420a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalBasis</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a6b991cdbe6247bfcf9a25afad80bcff4</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>ab79e0d625d1e39536fae7cdabda8ad45</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>aeb03d716ee40e2b7a3c76284f3324d90</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a5ab0cd6e99f2d2271d73e4e02e166555</anchor>
      <arglist>(const DomainType &amp;in, std::vector&lt; JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>af0cba209754e9707dc95a50f0d7b146f</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const DomainType &amp;in, std::vector&lt; RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>ad30f42b9a391f7ff458d9fdfe84b27a5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalCoefficients</name>
    <filename>a01401.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalCoefficients</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a0dd62256ad6ffa89e9687137973ff2cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>aec5545a8dd9e2c14623d83d4cae6da66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>localKey</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>aff380895c654f24e2f55446e2e6c1ef9</anchor>
      <arglist>(std::size_t i) const -&gt; const LocalKey &amp;</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalFiniteElement</name>
    <filename>a01381.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; LocalBasis, LocalCoefficients, LocalInterpolation &gt;</type>
      <name>Traits</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a1da6fbbafb80909126fb666d52c8d149</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalFiniteElement</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a53520f031b957cf8bc07510e11eeb053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalFiniteElement</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>af0171448c68b379f606d65f597c780f3</anchor>
      <arglist>(std::bitset&lt; 2 *dim &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>localBasis</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>aa73221e66ad939da3a4d79355489f05e</anchor>
      <arglist>() const -&gt; const LocalBasis &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>localCoefficients</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a21ffdccd8390ee08fcb78f5d30deb171</anchor>
      <arglist>() const -&gt; const LocalCoefficients &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>localInterpolation</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>ae3cea009742650bc77afa53e6a621e51</anchor>
      <arglist>() const -&gt; const LocalInterpolation &amp;</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>a38235324a0b742b078d54896d2f0f822</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>type</name>
      <anchorfile>a01381.html</anchorfile>
      <anchor>abcf36ef7e02cf66d4b2ea8dd3a5b335e</anchor>
      <arglist>() -&gt; GeometryType</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDFMCubeLocalInterpolation</name>
    <filename>a01405.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalInterpolation</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1f8fa23e8d50f6473cabe97f3325c931</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDFMCubeLocalInterpolation</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1e23e0fdeabb6528aa9db322c8d523c8</anchor>
      <arglist>(std::bitset&lt; numFaces &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a11437ad320163868c5fecb13718a48f9</anchor>
      <arglist>(const F &amp;ff, C &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>trace</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8c17068a9825c5159c9f7cd12b6cab4</anchor>
      <arglist>(unsigned int face, const F &amp;f, C &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interior</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ade98ee921865884bd606e7d7f14f84f6</anchor>
      <arglist>(const F &amp;f, C &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube2DLocalBasis</name>
    <filename>a01409.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a50bae63a194b9d477b98afc703052baa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalBasis</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a4d823b7ef7bf46abebe822aacdf06606</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalBasis</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a5e67abc290463d0d45b969665a3bed56</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a5c800ce4ef090135804340dc631cd274</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>acf0a53d536833c2e65e39a6095feb616</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a016f1b4b328f3b3b98b24d8ccd20fa33</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a3c6bb2f235b1364b94dfe7e7332cb5b5</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01409.html</anchorfile>
      <anchor>a9f7e430d7e7174182310a34ca5c0a407</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube2DLocalCoefficients</name>
    <filename>a01413.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalCoefficients</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a3c13778d5dc080b994d1735a774aaa8e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>a59df9e5e19514bc5eb82f275ca811b34</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01413.html</anchorfile>
      <anchor>ac60f7a287af63dab04143bf999078071</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube2DLocalFiniteElement</name>
    <filename>a01421.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Cube2DLocalBasis&lt; D, R &gt;, BDM1Cube2DLocalCoefficients, BDM1Cube2DLocalInterpolation&lt; BDM1Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a50d329d78ad426ff6e19243881590013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalFiniteElement</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>ae3d71ed52f3b49bb3972960f300760b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalFiniteElement</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aff067e31a0e00c5af823c0af57874615</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aed13558fffd3f8909a5a17863f93d505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aeffb9e6093aabf0ae5e75086492e781a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a759edfab68d5fe8055307b87e466c05a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>ac49202dac4734fcb7bd5b59cc70d1c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a5569305b20fad02bb37c4ffd63199288</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube2DLocalInterpolation</name>
    <filename>a01417.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalInterpolation</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>aacbc3b900585fee5309bffd2474a2b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalInterpolation</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a54c7f5205eed8a7ed9b5b4e659ff2c7b</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ae0034262f006eff7309b2ac1d55344f2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BDM1Cube2DLocalInterpolation&lt; Dune::BDM1Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01417.html</filename>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalInterpolation</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>aacbc3b900585fee5309bffd2474a2b39</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube2DLocalInterpolation</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>a54c7f5205eed8a7ed9b5b4e659ff2c7b</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01417.html</anchorfile>
      <anchor>ae0034262f006eff7309b2ac1d55344f2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube3DLocalBasis</name>
    <filename>a01425.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 3, Dune::FieldVector&lt; R, 3 &gt;, Dune::FieldMatrix&lt; R, 3, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5ae67db1b61698ef81a130652de01e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalBasis</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae441d4f66a2dc0db5fe8fde705d0256a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalBasis</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>abc65bd18885349f328d1bcfd7c8b75bc</anchor>
      <arglist>(std::bitset&lt; 6 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af52988751f2627c28494d427270c1d67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a59a8df9e4a1692a6f4caac4ec7a054ba</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5704a9b59daaade05f65e63b0fd5f259</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a7c0139ca9d03f15c810c68ab42d245ab</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ad586b6f91c5c8d0547395401c9ee81ca</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube3DLocalCoefficients</name>
    <filename>a01429.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalCoefficients</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a8bdb8dff930afcbd7c1faeb282a1b7d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>a63c26437bbcf2bbafb1ca3fae0b3dbef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>ac5149554f4730c90d0c7bb40aead6cd0</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube3DLocalFiniteElement</name>
    <filename>a01437.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Cube3DLocalBasis&lt; D, R &gt;, BDM1Cube3DLocalCoefficients, BDM1Cube3DLocalInterpolation&lt; BDM1Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>acf91511c7a6d5397fa98f878e44f1d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalFiniteElement</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a049ea25d788e8ff3005b30d04728ef5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalFiniteElement</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>aee36e21c20c0e34a68131acb221c2243</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>ab7a1c9a6a6d7dd23d8074f45115baca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a4f56469b72fca57ce6d499f7fb5c0542</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>abb2ffb72464350db339fd39a9ced584a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a6dd8aba8e0e8f9112a990e3eedc56e7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>ab53e8a75d4c15153701aa3f9fdacebf3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Cube3DLocalInterpolation</name>
    <filename>a01433.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalInterpolation</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a95e1162337d0ad09b7f3a545a2da8c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalInterpolation</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>aa267cbbbdbcb17afb550d8a1aeab369e</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a9c937f33430dae8643ae2e4d5172a4ef</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BDM1Cube3DLocalInterpolation&lt; Dune::BDM1Cube3DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01433.html</filename>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalInterpolation</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a95e1162337d0ad09b7f3a545a2da8c28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Cube3DLocalInterpolation</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>aa267cbbbdbcb17afb550d8a1aeab369e</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01433.html</anchorfile>
      <anchor>a9c937f33430dae8643ae2e4d5172a4ef</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Simplex2DLocalBasis</name>
    <filename>a01441.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a909a5bbe2378a7ce5055490ad8f4cbe3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalBasis</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a96a55fbf6e9e7547f07faf8d2745e8f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalBasis</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ad596710e9c5b23435003bcdba827d9c5</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a72c8977bf1564c589c2f2e6948fa802b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a8633c292a804048dbfafcd47f77b0336</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a5253a4f5f9c4ec1860c1f1c016497652</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a92e545a0749d6a9abf418b17d016d986</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>abda51acaec4b76488be9f016334f9d94</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Simplex2DLocalCoefficients</name>
    <filename>a01445.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalCoefficients</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>a3276a5b3906e091ac79c0f1394d6bb20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>ad6464b4ac97a4e7450d24909e4b27681</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01445.html</anchorfile>
      <anchor>aa33e64bdeb10c0e7008c4a5f2b671ff5</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Simplex2DLocalFiniteElement</name>
    <filename>a01453.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Simplex2DLocalBasis&lt; D, R &gt;, BDM1Simplex2DLocalCoefficients, BDM1Simplex2DLocalInterpolation&lt; BDM1Simplex2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>af361d705e894e57d91b918d33c4990a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalFiniteElement</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aac2e408af46da94d62de70c6d088f231</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalFiniteElement</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aedcd115310603d567b0dd78e93346326</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a4cb754ff2cb32c04d106cfdfe960d054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aef18792e3bc5d1664f4b723db91fd2a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a52114cbfcc3c89998bfde7a0bb84594e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aeda2f5e080cd05b5dd2d60108f41b2a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a694b4b758dfcf8ba80b7a906c0410a9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM1Simplex2DLocalInterpolation</name>
    <filename>a01449.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalInterpolation</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ae641ec7e9ab121b8214b4dc9209ff20c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalInterpolation</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a7ff9f928fa18e5f481de3cd4089ede60</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a59e8d9bf368d1a67f1fa8adb1446543e</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BDM1Simplex2DLocalInterpolation&lt; Dune::BDM1Simplex2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01449.html</filename>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalInterpolation</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>ae641ec7e9ab121b8214b4dc9209ff20c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM1Simplex2DLocalInterpolation</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a7ff9f928fa18e5f481de3cd4089ede60</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01449.html</anchorfile>
      <anchor>a59e8d9bf368d1a67f1fa8adb1446543e</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Cube2DLocalBasis</name>
    <filename>a01457.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ab47fee58345a9ec11028a59d99b4b35f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalBasis</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a89a61b00ef7361042f2058d5c442a2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalBasis</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>aa9891d1ca82d1195e0e1644dde598ec3</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>ae6acc2853f91d5059ab6d756a0738eba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a87ccec3b262941eeb93b6464262b4471</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>af23f44a890d7673ece0938b8ebd5d47e</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a47f33ef4ba259ceadc75a166dba33c4e</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>a777a54ec9490d55d3e43d8d5e5ffb757</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Cube2DLocalCoefficients</name>
    <filename>a01461.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalCoefficients</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a7ee5b5070aceae78c171030e909a7c46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>aefdf3cfed6cfbf61d9428ef167533e41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01461.html</anchorfile>
      <anchor>a9cdd8a3e1d3e4337e0bbbca21350773a</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Cube2DLocalFiniteElement</name>
    <filename>a01469.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM2Cube2DLocalBasis&lt; D, R &gt;, BDM2Cube2DLocalCoefficients, BDM2Cube2DLocalInterpolation&lt; BDM2Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>afd9e069420d95403bc04f7b408407c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalFiniteElement</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a02c7ee27cbcd1fd0fc7254035dbf1c85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalFiniteElement</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>af468f2d466b24c993007971cd26486af</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a923d6cd3ece2667cfb6d5f4b1f546d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ad145e81a1fc3c789a5c180715e678d0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a3d9560f9764c66f36fa761728286e624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a19a86e9b65b5b0b1616994ef9532c1e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a83a18fa55db6ade82d6b6e2340dd2eea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Cube2DLocalInterpolation</name>
    <filename>a01465.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalInterpolation</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a44e7a20ffd0a22a36c7d95c1b17c97da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalInterpolation</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a3e28a464bace7791f8fc1dc1403eedce</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a5ccb70a56e3b98b7635c5e77effdd9ee</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BDM2Cube2DLocalInterpolation&lt; Dune::BDM2Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01465.html</filename>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalInterpolation</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a44e7a20ffd0a22a36c7d95c1b17c97da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Cube2DLocalInterpolation</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a3e28a464bace7791f8fc1dc1403eedce</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01465.html</anchorfile>
      <anchor>a5ccb70a56e3b98b7635c5e77effdd9ee</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Simplex2DLocalBasis</name>
    <filename>a01473.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>ac7923d92c2b910293da69be095eb7f8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalBasis</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>acc7a926a030d6c734a23f71aaac2cc5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalBasis</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a59302c312723bc4793efb3839aba6bcc</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a9cdc6dca23c386cfd0cd81be87f6d34a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>afdb26eb1fdd771411d39545c3b0882e3</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a4304156b91c2ce45d8d05f31ff23a423</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>a5ff51679fe8b1865034bdf2082bf8a22</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01473.html</anchorfile>
      <anchor>afe2ba39b26e99e3f380fdaeb7afc85ae</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Simplex2DLocalCoefficients</name>
    <filename>a01477.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalCoefficients</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a3d54452b550facae7eaece8ec65a5888</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>ab41d8d86915cf4f9d30853d780e09d24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01477.html</anchorfile>
      <anchor>a2fddb66a91bcaac8e30a71ff0fd8c9f8</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Simplex2DLocalFiniteElement</name>
    <filename>a01485.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM2Simplex2DLocalBasis&lt; D, R &gt;, BDM2Simplex2DLocalCoefficients, BDM2Simplex2DLocalInterpolation&lt; BDM2Simplex2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a60e8173d581c4a7ed44c22bcb30eb792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalFiniteElement</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a70c5bced08c79f2ddbfcb7c2b0d02634</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalFiniteElement</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>acf7342cffd6d967c8d028dbe0ec48f43</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a92f32c30918502d7d8de69a3400a4afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4434442d4cb6f70a01a88b687dc49dd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad37907b4f9dcde4eb6407ac2f0cd993c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>adfa9bea3b6ad51074692e0acc63aa055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a72c3381ede5a679db08ad0d64224f78d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BDM2Simplex2DLocalInterpolation</name>
    <filename>a01481.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalInterpolation</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a3b46ff539d75708e23454c3d89d15209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalInterpolation</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>ac4147e8642b05e51f40e03cb5c881d5d</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a4bd8bcd10b7cb8b48d8ef9d232357d99</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BDM2Simplex2DLocalInterpolation&lt; Dune::BDM2Simplex2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01481.html</filename>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalInterpolation</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a3b46ff539d75708e23454c3d89d15209</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDM2Simplex2DLocalInterpolation</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>ac4147e8642b05e51f40e03cb5c881d5d</anchor>
      <arglist>(unsigned int s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01481.html</anchorfile>
      <anchor>a4bd8bcd10b7cb8b48d8ef9d232357d99</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniCubeLocalFiniteElement</name>
    <filename>a01489.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</name>
    <filename>a01493.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BDM1Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Cube2DLocalBasis&lt; D, R &gt;, BDM1Cube2DLocalCoefficients, BDM1Cube2DLocalInterpolation&lt; BDM1Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a50d329d78ad426ff6e19243881590013</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a6b6c1761426fe9db4c3a921233098a73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01493.html</anchorfile>
      <anchor>a4a363e4256a164271d2d6329a6309cf9</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aed13558fffd3f8909a5a17863f93d505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>aeffb9e6093aabf0ae5e75086492e781a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a759edfab68d5fe8055307b87e466c05a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>ac49202dac4734fcb7bd5b59cc70d1c8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01421.html</anchorfile>
      <anchor>a5569305b20fad02bb37c4ffd63199288</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</name>
    <filename>a01497.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BDM2Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM2Cube2DLocalBasis&lt; D, R &gt;, BDM2Cube2DLocalCoefficients, BDM2Cube2DLocalInterpolation&lt; BDM2Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>afd9e069420d95403bc04f7b408407c47</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>ab83989165c3dcf3c206dcf10cc77c254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01497.html</anchorfile>
      <anchor>ae6ea19f29144ad9c61d0edc5eccce6b9</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a923d6cd3ece2667cfb6d5f4b1f546d8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>ad145e81a1fc3c789a5c180715e678d0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a3d9560f9764c66f36fa761728286e624</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a19a86e9b65b5b0b1616994ef9532c1e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01469.html</anchorfile>
      <anchor>a83a18fa55db6ade82d6b6e2340dd2eea</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</name>
    <filename>a01501.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BDM1Cube3DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Cube3DLocalBasis&lt; D, R &gt;, BDM1Cube3DLocalCoefficients, BDM1Cube3DLocalInterpolation&lt; BDM1Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>acf91511c7a6d5397fa98f878e44f1d4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a2955ec35416fa60c27b6cd5f5abb52e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniCubeLocalFiniteElement</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ac4f4dde115bbfe713deefbec24abd62a</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>ab7a1c9a6a6d7dd23d8074f45115baca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a4f56469b72fca57ce6d499f7fb5c0542</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>abb2ffb72464350db339fd39a9ced584a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>a6dd8aba8e0e8f9112a990e3eedc56e7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01437.html</anchorfile>
      <anchor>ab53e8a75d4c15153701aa3f9fdacebf3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniSimplexLocalFiniteElement</name>
    <filename>a01505.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 1 &gt;</name>
    <filename>a01509.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BDM1Simplex2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM1Simplex2DLocalBasis&lt; D, R &gt;, BDM1Simplex2DLocalCoefficients, BDM1Simplex2DLocalInterpolation&lt; BDM1Simplex2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>af361d705e894e57d91b918d33c4990a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniSimplexLocalFiniteElement</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a636604a7a969563eb3d80dad54be04a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniSimplexLocalFiniteElement</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a48c493c784fef9e7460f8cb9b36285eb</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a4cb754ff2cb32c04d106cfdfe960d054</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aef18792e3bc5d1664f4b723db91fd2a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a52114cbfcc3c89998bfde7a0bb84594e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>aeda2f5e080cd05b5dd2d60108f41b2a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01453.html</anchorfile>
      <anchor>a694b4b758dfcf8ba80b7a906c0410a9c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 2 &gt;</name>
    <filename>a01513.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BDM2Simplex2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; BDM2Simplex2DLocalBasis&lt; D, R &gt;, BDM2Simplex2DLocalCoefficients, BDM2Simplex2DLocalInterpolation&lt; BDM2Simplex2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a60e8173d581c4a7ed44c22bcb30eb792</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniSimplexLocalFiniteElement</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>afaf918e0d8e01707289f1c88d218fb85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BrezziDouglasMariniSimplexLocalFiniteElement</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a51aa6c272c8441f44550cfe19193a068</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a92f32c30918502d7d8de69a3400a4afd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a4434442d4cb6f70a01a88b687dc49dd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>ad37907b4f9dcde4eb6407ac2f0cd993c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>adfa9bea3b6ad51074692e0acc63aa055</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01485.html</anchorfile>
      <anchor>a72c3381ede5a679db08ad0d64224f78d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CoefficientsInterface</name>
    <filename>a01541.html</filename>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>ac8d29d2fe08a11a78222d2450e391dcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a86493663a866cd1a12523887e13e8abc</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ComputeField</name>
    <filename>a02657.html</filename>
    <templarg></templarg>
    <templarg>sum</templarg>
    <member kind="typedef">
      <type>Field</type>
      <name>Type</name>
      <anchorfile>a02657.html</anchorfile>
      <anchor>a498c16a2b19e7e4219d8ae98a0fbcfc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PolynomialBasis::Convert</name>
    <filename>a02781.html</filename>
    <templarg>dummy</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static DomainVector</type>
      <name>apply</name>
      <anchorfile>a02781.html</anchorfile>
      <anchor>ad2c64518e789232d39090d9e5b17f722</anchor>
      <arglist>(const DVector &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PolynomialBasis::Convert&lt; dummy, DomainVector &gt;</name>
    <filename>a02785.html</filename>
    <templarg>dummy</templarg>
    <member kind="function" static="yes">
      <type>static const DomainVector &amp;</type>
      <name>apply</name>
      <anchorfile>a02785.html</anchorfile>
      <anchor>a4483b899a46d601456b0021dbf5ced0f</anchor>
      <arglist>(const DomainVector &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CrouzeixRaviartLocalFiniteElement</name>
    <filename>a01705.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::CrouzeixRaviartLocalBasis&lt; D, R, dim &gt;, Impl::CrouzeixRaviartLocalCoefficients&lt; dim &gt;, Impl::CrouzeixRaviartLocalInterpolation&lt; Impl::CrouzeixRaviartLocalBasis&lt; D, R, dim &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>ac7a0804385ded22d173cffad44c15021</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a68bb0e4b7e00162a83e303eb251e40d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a44e013908126abb5f0881e21d7a16cf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a327de0dbe398b02b6218bba438461e28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>ac2301d3a7035bee7a44029e1b7a08420</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01705.html</anchorfile>
      <anchor>a5fcb1248aa5c3ef66a27a0971e834a70</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultBasisFactory</name>
    <filename>a02605.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultBasisFactory::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBFactory</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolFactory</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultBasisFactory&lt; MonomialBasisFactory&lt; dim, CF &gt;, LagrangeInterpolationFactory&lt; LP, dim, CF &gt;, dim, 1, SF, CF &gt;</name>
    <filename>a02605.html</filename>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeInterpolationFactory&lt; LP, dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultBasisFactory&lt; NedelecPreBasisFactory&lt; dim, CF &gt;, NedelecL2InterpolationFactory&lt; dim, CF &gt;, dim, dim, SF, CF &gt;</name>
    <filename>a02605.html</filename>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NedelecPreBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NedelecL2InterpolationFactory&lt; dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultBasisFactory&lt; RTPreBasisFactory&lt; dim, CF &gt;, RaviartThomasL2InterpolationFactory&lt; dim, CF &gt;, dim, dim, SF, CF &gt;</name>
    <filename>a02605.html</filename>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RTPreBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasL2InterpolationFactory&lt; dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign</name>
    <filename>a02845.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02845.html</anchorfile>
      <anchor>a63aad594e8c949f4e95c8dc1eba12989</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</name>
    <filename>a02873.html</filename>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02873.html</anchorfile>
      <anchor>a0ff420608a0b418ad78dd73d87352610</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02873.html</anchorfile>
      <anchor>ae5a903febd5165acd6a0aac1adae7dca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02873.html</anchorfile>
      <anchor>a2c35a5f41d96cbba52dabfb7a8b83074</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</name>
    <filename>a02877.html</filename>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02877.html</anchorfile>
      <anchor>af2893baa22f60ef729ebccb75df28b2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02877.html</anchorfile>
      <anchor>a3620da33fdfe78868e202d0ede3a2fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02877.html</anchorfile>
      <anchor>a7d303849ac44c03c46e70d612fed427c</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, 1 &gt; &gt;</name>
    <filename>a02909.html</filename>
    <templarg>dimD</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02909.html</anchorfile>
      <anchor>a157a3ee245780bbe26958599e7167c69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, 1 &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02909.html</anchorfile>
      <anchor>ac3a977bb902008e332ed25816ffb1537</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02909.html</anchorfile>
      <anchor>a36e0575123bc76418ecce19d63b5e21a</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</name>
    <filename>a02901.html</filename>
    <templarg>dimD</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02901.html</anchorfile>
      <anchor>aa870b1f9960f8c6bd54bdfeca8afd27c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, dimR &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02901.html</anchorfile>
      <anchor>ad24fdfbb610779c84e3396619e5d31ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02901.html</anchorfile>
      <anchor>a5c48912db821d1712cd5e20e2d5a5afc</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</name>
    <filename>a02881.html</filename>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>af391c6bd8e0386bd5062659435547575</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>a2ff4438d148f123474b654c0f8d58aed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>ad5629b467f3dc6c0a3b59427c6ca2e95</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</name>
    <filename>a02869.html</filename>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02869.html</anchorfile>
      <anchor>a2c64fb59e0c557444d13bebd002f8695</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02869.html</anchorfile>
      <anchor>a76a1a9757a291b765f350ffe432ea1ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02869.html</anchorfile>
      <anchor>ac37a0aad477de2547602c43e1294a304</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, 1 &gt; &gt;</name>
    <filename>a02905.html</filename>
    <templarg>dimD</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02905.html</anchorfile>
      <anchor>a8e8db3ea9dda40b8fb5c9073d966118f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, 1 &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02905.html</anchorfile>
      <anchor>a7f779ba71a1bbb7364a9147f000cf2d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02905.html</anchorfile>
      <anchor>a94d3a355bf9bda90dd273abef74caa3a</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</name>
    <filename>a02897.html</filename>
    <templarg>dimD</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02897.html</anchorfile>
      <anchor>a26308a3f1cf2c80baca36ab4912b4008</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, dimR &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02897.html</anchorfile>
      <anchor>a88e79655fcf1ea7e2a3bbc0850186737</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02897.html</anchorfile>
      <anchor>a9d15ba198eb670cd8bdefd32174cc24d</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</name>
    <filename>a02865.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg>layout</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, layout &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>a2025fd1f4cb162a5509e3e5fafdc963d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>af61d06adc61b6b2f03e6b4ffa0e4d4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>a8976280a43cd0fcf1130e5d72f6051e5</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</name>
    <filename>a02861.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg>layout</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, layout &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>aa033fdd4a2644c5ab09847f7b1f9647c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>ab903917ab9bf58c3b11d7d9c188cf36e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02861.html</anchorfile>
      <anchor>aafbe4c886b1c76ef42fb2305196ad9d8</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, F2 &gt;</name>
    <filename>a02885.html</filename>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <templarg>layout</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, deriv, layout &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a943101a2eaaf3fc9d38603ffb1e1379d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F2</type>
      <name>Vec2</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a4e388d46fd6a2b01afdecb5706848f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02885.html</anchorfile>
      <anchor>a5d3b506056a6326592a8596bdbcaf832</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</name>
    <filename>a02857.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02857.html</anchorfile>
      <anchor>a4b67a78ef72b145e0145cb63a4a28678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02857.html</anchorfile>
      <anchor>a1263dfe52e4b2e1bca0d4491c1fb6589</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02857.html</anchorfile>
      <anchor>a875107cc91e94b1a3947d253a8fe4f65</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</name>
    <filename>a02893.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>a035849a363c494905859227243ce23da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, dimR &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>afba7799b25a73ceb9c5e304eea11fe3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02893.html</anchorfile>
      <anchor>abbce633ac2e5231cee7bbfbcfd949f9d</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</name>
    <filename>a02853.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>a0dd4ed04a876b2620be267e537090441</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>af33652695c835c7fd028aa039d8bd72c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02853.html</anchorfile>
      <anchor>a2b93d6136a5d0c7922f8d3c7220c0ab2</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</name>
    <filename>a02889.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02889.html</anchorfile>
      <anchor>a16e960e159aa10e413b8c3d9b8e9f14b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; F2, dimR &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02889.html</anchorfile>
      <anchor>a202a74928efab1f08cb28816dfd71e10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02889.html</anchorfile>
      <anchor>ad809266f861ea4da1471d5c67bdc5041</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, layout &gt; &gt;</name>
    <filename>a02849.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg>layout</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, deriv, layout &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>a0987935fe135fc0fb87d7f83eddb72f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F2, dimD, dimR, deriv, layout &gt;</type>
      <name>Vec2</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>abe4da6d8ba44c296550c87ddc3f080d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02849.html</anchorfile>
      <anchor>abfc7cad4f080cc14cee3fb29e34e6ffd</anchor>
      <arglist>(unsigned int r, const Vec1 &amp;vec1, Vec2 &amp;vec2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Derivatives</name>
    <filename>a02809.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <templarg>layout</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt;</name>
    <filename>a02817.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a3f217b4af6f120f58c1b369259d608e9a848461841d332e3c7816fe83d5859832</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt;</type>
      <name>This</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a651d0f47c2e35086a553c7a3d6d3df40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LFETensor&lt; F, dimD, 0 &gt;</type>
      <name>ThisLFETensor</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a3393325c5ab275659ff4e3ac701214a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a57af3f172502c361df6281bc0a8e1ca2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>field_type</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a96442e22f4403938ded37a577b6a28c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F, size &gt;</type>
      <name>Block</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>aa9d8a05d8585b24c351c8066bd7d63a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a3f217b4af6f120f58c1b369259d608e9a848461841d332e3c7816fe83d5859832</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ae1a0343e2350b0a48f2af84c44cf1edd</anchor>
      <arglist>(const FF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a7b0bc68fcb618ba7e70c457e34c75fea</anchor>
      <arglist>(const Dune::FieldVector&lt; ThisLFETensor, dimR &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a7b84b0dc980edd22158c56015c25e2b7</anchor>
      <arglist>(const Block &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a2898444b03bcb3529b932357b48259dc</anchor>
      <arglist>(const field_type &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>afa0716c2885e4cb9f8bb237990476fc8</anchor>
      <arglist>(const F &amp;a, const This &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a48d48aaa6d6211b84734214d59028bae</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, 0, DerivativeLayoutNS::value &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ab51bfdfe9a7d200291c29612ca0d66c0</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, 0, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a6e23e582ba24224a4f47f1373f877d35</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimRy, 0, DerivativeLayoutNS::value &gt; &amp;y, unsigned int r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>acbcb50a9480992eab01f4d2a40e1b2f5</anchor>
      <arglist>(unsigned int r, const Derivatives&lt; Fy, dimD, 1, 0, DerivativeLayoutNS::value &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ab39dafdc47d27f42e52bce947a8c6d0d</anchor>
      <arglist>(unsigned int r, const Derivatives&lt; Fy, dimD, 1, 0, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ad3b0bd24760262f79323697e4f8f6d83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block &amp;</type>
      <name>block</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a61d1671790986721e48efb77927a8eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ThisLFETensor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a86eb6f0111bde46016fc03ca188b1893</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type>const ThisLFETensor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a9647d4b5be76754c76d91d673a954c94</anchor>
      <arglist>(int r) const</arglist>
    </member>
    <member kind="function">
      <type>const Dune::FieldVector&lt; LFETensor&lt; F, dimD, 0 &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a6b6fd2021a003e44a62a7d8ee0c89725</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; LFETensor&lt; F, dimD, 0 &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a1ee78e0c937659be8697fe34075cd79f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Dune::FieldVector&lt; F, LFETensor&lt; F, dimD, dorder &gt;::size *dimR &gt; &amp;</type>
      <name>block</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ad8f181d92bc825b61d74b3f49a60b619</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; F, LFETensor&lt; F, dimD, dorder &gt;::size *dimR &gt; &amp;</type>
      <name>block</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>adebf842657423179134b5613fdde6373</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DerivativeLayoutNS::DerivativeLayout</type>
      <name>layout</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a53345a5265efce3165eaa6a3b4d50525</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>adcb0ebf8e84ae18c131943b3c53c0fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>af75fc668886bf2560d8a6e5f5e25afa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Dune::FieldVector&lt; LFETensor&lt; F, dimD, 0 &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a139421a16580bb6a55eaa0c5d338e743</anchor>
      <arglist>(const std::integral_constant&lt; int, 0 &gt; &amp;dorderVar) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Dune::FieldVector&lt; LFETensor&lt; F, dimD, 0 &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a9b7ee2522c559b4b86f6de5c0252caa0</anchor>
      <arglist>(const std::integral_constant&lt; int, 0 &gt; &amp;dorderVar)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>a6e09b286b1e80b8b6ec75f47fb3ba340</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, dy, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>ad8f9826635440e075b5c26e2b5f9febf</anchor>
      <arglist>(const FieldVector&lt; Fy, size *dimRy &gt; &amp;y, unsigned int r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>adf19b9e71fac1d67fdf9220fb72a848b</anchor>
      <arglist>(unsigned int r, const FieldVector&lt; Fy, size/dimR &gt; &amp;y)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dune::FieldVector&lt; ThisLFETensor, dimR &gt;</type>
      <name>tensor_</name>
      <anchorfile>a02817.html</anchorfile>
      <anchor>adb11163a157441abf768022af23928db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</name>
    <filename>a02821.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>ab476741f47995df3ce2f8a9bf08f389fa4b7be5bfbd5d65575eafa790e52f2f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</type>
      <name>This</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a93dbfe74ea6f4b0186d98048ca093617</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F, dimD, 1, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>ScalarDeriv</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a95630f77ccddda8e2773dc036bf43379</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a0b2a3f8211633fe4c3eff8945bd4b9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>field_type</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a331f1bc6c4e188a6b8472062a28e0b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F, size &gt;</type>
      <name>Block</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>ab07e2522d9c1cb0cedbe47ddff4cc6ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>ab476741f47995df3ce2f8a9bf08f389fa4b7be5bfbd5d65575eafa790e52f2f1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a5937d10422d54a0aeaa7828ac416f772</anchor>
      <arglist>(const FF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a717c72c9478836182f44d01e62fa1e8e</anchor>
      <arglist>(const Block &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>aa92b0b4b8a47bce0f8c738bca50cafad</anchor>
      <arglist>(const field_type &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a9f4c6c1263f14415924a5012e9e9f515</anchor>
      <arglist>(const FF &amp;a, const This &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>af31cae7957942ca310495bfc89de2b25</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a8fdd3f986418c028a727d09bde99346a</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a332a30c7c446ace0bdcf2e764fa112a0</anchor>
      <arglist>(unsigned int r, const Derivatives&lt; Fy, dimD, 1, deriv, layouty &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a6226b65b9b00c9eb6a9a38ef96eba1e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block &amp;</type>
      <name>block</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a022b71c20b06ca80c9c85fc3022a103f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScalarDeriv &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a5ae2ad9f837c661c242369af880ff308</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type>const ScalarDeriv &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a31bf9d28309e579b6c69a705f5217319</anchor>
      <arglist>(int r) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DerivativeLayoutNS::DerivativeLayout</type>
      <name>layout</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>ac0f891bdcc417c5c665f49f615792926</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>a6ccadb68bc1f27a184a7b320f58c672a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>acacf7537e3d98274e240e2321cfc850b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dune::FieldVector&lt; ScalarDeriv, dimR &gt;</type>
      <name>deriv_</name>
      <anchorfile>a02821.html</anchorfile>
      <anchor>acf6d336c0ee26967f5b2d8e288559479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</name>
    <filename>a02813.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>deriv</templarg>
    <base>Derivatives&lt; F, dimD, dimR, deriv-1, DerivativeLayoutNS::value &gt;</base>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ae3a198c87391f98768a9a7fab0bddedfa05852f7835adf2f364d6ff06dbb9c7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</type>
      <name>This</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a1c1303e15a0803639b23985cec62bdd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Derivatives&lt; F, dimD, dimR, deriv-1, DerivativeLayoutNS::value &gt;</type>
      <name>Base</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2304c1b15814cb79105c138aa55e8b7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LFETensor&lt; F, dimD, deriv &gt;</type>
      <name>ThisLFETensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a39463023d38c35d4fbdc3737651344b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a02c24801a46a01553ea07cd0ccd5806a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>field_type</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2193feac11cb9cab1e001dbfc1304847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F, size &gt;</type>
      <name>Block</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a9661da869d244157dc7fdedae4e495dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ae3a198c87391f98768a9a7fab0bddedfa05852f7835adf2f364d6ff06dbb9c7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a58642111b8cf0e85647ffc2b37f01698</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a34d186326dbf5b1bca72098b6f7f7ba3</anchor>
      <arglist>(const Dune::FieldVector&lt; ThisLFETensor, dimR &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ad1a52ee8e529091a2007b46f2b114ac0</anchor>
      <arglist>(const Dune::FieldVector&lt; LFETensor&lt; F, dimD, dorder &gt;, dimR &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a80976fbb1d6fd34afc0b6f9b2e1ac048</anchor>
      <arglist>(const Block &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a9118dedcb75235d0229e4c0866c830ce</anchor>
      <arglist>(const field_type &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a5c666c158a7ca350fa3d2a8ca586a9ba</anchor>
      <arglist>(const F &amp;a, const This &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a285a4c383c88dbe8312eee73f4c36f40</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a69623cd25ddd74b3c59415491a2c066a</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ac4ddc8c2869cfeacbe65ee67fdb9150e</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimRy, deriv, DerivativeLayoutNS::value &gt; &amp;y, unsigned int r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a4a7aeffaf7bdd11eee100d60cd6d33cc</anchor>
      <arglist>(unsigned int r, const Derivatives&lt; Fy, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a8417597c82e05efc50c4051c4e813b3a</anchor>
      <arglist>(unsigned int r, const Derivatives&lt; Fy, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2da978f52d2236220ed86624c6aa9491</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block &amp;</type>
      <name>block</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>af96e6573192dd0314a27ca9abaff709a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Dune::FieldVector&lt; LFETensor&lt; F, dimD, dorder &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a25d95137d370c15f21ac7bff4831a0fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; LFETensor&lt; F, dimD, dorder &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a698af8fc6e70856e9cf06700e0ba4b72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Dune::FieldVector&lt; F, LFETensor&lt; F, dimD, dorder &gt;::size *dimR &gt; &amp;</type>
      <name>block</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a8e343512b06f860913ded9a060a73934</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; F, LFETensor&lt; F, dimD, dorder &gt;::size *dimR &gt; &amp;</type>
      <name>block</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a89c34bf7bc1209783d34888fb98f7c2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ThisLFETensor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a8a0966b2f333755f52f78c6b1ff48bad</anchor>
      <arglist>(int r)</arglist>
    </member>
    <member kind="function">
      <type>const ThisLFETensor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a890bde5f81167f756db929043b2ca391</anchor>
      <arglist>(int r) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DerivativeLayoutNS::DerivativeLayout</type>
      <name>layout</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a3feb79f02c20afff2e8f0df638cd0879</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a1c91d2a16839377d0aacbc31cb068447</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a121880a0d8f28feff81f3a8bddfb1ea4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2671cf2f3ef5de531da9dd6ebfd9eeca</anchor>
      <arglist>(const FieldVector&lt; Fy, size *dimRy &gt; &amp;y, unsigned int r)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>af0615d307a5ef715fefa0f92cd143001</anchor>
      <arglist>(unsigned int r, const FieldVector&lt; Fy, size/dimR &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a2c53bb18aa6cca946b4e9c32cfbb5b44</anchor>
      <arglist>(const Derivatives&lt; Fy, dimD, dimR, dy, DerivativeLayoutNS::derivative &gt; &amp;y)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Dune::FieldVector&lt; LFETensor&lt; F, dimD, dorder &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>ad3e1e157fec3050048c4309338f3c4e5</anchor>
      <arglist>(const std::integral_constant&lt; int, dorder &gt; &amp;dorderVar) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Dune::FieldVector&lt; LFETensor&lt; F, dimD, deriv &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>acff2940d8d0ce43d9a86379855c7cafd</anchor>
      <arglist>(const std::integral_constant&lt; int, deriv &gt; &amp;dorderVar) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Dune::FieldVector&lt; LFETensor&lt; F, dimD, dorder &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a1f78ea2d04535327f1366777d4f54411</anchor>
      <arglist>(const std::integral_constant&lt; int, dorder &gt; &amp;dorderVar)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Dune::FieldVector&lt; LFETensor&lt; F, dimD, deriv &gt;, dimR &gt; &amp;</type>
      <name>tensor</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>af0b279aa3ee8d46f829b096eb1784cd2</anchor>
      <arglist>(const std::integral_constant&lt; int, deriv &gt; &amp;dorderVar)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dune::FieldVector&lt; ThisLFETensor, dimR &gt;</type>
      <name>tensor_</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>aae36876497cde7c1039237461130a98f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Derivatives&lt; F, dimD, dimR, deriv-1, DerivativeLayoutNS::value &gt;</name>
    <filename>a02809.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::DGLocalCoefficients</name>
    <filename>a02613.html</filename>
    <member kind="function">
      <type></type>
      <name>DGLocalCoefficients</name>
      <anchorfile>a02613.html</anchorfile>
      <anchor>a8cf5dda7c9d05a8125ff1f9825e0c044</anchor>
      <arglist>(const unsigned int n)</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02613.html</anchorfile>
      <anchor>ada42b8cb3277fea3ec30c647b4f48fa4</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02613.html</anchorfile>
      <anchor>a1b120d62a27535d83c085bfaa0d93821</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGLocalCoefficientsFactory</name>
    <filename>a02617.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>BasisFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02617.html</anchorfile>
      <anchor>ac29570eaee4d9448f290164bc7c56182</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const DGLocalCoefficients</type>
      <name>Object</name>
      <anchorfile>a02617.html</anchorfile>
      <anchor>a102f90cdfb438d798a40a11f5238cb94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02617.html</anchorfile>
      <anchor>ad9f5829782abc2c0cd05fbe1e9444819</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02617.html</anchorfile>
      <anchor>a0cef490b50bc5a821f9622bef0c5d9d6</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02617.html</anchorfile>
      <anchor>ac8e73f024217c114962286dab4c658bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGLocalFiniteElement</name>
    <filename>a02709.html</filename>
    <templarg></templarg>
    <base>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, FE::InterpolationFactory &gt;</base>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; typename FE::BasisFactory, DGLocalCoefficientsFactory&lt; typename FE::BasisFactory &gt;, typename FE::InterpolationFactory &gt;</type>
      <name>Base</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a99c0b92fd7733292158c4d464a80cf34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Traits</type>
      <name>Traits</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a055504877bc7395c9a2b8f346dc9f9fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, FE::InterpolationFactory &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::BasisFactory</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::InterpolationFactory</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGLocalFiniteElement</name>
      <anchorfile>a02709.html</anchorfile>
      <anchor>a4f67e87b1ec2bebed2eff63f9c0caa2a</anchor>
      <arglist>(const GeometryType &amp;gt, const typename Base::Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DimSpecificPQkLocalFiniteElementFactory</name>
    <filename>a01965.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>P0LocalFiniteElement&lt; D, R, d &gt;::Traits::LocalBasisType::Traits</type>
      <name>T</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>a1eef5869cc1617ea6c1857b0df500129</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalFiniteElementVirtualInterface&lt; T &gt; *</type>
      <name>create</name>
      <anchorfile>a01965.html</anchorfile>
      <anchor>af2af87eb65962f80c2fb9cfd52f4b581</anchor>
      <arglist>(const GeometryType &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DimSpecificPQkLocalFiniteElementFactory&lt; D, R, 3, k &gt;</name>
    <filename>a01969.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>P0LocalFiniteElement&lt; D, R, 3 &gt;::Traits::LocalBasisType::Traits</type>
      <name>T</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a572f87c4b455e5b40104579bbde23d95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrismP1LocalFiniteElement&lt; D, R &gt;</type>
      <name>PrismP1</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>abad923998a08544ad2324c17cc9ec59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PrismP2LocalFiniteElement&lt; D, R &gt;</type>
      <name>PrismP2</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a4ee9ea185cd3b78c105cd5526dfe781f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PyramidP1LocalFiniteElement&lt; D, R &gt;</type>
      <name>PyramidP1</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>a418363d8b24d19e386cd7468a8666f23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PyramidP2LocalFiniteElement&lt; D, R &gt;</type>
      <name>PyramidP2</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>ab3fbc38b4c3b6b71b998372bbbd4ffbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static LocalFiniteElementVirtualInterface&lt; T &gt; *</type>
      <name>create</name>
      <anchorfile>a01969.html</anchorfile>
      <anchor>af20b4220494030ef28361c6b7ff4d8e5</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualP1LocalBasis</name>
    <filename>a01709.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>faceDualT</templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a9a987cd30bdde2a3f9c94d205637cff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a957b9118ce0e29789d984eaa04f44b07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a366699013a41a97a7e73286deeaaeee4</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>abd85263476c300b91be3ee0a3442308f</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a762954d5378c76241b6b832ea5356366</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a25cb33257b4e6ac4361b4e2dc49d0380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>faceDual</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a660f77155703147a82b0cb120c1583d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualP1LocalBasis&lt; D, R, dim, false &gt;</name>
    <filename>a01709.html</filename>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a9a987cd30bdde2a3f9c94d205637cff4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a957b9118ce0e29789d984eaa04f44b07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a366699013a41a97a7e73286deeaaeee4</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>abd85263476c300b91be3ee0a3442308f</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a762954d5378c76241b6b832ea5356366</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a25cb33257b4e6ac4361b4e2dc49d0380</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>faceDual</name>
      <anchorfile>a01709.html</anchorfile>
      <anchor>a660f77155703147a82b0cb120c1583d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualP1LocalCoefficients</name>
    <filename>a01713.html</filename>
    <templarg>dim</templarg>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>DualP1LocalCoefficients</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a04b27645bd423186c113262095f12d09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>ab737cd8161316bb596675da2c129ea53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01713.html</anchorfile>
      <anchor>a631c31c0c6165ebe5d79c72af14ea294</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualP1LocalFiniteElement</name>
    <filename>a01721.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>faceDual</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; DualP1LocalBasis&lt; D, R, dim, faceDual &gt;, DualP1LocalCoefficients&lt; dim &gt;, DualP1LocalInterpolation&lt; dim, DualP1LocalBasis&lt; D, R, dim, faceDual &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a2b5907e216e1c3c3b5a7c3d92f469198</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualP1LocalFiniteElement</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a0a5db02813aefd40ffbe3b6589d522a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>af50707119d9259cc4dff70863741bcb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a9ed9307520aef65d2531505a5638f3ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a1905af88790a35b3bcdbf6b0771898cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a28fdd7172f6c05c4fef08da4a79ffabf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>ab853440af511427d7dd3d42cb0eaf30b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualP1LocalInterpolation</name>
    <filename>a01717.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a9a48f40dfb0de3d06ae79e73c54135a4</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualP1LocalInterpolation&lt; dim, Dune::DualP1LocalBasis&lt; D, R, dim, false &gt; &gt;</name>
    <filename>a01717.html</filename>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a9a48f40dfb0de3d06ae79e73c54135a4</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualPQ1LocalFiniteElementCache</name>
    <filename>a01725.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>faceDual</templarg>
    <member kind="typedef">
      <type>FE</type>
      <name>FiniteElementType</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a60bf0d4f34ed4bacd356377c63ce1144</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DualPQ1LocalFiniteElementCache</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a36d04d7f4519a2547afdedf9c6402cfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElementType &amp;</type>
      <name>get</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a109b5e9dc280d8c78d376d3c751e5c32</anchor>
      <arglist>(const Dune::GeometryType &amp;gt) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FE *</type>
      <name>create</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a5cae6b518da158def09fc9e8c94ee726</anchor>
      <arglist>(const Dune::GeometryType &amp;gt)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::DualP1LocalFiniteElement&lt; D, R, dim, faceDual &gt;</type>
      <name>DualP1</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a2287ad9911d376cd66894a89dfb1a375</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::DualQ1LocalFiniteElement&lt; D, R, dim, faceDual &gt;</type>
      <name>DualQ1</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>afd4d4ca53f831c054aa8eefcdf8c5951</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DualP1::Traits::LocalBasisType::Traits</type>
      <name>T</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a522ee15ada3c2ebc2b7ee9fd540a8716</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::LocalFiniteElementVirtualInterface&lt; T &gt;</type>
      <name>FE</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>ab3a5dee1344dd1e48ad3ba4ab13fd2c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; Dune::GeometryType, FE * &gt;</type>
      <name>FEMap</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>accfc7c3941d51d661c74e1a8e0785e6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEMap</type>
      <name>cache_</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a43fadcb36687b539eb0065f3d6485139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualQ1LocalBasis</name>
    <filename>a01729.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>ac8bf788263b41b75dd7970d42048d536</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>aa2e78c14ecd7be12735aa2dc440f84f9</anchor>
      <arglist>(const std::array&lt; Dune::FieldVector&lt; R,(1&lt;&lt; dim)&gt;,(1&lt;&lt; dim)&gt; &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a6087c4afaee7c8d379858a1ba29c9c5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>ab1932e2a7c5681c58c2a379bf3456dca</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>addb44422e75618f32aa0aed1fc03b09c</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>af204a591ad44ef90cbabc09374edb44c</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a909b6d7462f13cc3d7bc0601d5cd1aa3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualQ1LocalCoefficients</name>
    <filename>a01733.html</filename>
    <templarg>dim</templarg>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>DualQ1LocalCoefficients</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ac8ea59f288b8e25de9b0cf8759293593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>a12a13c8ec3ea3e7de54fbdcb08e1c0f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ae2c3a374dba11b6f932ab3ef075c9960</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualQ1LocalFiniteElement</name>
    <filename>a01741.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>faceDual</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; DualQ1LocalBasis&lt; D, R, dim &gt;, DualQ1LocalCoefficients&lt; dim &gt;, DualQ1LocalInterpolation&lt; dim, DualQ1LocalBasis&lt; D, R, dim &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a2a79e9fb3f506a4c31dd8083d207d475</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DualQ1LocalFiniteElement</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>abbaf4fd5d8156ce9f9e2c21c31bd7a2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>af07ad40a4185e28d9c123d9b2ec0d140</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afdcaae06fba73353d500965aae01a83c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>af07ae51043b1c746e3b3397f38ab8f25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a3c89f2f4622cbeb8347668269d8f71e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>afa8c943978c491fce669a9c54e7edf15</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DualQ1LocalInterpolation</name>
    <filename>a01737.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a6caeedd85f5970928b0a5f3a5ffd0ccf</anchor>
      <arglist>(const std::array&lt; Dune::FieldVector&lt; typename LB::Traits::RangeFieldType,(1&lt;&lt; dim)&gt;,(1&lt;&lt; dim)&gt; &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a9a786d96ccd0a6a86c3b1ffb808c40e5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DualQ1LocalInterpolation&lt; dim, Dune::DualQ1LocalBasis&lt; D, R, dim &gt; &gt;</name>
    <filename>a01737.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setCoefficients</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a6caeedd85f5970928b0a5f3a5ffd0ccf</anchor>
      <arglist>(const std::array&lt; Dune::FieldVector&lt; typename LB::Traits::RangeFieldType,(1&lt;&lt; dim)&gt;,(1&lt;&lt; dim)&gt; &amp;coefficients)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>a9a786d96ccd0a6a86c3b1ffb808c40e5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EdgeS0_5Basis</name>
    <filename>a02913.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">EdgeS0_5Common&lt; Geometry::mydimension, Geometry::ctype &gt;</base>
    <class kind="struct">Dune::EdgeS0_5Basis::Traits</class>
    <member kind="function">
      <type></type>
      <name>EdgeS0_5Basis</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>a013714dd6faea83bca50f7a0593ceba7</anchor>
      <arglist>(const Geometry &amp;geo, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>a81528751c9c43366108255dee185af19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>a2d817aeb9cfa4945d6b1c3e4669e4266</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;xl, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>a29c03867f65cce0a8e4204630a52c427</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;, std::vector&lt; typename Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>ab434fa00495fe225c6cba61efca24861</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02913.html</anchorfile>
      <anchor>ae2aae5df36ea511058cfa705d9fa6c76</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EdgeS0_5Coefficients</name>
    <filename>a02921.html</filename>
    <templarg>dim</templarg>
    <base>Dune::CoefficientsInterface</base>
    <base protection="private">Dune::EdgeS0_5Common</base>
    <member kind="function">
      <type></type>
      <name>EdgeS0_5Coefficients</name>
      <anchorfile>a02921.html</anchorfile>
      <anchor>a4aeab3406fb301f7b1119a10584554db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02921.html</anchorfile>
      <anchor>a795730658142b9c12d808475206e4127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02921.html</anchorfile>
      <anchor>ae2b6368af510198c9cf3d019a65f5707</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EdgeS0_5Common</name>
    <filename>a02925.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>decltype(referenceElement(DF{}, GeometryTypes::simplex(dim), Dim&lt; dim &gt;{}))</type>
      <name>RefElem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a634b913e9dc2233e805b1e00d42fc800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefElem</type>
      <name>refelem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a55971f1c844335ea3b7a0d88e900f6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>s</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a899a65f08bb745c2312aa31f57522156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeS0_5Common&lt; Geometry::mydimension, Geometry::ctype &gt;</name>
    <filename>a02925.html</filename>
    <member kind="typedef">
      <type>decltype(referenceElement(Geometry::ctype {}, GeometryTypes::simplex(dim), Dim&lt; dim &gt;{}))</type>
      <name>RefElem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a634b913e9dc2233e805b1e00d42fc800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefElem</type>
      <name>refelem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a55971f1c844335ea3b7a0d88e900f6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>s</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a899a65f08bb745c2312aa31f57522156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeS0_5Common&lt; Traits_::dimDomainLocal, Traits_::DomainField &gt;</name>
    <filename>a02925.html</filename>
    <member kind="typedef">
      <type>decltype(referenceElement(Traits_::DomainField {}, GeometryTypes::simplex(dim), Dim&lt; dim &gt;{}))</type>
      <name>RefElem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a634b913e9dc2233e805b1e00d42fc800</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RefElem</type>
      <name>refelem</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a55971f1c844335ea3b7a0d88e900f6fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>s</name>
      <anchorfile>a02925.html</anchorfile>
      <anchor>a899a65f08bb745c2312aa31f57522156</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EdgeS0_5FiniteElement</name>
    <filename>a02933.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::EdgeS0_5FiniteElement::Traits</class>
    <member kind="function">
      <type></type>
      <name>EdgeS0_5FiniteElement</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a3c45b27dd6275484955c3bfc7373663c</anchor>
      <arglist>(const Geometry &amp;geo, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a6a85514322994349fe188df1446e93ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a6264ea59a39a68f1e7281a994586fc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a6d3ef044ee729a968a3e76b79b0ee9c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02933.html</anchorfile>
      <anchor>a77b5dd2f84f5ff63b6290fc9e5c9fd29</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EdgeS0_5FiniteElementFactory</name>
    <filename>a02941.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>EdgeS0_5FiniteElement&lt; Geometry, RF &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a02941.html</anchorfile>
      <anchor>a9d795e142d795c4cca9df7c200fdfe41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a02941.html</anchorfile>
      <anchor>a4f066d8f223c401a6a3e15b2b6b0e185</anchor>
      <arglist>(const Geometry &amp;geometry, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EdgeS0_5Interpolation</name>
    <filename>a02929.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">EdgeS0_5Common&lt; Traits_::dimDomainLocal, Traits_::DomainField &gt;</base>
    <member kind="typedef">
      <type>Traits_</type>
      <name>Traits</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>af152ef4d9f1b3e9702e4042f77932e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeS0_5Interpolation</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>afe1fa588b39b385f58f945b01d445680</anchor>
      <arglist>(const Geometry &amp;geo, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a9e2ea3cfb1a931971478c4f33d422834</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EdgeS0_5Interpolation&lt; Geometry, typename Basis::Traits &gt;</name>
    <filename>a02929.html</filename>
    <base protection="private">EdgeS0_5Common&lt; Traits_::dimDomainLocal, Traits_::DomainField &gt;</base>
    <member kind="typedef">
      <type>typename Basis::Traits</type>
      <name>Traits</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>af152ef4d9f1b3e9702e4042f77932e3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeS0_5Interpolation</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>afe1fa588b39b385f58f945b01d445680</anchor>
      <arglist>(const Geometry &amp;geo, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02929.html</anchorfile>
      <anchor>a9e2ea3cfb1a931971478c4f33d422834</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EmptyPointSet</name>
    <filename>a01813.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af50e5d3435136e24da43b8d647c3b487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::LagrangePoint&lt; Field, dimension &gt;</type>
      <name>LagrangePoint</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac358d753e67b0092d55ed59c19207180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LagrangePoint &gt;::const_iterator</type>
      <name>iterator</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ae3f2c7204aa4066970dd1be1436967de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LagrangePoint &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a04dbeedb540c20d71cc49310be7179fd</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ae3d4efdc9566fe55d8fd1c2d46367f8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af20bef1255c5d30c737cc41ceba5ab53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a58502fc107cf5b94c3e0b87990e97e2e</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a1722cc25e11c1436d2b4d8b1f57d3b9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aadd61e087849ede9f21bf1aaf17c88b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a57a129a14735ed4ea88719a585e55b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>EmptyPointSet</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a6e777379c3ed2264f3d5ce5d6da27c47</anchor>
      <arglist>(const std::size_t order)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>order_</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a24eb7272b2d56c5da08451779282abaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; LagrangePoint &gt;</type>
      <name>points_</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af6877839af5fd325fa15c8a0965e90e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EquidistantPointSet</name>
    <filename>a01817.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <base>Dune::EmptyPointSet</base>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af50e5d3435136e24da43b8d647c3b487</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::LagrangePoint&lt; Field, dimension &gt;</type>
      <name>LagrangePoint</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ac358d753e67b0092d55ed59c19207180</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; LagrangePoint &gt;::const_iterator</type>
      <name>iterator</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ae3f2c7204aa4066970dd1be1436967de</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquidistantPointSet</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>af6cab976d5de411deae5064c88394a6b</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ab8ff9fb328ea76053cf79bdd16353a5b</anchor>
      <arglist>(GeometryType gt)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>build</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a4a0daa38c877ebe2f653d4dce7648f47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildCube</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>ac32b54f8d63ef5830ef12016d77cfbaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a1722cc25e11c1436d2b4d8b1f57d3b9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LagrangePoint &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a04dbeedb540c20d71cc49310be7179fd</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>ae3d4efdc9566fe55d8fd1c2d46367f8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>af20bef1255c5d30c737cc41ceba5ab53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a58502fc107cf5b94c3e0b87990e97e2e</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a1722cc25e11c1436d2b4d8b1f57d3b9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>aadd61e087849ede9f21bf1aaf17c88b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>abc550d06474b21c629d0b111ddcdcfd4</anchor>
      <arglist>(GeometryType gt, std::size_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a69a8544a6fd565f98581243b999c1689</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>aaa3afcf5cea20fea5027754303a66281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::size_t</type>
      <name>order_</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a24eb7272b2d56c5da08451779282abaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomImp::EvalAccess</name>
    <filename>a02041.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EvalAccess</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>af20f088571cf5e51cbca4cb60e55f5cb</anchor>
      <arglist>(std::vector&lt; typename Traits::RangeType &gt; &amp;out_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~EvalAccess</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a9dd092e3ad0d8c4e38a3944961046804</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Traits::RangeFieldType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02041.html</anchorfile>
      <anchor>a54b3a075130f5132afbfee3780918da1</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomImp::Evaluate</name>
    <filename>a02049.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <member kind="enumvalue">
      <name>d</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a2a730b60aad4cdc9ca5447a1604b81bea898e62c60250be4402c2a3a72e9e24f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>d</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a2a730b60aad4cdc9ca5447a1604b81bea898e62c60250be4402c2a3a72e9e24f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>aefd7dfdb97b8c33ea7ebdc33a96768bf</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;derivatives, typename Traits::RangeFieldType prod, int bound, int &amp;index, Access &amp;access)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomImp::Evaluate&lt; Traits, 1 &gt;</name>
    <filename>a02053.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>d</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a9b9e84f7b0fdcf47f82083165a21401ea3088355152c91fc1d2717c8ec8c1fe12</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>d</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>a9b9e84f7b0fdcf47f82083165a21401ea3088355152c91fc1d2717c8ec8c1fe12</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eval</name>
      <anchorfile>a02053.html</anchorfile>
      <anchor>adb725fe6a53ce7d9b44683658b02fd22</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;derivatives, typename Traits::RangeFieldType prod, int bound, int &amp;index, Access &amp;access)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultBasisFactory::EvaluationBasisFactory</name>
    <filename>a02609.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dd, FF &gt;::Type</type>
      <name>Type</name>
      <anchorfile>a02609.html</anchorfile>
      <anchor>a2aefdc69d4cc2ef9d3bf16956eac1401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialBasisFactory::EvaluationBasisFactory</name>
    <filename>a02753.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisFactory&lt; dd, FF &gt;</type>
      <name>Type</name>
      <anchorfile>a02753.html</anchorfile>
      <anchor>aecbfbe7c3af09c06f51dbe2a4b2ad936</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialBasisProvider::EvaluationBasisFactory</name>
    <filename>a02761.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dd, FF &gt;</type>
      <name>Type</name>
      <anchorfile>a02761.html</anchorfile>
      <anchor>a8c3429226e25d16cd8069e81ee72b523</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecPreBasisFactory::EvaluationBasisFactory</name>
    <filename>a02157.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dd, FF &gt;</type>
      <name>Type</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a176f792990ad74863be5e0fd43169077</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OrthonormalBasisFactory::EvaluationBasisFactory</name>
    <filename>a02165.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dd, FF &gt;</type>
      <name>Type</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac571a03b14a3dc8f6bf42488af4615e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RTPreBasisFactory::EvaluationBasisFactory</name>
    <filename>a02461.html</filename>
    <templarg>dd</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dd, FF &gt;</type>
      <name>Type</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a3828f859eb44dcb712e87f8d9106843e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldCast</name>
    <filename>a02629.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>F2</type>
      <name>type</name>
      <anchorfile>a02629.html</anchorfile>
      <anchor>abdb654e914860934b8a8b9d968c85cee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldCast&lt; F2, Dune::FieldMatrix&lt; F1, dim1, dim2 &gt; &gt;</name>
    <filename>a02637.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim1</templarg>
    <templarg>dim2</templarg>
    <member kind="typedef">
      <type>Dune::FieldMatrix&lt; F2, dim1, dim2 &gt;</type>
      <name>type</name>
      <anchorfile>a02637.html</anchorfile>
      <anchor>a0c2be3d52bfc06c4bb3cbfe089c94b1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldCast&lt; F2, Dune::FieldVector&lt; F1, dim &gt; &gt;</name>
    <filename>a02633.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F2, dim &gt;</type>
      <name>type</name>
      <anchorfile>a02633.html</anchorfile>
      <anchor>a05a4d23fcb89c64ebbb72890c691ea71</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FiniteElementFactoryInterface</name>
    <filename>a01525.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>FiniteElement</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a8c9599f0cdd1fcf50f057215e5e3683e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteElementFactoryInterface</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7a22f88d17e8d7084ee9fce469fa3190</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FiniteElementInterface</name>
    <filename>a01517.html</filename>
    <class kind="struct">Dune::FiniteElementInterface::Traits</class>
    <member kind="function">
      <type></type>
      <name>FiniteElementInterface</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afabb2a98d9c87c317e2c4e736fef3110</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FiniteElementInterface</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aed4d6ee14d9272293bd73d06aa4dd814</anchor>
      <arglist>(const FiniteElementInterface &amp;)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a9485914f45b658fe96297ed3db0a175c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a5d61150f37856f8374ecb0abbc6743f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>afb3f17a552c798e3d13bdf0cc6e96825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a2922b09a5264139b1ee14aa124f16f57</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FiniteElementInterfaceSwitch</name>
    <filename>a01545.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FiniteElement::Traits::Basis</type>
      <name>Basis</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>add84dcd62af7d42a57974a4e34dc2d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FiniteElement::Traits::Interpolation</type>
      <name>Interpolation</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a708b668dbae7ee06ac2712a2d725b44a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FiniteElement::Traits::Coefficients</type>
      <name>Coefficients</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a2e2ca12a8d4c0300cefd0756837d8bcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const FiniteElement &gt;</type>
      <name>Store</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a8c8368ff72d3a6a73f38c68bf0bb31e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a0d7dcd548d53c80261dcc86124f86573</anchor>
      <arglist>(const FiniteElement &amp;fe)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a6659f8cae9bdc0165e967521ab523770</anchor>
      <arglist>(const FiniteElement &amp;fe)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>aa438894d2955e4202d7b16052bbe70db</anchor>
      <arglist>(const FiniteElement &amp;fe)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStore</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a4ab82da2414969fc07f3b63ff783f1e1</anchor>
      <arglist>(Store &amp;store, const FiniteElement &amp;fe)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStore</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a25cd66d414674fdee97ecaf3d5999e9d</anchor>
      <arglist>(Store &amp;store, FiniteElement &amp;&amp;fe)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setStore</name>
      <anchorfile>a01545.html</anchorfile>
      <anchor>a3f248d99b8fb65904b33c974970360e6</anchor>
      <arglist>(Store &amp;store, const Store &amp;fe)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GenericLocalFiniteElement</name>
    <filename>a02701.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; BasisF, CoeffF, InterpolF &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoeffF</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolF</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, FE::InterpolationFactory &gt;</name>
    <filename>a02701.html</filename>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, FE::InterpolationFactory &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::BasisFactory</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::InterpolationFactory</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt; &gt;</name>
    <filename>a02701.html</filename>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::BasisFactory</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLocalFiniteElement&lt; LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;, LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;, LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt; &gt;</name>
    <filename>a02701.html</filename>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;, LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;, LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLocalFiniteElement&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;, LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt; &gt;</name>
    <filename>a02701.html</filename>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;, LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GenericLocalFiniteElement&lt; RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;, RaviartThomasCoefficientsFactory&lt; dimDomain &gt;, RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt; &gt;</name>
    <filename>a02701.html</filename>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;, RaviartThomasCoefficientsFactory&lt; dimDomain &gt;, RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasCoefficientsFactory&lt; dimDomain &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a9b1584f0c9bb43c2ea6cdc026f9cdd17</anchor>
      <arglist>(const GeometryType &amp;gt, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a4343c8585fda6726ac52dc6920b53c4c</anchor>
      <arglist>(const GenericLocalFiniteElement &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GenericLocalFiniteElement</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>af8709e40ae568442548fcacec34b4ae2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::InterpolationHelper::Helper</name>
    <filename>a02665.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>type</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::InterpolationHelper::Helper&lt; Basis, Matrix, false &gt;</name>
    <filename>a02673.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::vector&lt; Dune::FieldVector&lt; F, d &gt; &gt;</type>
      <name>Result</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>af31b07c05a4cbd283118b5fe1dcbf1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helper</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a62673a5d4704c92a60d75d744e23e8d5</anchor>
      <arglist>(const Basis &amp;basis, Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const F &amp;</type>
      <name>operator()</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a8cbb22967b3f082fd7bb49d41abd26bd</anchor>
      <arglist>(unsigned int row, unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>F &amp;</type>
      <name>operator()</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a4e157dfdd363e0a4842b441a662a5c2e</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a258c7e5f33cb3e18718943b5f15fb676</anchor>
      <arglist>(unsigned int row, unsigned int col, const Fy &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>aea18819e054bf6a0fa355809e8bec7b6</anchor>
      <arglist>(unsigned int row, unsigned int col, const Fy &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>evaluate</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>ac55da5ca86837928418032c4ce4cd42d</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a6986f6b9844675990f0bffa6602b96ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a0e0f385012a0ccebfdbc151f1dec042e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Matrix &amp;</type>
      <name>matrix_</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>af431393d2856b2c453086d9584f5be74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Result</type>
      <name>tmp_</name>
      <anchorfile>a02673.html</anchorfile>
      <anchor>a97e8d66867534d57e4f7c0a7a887f380</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::InterpolationHelper::Helper&lt; Func, Vector, true &gt;</name>
    <filename>a02669.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::vector&lt; Dune::FieldVector&lt; F, d &gt; &gt;</type>
      <name>Result</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a933ddf596afe31e8d0ddd1314d72fd77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Helper</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a6cfea5eace099fe0eaa8901d3f2d5fb1</anchor>
      <arglist>(const Func &amp;func, Vector &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type>const Vector::value_type &amp;</type>
      <name>operator()</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>aa9227a1421a77624fd1a3317af511f91</anchor>
      <arglist>(unsigned int row, unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>aaca89234647068359888e885ee6f8e41</anchor>
      <arglist>(unsigned int row, unsigned int col, const Fy &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a22d35ecc3fb9aa6d6b7bc89199720417</anchor>
      <arglist>(unsigned int row, unsigned int col, const Fy &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>evaluate</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a39ca202ffbd3541045b252ab7218080e</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const Result &amp;</type>
      <name>evaluate</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a39ca202ffbd3541045b252ab7218080e</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a997334794fd6924a539808d32f1f8191</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const Func &amp;</type>
      <name>func_</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>a3940b80a3b2636e3bcd31d1a3a32e686</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vector &amp;</type>
      <name>vec_</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>aa2c8e49b369c016d893e1cd49eb221d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Result</type>
      <name>tmp_</name>
      <anchorfile>a02669.html</anchorfile>
      <anchor>acaa17c1bbdbb1ce8e64b311d604101d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalP2LocalFiniteElement</name>
    <filename>a01765.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; HierarchicalSimplexP2LocalBasis&lt; D, R, dim &gt;, typename PkLocalFiniteElement&lt; D, R, dim, 2 &gt;::Traits::LocalCoefficientsType, HierarchicalSimplexP2LocalInterpolation&lt; HierarchicalSimplexP2LocalBasis&lt; D, R, dim &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>aaf8316043bdd8ba99315ee3bf3914b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalP2LocalFiniteElement</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a5edc6d6a1f73f65fce64576a72dc8c5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a0eaa8ee66566333250d7545b50bbb165</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ac6e2f8a51a779c575b80ef5bf1803c23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>ac821bc905cf90fd672c20a1e6d65cdf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>a60d5bbf70cbd961f1e1409f1ed5c4403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01765.html</anchorfile>
      <anchor>afe65b3ceebc320a52829facb11f0c107</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalP2WithElementBubbleLocalFiniteElement</name>
    <filename>a01793.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, dim &gt;, HierarchicalSimplexP2WithElementBubbleLocalCoefficients&lt; dim &gt;, HierarchicalSimplexP2WithElementBubbleLocalInterpolation&lt; HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, dim &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a04a5d86dbe989aab2f4d2f021794afde</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalP2WithElementBubbleLocalFiniteElement</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>ad1fc73ed8abfa15ef0ef44c4772e93f2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>afa3d0a9c45b32849aa47d71477975a28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a658e31adb36a7216b5d67653518b804b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a924514e382a387e105b4404c376641f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a2709cc16f6f09ecad0c9a7055a6b1109</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>ac434a07196d02ab85d4860347af373ac</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalPrismP2LocalBasis</name>
    <filename>a01797.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a22ed4070296f0ce045aad875ec402d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a3651c42ead82c97745ac8c9f7f84af75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a6db04d9112e11ee10ae0aa8c882526cd</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>aa9b1720515e2a62fb0414ac752fba640</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a6b87c09aa1580c1f15b26e4e31412cf0</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a6b732ca19b4a58224eda87c04c1a14a2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalPrismP2LocalFiniteElement</name>
    <filename>a01805.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; HierarchicalPrismP2LocalBasis&lt; D, R &gt;, Impl::LagrangePrismLocalCoefficients&lt; 2 &gt;, HierarchicalPrismP2LocalInterpolation&lt; HierarchicalPrismP2LocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>ab08502e22c8f9f40d8377847789cb306</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicalPrismP2LocalFiniteElement</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a1ce8aa0a54e2af15d7e4f8a68e17f99d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a7124d4c029f51e3d4d39a373316c0f0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>aa8f2343ffbf0350ff8a83daf84fcb30d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a18783abe8dd1c68fc589c088b4f2c447</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>adf4df55e8dd743b52c5730568379433e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>a0a11c3f62ca1a464b79747eb673e5902</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalPrismP2LocalInterpolation</name>
    <filename>a01801.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba7e03333eb87cd356304b803f19394</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchicalPrismP2LocalInterpolation&lt; Dune::HierarchicalPrismP2LocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a01801.html</filename>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>adba7e03333eb87cd356304b803f19394</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2LocalBasis</name>
    <filename>a01745.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchicalSimplexP2LocalBasis</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ad785c5bd4907446ed67ce0888623f017</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 1 &gt;</name>
    <filename>a01749.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 1, Dune::FieldVector&lt; D, 1 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 1 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a1bd6eec6a36549903b640b7aaa3a15f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>aa949a000b57974c8e34d5e5a039bd451</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>af2cbe4fe27f042a7c05e195c4612d98b</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>ab36b177e13cb7fdc5951b9d4e6ac1706</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a94e8bf036f6079fa5c2f968f69bbaaf6</anchor>
      <arglist>(const std::array&lt; unsigned int, 1 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a0bc75fc9f31c839286bf6375c88b445d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 2 &gt;</name>
    <filename>a01753.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a084928b364eb63b742b639ddbe32df43</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a94286806a5ab0c1cf884aa39c248ed53</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ae224df5a86c56e5f1fc8ba764a54c6c5</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ad7edaa6e8100acab203dfe55beb07f60</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>a864333a3884febf3b3e36ce56cf65162</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>aa6206b5865015c3537dfbc0a9ce82739</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 3 &gt;</name>
    <filename>a01757.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a039d9c72b014b2a3f2f77e5d889c858b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a2fbc675a6e6f825f63b6e9b98986f4a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a106250ca972c3425105a0a9b6dbfa414</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a177d431fdcd73439609387ccdd7570c3</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>ac9fea37eeca1edc0e1305950fd0158b5</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>adfcfa8707f049f7bffbfc01f239daa05</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2LocalInterpolation</name>
    <filename>a01761.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a40cda2761b46964c0ebc990c28198c2a</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchicalSimplexP2LocalInterpolation&lt; Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, dim &gt; &gt;</name>
    <filename>a01761.html</filename>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a40cda2761b46964c0ebc990c28198c2a</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis</name>
    <filename>a01769.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchicalSimplexP2WithElementBubbleLocalBasis</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>ac78dd6eefeda3e47f7edfbcf041bf08f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 1 &gt;</name>
    <filename>a01773.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 1, Dune::FieldVector&lt; D, 1 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 1 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a30dcba146f7bf6387a0d395c0cf86be7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a78c486483debb84ee721bd71e710befb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a3bdc3de7d807ddc122072c1eb7bfed1a</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a1be4ced70b173ee10316c8dc1020d3d4</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a9ae704c301d28fe6d71536166299bfdd</anchor>
      <arglist>(const std::array&lt; unsigned int, 1 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a737dbc49cd5e44e7993f7c94800d4e9b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 2 &gt;</name>
    <filename>a01777.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>aeefc85d3c782277b2b903f2891108921</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a67233c74ac8a2d95773f4de27b27fb07</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a6fbe392d19cfe4a7addfcdf1709db854</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ad386b97716c8bd0c11ff82ae87a783de</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>ae0a093e66ed7451d0cb81900660acfc9</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>a6abbdd2894317e9459137f989982f3c8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 3 &gt;</name>
    <filename>a01781.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>af72e3835da70b2982564c7e8c59e5f5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a04d77f6bf738fc356cd1d36270d694d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a899d1f5b00a54813f2c8b128679cd5c8</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ab10632dfcb2fb544cbdcc5d1a3fab833</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>abd8053778aa05b38c1e3dfd7de4ebc74</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>ab0f6c36264dafab7c2035e31378f1470</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalCoefficients</name>
    <filename>a01785.html</filename>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>HierarchicalSimplexP2WithElementBubbleLocalCoefficients</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>af3753ad355aacca16d944235148afbe2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a0b3c115f758b2b4b0c3ba853fcefb0ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Dune::LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a6284f9d7e9c2c84234bda7faeab62fbe</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicalSimplexP2WithElementBubbleLocalInterpolation</name>
    <filename>a01789.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a716b2483d20488861e89ea44de215aa3</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchicalSimplexP2WithElementBubbleLocalInterpolation&lt; Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, dim &gt; &gt;</name>
    <filename>a01789.html</filename>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>a716b2483d20488861e89ea44de215aa3</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Identity</name>
    <filename>a02601.html</filename>
    <member kind="function" static="yes">
      <type>static T</type>
      <name>apply</name>
      <anchorfile>a02601.html</anchorfile>
      <anchor>a5a1900d495bc293263b93274cc81712b</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>ONBCompute::Integral</name>
    <filename>a02169.html</filename>
    <templarg>geometryId</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compute</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a2728142f384754a5a3a9dc908c2eea5c</anchor>
      <arglist>(const Dune::MultiIndex&lt; dim, scalar_t &gt; &amp;alpha, scalar_t &amp;p, scalar_t &amp;q)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>compute</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a4fd8de81867f4407db8f3adb11d2f054</anchor>
      <arglist>(const Dune::MultiIndex&lt; dim, scalar_t &gt; &amp;alpha, scalar_t &amp;p, scalar_t &amp;q, std::integer_sequence&lt; int, ints... &gt; intS)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>computeIntegral</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a620b48f993a9a4cd8c788c7d1c8a687b</anchor>
      <arglist>(const Dune::MultiIndex&lt; dim, scalar_t &gt; &amp;alpha, scalar_t &amp;p, scalar_t &amp;q, int &amp;ord)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr Dune::GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a95cd2378012aaea60b8dcfc529eaf8ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>dimension</name>
      <anchorfile>a02169.html</anchorfile>
      <anchor>a6c0e2cabceba8c3e00cde5fc600e44ff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::InterpolationHelper</name>
    <filename>a02661.html</filename>
    <templarg></templarg>
    <templarg>dimension</templarg>
    <class kind="struct">Dune::InterpolationHelper::Helper</class>
    <class kind="struct">Dune::InterpolationHelper::Helper&lt; Basis, Matrix, false &gt;</class>
    <class kind="struct">Dune::InterpolationHelper::Helper&lt; Func, Vector, true &gt;</class>
  </compound>
  <compound kind="struct">
    <name>Dune::InterpolationInterface</name>
    <filename>a01537.html</filename>
    <member kind="typedef">
      <type>BasisInterface::Traits</type>
      <name>Traits</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a01c732a5a3704f2eab9897f2ad717784</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aaf0ec243fd8890354d02b024de3e0b88</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialEvaluator::Iterator</name>
    <filename>a02553.html</filename>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>BaseIterator&lt; Derivatives&lt; Field, dimension, dimRange, deriv, DerivativeLayoutNS::derivative &gt; &gt;</type>
      <name>All</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>af7071de10bda06c1549aa424a0e6a22e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseIterator&lt; Derivatives&lt; Field, dimension, 1, 0, DerivativeLayoutNS::value &gt; &gt;</type>
      <name>Integrate</name>
      <anchorfile>a02553.html</anchorfile>
      <anchor>a7ebc9436b27e2f248f18932102f4284a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StandardEvaluator::Iterator</name>
    <filename>a02561.html</filename>
    <templarg>deriv</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::MonomImp::JacobianAccess</name>
    <filename>a02045.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>JacobianAccess</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a61ff3f9390333f3eb006774fcd388a85</anchor>
      <arglist>(std::vector&lt; typename Traits::JacobianType &gt; &amp;out_, unsigned int row_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~JacobianAccess</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a2c65630389e157a62d8ae7cdc9e11632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Traits::RangeFieldType &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a3757ce8746cafc3632254dbfb907befd</anchor>
      <arglist>(unsigned int index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::L2LocalFiniteElement</name>
    <filename>a02713.html</filename>
    <templarg></templarg>
    <base>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt; &gt;</base>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; typename FE::BasisFactory, DGLocalCoefficientsFactory&lt; typename FE::BasisFactory &gt;, LocalL2InterpolationFactory&lt; typename FE::BasisFactory, false &gt; &gt;</type>
      <name>Base</name>
      <anchorfile>a02713.html</anchorfile>
      <anchor>a9734dcb4f93a714e0b95d1dd587bd457</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Traits</type>
      <name>Traits</name>
      <anchorfile>a02713.html</anchorfile>
      <anchor>ac7ffafed1a2b3476de2663c116ca3bc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; FE::BasisFactory, DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;, LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FE::BasisFactory</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; FE::BasisFactory &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalL2InterpolationFactory&lt; FE::BasisFactory, false &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>L2LocalFiniteElement</name>
      <anchorfile>a02713.html</anchorfile>
      <anchor>a1b91705f0531d2cc890cac54fb105996</anchor>
      <arglist>(const GeometryType &amp;gt, const typename Base::Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LagrangeBasisFactory</name>
    <filename>a01829.html</filename>
    <templarg>LP</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DefaultBasisFactory&lt; MonomialBasisFactory&lt; dim, CF &gt;, LagrangeInterpolationFactory&lt; LP, dim, CF &gt;, dim, 1, SF, CF &gt;</base>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeInterpolationFactory&lt; LP, dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LagrangeCoefficientsFactory</name>
    <filename>a01833.html</filename>
    <templarg>LP</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>aef9225c46785ce02dd0833132b831c48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a1554fdec130dce09f2b8687a62c234fe</anchor>
      <arglist>(const Key &amp;order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a79a6a8a0d975bc08bd0fa19f73133c00</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable">
      <type>const typedef LP&lt; F, dim &gt;</type>
      <name>Object</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a88843665a9a451fb6ba63e19aebde221</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01833.html</anchorfile>
      <anchor>a631324d3e79f22d01bcea36517525968</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangeCubeLocalFiniteElement</name>
    <filename>a01849.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::LagrangeCubeLocalBasis&lt; D, R, dim, k &gt;, Impl::LagrangeCubeLocalCoefficients&lt; dim, k &gt;, Impl::LagrangeCubeLocalInterpolation&lt; Impl::LagrangeCubeLocalBasis&lt; D, R, dim, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a719d6272d7bf48f3bf15bb63a5c3813d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangeCubeLocalFiniteElement</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a3b30d92c862c831cecc5736d1f41e96a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a712a6b90b806e05fc73141c7ff9aac67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a9e73f60ea6e76b6e2c3c8d09cb2e8a4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a6115f95abcd1bb9edb85df56aa83ed76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>aac21ff0bd426f0ea66cdb719dc6d44c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>a67d65ea5fdf9c8fc3eef8c3a4d230606</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LagrangeInterpolationFactory</name>
    <filename>a01821.html</filename>
    <templarg>LP</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LagrangeCoefficientsFactory&lt; LP, dim, F &gt;</type>
      <name>LagrangePointSetFactory</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a0fc713ec89a316dc80de51aed2f1428d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePointSetFactory::Object</type>
      <name>LagrangePointSet</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a1aec9791cd68de03e829e02f5f585918</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePointSetFactory::Key</type>
      <name>Key</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ab044e40e09f8056d87b64bcc0c20f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const LocalLagrangeInterpolation&lt; LP, dim, F &gt;</type>
      <name>Object</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>af237ed98a8ecb987bd1f33121400823e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>aba88f4029c7a9679c11011304fe48677</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a980d14588e4dd270e48500bc3145bfd7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>ac9914d6e675613664d847ba6ae1760d3</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangeLocalFiniteElement</name>
    <filename>a01989.html</filename>
    <templarg>LP</templarg>
    <templarg>dimDomain</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>GenericLocalFiniteElement&lt; LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;, LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;, LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::Traits</type>
      <name>Traits</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a7198b6157ee7a5900f16471b0c163df1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;, LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;, LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeBasisFactory&lt; LP, dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeCoefficientsFactory&lt; LP, dimDomain, R &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeInterpolationFactory&lt; LP, dimDomain, R &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangeLocalFiniteElement</name>
      <anchorfile>a01989.html</anchorfile>
      <anchor>a3fec9f16d94d47b580c611453f69e0f0</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangePoint</name>
    <filename>a01809.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>aeb31937ba81ba8ee7fca0a41fef765a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Vector</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>ac272390154390c7d3480ccceb8432c81</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>point</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>afdabb9e1fe0806c7ca3900ae18a79e31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a545c705503a409d49416240ddc24bf1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Field</type>
      <name>weight</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a934576c5fa591e67fa26a908b814f645</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Vector</type>
      <name>point_</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a5cd31f9311a1ef9488d237046c8f0d05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>LocalKey</type>
      <name>localKey_</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>afd574d9801e65aaef816d2aad9d6e194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Field</type>
      <name>weight_</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a43500a18235c0ab51fe2f879d0d37b51</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a4e3964ea94a0d5fee434fa7d2ab77582</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LagrangePointSetImpl</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a5ac9fdc2037748a624a3b98fcc857520</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangePrismLocalFiniteElement</name>
    <filename>a01885.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::LagrangePrismLocalBasis&lt; D, R, k &gt;, Impl::LagrangePrismLocalCoefficients&lt; k &gt;, Impl::LagrangePrismLocalInterpolation&lt; Impl::LagrangePrismLocalBasis&lt; D, R, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ad397f05d3c4ad961cb06d0e1033c06d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangePrismLocalFiniteElement</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a5f180dddf490949ac22148e25e36a64c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a1bdb0b6ea18d4c10e4e3b4829f5c2189</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a0b4c3736431057e4d5e454d4bd744303</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a00d6097c9c9130a53c0856d72f1a39c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a0d63f5582ca3313337a4a8ff0427146b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a57e639af8a21f3c612e6a07d96d08ac7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangePyramidLocalFiniteElement</name>
    <filename>a01901.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::LagrangePyramidLocalBasis&lt; D, R, k &gt;, Impl::LagrangePyramidLocalCoefficients&lt; k &gt;, Impl::LagrangePyramidLocalInterpolation&lt; Impl::LagrangePyramidLocalBasis&lt; D, R, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ab60103655dfe6c6fd4e9010a21e105a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangePyramidLocalFiniteElement</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a4b2a60d0cc45547e81a322f112c0955a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a61962c686ba99d13cd4f978ff44902e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a074d18707a7a630434cf23fa5ac31c36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ad1a5f4e1dc1c6dc79b582218bbd87474</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a1d0b3fcdfd3f216666b27a46d57593f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a51c9e2abed02ee15b812bd7fc04f515d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LagrangeSimplexLocalFiniteElement</name>
    <filename>a01917.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::LagrangeSimplexLocalBasis&lt; D, R, d, k &gt;, Impl::LagrangeSimplexLocalCoefficients&lt; d, k &gt;, Impl::LagrangeSimplexLocalInterpolation&lt; Impl::LagrangeSimplexLocalBasis&lt; D, R, d, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ac2bcae4d8dd8785bace125b10f434333</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangeSimplexLocalFiniteElement</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a656b9b62c5b77ef18d91db8345255959</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LagrangeSimplexLocalFiniteElement</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>ae0b5f35e7746585ec6bb1bbd39d44620</anchor>
      <arglist>(const VertexMap &amp;vertexmap)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a1e39f01561517dd0e22e2a3660a1b618</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a635b79d4e74ff900392c154ed18e3d27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a5b5acad3f058ae93f4482c45bf8a4f8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>acdb89fda04ad68f841a60a9db70d5527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>afc1ccb219bce0106def876aedb265d51</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LFEMatrix</name>
    <filename>a02697.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a72a4e06367f3878cbbf4e889c09fbd1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a2688231bef0a89f613c769ec68976ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LFEMatrix&lt; Field &gt;</name>
    <filename>a02697.html</filename>
    <member kind="typedef">
      <type>Field</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a72a4e06367f3878cbbf4e889c09fbd1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a2688231bef0a89f613c769ec68976ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LFEMatrix&lt; scalar_t &gt;</name>
    <filename>a02697.html</filename>
    <member kind="typedef">
      <type>scalar_t</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a5ec4396e6d13e8893c3811ec0ef4bbca</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a72a4e06367f3878cbbf4e889c09fbd1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a2688231bef0a89f613c769ec68976ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LFETensor</name>
    <filename>a02793.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>field_type</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>aa625709d8ff3a0f837e588376da1c345</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F, size &gt;</type>
      <name>Block</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a4c75955170e5a77138b4bef5831d6c2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>ae8e0d9b8cf2658d2e20e1371d2ab5013</anchor>
      <arglist>(const FF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a57cf373c247a5db8463a08c9232aaecf</anchor>
      <arglist>(const Block &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a269c3695d4803331d6e90b8fb5dc7681</anchor>
      <arglist>(const field_type &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>const field_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a555e3f722fc6e92bc6d9acb6c8a51e76</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>field_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a7dc4639865af2cb96e5e43c835364cc8</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>afa03a55344ce57339782a3a82c0f2b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block &amp;</type>
      <name>block</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>ac9d32fa2d7776433d5c85ebc275c42af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>ac51b10b701ae2b92259e565a24fe5146</anchor>
      <arglist>(const F &amp;a, const This &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>ad1260cd6eb7a0b2ccd329af2f29a6198</anchor>
      <arglist>(const LFETensor&lt; Fy, dimD, deriv &gt; &amp;y)</arglist>
    </member>
    <member kind="variable">
      <type>Block</type>
      <name>block_</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>a9cb55693c0d49083aeb4d858c0be931f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>size</name>
      <anchorfile>a02793.html</anchorfile>
      <anchor>ad7031873a12f69692c6e3f51c0c54b7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensor&lt; F, 0, 0 &gt;</name>
    <filename>a02801.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>size</name>
      <anchorfile>a02801.html</anchorfile>
      <anchor>aaa9689c2d9218c860db309afab5424ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensor&lt; F, 0, deriv &gt;</name>
    <filename>a02797.html</filename>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>size</name>
      <anchorfile>a02797.html</anchorfile>
      <anchor>a1d4dd425c0b80847f4aff2ba92364223</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LFETensor&lt; F, dimD, 0 &gt;</name>
    <filename>a02805.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>field_type</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a67f5b634e4aa890aa1aa33608fb53084</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; F, size &gt;</type>
      <name>Block</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>acdf7afef015d75e6ecf420f08aae098d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>ac790f48df477ddcd04fe4e119c71b909</anchor>
      <arglist>(const FF &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a750a5eaca415108e0000a9460915468a</anchor>
      <arglist>(const Block &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a67e6a11fb70dd5def44cd5c158e4b539</anchor>
      <arglist>(const field_type &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>const F &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a0a9eb021c400b45dd3008e2c1a7b012f</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>F &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a78022359aa43a1521583496a3b123b60</anchor>
      <arglist>(const unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>aaea18371036ec4a8e18f15a6b103545e</anchor>
      <arglist>(const F &amp;a, const This &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a8aa69588f30b9f5ce7f27bb1921fbe70</anchor>
      <arglist>(const LFETensor&lt; Fy, dimD, 0 &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>Block &amp;</type>
      <name>block</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>aad9a6dfb78d861d8890823f1a9d2f506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Block &amp;</type>
      <name>block</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>af34fdb94bbb59f69846a5737f0098f40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>Block</type>
      <name>block_</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a8710db797af8f9a40e22c1d186ab72af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>size</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a9c2360bb66beb98e97f54fba7cce0c2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensorAxpy</name>
    <filename>a02825.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02825.html</anchorfile>
      <anchor>ac04a02d9ccb698e4547b75ba03836c43</anchor>
      <arglist>(unsigned int r, const Field &amp;a, const Vec1 &amp;x, Vec2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</name>
    <filename>a02837.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>d</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02837.html</anchorfile>
      <anchor>a61cacd9bf13621824891a6e60a8eb222</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02837.html</anchorfile>
      <anchor>aadcac88402bb99752c383427a9e4c108</anchor>
      <arglist>(unsigned int r, const Field &amp;a, const Vec1 &amp;x, Vec2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</name>
    <filename>a02841.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>d</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02841.html</anchorfile>
      <anchor>a2abf78fc03eac4b76c56239fc907393c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02841.html</anchorfile>
      <anchor>a040e5fa8e6ebd29f8bae4a90e1f85898</anchor>
      <arglist>(unsigned int r, const Field &amp;a, const Vec1 &amp;x, Vec2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</name>
    <filename>a02833.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>d</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::derivative &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02833.html</anchorfile>
      <anchor>a08b35f9f0c1247451e2b4f91057da7d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02833.html</anchorfile>
      <anchor>a6f3e2505412cd32347733652a9ebd6f4</anchor>
      <arglist>(unsigned int r, const Field &amp;a, const Vec1 &amp;x, Vec2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</name>
    <filename>a02829.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg>d</templarg>
    <templarg></templarg>
    <templarg>deriv</templarg>
    <member kind="typedef">
      <type>Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::value &gt;</type>
      <name>Vec1</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a973523ffd9cb9984fe57e969a382fb20</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02829.html</anchorfile>
      <anchor>a68146195c47dea547f57e26ac3adc42c</anchor>
      <arglist>(unsigned int r, const Field &amp;a, const Vec1 &amp;x, Vec2 &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalBasisTraits</name>
    <filename>a01553.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>m</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a5ead00d7a44cee622310630fd3fdd9dfaaf7f2d1f9123352eac7d33f2e4270a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a67e50bccc1acb5c54600c54ec30848c2a14d18d2e90116098f8f7411bce709128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DF</type>
      <name>DomainFieldType</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a89db1703e8a3da70ea08c497de033bb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DomainType</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a079eb32e25c71c0474c6f6c34c7345ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RF</type>
      <name>RangeFieldType</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a63c60a6b6ea5966dc867dc8a2d2d8028</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>RangeType</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>af94643b099345246232d66e79be67ee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>J</type>
      <name>JacobianType</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a1afae96879928f7eacf24721beb44baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a5ead00d7a44cee622310630fd3fdd9dfaaf7f2d1f9123352eac7d33f2e4270a6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01553.html</anchorfile>
      <anchor>a67e50bccc1acb5c54600c54ec30848c2a14d18d2e90116098f8f7411bce709128</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalBasisVirtualImp</name>
    <filename>a01681.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LocalBasisVirtualInterface</base>
    <member kind="typedef">
      <type>T</type>
      <name>Traits</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>aa542a62d3407fb86003de7dc56e83810</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a97902e62dcaafb14e9291f3989bbd4b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>af5ac941ace3e9a1586ffac0b1a1c3c99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a79aef2167e9ac12f2f80ffe138e19fa9</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>ae2db123eb6756d2bf1d6715c4d0a97d8</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a39e8ac58f5bd3cceff9cd319f15d7c8d</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalBasisVirtualImp</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>ae6bf8cd5824bc12847fd4e71aa51a031</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a814fb817996d62ebf3630a03573e0506</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>acc72cdcf2818b5f6a4c36b16b5260278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalBasisVirtualImp&lt; LocalBasisTraits, typename Imp::Traits::LocalBasisType &gt;</name>
    <filename>a01681.html</filename>
    <base>Dune::LocalBasisVirtualInterface</base>
    <member kind="typedef">
      <type>LocalBasisTraits</type>
      <name>Traits</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>aa542a62d3407fb86003de7dc56e83810</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a97902e62dcaafb14e9291f3989bbd4b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>af5ac941ace3e9a1586ffac0b1a1c3c99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a79aef2167e9ac12f2f80ffe138e19fa9</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>ae2db123eb6756d2bf1d6715c4d0a97d8</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a39e8ac58f5bd3cceff9cd319f15d7c8d</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalBasisVirtualImp</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>ae6bf8cd5824bc12847fd4e71aa51a031</anchor>
      <arglist>(const typename Imp::Traits::LocalBasisType &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const typename Imp::Traits::LocalBasisType &amp;</type>
      <name>impl_</name>
      <anchorfile>a01681.html</anchorfile>
      <anchor>a814fb817996d62ebf3630a03573e0506</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalBasisVirtualInterface</name>
    <filename>a01649.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Traits</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a4e12376b1dbcbfc86b0f10a3706a06b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalBasisVirtualInterface</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>ac109adaa03aad5bf15ae46b4d41142cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>size</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a39cf17708cc65c8bcf501640dd55d8b0</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>order</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a1be77512eac3f4d9565d8fa5daaeef67</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a827c6b52441a206f743a9bcb94fd0634</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>a28df403d3fd19abb243f29fb28b2565d</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>partial</name>
      <anchorfile>a01649.html</anchorfile>
      <anchor>ae0e653d14a060a6cad040f359d8d6fd8</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalCoefficientsContainer</name>
    <filename>a02117.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalCoefficientsContainer</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a8ed9659ad03a8966f887d18b86547147</anchor>
      <arglist>(const Setter &amp;setter)</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a50da192f485a331b2523a223e9997768</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ab5bee002d0261764b936fbfaf94f6096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoefficientsContainer</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a8ed9659ad03a8966f887d18b86547147</anchor>
      <arglist>(const Setter &amp;setter)</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a50da192f485a331b2523a223e9997768</anchor>
      <arglist>(const unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ab5bee002d0261764b936fbfaf94f6096</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalCoefficientsVirtualImp</name>
    <filename>a01689.html</filename>
    <templarg></templarg>
    <base>Dune::LocalCoefficientsVirtualInterface</base>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>adc47f825af07b84004df2d572784ce42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a582b0936edfbc6c91c1b14385882f664</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalCoefficientsVirtualImp</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a3c8324a45893c20920ec3b1fc0b30e3b</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>acc72cdcf2818b5f6a4c36b16b5260278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalCoefficientsVirtualImp&lt; typename Imp::Traits::LocalCoefficientsType &gt;</name>
    <filename>a01689.html</filename>
    <base>Dune::LocalCoefficientsVirtualInterface</base>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>adc47f825af07b84004df2d572784ce42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a582b0936edfbc6c91c1b14385882f664</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalCoefficientsVirtualImp</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a3c8324a45893c20920ec3b1fc0b30e3b</anchor>
      <arglist>(const typename Imp::Traits::LocalCoefficientsType &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const typename Imp::Traits::LocalCoefficientsType &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalCoefficientsVirtualInterface</name>
    <filename>a01657.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalCoefficientsVirtualInterface</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>a2f48520d0ce2547a4c6e2dca0737613c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>aa41ebe1ebb1fef07366f173f3c892925</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01657.html</anchorfile>
      <anchor>afac8c55f723f534d81f9f18bffb7ce47</anchor>
      <arglist>(std::size_t i) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalFiniteElementCloneFactory</name>
    <filename>a01677.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementVirtualInterface&lt; typename Imp::Traits::LocalBasisType::Traits &gt;</type>
      <name>Interface</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a88ae4ff4a4964c6cc59a1c44e40a3d55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Imp *</type>
      <name>clone</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>aa0738a9be44430774bf317ce6a85080c</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Imp *</type>
      <name>create</name>
      <anchorfile>a01677.html</anchorfile>
      <anchor>a7622437bce557c5df729cb10e7197d98</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalFiniteElementCloneFactoryHelper</name>
    <filename>a01669.html</filename>
    <templarg></templarg>
    <templarg>IsInterface</templarg>
    <member kind="function" static="yes">
      <type>static Imp *</type>
      <name>clone</name>
      <anchorfile>a01669.html</anchorfile>
      <anchor>af95bee09ac2482ef43c209952a1ce166</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalFiniteElementFunctionBase</name>
    <filename>a01637.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FunctionBaseDummy</type>
      <name>VirtualFunctionBase</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>ad718b737ada6c0a704cfd412f35a4e3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionBaseDummy</type>
      <name>FunctionBase</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>a1f5386b6aceb326f848726e75038c050</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionBaseDummy</type>
      <name>type</name>
      <anchorfile>a01637.html</anchorfile>
      <anchor>ae23ffe6ad6c9a206b8ea482089cd8ba6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalFiniteElementTraits</name>
    <filename>a01557.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LB</type>
      <name>LocalBasisType</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a8f9e774cf92516881c316ee740ac0574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LC</type>
      <name>LocalCoefficientsType</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>a9a96ce417ddf0a77193794712f84da3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LI</type>
      <name>LocalInterpolationType</name>
      <anchorfile>a01557.html</anchorfile>
      <anchor>ab3572df5d6dbd26947707a41fa35be5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalFiniteElementVariant</name>
    <filename>a01577.html</filename>
    <templarg>Implementations</templarg>
    <member kind="typedef">
      <type>typename Dune::LocalFiniteElementTraits&lt; LocalBasis, LocalCoefficients, LocalInterpolation &gt;</type>
      <name>Traits</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a0665c92cb1649c3047630ed0978ba3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>afe7b71a72d30195e328738b064f2a3ed</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a9e2eff523b505d881b5e522d7421ffc2</anchor>
      <arglist>(const std::monostate &amp;monostate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ae48e4a3ea80d686bdc89c6c1ec33c6d6</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ac45780283a232345889ec98e2ffdea62</anchor>
      <arglist>(const LocalFiniteElementVariant &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a51c4e28b687cd9b4f67d7cbf794663ed</anchor>
      <arglist>(LocalFiniteElementVariant &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a092607a1704dd98f4cff514e9bbe8755</anchor>
      <arglist>(const LocalFiniteElementVariant &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aed1aba471bb1e76260b15cea92c0c60c</anchor>
      <arglist>(LocalFiniteElementVariant &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>afc961a4f11dc63f92fe8b41cb21beab0</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aefa6fd266cfe66e17e9ea1e26fc7a3f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aa07de71b7ff29de3d862e704b4355095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a1bdafa0d58da3bdec30b4f8788a18154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a4fc5d6183809288939c96000d50426ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a51a399fb862c5c4c06a38e43486124e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>variant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ae612ac41c16557b5d003da92e0e40cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a3aef32af3c400bf563b8a9b917630743</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalFiniteElementVariant&lt; LagrangeSimplexLocalFiniteElement&lt; D, R, 2, 2 &gt;, LagrangeCubeLocalFiniteElement&lt; D, R, 2, 2 &gt; &gt;</name>
    <filename>a01577.html</filename>
    <member kind="typedef">
      <type>typename Dune::LocalFiniteElementTraits&lt; LocalBasis, LocalCoefficients, LocalInterpolation &gt;</type>
      <name>Traits</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a0665c92cb1649c3047630ed0978ba3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>afe7b71a72d30195e328738b064f2a3ed</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a9e2eff523b505d881b5e522d7421ffc2</anchor>
      <arglist>(const std::monostate &amp;monostate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ae48e4a3ea80d686bdc89c6c1ec33c6d6</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ac45780283a232345889ec98e2ffdea62</anchor>
      <arglist>(const LocalFiniteElementVariant &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a51c4e28b687cd9b4f67d7cbf794663ed</anchor>
      <arglist>(LocalFiniteElementVariant &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a092607a1704dd98f4cff514e9bbe8755</anchor>
      <arglist>(const LocalFiniteElementVariant &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aed1aba471bb1e76260b15cea92c0c60c</anchor>
      <arglist>(LocalFiniteElementVariant &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>LocalFiniteElementVariant &amp;</type>
      <name>operator=</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>afc961a4f11dc63f92fe8b41cb21beab0</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aefa6fd266cfe66e17e9ea1e26fc7a3f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>aa07de71b7ff29de3d862e704b4355095</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a1bdafa0d58da3bdec30b4f8788a18154</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a4fc5d6183809288939c96000d50426ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a51a399fb862c5c4c06a38e43486124e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>variant</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>ae612ac41c16557b5d003da92e0e40cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01577.html</anchorfile>
      <anchor>a3aef32af3c400bf563b8a9b917630743</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalFiniteElementVariantCache</name>
    <filename>a01585.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename GenerateLFEVariant&lt; Implementations &gt;::type</type>
      <name>FiniteElementType</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>afb2f302e8f18e4399e0841e86ee0a063</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariantCache</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a2249583b6aea87df5c674325a2a4335b</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariantCache</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac7081593958a91243d6b693e9b20767f</anchor>
      <arglist>(const LocalFiniteElementVariantCache &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVariantCache</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>a96ee35e02fcfae6286f15e7a3e2d5490</anchor>
      <arglist>(LocalFiniteElementVariantCache &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>const auto &amp;</type>
      <name>get</name>
      <anchorfile>a01585.html</anchorfile>
      <anchor>ac80451bdc523e431d46f1cdf78c2a298</anchor>
      <arglist>(const Key &amp;... key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalFiniteElementVirtualImp</name>
    <filename>a01665.html</filename>
    <templarg></templarg>
    <base>LocalFiniteElementVirtualInterface&lt; Imp::Traits::LocalBasisType::Traits &gt;</base>
    <member kind="typedef">
      <type>Interface::Traits</type>
      <name>Traits</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a719b1b9dca20ddc22b8cd838f84376eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a5521a2e70e106e2227ccfae65b7c577e</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a95ca37a123430777ebf0ed34641c42eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>aa36f7532e336c7e3d3684d62bc51cc97</anchor>
      <arglist>(const LocalFiniteElementVirtualImp &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~LocalFiniteElementVirtualImp</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ab88a85d51ff55bce0a436aa5a5e638dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a740cf295eef734dcada8bd2e075bbb48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a54effc0dd3aed896bff2632753ac64e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a227470629a78b4c0f1c05294cbd858f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ac0c7f6be2b1fab2a1a4e137e9ec47ccb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GeometryType</type>
      <name>type</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ac20b5ae0e33bb0cfbb272bc633867b5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual LocalFiniteElementVirtualImp&lt; Imp &gt; *</type>
      <name>clone</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>ab2f7f6b91195cedd3df64cb25966a330</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp *</type>
      <name>impl_</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>acc2cab58588683f110ad91c54f07c7f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LocalBasisVirtualImp&lt; LocalBasisTraits, typename Imp::Traits::LocalBasisType &gt;</type>
      <name>localBasisImp_</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>af5da4451e69292e7ec7a37622d2f984a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LocalCoefficientsVirtualImp&lt; typename Imp::Traits::LocalCoefficientsType &gt;</type>
      <name>localCoefficientsImp_</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>af8ac3767bcb3b394f10c376affde4081</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const LocalInterpolationVirtualImp&lt; typename LocalBasisTraits::DomainType, typename LocalBasisTraits::RangeType, typename Imp::Traits::LocalInterpolationType &gt;</type>
      <name>localInterpolationImp_</name>
      <anchorfile>a01665.html</anchorfile>
      <anchor>a4b802b51b7680da9f52e957b2cbf33e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalFiniteElementVirtualInterface</name>
    <filename>a01661.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; LocalBasisVirtualInterface&lt; LocalBasisTraits &gt;, LocalCoefficientsVirtualInterface, LocalInterpolationVirtualInterface&lt; typename LocalBasisTraits::DomainType, typename LocalBasisTraits::RangeType &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a7cf08ca67001defea62a43cc464e6919</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalFiniteElementVirtualInterface</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a8196e498f69d92b28b4408e9cbbe6896</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a2367ef8c0fac75455b1db3f182df0ca5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a75a32e49731457378a206fff0e03508b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>ab872beeda9c492c302df5120058fc7d3</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned int</type>
      <name>size</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a25b26366496dee5c7b7b422a1e7c6e82</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const GeometryType</type>
      <name>type</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a6e028b44918978d1a7329f7a401ad6fc</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LocalFiniteElementVirtualInterface&lt; T &gt; *</type>
      <name>clone</name>
      <anchorfile>a01661.html</anchorfile>
      <anchor>a799b79109940a97b187c502e87f3e43e</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalFiniteElementVirtualInterface&lt; Imp::Traits::LocalBasisType::Traits &gt;</name>
    <filename>a01661.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::LocalInterpolationVirtualImp</name>
    <filename>a01685.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LocalInterpolationVirtualInterface</base>
    <member kind="typedef">
      <type>Base::FunctionType</type>
      <name>FunctionType</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a6591143523f9e8ea449cc4fda725d1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::CoefficientType</type>
      <name>CoefficientType</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>aa696f6b6c6b7fa1479b80a7d93ad49ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a4aedb69400bc71ce532fc3d1a94e7fb2</anchor>
      <arglist>(const FunctionType &amp;f, std::vector&lt; CoefficientType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a6f8c45bbaa84e4777edf6842212cecb4</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; CoefficientType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>add148ec33e895521a59269fe75de2577</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalInterpolationVirtualImp</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a88f38bf055c274534cc050b65d589381</anchor>
      <arglist>(const Imp &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a4ed88a082fe3c1a71f0a5ca4a5cfb44e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>LocalFiniteElementVirtualImp</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>acc72cdcf2818b5f6a4c36b16b5260278</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalInterpolationVirtualImp&lt; typename LocalBasisTraits::DomainType, typename LocalBasisTraits::RangeType, typename Imp::Traits::LocalInterpolationType &gt;</name>
    <filename>a01685.html</filename>
    <base>Dune::LocalInterpolationVirtualInterface</base>
    <member kind="typedef">
      <type>Base::FunctionType</type>
      <name>FunctionType</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a6591143523f9e8ea449cc4fda725d1f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::CoefficientType</type>
      <name>CoefficientType</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>aa696f6b6c6b7fa1479b80a7d93ad49ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a4aedb69400bc71ce532fc3d1a94e7fb2</anchor>
      <arglist>(const FunctionType &amp;f, std::vector&lt; CoefficientType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a6f8c45bbaa84e4777edf6842212cecb4</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; CoefficientType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>add148ec33e895521a59269fe75de2577</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalInterpolationVirtualImp</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a88f38bf055c274534cc050b65d589381</anchor>
      <arglist>(const typename Imp::Traits::LocalInterpolationType &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const typename Imp::Traits::LocalInterpolationType &amp;</type>
      <name>impl_</name>
      <anchorfile>a01685.html</anchorfile>
      <anchor>a4ed88a082fe3c1a71f0a5ca4a5cfb44e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalInterpolationVirtualInterface</name>
    <filename>a01633.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LocalInterpolationVirtualInterfaceBase</base>
    <member kind="typedef">
      <type>std::function&lt; RangeType(DomainType)&gt;</type>
      <name>FunctionType</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a1cc43d9cb99265b39ab2b3be72fb2bbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RangeType::field_type</type>
      <name>CoefficientType</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a57c7c9ce6ab942e4d61c7c68ccf8d26e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalInterpolationVirtualInterface</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a0607588f7871568c91cd710f8c1ae1d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a7200ff09a0dc1c676df376dc2344d64a</anchor>
      <arglist>(const FunctionType &amp;f, std::vector&lt; CoefficientType &gt; &amp;out) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>a6f8c45bbaa84e4777edf6842212cecb4</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; CoefficientType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01633.html</anchorfile>
      <anchor>add148ec33e895521a59269fe75de2577</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalInterpolationVirtualInterfaceBase</name>
    <filename>a01653.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::function&lt; RangeType(DomainType)&gt;</type>
      <name>FunctionType</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>a48c128fdce7e6858a5eace7db49f22c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RangeType::field_type</type>
      <name>CoefficientType</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>abc07469ff36ce8277dbe873dac5683aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LocalInterpolationVirtualInterfaceBase</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>ac129184f7fc5cefc8ba2c47652bb6511</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>interpolate</name>
      <anchorfile>a01653.html</anchorfile>
      <anchor>aceb878a229366dc53507cda8ffed8a14</anchor>
      <arglist>(const FunctionType &amp;f, std::vector&lt; CoefficientType &gt; &amp;out) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalKey</name>
    <filename>a01605.html</filename>
    <member kind="enumvalue">
      <name>intersectionCodim</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a75bc5a4d1c772f174734371e69bfb0a6a9d3081389464379700fb0ee0773f8992</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>intersectionCodim</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a75bc5a4d1c772f174734371e69bfb0a6a9d3081389464379700fb0ee0773f8992</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalKey</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a07d9d70e44926cef622d49cb81fea7d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalKey</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a756fe51ac4d69358f16a6144c875088d</anchor>
      <arglist>(unsigned int s, unsigned int c, unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntity</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a6b0797dbd0d9844ddef2e6b301408e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>codim</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a5f21c09059ed9c1efd8129da6280fc3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>index</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a0ce9bd9f7a9cf584730c6285f0e1d988</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>index</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aad1e20f2747775ad5604cf4f9e61301b</anchor>
      <arglist>(unsigned int i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>a98b81d8712d0f4c422245fef6335ffd1</anchor>
      <arglist>(const LocalKey &amp;other) const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>aa63a38030ee36de1ab70ab77ca162712</anchor>
      <arglist>(std::ostream &amp;s, const LocalKey &amp;localKey)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalL2Interpolation</name>
    <filename>a02677.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>onb</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalL2Interpolation&lt; B, Q, false &gt;</name>
    <filename>a02689.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LocalL2InterpolationBase</base>
    <member kind="typedef">
      <type>LocalL2InterpolationBase&lt; B, Q &gt;</type>
      <name>Base</name>
      <anchorfile>a02689.html</anchorfile>
      <anchor>a78a3d4865f8790afe8cfc7eefb51e9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>Basis</name>
      <anchorfile>a02689.html</anchorfile>
      <anchor>af15f117254d626ade368c037528d2bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Q</type>
      <name>Quadrature</name>
      <anchorfile>a02689.html</anchorfile>
      <anchor>add5c758712e8508669a3ca1cdf4b6b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02689.html</anchorfile>
      <anchor>a6b50b74cf127db546d19b252e174655d</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; DofField &gt; &amp;coefficients) const</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a0b800c0a6900ff12fca750b79d5e268d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Quadrature &amp;</type>
      <name>quadrature</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>af067619b9a22baf4586c27594d4ad622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab36c846ca965f718e26bab21e5a48c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab2da138ac67da6313b5c78fd5fd6b5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Quadrature &amp;</type>
      <name>quadrature_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>aa490c6b1a2205215740745dfe4e5f186</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LocalL2InterpolationFactory</name>
      <anchorfile>a02689.html</anchorfile>
      <anchor>aa85cd76a9de211e7184c00cc7b1b2a9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalL2Interpolation&lt; B, Q, true &gt;</name>
    <filename>a02685.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LocalL2InterpolationBase</base>
    <member kind="typedef">
      <type>LocalL2InterpolationBase&lt; B, Q &gt;</type>
      <name>Base</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a28b86503674076d7f02305daa4c2c12a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>Basis</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>af15f117254d626ade368c037528d2bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Q</type>
      <name>Quadrature</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>add5c758712e8508669a3ca1cdf4b6b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a5d31d36619a1a29aa77dc4c8217cb50f</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; DofField &gt; &amp;coefficients) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a5d31d36619a1a29aa77dc4c8217cb50f</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; DofField &gt; &amp;coefficients) const</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a0b800c0a6900ff12fca750b79d5e268d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Quadrature &amp;</type>
      <name>quadrature</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>af067619b9a22baf4586c27594d4ad622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab36c846ca965f718e26bab21e5a48c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab2da138ac67da6313b5c78fd5fd6b5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Quadrature &amp;</type>
      <name>quadrature_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>aa490c6b1a2205215740745dfe4e5f186</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LocalL2InterpolationFactory</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>aa85cd76a9de211e7184c00cc7b1b2a9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalL2InterpolationBase</name>
    <filename>a02681.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>B</type>
      <name>Basis</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>af15f117254d626ade368c037528d2bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Q</type>
      <name>Quadrature</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>add5c758712e8508669a3ca1cdf4b6b94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a5d31d36619a1a29aa77dc4c8217cb50f</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; DofField &gt; &amp;coefficients) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a5d31d36619a1a29aa77dc4c8217cb50f</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; DofField &gt; &amp;coefficients) const</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a0b800c0a6900ff12fca750b79d5e268d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Quadrature &amp;</type>
      <name>quadrature</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>af067619b9a22baf4586c27594d4ad622</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab36c846ca965f718e26bab21e5a48c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>LocalL2InterpolationBase</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>a210933cf060887f5154a384401d58a7d</anchor>
      <arglist>(const Basis &amp;basis, const Quadrature &amp;quadrature)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>ab2da138ac67da6313b5c78fd5fd6b5df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Quadrature &amp;</type>
      <name>quadrature_</name>
      <anchorfile>a02681.html</anchorfile>
      <anchor>aa490c6b1a2205215740745dfe4e5f186</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalL2InterpolationFactory</name>
    <filename>a02693.html</filename>
    <templarg></templarg>
    <templarg>onb</templarg>
    <member kind="typedef">
      <type>BasisFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>aca1acd9ea043890cffef95df35a5c074</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisFactory::Object</type>
      <name>Basis</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a17a1a6fa7f1b5dfaf24e5bb31aaffb2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>Field</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a1d2469a82f4cbf6bdd496a1e4c03786e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QuadratureRule&lt; Field, dimension &gt;</type>
      <name>Quadrature</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a76f6ceef35b41c5a88a259dc0f474b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QuadratureRules&lt; Field, dimension &gt;</type>
      <name>QuadratureProvider</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a4397c7e375c2948aa563137c53c743dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalL2Interpolation&lt; Basis, Quadrature, onb &gt;</type>
      <name>LocalInterpolation</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>ae6b7965c9e97cfb70baa8520c8b08619</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const LocalInterpolation</type>
      <name>Object</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>ad8764d2902805901902968ce6f5a44bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>aafa02f12607123019013e94629773ee1</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a16c1a4c41e66aa6678097688a74040c7</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02693.html</anchorfile>
      <anchor>a0f51bb13fbb38dc34b08209581c8fd76</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalLagrangeInterpolation</name>
    <filename>a01825.html</filename>
    <templarg>LP</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LP&lt; F, dim &gt;</type>
      <name>LagrangePointSet</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a763197a1a77a3934a97af95e22b54a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePointSet::Field</type>
      <name>Field</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a16828e5fb5f7da3897a548a87fee722b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ac9d309b4acf146903c6b66116c3ca615</anchor>
      <arglist>(const Fn &amp;fn, Vector &amp;coefficients) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Vector &gt;().resize(1)), void &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ade379a7dc17e04922df871cd8a16ea83</anchor>
      <arglist>(const Basis &amp;basis, Matrix &amp;coefficients) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Matrix &gt;().rowPtr(0)), typename Matrix::Field * &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>const LagrangePointSet &amp;</type>
      <name>lagrangePoints</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a0076578b12d8a45a42390078bb9a73ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a6bbc9dd5526b53350b02c804a387f628</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>LagrangeInterpolationFactory&lt; LP, dim, F &gt;</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ab7d4cb800ba4e4b8a2a8ef76d41c6aec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalToGlobalBasisAdaptorTraits</name>
    <filename>a01609.html</filename>
    <templarg></templarg>
    <templarg>dimDomainGlobal_</templarg>
    <base>Dune::BasisInterface::Traits</base>
    <member kind="typedef">
      <type>LocalBasisTraits::DomainFieldType</type>
      <name>DomainField</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a2e29d155fb228300b20f8ed682ed909e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits::DomainType</type>
      <name>DomainLocal</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ad45ec80342a1cd8133ef6d03fa69cb71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; DomainField, dimDomainGlobal &gt;</type>
      <name>DomainGlobal</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ac793a38826ccbbf3b6911dceeb11c589</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits::RangeFieldType</type>
      <name>RangeField</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a1474910cdfd9acfaf5de745942671fac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits::RangeType</type>
      <name>Range</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a81c8210b5d317cb286c3f053b1b08b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; RangeField, dimRange, dimDomainGlobal &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a595a04fc939626faf47e1fcd5f0f0d38</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a22ed8c98d751a763d07e72c1a5e8c9b1a8558c3b84bc3a43d4d1aba2349f478a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a22ed8c98d751a763d07e72c1a5e8c9b1a8558c3b84bc3a43d4d1aba2349f478a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a6a94c3ff73f8c506b4562d38ae984261</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a3073312b6fe2f9f80fd99395445dcc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5e23665b4484eafc6cb72ae32379876da3cbc07c7513674618a78f8b8f76f141e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a4e9f43630f2ae5468b798ad86407f3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a804c89e1396050cad9d6bd5e4acdc1b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimDomainLocal</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a5c36962d3252f7b0be5ab95fd99d609a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimDomainGlobal</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>a9b65d8d15e2a329820843a2572a6b361</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimRange</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>ab8d9473951129c9c40b7f92d083efca3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a22ed8c98d751a763d07e72c1a5e8c9b1a8558c3b84bc3a43d4d1aba2349f478a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a6a94c3ff73f8c506b4562d38ae984261</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a3073312b6fe2f9f80fd99395445dcc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5e23665b4484eafc6cb72ae32379876da3cbc07c7513674618a78f8b8f76f141e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a4e9f43630f2ae5468b798ad86407f3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a804c89e1396050cad9d6bd5e4acdc1b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalToGlobalInterpolationAdaptor</name>
    <filename>a01617.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::InterpolationInterface</base>
    <member kind="typedef">
      <type>Traits_</type>
      <name>Traits</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9a8fb33ef4f62a2d6c87047bffb7c06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalToGlobalInterpolationAdaptor</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a4af99a1b8d29454753e63f950bffea5d</anchor>
      <arglist>(const LocalInterpolation &amp;localInterpolation_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a56a2a5aaa96d037612c37114cd7e20b3</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; Coeff &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aaf0ec243fd8890354d02b024de3e0b88</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalToGlobalInterpolationAdaptor&lt; LocalInterpolation, typename Basis::Traits &gt;</name>
    <filename>a01617.html</filename>
    <base>Dune::InterpolationInterface</base>
    <member kind="typedef">
      <type>typename Basis::Traits</type>
      <name>Traits</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9a8fb33ef4f62a2d6c87047bffb7c06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalToGlobalInterpolationAdaptor</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a4af99a1b8d29454753e63f950bffea5d</anchor>
      <arglist>(const LocalInterpolation &amp;localInterpolation_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a56a2a5aaa96d037612c37114cd7e20b3</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; Coeff &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aaf0ec243fd8890354d02b024de3e0b88</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LocalToGlobalInterpolationAdaptor&lt; typename LocalFiniteElement::Traits::LocalInterpolationType, typename Basis::Traits &gt;</name>
    <filename>a01617.html</filename>
    <base>Dune::InterpolationInterface</base>
    <member kind="typedef">
      <type>typename Basis::Traits</type>
      <name>Traits</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a9a8fb33ef4f62a2d6c87047bffb7c06f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalToGlobalInterpolationAdaptor</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a4af99a1b8d29454753e63f950bffea5d</anchor>
      <arglist>(const typename LocalFiniteElement::Traits::LocalInterpolationType &amp;localInterpolation_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01617.html</anchorfile>
      <anchor>a56a2a5aaa96d037612c37114cd7e20b3</anchor>
      <arglist>(const Function &amp;function, std::vector&lt; Coeff &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>aaf0ec243fd8890354d02b024de3e0b88</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MimeticLocalBasis</name>
    <filename>a02025.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Dune::LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a10b3803804a7d44fcd0180f6a76b2188</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalBasis</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a078062f05de3fcfd2fc8d44b522b0f95</anchor>
      <arglist>(unsigned int variant_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalBasis</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a3eb3da526b455ec7b9f11028819201d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>abd36b9a202b8e9a41a16a66bef0dd580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>acff1c2397d065df9dae9d64db51ae76b</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a45437a44d5adaafc0a3d60e804d3fc09</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a8aca7284253eafe8739e6158e94809d2</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;, const typename Traits::DomainType &amp;, std::vector&lt; typename Traits::RangeType &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02025.html</anchorfile>
      <anchor>a7e7062381e7eaa1d2afd98b8e3b193dc</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MimeticLocalCoefficients</name>
    <filename>a02033.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>MimeticLocalCoefficients</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a5da2839a38a01a8e61f50bce3e972a7d</anchor>
      <arglist>(unsigned int variant_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalCoefficients</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ad33f76a2b9c82b553d72f8132cadfdf5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>a8e98fa5f238ca818fb5d69172eeab62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Dune::LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02033.html</anchorfile>
      <anchor>ae49714415aed58e2ed05d2581dcc734c</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MimeticLocalFiniteElement</name>
    <filename>a02037.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Dune::LocalFiniteElementTraits&lt; MimeticLocalBasis&lt; D, R, dim &gt;, MimeticLocalCoefficients, MimeticLocalInterpolation&lt; MimeticLocalBasis&lt; D, R, dim &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>af0458cfdbf9491ca025eb9fafd9524d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalFiniteElement</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a6c7851de0574848ff22dfd6bb915567e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalFiniteElement</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a93290353eea09bd791756b621d36380e</anchor>
      <arglist>(Dune::GeometryType::BasicType basicType)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MimeticLocalFiniteElement</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a6778de7b5768503e67742b69ebcfac23</anchor>
      <arglist>(Dune::GeometryType::BasicType basicType, unsigned int variant)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a97f881d4f282b5b85227ea6d8d90c245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>a0c4d338e736bce74650c392ca3a8fccd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>ab5876a577ef471072875a59bc0f92713</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Dune::GeometryType</type>
      <name>type</name>
      <anchorfile>a02037.html</anchorfile>
      <anchor>acdf8378bbc4051f04d70b830895bcdfd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MimeticLocalInterpolation</name>
    <filename>a02029.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>aee6cb38a40a1868497f594661efd805a</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MimeticLocalInterpolation&lt; Dune::MimeticLocalBasis&lt; D, R, dim &gt; &gt;</name>
    <filename>a02029.html</filename>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02029.html</anchorfile>
      <anchor>aee6cb38a40a1868497f594661efd805a</anchor>
      <arglist>(const F &amp;f, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialBasis</name>
    <filename>a02721.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <base>Dune::MonomialBasisImpl</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialBasis</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ac85dfddaeb39d40ce07e12fab2d33913</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0242deea7aa622a7874c63bcca8932af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonomialBasis&lt; geometryId, Field &gt;</name>
    <filename>a02721.html</filename>
    <base>Dune::MonomialBasisImpl</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialBasis</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ac85dfddaeb39d40ce07e12fab2d33913</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0242deea7aa622a7874c63bcca8932af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonomialBasis&lt; GeometryTypes::cube(dim).toId(), F &gt;</name>
    <filename>a02721.html</filename>
    <base>Dune::MonomialBasisImpl</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialBasis</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ac85dfddaeb39d40ce07e12fab2d33913</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0242deea7aa622a7874c63bcca8932af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonomialBasis&lt; GeometryTypes::simplex(dim).toId(), F &gt;</name>
    <filename>a02721.html</filename>
    <base>Dune::MonomialBasisImpl</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialBasis</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ac85dfddaeb39d40ce07e12fab2d33913</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0242deea7aa622a7874c63bcca8932af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialBasisFactory</name>
    <filename>a02749.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::MonomialBasisFactory::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>F</type>
      <name>StorageField</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a83980be9810cf61cc05cda411a63a222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Key</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ade7366159a8a1435463923290957908b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const VirtualMonomialBasis&lt; dimension, F &gt;</type>
      <name>Object</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a10c66b074b596501a9ec4b0ec024e9bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ac494e1c415e7b8dd10e10f3628b167dc</anchor>
      <arglist>(const Key &amp;order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a04905b9ef2af4269f2da516c304bd7c2</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a89d9fbbc580c97868a3e7c6ab887a3d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialBasisHelper</name>
    <filename>a02725.html</filename>
    <templarg>mydim</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; GeometryTypes::simplex(mydim).toId() &gt;</type>
      <name>MySize</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>adda11777dafed7b0dd384d4d3ad76b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; GeometryTypes::simplex(dim).toId() &gt;</type>
      <name>Size</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>a0601cdfb420ce0020f0c04b1853351e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>copy</name>
      <anchorfile>a02725.html</anchorfile>
      <anchor>ace39e97063f3532e528817ccd7fda4c1</anchor>
      <arglist>(const unsigned int deriv, F *&amp;wit, F *&amp;rit, const unsigned int numBaseFunctions, const F &amp;z)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialBasisImpl</name>
    <filename>a02729.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>add6de9e127ead0e5577c80bbf991dbfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimDomain &gt;</type>
      <name>DomainVector</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>a33087bed96f7395fdbc583c8a69fbe76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aac9ede917faa1c171f972bed1bb1f76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MonomialBasis&lt; geometryId, Field &gt;</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>a1e05558060a7c7ac220f787374409a66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialBasisProvider</name>
    <filename>a02757.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::MonomialBasisProvider::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02757.html</anchorfile>
      <anchor>a91d9ed77a74510508389266a2635bc36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02757.html</anchorfile>
      <anchor>a7495d8ee6de2437c3fae21fc8cd1935f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialBasisSize</name>
    <filename>a02717.html</filename>
    <templarg>geometryId</templarg>
    <member kind="function">
      <type></type>
      <name>MonomialBasisSize</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a53d621ddaa367dd7b92959ae7f5d4389</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MonomialBasisSize</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a77b1b33114e101165fbc727a6c87b8a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>operator()</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a82912a9f7c10b75fc7998ed0d2d2a4c6</anchor>
      <arglist>(const unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>maxOrder</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>acdc54e97e42744d11763964b5ae650d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSizes</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a0caab143f4230cf25df3e09c19214420</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static This &amp;</type>
      <name>instance</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a565cecb601b48edf16231419a0d16b8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>maxOrder_</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>aa5a6689588c13863622b8165e6255fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int *</type>
      <name>sizes_</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a435531af566cdc264079d2ae2a538323</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int *</type>
      <name>numBaseFunctions_</name>
      <anchorfile>a02717.html</anchorfile>
      <anchor>a0a2b45327edd8cb4224ce1a1c83e2448</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MonomialEvaluator</name>
    <filename>a02545.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::MonomialEvaluator::BaseIterator</class>
    <class kind="struct">Dune::MonomialEvaluator::Iterator</class>
    <member kind="typedef">
      <type>B</type>
      <name>Basis</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a19a89b5b136d9a57cf7dd6197a3a4503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::Field</type>
      <name>Field</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a467abec640f5989847fabd3d1456060b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a6e2011bc65bd1f6c9f0da13918f78195</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Field &gt;</type>
      <name>Container</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>abe3c40be7cbb9d958ef1ef1cbac60b90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>ab50883ee844000ec9b97dde75cece670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>ae52f1bbb2696e8f52ec2c304c291a13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimRange</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a11e94ca45eeb4fa1bee836d250e0953e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MonomialEvaluator</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a41164494e72a5664e012f8e0b1eaa5ec</anchor>
      <arglist>(const Basis &amp;basis, unsigned int order, unsigned int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a74f2b738ae19f1148f707a03d1c85db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MonomialEvaluator</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>ad967b2e4a9abf3c7b44a2886a5cdb525</anchor>
      <arglist>(const MonomialEvaluator &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a25ac4e1f6705d511e6c4e4ad0c107a48</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a231cdde9ec1ea07611e49db67939a3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>size_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a51d344612495e08e3d3b741abfaf666e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Container</type>
      <name>container_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a9380d3d2119d9e7ba4dd7f1f2dc0b831</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialFiniteElementFactory</name>
    <filename>a02073.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>p</templarg>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; LocalFE, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>ac2ac22ab6ab6e8560a8248ba477a3f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialFiniteElementFactory</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>a5d906e7dbb6afa7cfaef43c0fb2d5469</anchor>
      <arglist>(const ForwardIterator &amp;begin, const ForwardIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialFiniteElementFactory</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>aa8f80454b9aa529f624da6cf8214ec16</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialFiniteElementFactory</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>ae62037c399a0aad0fac08cdbbe59316c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a02073.html</anchorfile>
      <anchor>ab9e3f64a2c2f120cf97ab58f48de632a</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialLocalBasis</name>
    <filename>a02057.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <templarg>p</templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, d, Dune::FieldVector&lt; D, d &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, d &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>ade322af90abe433482e366ced86697d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>abcc41e4b019176a67456d5cec278e00a</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>aa85582f11f8d7b8ba953d8282b6c041a</anchor>
      <arglist>(const std::array&lt; unsigned int, d &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>aaa882177fe886dfe0424f87fadc1c8f1</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>a6f45a5a4531f0118982abea295c37337</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02057.html</anchorfile>
      <anchor>af36da2dafb5d0ae4649b32a634295118</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialLocalCoefficients</name>
    <filename>a02061.html</filename>
    <templarg>static_size</templarg>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>MonomialLocalCoefficients</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a33e9e0fabcc98b07b2727e1d2592567b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a2f5263545716db64fd5cbfcf2b842a22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a74757c4e8a254be3147191c5268c22cd</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialLocalFiniteElement</name>
    <filename>a02069.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <templarg>p</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; MonomialLocalBasis&lt; D, R, d, p &gt;, MonomialLocalCoefficients&lt; static_size &gt;, MonomialLocalInterpolation&lt; MonomialLocalBasis&lt; D, R, d, p &gt;, static_size &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a7422fd299f2e1b9a58d64f3ac10ae08f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MonomialLocalFiniteElement</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>ac371ec54db64fd5b392303dae6d7989e</anchor>
      <arglist>(const GeometryType &amp;gt_)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a498b4c9848287c24662db871a0cc0ec2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a6655bd70aec5fd3d96318c0067f6861b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a69f456666d4e94568ac419d0a517ff1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a24076588391226562dbcd0a23a583219</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02069.html</anchorfile>
      <anchor>a52c6bf3ecbe2dc9286fb005c47b343d9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MonomialLocalInterpolation</name>
    <filename>a02065.html</filename>
    <templarg></templarg>
    <templarg>size</templarg>
    <member kind="function">
      <type></type>
      <name>MonomialLocalInterpolation</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>adbedfc039de1edb22375e83c4857d52e</anchor>
      <arglist>(const GeometryType &amp;gt_, const LB &amp;lb_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>a996190f050526b89ab763c41440a59bf</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MonomialLocalInterpolation&lt; Dune::MonomialLocalBasis&lt; D, R, d, p &gt;, static_size &gt;</name>
    <filename>a02065.html</filename>
    <member kind="function">
      <type></type>
      <name>MonomialLocalInterpolation</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>adbedfc039de1edb22375e83c4857d52e</anchor>
      <arglist>(const GeometryType &amp;gt_, const Dune::MonomialLocalBasis&lt; D, R, d, p &gt; &amp;lb_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02065.html</anchorfile>
      <anchor>a996190f050526b89ab763c41440a59bf</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Mult</name>
    <filename>a02589.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Field2</type>
      <name>BasisEntry</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a6111319ad0c2e8949baed5b751d6e2da</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a37e7f794ce9143999c11a3d64482ff76</anchor>
      <arglist>(const Field &amp;vec1, const BasisEntry &amp;vec2, BasisEntry &amp;res)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Mult&lt; Field, FieldVector&lt; Field2, dimRange &gt; &gt;</name>
    <filename>a02593.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dimRange</templarg>
    <member kind="typedef">
      <type>FieldVector&lt; Field2, dimRange &gt;</type>
      <name>BasisEntry</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>a00e4ace61d78d1b0b0756287212a1b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>add</name>
      <anchorfile>a02593.html</anchorfile>
      <anchor>ae186186e31e15315dd0844d453d07256</anchor>
      <arglist>(const Field &amp;vec1, const BasisEntry &amp;vec2, BasisEntry &amp;res)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiIndex</name>
    <filename>a02765.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>afe500b4e34e7f01cd017a79b3a1d95a0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a7e1f3a3c400d1152fc72af83609447fb</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a1dc7085694b9b4ddb749856a71a2fc4b</anchor>
      <arglist>(int, const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a4d4bee57f6a3f7596139bf2194d92cea</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a0cb073a8ce8c70d3a685c6445833ebbd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>z</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>ab922975eea1fab8f07aeede8b8210eb0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>omz</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a3a2c9bcbf36bb8313339f9302d53d15d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>factor</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a16acecd13f86df395e94c1c46d91bf4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>abbd9a83cb3eb5c1743825f25575914ff</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a5f1aad613c9b693e5df23adf62a233f2</anchor>
      <arglist>(const Zero&lt; This &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>ac1595edea692f1d8199368212676ca2d</anchor>
      <arglist>(const Unity&lt; This &gt; &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a44513c04a9af435b03f6a334f354e2f8</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a3e7f2f2552a6c312bce5e0f4fc0c3532</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a6f3919046eb3432ec91a385aa765e2dd</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a0c0043622e1e09050b5c14cb7e896c69</anchor>
      <arglist>(const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a7fb7234ec7cee20a679132b2d96cf342</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a063503cfae0481b42368bdc194ffe794</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a78cfd74938d9c279f24b54c96e9db956</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a7ddffb99756dcdd1e4f64c1e2d326398</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator*</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>aa5b56df6f08f28b03a372b6870076e57</anchor>
      <arglist>(const F &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator/</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a7ab0322d49b2505a201ae2ba805abf72</anchor>
      <arglist>(const F &amp;f) const</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator*</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a354b46a0b3bd4fbe79909a8bd8dd2728</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator/</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>acea0b168d4facaa99019b312be60ba9e</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator+</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a0744d435516e8aa9586c4e62f0bce65f</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>This</type>
      <name>operator-</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>ab8ae2d81b843b2afc435cebadee6104a</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>aad065ca458f2aa97814c757cf1682eac</anchor>
      <arglist>(int d, int power=1)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>absZ</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a29ba284543d52e29875575d22332be1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>absOMZ</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a07e6e73e436bd8a593a58f942ce8355a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>sameMultiIndex</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a40164a70b25b49ddb15dad2ff7afa5f2</anchor>
      <arglist>(const This &amp;ind)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a2319b3cac40c7756de1736ab988f1571</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>a5edadb22312d2f5d219a788f4dc96f8c</anchor>
      <arglist>(std::ostream &amp;, const This &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Nedelec1stKindCubeLocalFiniteElement</name>
    <filename>a02089.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::Nedelec1stKindCubeLocalBasis&lt; D, R, dim, k &gt;, Impl::Nedelec1stKindCubeLocalCoefficients&lt; dim, k &gt;, Impl::Nedelec1stKindCubeLocalInterpolation&lt; Impl::Nedelec1stKindCubeLocalBasis&lt; D, R, dim, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ac734e2b126f2848c9092963386c90c67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nedelec1stKindCubeLocalFiniteElement</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a67b32adeff46492ccb3df13e00e9b941</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nedelec1stKindCubeLocalFiniteElement</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>ae9f333c4ecd52c33758e86c0615883c4</anchor>
      <arglist>(std::bitset&lt; power(2, dim-1) *dim &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a6fef178d0f47e1fe3f35876b82668f62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a0f08d1e8a1f1b2d1fc83fa65462b5f22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a94f04e442e8e4e6b97bfc5a21fbc6258</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a52d59ecc07346ab0ad597a23a893d080</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02089.html</anchorfile>
      <anchor>a6e0b7432993bffb4b17f5162998de0cd</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Nedelec1stKindSimplexLocalFiniteElement</name>
    <filename>a02105.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; Impl::Nedelec1stKindSimplexLocalBasis&lt; D, R, dim, k &gt;, Impl::Nedelec1stKindSimplexLocalCoefficients&lt; dim, k &gt;, Impl::Nedelec1stKindSimplexLocalInterpolation&lt; Impl::Nedelec1stKindSimplexLocalBasis&lt; D, R, dim, k &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a417455012a1d6f09b66a24b73c37b08e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nedelec1stKindSimplexLocalFiniteElement</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a34e3b253900f036c7cfacfbfed54162a</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Nedelec1stKindSimplexLocalFiniteElement</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a6a68515e824b61b568d98acb4f0e99a6</anchor>
      <arglist>(std::bitset&lt; dim *(dim+1)/2 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a9abd04dd78c02f58e589630ab980cf7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>aff0bfff4955da86cc49e3c65ea56fcfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>abc4a09dd33a5e5a687754f1765e129e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a2f8aaa1e2adf505dc6541dcc4c139899</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02105.html</anchorfile>
      <anchor>a6ba448c3318304358a22b1f63f070dcb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecBasisFactory</name>
    <filename>a02109.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DefaultBasisFactory&lt; NedelecPreBasisFactory&lt; dim, CF &gt;, NedelecL2InterpolationFactory&lt; dim, CF &gt;, dim, dim, SF, CF &gt;</base>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NedelecPreBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NedelecL2InterpolationFactory&lt; dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecCoefficientsFactory</name>
    <filename>a02121.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>ad255ca4902ca6d2423f82cb4a7c6f1b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const LocalCoefficientsContainer</type>
      <name>Object</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a7c743fb072206d3cb0d5b113eb50dc00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>add563f065118c580d1af959e09de98bb</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a797dc04aa51627cdd56c61095b6aa8a6</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>afa2c5616e2e9b2bdb0b66580062122a5</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NedelecL2Interpolation</name>
    <filename>a02145.html</filename>
    <templarg>dimension</templarg>
    <templarg></templarg>
    <base>Dune::InterpolationHelper</base>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a24faa983ebdf6a55152a70b4fdca78e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NedelecL2InterpolationBuilder&lt; dimension, Field &gt;</type>
      <name>Builder</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a6b785895d9a84a9817e2317321708f7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Builder::FaceTangents</type>
      <name>FaceTangents</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a1b7f2fb553c2e62689a0949befb55b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2Interpolation</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a92552ae1d3fa1c767d0cde2db62c34c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a2821ab060434087c06c1bad74b0fe8c2</anchor>
      <arglist>(const Function &amp;function, Vector &amp;coefficients) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Vector &gt;().resize(1)), void &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a7efe3498658e79261dfa69bdd87d1e65</anchor>
      <arglist>(const Basis &amp;basis, Matrix &amp;matrix) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Matrix &gt;().rowPtr(0)), typename Matrix::Field * &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>ad07fb5ff23f27c3c68168760face6a2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a37dcdbf5ef08ad733e7fe4f00de2934b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>abe5dbefd440d8567b36b1a4ac35d01e4</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalKeys</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>adc9b1692c0011040c67db1c7974614ff</anchor>
      <arglist>(std::vector&lt; LocalKey &gt; &amp;keys) const</arglist>
    </member>
    <member kind="variable">
      <type>Builder</type>
      <name>builder_</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>aed993e7a4989c3757a370898dd89c4c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>order_</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a6a17afb140b5ce8344935d993a2ce13f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>size_</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a907f4ddccda801165d7dc36af64d61af</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a6500165122591362695b5df7e1694750</anchor>
      <arglist>(typename Base::template Helper&lt; Func, Container, type &gt; &amp;func) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecL2InterpolationBuilder</name>
    <filename>a02125.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension, Field &gt;</type>
      <name>TestBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5e0812e97efdd61099b5e35eb8c37242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestBasisFactory::Object</type>
      <name>TestBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a34dc42d5cc1c98fbe060889a2c5226bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension-1, Field &gt;</type>
      <name>TestFaceBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a7262c93d8a2d9267028e68dd719f015a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestFaceBasisFactory::Object</type>
      <name>TestFaceBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a410d55ec03dee5bbdcda6108f8841d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; 1, Field &gt;</type>
      <name>TestEdgeBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ab3c16dd6936c16f636b41c8d30b20761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestEdgeBasisFactory::Object</type>
      <name>TestEdgeBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a4ab9a7eb8785edf7894d68c15f473e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Tangent</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a350cd4679353d3c99956ae7ed73f39a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Normal</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a4e953e30a292d4fd0a9cd84c1ad6dc19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; FieldVector&lt; Field, dimension &gt;, dim-1 &gt;</type>
      <name>FaceTangents</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aaa911e6c3a772a5c26ba765831190f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aeed30d58fd14d0c3d68f756748d2e0c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ae47d457a809fd77c2f03738c6b9c7de2</anchor>
      <arglist>(const NedelecL2InterpolationBuilder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>abad377f45738583ef0befa054f86f70f</anchor>
      <arglist>(NedelecL2InterpolationBuilder &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a0dad4be8a1fc42604e6b339cb1a81017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>adf34361b3e3672b098e8018ffb2d468a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a2741a284f1793031502ec2697341055a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac858297f147b4c3046c21840f22d959e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>faceSize</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a8b868fe7e36190ab6e997e60bfa60aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>edgeSize</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ada5c0824203c8d60d1efc5bfc367d1b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestBasis *</type>
      <name>testBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a20e13d6aa9c971510a3fb51776a6ee57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestFaceBasis *</type>
      <name>testFaceBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac852b294276354b8ca6361df0260e77b</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>TestEdgeBasis *</type>
      <name>testEdgeBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a70e2cfb4094e8474050906f581446f33</anchor>
      <arglist>(unsigned int e) const</arglist>
    </member>
    <member kind="function">
      <type>const Tangent &amp;</type>
      <name>edgeTangent</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5156c945814164e3058dd9a30e2e6305</anchor>
      <arglist>(unsigned int e) const</arglist>
    </member>
    <member kind="function">
      <type>const FaceTangents &amp;</type>
      <name>faceTangents</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a9e3dcaa52987d995af8f903b756fe9a8</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>const Normal &amp;</type>
      <name>normal</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>adc285ebb4e7bbae6bcb24470626152c4</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a567e7be452fb76c07bc06222069ce7b3</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aeae6108a5773c7d62f3752ea5cfaa1c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NedelecL2InterpolationBuilder&lt; dimension, Field &gt;</name>
    <filename>a02125.html</filename>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension, Field &gt;</type>
      <name>TestBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5e0812e97efdd61099b5e35eb8c37242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestBasisFactory::Object</type>
      <name>TestBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a34dc42d5cc1c98fbe060889a2c5226bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension-1, Field &gt;</type>
      <name>TestFaceBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a7262c93d8a2d9267028e68dd719f015a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestFaceBasisFactory::Object</type>
      <name>TestFaceBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a410d55ec03dee5bbdcda6108f8841d85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; 1, Field &gt;</type>
      <name>TestEdgeBasisFactory</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ab3c16dd6936c16f636b41c8d30b20761</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestEdgeBasisFactory::Object</type>
      <name>TestEdgeBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a4ab9a7eb8785edf7894d68c15f473e33</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Tangent</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a350cd4679353d3c99956ae7ed73f39a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Normal</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a4e953e30a292d4fd0a9cd84c1ad6dc19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; FieldVector&lt; Field, dimension &gt;, dim-1 &gt;</type>
      <name>FaceTangents</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aaa911e6c3a772a5c26ba765831190f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aeed30d58fd14d0c3d68f756748d2e0c2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ae47d457a809fd77c2f03738c6b9c7de2</anchor>
      <arglist>(const NedelecL2InterpolationBuilder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>abad377f45738583ef0befa054f86f70f</anchor>
      <arglist>(NedelecL2InterpolationBuilder &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NedelecL2InterpolationBuilder</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a0dad4be8a1fc42604e6b339cb1a81017</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>adf34361b3e3672b098e8018ffb2d468a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a2741a284f1793031502ec2697341055a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac858297f147b4c3046c21840f22d959e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>faceSize</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a8b868fe7e36190ab6e997e60bfa60aa8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>edgeSize</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ada5c0824203c8d60d1efc5bfc367d1b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestBasis *</type>
      <name>testBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a20e13d6aa9c971510a3fb51776a6ee57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestFaceBasis *</type>
      <name>testFaceBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>ac852b294276354b8ca6361df0260e77b</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>TestEdgeBasis *</type>
      <name>testEdgeBasis</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a70e2cfb4094e8474050906f581446f33</anchor>
      <arglist>(unsigned int e) const</arglist>
    </member>
    <member kind="function">
      <type>const Tangent &amp;</type>
      <name>edgeTangent</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a5156c945814164e3058dd9a30e2e6305</anchor>
      <arglist>(unsigned int e) const</arglist>
    </member>
    <member kind="function">
      <type>const FaceTangents &amp;</type>
      <name>faceTangents</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a9e3dcaa52987d995af8f903b756fe9a8</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>const Normal &amp;</type>
      <name>normal</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>adc285ebb4e7bbae6bcb24470626152c4</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>a567e7be452fb76c07bc06222069ce7b3</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02125.html</anchorfile>
      <anchor>aeae6108a5773c7d62f3752ea5cfaa1c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecL2InterpolationFactory</name>
    <filename>a02113.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>NedelecL2InterpolationBuilder&lt; dim, Field &gt;</type>
      <name>Builder</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a73e9df03f94d4372496e59bc938a6397</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const NedelecL2Interpolation&lt; dim, Field &gt;</type>
      <name>Object</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a33129680afddd132945a235c92385988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>aa3402d27d33b924b579ffe69faecd88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Object &gt;::type</type>
      <name>NonConstObject</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>aa736944ea49099f573d9f8c885c52681</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>a1b74ff2f032f2ec9070fea259a381750</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>aa4bc097f4b9ff6a2b116f6b8531f26e6</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02113.html</anchorfile>
      <anchor>abde4de4ff3a635b948f00b33e33f3e89</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecPreBasisFactory</name>
    <filename>a02153.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::NedelecPreBasisFactory::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dim, Field &gt;</type>
      <name>MBasisFactory</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>af2b77dfb4e6ccd906c7e0f08a6549287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MBasisFactory::Object</type>
      <name>MBasis</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a6e7650772a8a41c74994393f168133c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MBasis &gt;</type>
      <name>EvalMBasis</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>aa572acfc2bf0b999a69ef45fc7953006</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; EvalMBasis, SparseCoeffMatrix&lt; Field, dim &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a9ce588210db51e576312faf296ff7601</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a9fc0c3247ad2ee9f76bee9f27ed53f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>affde70d6d84d70c79458d0e7f3d47f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a921ba3a423afb5f991e0aea85e62cdbf</anchor>
      <arglist>(Key order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a0a233ce7257f5a234bfca9b0bd997ca6</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NedelecVecMatrix</name>
    <filename>a02149.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>MI</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a2c5575b2b1f0501f4d0f07d7ef672d90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasis&lt; geometryId, MI &gt;</type>
      <name>MIBasis</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a55b456bc113c5ef58d16b26760ccfbfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NedelecVecMatrix</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a1dc77d95835a654139630c830d3b039b</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NedelecVecMatrix</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a482a48f717b19ac7a56be33832701c94</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a467a17e2a867181cf3de7b9b9e09366e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>ab122f51fff76e7c7910b492aafe30563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a9070102e1c4d6e8631f22670c0a7a4b5</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>row_</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a3f677131716491244e09799feb770ba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>col_</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a59ee3f7521b90859fb4034de1010e17a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Field **</type>
      <name>mat_</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>ae53f42f5d6e8c3b2dc92c9dc1bea4267</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>aa95067971ba2e3ebde06df8a8d8fce16</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dim</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a80917e88a21468772a4889e450fbba22</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ONBCompute::ONBMatrix</name>
    <filename>a02173.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <base>LFEMatrix&lt; scalar_t &gt;</base>
    <member kind="typedef">
      <type>std::vector&lt; scalar_t &gt;</type>
      <name>vec_t</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a36f0eb27f29f4af078a584c739746945</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::LFEMatrix&lt; scalar_t &gt;</type>
      <name>mat_t</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>adcec18ec402b7f26a1f2b33eb578eebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>scalar_t</type>
      <name>Field</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>afb5d6632cf805b63022433c4c067fe0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ONBMatrix</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a120b44f5bf625d3cd765b3b7dea47467</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a8e4272d99d631a974bd499ccb328a825</anchor>
      <arglist>(unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a735f13ab1417d137ec7da8d771becba2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator RealMatrix &amp;</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a262982dfe33629de4126ccb21b5beaf9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a1aae30f82b9afddc70e1221051ecd0f0</anchor>
      <arglist>(const unsigned int row, const unsigned int col) const</arglist>
    </member>
    <member kind="function">
      <type>Field &amp;</type>
      <name>operator()</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>ab096af9375ac277448d9a00e14d373c4</anchor>
      <arglist>(const unsigned int row, const unsigned int col)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a72a4e06367f3878cbbf4e889c09fbd1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a2688231bef0a89f613c769ec68976ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a8386133f1539677ce59e1511dfdaad92</anchor>
      <arglist>(const unsigned int row) const</arglist>
    </member>
    <member kind="function">
      <type>Field *</type>
      <name>rowPtr</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa97027d83635e1ee4725464549fb0b93</anchor>
      <arglist>(const unsigned int row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>a392be5e0b287cbfd527dd5578ac537cc</anchor>
      <arglist>(const unsigned int rows, const unsigned int cols)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>invert</name>
      <anchorfile>a02697.html</anchorfile>
      <anchor>aa6efdc85eadae8419ecfd765d8ba4e74</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OrthonormalBasisFactory</name>
    <filename>a02161.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::OrthonormalBasisFactory::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a0f33102d38f3b7e37a426946641f28dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a79eecc2b6e74456cc3d2bc2b2116569e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EvaluationBasisFactory&lt; dimension, StorageField &gt;::Type</type>
      <name>MonomialBasisProviderType</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a5424d40a2d53fc71673aa16dfe4530f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisProviderType::Object</type>
      <name>MonomialBasisType</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af2f85190551dcb6f674f7129777f9e46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseCoeffMatrix&lt; StorageField, 1 &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a0080ad8340015ad8e63985c214f8104b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasisType &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a09d069c32a9409c65d3595ba3c9c42ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasis&lt; Evaluator, CoefficientMatrix &gt;</type>
      <name>Basis</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a303cc46804a788f8369190a764c739e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Key</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>acd9d61881a4108c48cff5ae2200f2d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a942ee0b54d01a8b60c1691c7728e60d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a7f337a84a95b2b4bf936501a863d2207</anchor>
      <arglist>(const unsigned int order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>aebf605760722f0b21e4f8b83d8082ef5</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>aed4460cb4e6818edeba2070f785e43d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>SimplexGeometry</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a1c9a318104a3e84e9ab79fbd263d8e5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OrthonormalLocalFiniteElement</name>
    <filename>a02177.html</filename>
    <templarg>dimDomain</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>GenericLocalFiniteElement&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;, LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt; &gt;</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;, LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGLocalCoefficientsFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt; &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalL2InterpolationFactory&lt; OrthonormalBasisFactory&lt; dimDomain, R, R &gt;, true &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OrthonormalLocalFiniteElement</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a561236fe12695acd66c9cedcd8639722</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P0LocalBasis</name>
    <filename>a01921.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, d, Dune::FieldVector&lt; D, d &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, d &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>aede0b6b49a908b61406f18e2fb674af6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>aec9777d685108f6b53a1eb5c6b8c9e5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a7cda35c8e0e718002e742dae7b6fbc5e</anchor>
      <arglist>(const typename Traits::DomainType &amp;, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a6dd71243021898d7ac4a066a69ec2821</anchor>
      <arglist>(const typename Traits::DomainType &amp;, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a961faebcdc3afd23478c847a849d36c3</anchor>
      <arglist>(const std::array&lt; unsigned int, d &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a59863a5a30ee92d3b653e763679773c9</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P0LocalCoefficients</name>
    <filename>a01925.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>P0LocalCoefficients</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>a3ec7114468afa402cd81200146e35a77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>aba652021dbb57aff064a2c2b401d5297</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01925.html</anchorfile>
      <anchor>ad2f9e11abca473922946d45da2ab37f9</anchor>
      <arglist>([[maybe_unused]] std::size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>a582b0936edfbc6c91c1b14385882f664</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P0LocalFiniteElement</name>
    <filename>a01933.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; P0LocalBasis&lt; D, R, d &gt;, P0LocalCoefficients, P0LocalInterpolation&lt; P0LocalBasis&lt; D, R, d &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a9bc16b3d65dfc8fd5213b703672cd59c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P0LocalFiniteElement</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a075410a7b141cb6cda75ed163eb7823f</anchor>
      <arglist>(const GeometryType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>afbc2d28be20cff67d31bcfed55b004f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>af66347a72bdba6c1414a517db276a302</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a0116e6f8308f747e01b941f2f3a89083</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a109e0fd2ee74828d790af9b863e46876</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a2f32d14e42e9071cba7957547f091a16</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P0LocalInterpolation</name>
    <filename>a01929.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>P0LocalInterpolation</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a01ebbc14c68bcff896ee8228bd8cb324</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a03938fca73b85b64477a0cf662523b55</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>P0LocalInterpolation&lt; Dune::P0LocalBasis&lt; D, R, d &gt; &gt;</name>
    <filename>a01929.html</filename>
    <member kind="function">
      <type></type>
      <name>P0LocalInterpolation</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a01ebbc14c68bcff896ee8228bd8cb324</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a01929.html</anchorfile>
      <anchor>a03938fca73b85b64477a0cf662523b55</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Pk1DFiniteElement</name>
    <filename>a01937.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <base>Dune::FiniteElementInterface</base>
    <class kind="struct">Dune::Pk1DFiniteElement::Traits</class>
    <member kind="function">
      <type></type>
      <name>Pk1DFiniteElement</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a1497583eaeb62cbaac54d06c681bddb0</anchor>
      <arglist>(const Geometry &amp;geometry, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>ab70d28f86e8bfa8cca15ab26aa4b241d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>a0f020c79fcde93bbeb80ae61a211636b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>abe7f5fb459286c78ad931fd0f715e640</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GeometryType &amp;</type>
      <name>type</name>
      <anchorfile>a01937.html</anchorfile>
      <anchor>aec3b1c09a062dda1f538c2dcaa1f3029</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Pk1DFiniteElementFactory</name>
    <filename>a01945.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>Pk1DFiniteElement&lt; Geometry, RF, k &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>abea50cf4e823c076fe1103d87b99e81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01945.html</anchorfile>
      <anchor>a16ff2d5de8e9780dff0825f1e065eb48</anchor>
      <arglist>(const Geometry &amp;geometry, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Pk2DFiniteElement</name>
    <filename>a01949.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <base>Dune::FiniteElementInterface</base>
    <class kind="struct">Dune::Pk2DFiniteElement::Traits</class>
    <member kind="function">
      <type></type>
      <name>Pk2DFiniteElement</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a51eb2a0413bd6271bcfd6c3894cb8475</anchor>
      <arglist>(const Geometry &amp;geometry, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>adeb8298a41241ce5977e7200da2e4810</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a7745245ade6095b85ceabb0a2a0a865e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>ae23e0bf9573da6708791f763fe1094ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GeometryType &amp;</type>
      <name>type</name>
      <anchorfile>a01949.html</anchorfile>
      <anchor>a2e8f54f6c3e3271f1195243c5ac597d8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Pk2DFiniteElementFactory</name>
    <filename>a01957.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>k</templarg>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>Pk2DFiniteElement&lt; Geometry, RF, k &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>a8da50dc3c563603a6fad9c0e2c611f30</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01957.html</anchorfile>
      <anchor>af60c500e1825e67cf616f19a6d177e5b</anchor>
      <arglist>(const Geometry &amp;geometry, const VertexOrder &amp;vertexOrder)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PolynomialBasis</name>
    <filename>a02777.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::PolynomialBasis::Convert</class>
    <class kind="struct">Dune::PolynomialBasis::Convert&lt; dummy, DomainVector &gt;</class>
    <member kind="typedef">
      <type>CM</type>
      <name>CoefficientMatrix</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8169b6d5a030508931ea880f6af27fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoefficientMatrix::Field</type>
      <name>StorageField</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0f0e1ec512613cc433273e90ec3683ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dimension, FieldVector&lt; D, dimension &gt;, R, dimRange, FieldVector&lt; R, dimRange &gt;, FieldMatrix&lt; R, dimRange, dimension &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8cf83bc07f5c9455365e28b6c767dcc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Evaluator::Basis</type>
      <name>Basis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a308271c234c4cc9dd997a3c1d979a98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Evaluator::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a14c7c815bcdbf9d16d02c860d515d904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; FieldMatrix&lt; Fy, dimension, dimension &gt;, dimRange &gt;</type>
      <name>HessianFyType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ad3aacd6b061de4343aa477f02dd5d7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFyType&lt; R &gt;</type>
      <name>HessianType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a82629524d06e54936156f66782473f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolynomialBasis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ad02eb730fe0df251df9e2610a853b1ef</anchor>
      <arglist>(const Basis &amp;basis, const CoefficientMatrix &amp;coeffMatrix, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a2b62619d331f67926f53205c8ab5e05d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoefficientMatrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a8822a2bbc6f3f95a30eccc8255ad38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ae335cf5541e9e58ec3ce2a35430e6ade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a70de2fe63c9780bb5b9b77532e399458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a507561793c515c6b53e31eae34662b00</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a58eaf713d41a1d68e90cfbc280931dd6</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0a1a92f14ff114a5847f4d70ff7a9029</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; HessianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afa8023ec83cc771711e06f6c10982e80</anchor>
      <arglist>(const std::array&lt; unsigned int, dimension &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a760d19e4e2986134e87d3f7b6e1ba464</anchor>
      <arglist>(const DomainVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a09d3b607405c8342d38635f8dbe69c39</anchor>
      <arglist>(const DVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>abafb8bcfb2af3b52c211568fbd043269</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a03b74853ce47c17c447d5dfa045bfe68</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; Fy, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a02047509905b6bbe6834f69e775c3afb</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a320a612afcecb9a893c0cd13ac4e447d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>aec4e2a7fba34c8754fbb27961e0f0641</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; FieldVector&lt; Fy, LFETensor&lt; Fy, dimension, deriv &gt;::size &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a352c08be8a034eb506da23a4a65fc331</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; LFETensor&lt; Fy, dimension, deriv &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a395ff199d406e8da45005c01a9345d60</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldMatrix&lt; Fy, dimRange, dimension &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a12e1b419d3c5c6c3549e9539673425d4</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8f63c0a0faf852ec692c9960f6e39e92</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; HessianFyType&lt; Fy &gt;&gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a789d7354986497836991152ed43829cb</anchor>
      <arglist>(const DVector &amp;x, HVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a6c97b678779352db27cdd9044d214cb2</anchor>
      <arglist>(std::vector&lt; Fy &gt; &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a57d586d9f7fcabf28dc83afe9b2597d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a101080cf272d07a1a3f7f31690aaa6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolynomialBasis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a05eea936ded10091435d27f012a282f2</anchor>
      <arglist>(const PolynomialBasis &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PolynomialBasis &amp;</type>
      <name>operator=</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a1c55ebfbfb9f612ea9a2269b0ee53af6</anchor>
      <arglist>(const PolynomialBasis &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a4a6e55455a0249581256bfdaf4eb11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CoefficientMatrix *</type>
      <name>coeffMatrix_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a63c9fd9f3557b8c067a905b642541c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Evaluator</type>
      <name>eval_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afe68561845850bd6a7060f1f3cc69204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a1788c01a541b2d20e1855a9e13165a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>size_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afc7d36063e8463a3673c2bf240371bcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PolynomialBasis&lt; Eval, SparseCoeffMatrix&lt; typename Eval::Field, Eval::dimRange &gt;, double, double &gt;</name>
    <filename>a02777.html</filename>
    <member kind="typedef">
      <type>SparseCoeffMatrix&lt; typename Eval::Field, Eval::dimRange &gt;</type>
      <name>CoefficientMatrix</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8169b6d5a030508931ea880f6af27fbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoefficientMatrix::Field</type>
      <name>StorageField</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0f0e1ec512613cc433273e90ec3683ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; double, dimension, FieldVector&lt; double, dimension &gt;, double, dimRange, FieldVector&lt; double, dimRange &gt;, FieldMatrix&lt; double, dimRange, dimension &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8cf83bc07f5c9455365e28b6c767dcc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Evaluator::Basis</type>
      <name>Basis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a308271c234c4cc9dd997a3c1d979a98e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Evaluator::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a14c7c815bcdbf9d16d02c860d515d904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; FieldMatrix&lt; Fy, dimension, dimension &gt;, dimRange &gt;</type>
      <name>HessianFyType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ad3aacd6b061de4343aa477f02dd5d7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFyType&lt; double &gt;</type>
      <name>HessianType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a82629524d06e54936156f66782473f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolynomialBasis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ad02eb730fe0df251df9e2610a853b1ef</anchor>
      <arglist>(const Basis &amp;basis, const CoefficientMatrix &amp;coeffMatrix, unsigned int size)</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a2b62619d331f67926f53205c8ab5e05d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoefficientMatrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a8822a2bbc6f3f95a30eccc8255ad38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ae335cf5541e9e58ec3ce2a35430e6ade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a70de2fe63c9780bb5b9b77532e399458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a507561793c515c6b53e31eae34662b00</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a58eaf713d41a1d68e90cfbc280931dd6</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0a1a92f14ff114a5847f4d70ff7a9029</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; HessianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afa8023ec83cc771711e06f6c10982e80</anchor>
      <arglist>(const std::array&lt; unsigned int, dimension &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a760d19e4e2986134e87d3f7b6e1ba464</anchor>
      <arglist>(const DomainVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a09d3b607405c8342d38635f8dbe69c39</anchor>
      <arglist>(const DVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>abafb8bcfb2af3b52c211568fbd043269</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a03b74853ce47c17c447d5dfa045bfe68</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; Fy, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a02047509905b6bbe6834f69e775c3afb</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a320a612afcecb9a893c0cd13ac4e447d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>aec4e2a7fba34c8754fbb27961e0f0641</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; FieldVector&lt; Fy, LFETensor&lt; Fy, dimension, deriv &gt;::size &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a352c08be8a034eb506da23a4a65fc331</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; LFETensor&lt; Fy, dimension, deriv &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a395ff199d406e8da45005c01a9345d60</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldMatrix&lt; Fy, dimRange, dimension &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a12e1b419d3c5c6c3549e9539673425d4</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8f63c0a0faf852ec692c9960f6e39e92</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; HessianFyType&lt; Fy &gt;&gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a789d7354986497836991152ed43829cb</anchor>
      <arglist>(const DVector &amp;x, HVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a6c97b678779352db27cdd9044d214cb2</anchor>
      <arglist>(std::vector&lt; Fy &gt; &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a57d586d9f7fcabf28dc83afe9b2597d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a101080cf272d07a1a3f7f31690aaa6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>PolynomialBasis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a05eea936ded10091435d27f012a282f2</anchor>
      <arglist>(const PolynomialBasis &amp;other)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>PolynomialBasis &amp;</type>
      <name>operator=</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a1c55ebfbfb9f612ea9a2269b0ee53af6</anchor>
      <arglist>(const PolynomialBasis &amp;)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a4a6e55455a0249581256bfdaf4eb11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const CoefficientMatrix *</type>
      <name>coeffMatrix_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a63c9fd9f3557b8c067a905b642541c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Evaluator</type>
      <name>eval_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afe68561845850bd6a7060f1f3cc69204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a1788c01a541b2d20e1855a9e13165a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>size_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afc7d36063e8463a3673c2bf240371bcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PolynomialBasisWithMatrix</name>
    <filename>a02789.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>PolynomialBasis&lt; Eval, SparseCoeffMatrix&lt; typename Eval::Field, Eval::dimRange &gt;, double, double &gt;</base>
    <member kind="typedef">
      <type>CM</type>
      <name>CoefficientMatrix</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a42827b7377ec38d8612f69b58e556adc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Basis</type>
      <name>Basis</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a8ae7076b84bbc0d53d83d703d20bce73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoefficientMatrix::Field</type>
      <name>StorageField</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0f0e1ec512613cc433273e90ec3683ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; double, dimension, FieldVector&lt; double, dimension &gt;, double, dimRange, FieldVector&lt; double, dimRange &gt;, FieldMatrix&lt; double, dimRange, dimension &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8cf83bc07f5c9455365e28b6c767dcc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Evaluator::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a14c7c815bcdbf9d16d02c860d515d904</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; FieldMatrix&lt; Fy, dimension, dimension &gt;, dimRange &gt;</type>
      <name>HessianFyType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ad3aacd6b061de4343aa477f02dd5d7a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HessianFyType&lt; double &gt;</type>
      <name>HessianType</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a82629524d06e54936156f66782473f78</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PolynomialBasisWithMatrix</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a1fe5bb5dbc985464fb0f4a949f193d10</anchor>
      <arglist>(const Basis &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>acdbc3a46c37668ce4644406cd63caae9</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a02789.html</anchorfile>
      <anchor>a8a33a78c35a23785ee349954ed65bf8f</anchor>
      <arglist>(const Matrix &amp;matrix, int size)</arglist>
    </member>
    <member kind="function">
      <type>const Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a2b62619d331f67926f53205c8ab5e05d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CoefficientMatrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a8822a2bbc6f3f95a30eccc8255ad38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>ae335cf5541e9e58ec3ce2a35430e6ade</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a70de2fe63c9780bb5b9b77532e399458</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a507561793c515c6b53e31eae34662b00</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a58eaf713d41a1d68e90cfbc280931dd6</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateHessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a0a1a92f14ff114a5847f4d70ff7a9029</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, std::vector&lt; HessianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afa8023ec83cc771711e06f6c10982e80</anchor>
      <arglist>(const std::array&lt; unsigned int, dimension &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a760d19e4e2986134e87d3f7b6e1ba464</anchor>
      <arglist>(const DomainVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a09d3b607405c8342d38635f8dbe69c39</anchor>
      <arglist>(const DVector &amp;x, F *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>abafb8bcfb2af3b52c211568fbd043269</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a03b74853ce47c17c447d5dfa045bfe68</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; Fy, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a02047509905b6bbe6834f69e775c3afb</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a320a612afcecb9a893c0cd13ac4e447d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>aec4e2a7fba34c8754fbb27961e0f0641</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; FieldVector&lt; Fy, LFETensor&lt; Fy, dimension, deriv &gt;::size &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateSingle</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a352c08be8a034eb506da23a4a65fc331</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldVector&lt; LFETensor&lt; Fy, dimension, deriv &gt;, dimRange &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a395ff199d406e8da45005c01a9345d60</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; FieldMatrix&lt; Fy, dimRange, dimension &gt; &gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>jacobian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a12e1b419d3c5c6c3549e9539673425d4</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a8f63c0a0faf852ec692c9960f6e39e92</anchor>
      <arglist>(const DomainVector &amp;x, std::vector&lt; HessianFyType&lt; Fy &gt;&gt; &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hessian</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a789d7354986497836991152ed43829cb</anchor>
      <arglist>(const DVector &amp;x, HVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a6c97b678779352db27cdd9044d214cb2</anchor>
      <arglist>(std::vector&lt; Fy &gt; &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a57d586d9f7fcabf28dc83afe9b2597d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a101080cf272d07a1a3f7f31690aaa6ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Basis &amp;</type>
      <name>basis_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a4a6e55455a0249581256bfdaf4eb11b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Evaluator</type>
      <name>eval_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afe68561845850bd6a7060f1f3cc69204</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a9a1788c01a541b2d20e1855a9e13165a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>size_</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>afc7d36063e8463a3673c2bf240371bcf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerBasis</name>
    <filename>a01993.html</filename>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <class kind="struct">Dune::PowerBasis::Traits</class>
    <member kind="function">
      <type></type>
      <name>PowerBasis</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a1bae676b7c6a9234c80d4c72448a7bd1</anchor>
      <arglist>(const Backend &amp;backend_)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a3589facaf7bfcf8e34d333d876682072</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>aebded1b5f2ef81fa973ffa57a3e1b3f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>ad2c5c7f7407613f2b49905870036f275</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a76aeba8cf92a1b8ff0935ff801ddcb51</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a4c9c3221adc3f6c427a14b4191b74f6c</anchor>
      <arglist>(const std::array&lt; unsigned int, Backend::Traits::dimDomainGlobal &gt; &amp;order, const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PowerBasis&lt; typename Backend::Traits::Basis, dimR &gt;</name>
    <filename>a01993.html</filename>
    <member kind="function">
      <type></type>
      <name>PowerBasis</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a1bae676b7c6a9234c80d4c72448a7bd1</anchor>
      <arglist>(const typename Backend::Traits::Basis &amp;backend_)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a3589facaf7bfcf8e34d333d876682072</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>aebded1b5f2ef81fa973ffa57a3e1b3f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>ad2c5c7f7407613f2b49905870036f275</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a76aeba8cf92a1b8ff0935ff801ddcb51</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a4c9c3221adc3f6c427a14b4191b74f6c</anchor>
      <arglist>(const std::array&lt; unsigned int, Backend::Traits::dimDomainGlobal &gt; &amp;order, const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerCoefficients</name>
    <filename>a02001.html</filename>
    <base>Dune::CoefficientsInterface</base>
    <member kind="function">
      <type></type>
      <name>PowerCoefficients</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a636a6d29950f37192b90c9f8d2a6fa0a</anchor>
      <arglist>(const Backend &amp;backend, std::size_t power)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a048033ba7bff71d3f2293ce13160a9be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02001.html</anchorfile>
      <anchor>a1862268bd0061ac48886806a1fce9231</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerFiniteElement</name>
    <filename>a02013.html</filename>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <class kind="struct">Dune::PowerFiniteElement::Traits</class>
    <member kind="function">
      <type></type>
      <name>PowerFiniteElement</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a7a3c305959b5c9c0fa6fe5713b83bb6f</anchor>
      <arglist>(const Backend &amp;backend_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerFiniteElement</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>ad250fa2db3f59c3254f3a76052f00e15</anchor>
      <arglist>(const std::shared_ptr&lt; const Backend &gt; &amp;backendSPtr)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a358325c7d14ef9dc07af5deab59ff6ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a18fa60cff85074ecf532e03174641351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a7c2fcce32c82e2774f46884604980587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02013.html</anchorfile>
      <anchor>a36fc34510a0201cc5d4cf3fb3e6c2e40</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerFiniteElementFactory</name>
    <filename>a02021.html</filename>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <member kind="typedef">
      <type>PowerFiniteElement&lt; BackendFiniteElement, dimR &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>ae4b585e0f1efd94d4542a3c076833161</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a934f3db0c08176ff9b8bd5ff3ca597b2</anchor>
      <arglist>(const BackendFiniteElement &amp;backend) const</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a02021.html</anchorfile>
      <anchor>a06318c6c08c5220a479bd4d0a7172312</anchor>
      <arglist>(const std::shared_ptr&lt; const BackendFiniteElement &gt; &amp;backendSPtr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerInterpolation</name>
    <filename>a02005.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BasisTraits</type>
      <name>Traits</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>ac04c6af6c94906c6705e8d4a0e63af5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerInterpolation</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>af5d8a096d0100677cbf22bccf6795d90</anchor>
      <arglist>(const Backend &amp;backend_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a1225ef6c239978b831438694553659c2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PowerInterpolation&lt; typename Backend::Traits::Interpolation, typename Basis::Traits &gt;</name>
    <filename>a02005.html</filename>
    <member kind="typedef">
      <type>typename Basis::Traits</type>
      <name>Traits</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>ac04c6af6c94906c6705e8d4a0e63af5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerInterpolation</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>af5d8a096d0100677cbf22bccf6795d90</anchor>
      <arglist>(const typename Backend::Traits::Interpolation &amp;backend_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02005.html</anchorfile>
      <anchor>a1225ef6c239978b831438694553659c2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PQ22DLocalFiniteElement</name>
    <filename>a01961.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename LFEVariant::Traits</type>
      <name>Traits</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a0f7bd167b8750d8d13074081053618e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQ22DLocalFiniteElement</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aa385587fd07f0345ad5cd8f56a93682d</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQ22DLocalFiniteElement</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a6b38b1b73f99b5146e414118ad954973</anchor>
      <arglist>(const GeometryType &amp;gt, const std::vector&lt; unsigned int &gt; vertexmap)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ad0ed8dc915b99ee27b302b61be356473</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a61edea5e15bab3428e1086dd20c02146</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a48cb8c2f432716ac012ec485d5404cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ad7fd603a69a4be30a33aa61304a0325e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aef22aeafbbf96ec1ba3273d0fce9c55e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PQkLocalFiniteElementCache</name>
    <filename>a01977.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>FE</type>
      <name>FiniteElementType</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a2d5d58c1889950dbf4cb7ef5a3a0ee50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQkLocalFiniteElementCache</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a2197e6628aeff5c0bcc885aa81739ef8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PQkLocalFiniteElementCache</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>aef5c69d965218615656504f93968797a</anchor>
      <arglist>(const PQkLocalFiniteElementCache &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PQkLocalFiniteElementCache</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a97f64b054a70eb39f0bb7095bf632d9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElementType &amp;</type>
      <name>get</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>ae68025521c148bb42e2924ff54153bff</anchor>
      <arglist>(const GeometryType &amp;gt) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>P0LocalFiniteElement&lt; D, R, dim &gt;::Traits::LocalBasisType::Traits</type>
      <name>T</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a034527b1f2449c744968879c5ecb3af5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>LocalFiniteElementVirtualInterface&lt; T &gt;</type>
      <name>FE</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a0f14e0b09dab80eaf3c4836f275d26e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; GeometryType, FE * &gt;</type>
      <name>FEMap</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a434bd3f78d51d2b5d770494f85fb9fa8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FEMap</type>
      <name>cache_</name>
      <anchorfile>a01977.html</anchorfile>
      <anchor>a5f80eaa281f2df042a8eb041180a2b5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PQkLocalFiniteElementFactory</name>
    <filename>a01973.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>k</templarg>
    <member kind="typedef">
      <type>P0LocalFiniteElement&lt; D, R, dim &gt;::Traits::LocalBasisType::Traits</type>
      <name>T</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>af4818fbc3f3846aef56c13525a6531f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementVirtualInterface&lt; T &gt;</type>
      <name>FiniteElementType</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a843a9c7a7224069f22587f57a8fb3ea9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>P0LocalFiniteElement&lt; D, R, dim &gt;</type>
      <name>P0</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a81e6890245580d28d305c7358958a4ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PkLocalFiniteElement&lt; D, R, dim, k &gt;</type>
      <name>Pk</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>af29e90d6c650a775415d2d64c937beeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>QkLocalFiniteElement&lt; D, R, dim, k &gt;</type>
      <name>Qk</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a79d01f97ac0106fb1375802e09078db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FiniteElementType *</type>
      <name>create</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>aa972cfbef269f1c889ffd3cf32921e20</anchor>
      <arglist>(const GeometryType &amp;gt)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Precision</name>
    <filename>a02641.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Precision&lt; double &gt;</name>
    <filename>a02645.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>value</name>
      <anchorfile>a02645.html</anchorfile>
      <anchor>a51d2039a12952f46e50341d8d1c1b383</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Precision&lt; float &gt;</name>
    <filename>a02653.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>value</name>
      <anchorfile>a02653.html</anchorfile>
      <anchor>a58a6fe05a70819ca0f6c574f5e31aeec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Precision&lt; long double &gt;</name>
    <filename>a02649.html</filename>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>value</name>
      <anchorfile>a02649.html</anchorfile>
      <anchor>afb439eb54d235e8dbf78b56ed8270f3c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Q1FiniteElementFactory</name>
    <filename>a01981.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ScalarLocalToGlobalFiniteElementAdaptorFactory&lt; LagrangeCubeLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 1 &gt;, Geometry &gt;</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; LagrangeCubeLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 1 &gt;, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a6ef7e06069f097ea9a9faacc7c432c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Q1FiniteElementFactory</name>
      <anchorfile>a01981.html</anchorfile>
      <anchor>aec714cfff5d9de7d4b58e81e35d2c42d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a539026b5f64c563f68f1391c0563e9b9</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Q2FiniteElementFactory</name>
    <filename>a01985.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ScalarLocalToGlobalFiniteElementAdaptorFactory&lt; std::conditional&lt; Geometry::mydimension==1, PkLocalFiniteElement&lt; Geometry::ctype, RF, 1, 2 &gt;, QkLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 2 &gt; &gt;::type, Geometry &gt;</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; std::conditional&lt; Geometry::mydimension==1, PkLocalFiniteElement&lt; Geometry::ctype, RF, 1, 2 &gt;, QkLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 2 &gt; &gt;::type, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a6ef7e06069f097ea9a9faacc7c432c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Q2FiniteElementFactory</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a6506587d829bfb6eeea7879a76ab557a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a539026b5f64c563f68f1391c0563e9b9</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurek2DLocalBasis</name>
    <filename>a02185.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, FieldVector&lt; D, 2 &gt;, R, 1, FieldVector&lt; R, 1 &gt;, FieldMatrix&lt; R, 1, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a0b9d3e60381cc4b3557c16097705d87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a5a32aa15629b4d03dbed412a88a32483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a732aaac49f11890424bb23dc8705e826</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>af357cd9a2eaed8d902ee8be9b2d928ed</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a1ae2aa887150429388e1beec3ef36081</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a8a7883e87e69fbb64b0269a362af492f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RannacherTurek3DLocalBasis</name>
    <filename>a02189.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, FieldVector&lt; D, 3 &gt;, R, 1, FieldVector&lt; R, 1 &gt;, FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1d8dadb6ec68b84c3bfa4aead592e021</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a78a061da97590698d17be4c866ce20d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2749737e2929fe8cdf39f5b5b74e9716</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aab487457a7290348fad45b660e4125a3</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>af4bf13624813d1e12e69b230a662ffd6</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aaf71067dea850ae2fe2bbf68bdb7cf1a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurekLocalBasis</name>
    <filename>a02193.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurekLocalBasis&lt; D, R, 2 &gt;</name>
    <filename>a02197.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RannacherTurek2DLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, FieldVector&lt; D, 2 &gt;, R, 1, FieldVector&lt; R, 1 &gt;, FieldMatrix&lt; R, 1, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a0b9d3e60381cc4b3557c16097705d87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a5a32aa15629b4d03dbed412a88a32483</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a732aaac49f11890424bb23dc8705e826</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>af357cd9a2eaed8d902ee8be9b2d928ed</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a1ae2aa887150429388e1beec3ef36081</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a8a7883e87e69fbb64b0269a362af492f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurekLocalBasis&lt; D, R, 3 &gt;</name>
    <filename>a02201.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RannacherTurek3DLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, FieldVector&lt; D, 3 &gt;, R, 1, FieldVector&lt; R, 1 &gt;, FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a1d8dadb6ec68b84c3bfa4aead592e021</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a78a061da97590698d17be4c866ce20d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a2749737e2929fe8cdf39f5b5b74e9716</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aab487457a7290348fad45b660e4125a3</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>af4bf13624813d1e12e69b230a662ffd6</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>aaf71067dea850ae2fe2bbf68bdb7cf1a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurekLocalCoefficients</name>
    <filename>a02205.html</filename>
    <templarg>d</templarg>
    <member kind="function">
      <type></type>
      <name>RannacherTurekLocalCoefficients</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>a12f77bb1b34b47c77ce0796729295148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RannacherTurekLocalCoefficients</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>ab9b484e95962837a7e52687113c298de</anchor>
      <arglist>(const RannacherTurekLocalCoefficients &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>RannacherTurekLocalCoefficients &amp;</type>
      <name>operator=</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>ab2341b2a11e58180c2af6745f7b48441</anchor>
      <arglist>(const RannacherTurekLocalCoefficients &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>aed33d58d4ec6d0916a64e51fe941e1ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>a2b85d933934d425b3b4b1d7e5b15b8f3</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RannacherTurekLocalFiniteElement</name>
    <filename>a02181.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RannacherTurekLocalBasis&lt; D, R, d &gt;, RannacherTurekLocalCoefficients&lt; d &gt;, RannacherTurekLocalInterpolation&lt; D, R, d &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ae4f11659b63bfe3d6b5f47fd5a6962c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a676b7c88df2c45cd95f26b2c39e1d5fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ace3bd51197e0272072db55fb9ddd14ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ad405551346828871fc9539fad37f12a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a15493102ad3212b57cc0222e3454c477</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a3bbc3f922c75500c57448e76f22df4a5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RannacherTurekLocalInterpolation</name>
    <filename>a02209.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>d</templarg>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a16e167fed6e1ceb9b8ff5e3dff9917f0</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RaviartThomasBasisFactory</name>
    <filename>a02429.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DefaultBasisFactory&lt; RTPreBasisFactory&lt; dim, CF &gt;, RaviartThomasL2InterpolationFactory&lt; dim, CF &gt;, dim, dim, SF, CF &gt;</base>
    <member kind="typedef">
      <type>SF</type>
      <name>StorageField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7ed0a6b6c40fd5953fa333ddeab077e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>ComputeField</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a6c08b487d96e84eb2db9c4b165f8e5f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RTPreBasisFactory&lt; dim, CF &gt;</type>
      <name>PreBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a753598057bee3c055e6655521098f252</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::Object</type>
      <name>PreBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a9d059659656060597c874f405f64158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasL2InterpolationFactory&lt; dim, CF &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad2fca09d3a2f59be3900a015172b38a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Object</type>
      <name>Interpolation</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0264ba6d5a69ac5f078cfe4c585b24b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PreBasisFactory::template EvaluationBasisFactory&lt; dim, SF &gt;::Type</type>
      <name>MonomialBasisFactory</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ad5fefc8f2bfd5e16ebe46cc4dc78434e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisFactory::Object</type>
      <name>MonomialBasis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a966b9ca322670099d5dc0f9f0128c6ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MonomialBasis &gt;</type>
      <name>Evaluator</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab9ca2fddcf3b28da30d22c4f1d0e57b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; Evaluator, SparseCoeffMatrix&lt; SF, dimRange &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>aecdafd65c5711fd652a4ded54aa2b83d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>ab5c6c2ffae40b9d4db17b89703985b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InterpolationFactory::Key</type>
      <name>Key</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a78c94525827f31483240ce565d7404e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>af4b95724eaa47637d6ae3abc65e3adc7</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a448eae00744a81a677e629f3cbd88ff0</anchor>
      <arglist>(Object *object)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a7b109300a5ccbd2e6a7e3a00126d397d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02605.html</anchorfile>
      <anchor>a0feb1cf1da0d3b7f7e4bff5022233b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RaviartThomasCoefficientsFactory</name>
    <filename>a02437.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a0f59a628907e8e784ce3f5d511f6641e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const LocalCoefficientsContainer</type>
      <name>Object</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ae789ac13f4e099a3e9b7c72012317d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a5a0f8ab026c1b7dc3776ceac1e7e16a3</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a76ddce66db60619f3dc4f5a01e4b5e9a</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a5dd1de5786ea0f3342fa310de75d6114</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement</name>
    <filename>a02373.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>order</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 0 &gt;</name>
    <filename>a02377.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT0Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT0Cube2DLocalBasis&lt; D, R &gt;, RT0Cube2DLocalCoefficients, RT0Cube2DLocalInterpolation&lt; RT0Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a1fbd2abeebf36731efc7e14ff1edc27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a97f7ed254a89843dd685ee18bab33660</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02377.html</anchorfile>
      <anchor>a13e768153b071e347ece046c80227caf</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a7a46d4f1cdae51dc0dadc61782389d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a1d9a80f06183cca5f4d7ff77a334b324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ab3ac0ff1ff841375ba0b706f72f29bd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2a75d009f9b1d7c2c62476739b0ba6da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad4ef29d13cefda0abe0f6f7e093745aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</name>
    <filename>a02381.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT1Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT1Cube2DLocalBasis&lt; D, R &gt;, RT1Cube2DLocalCoefficients, RT1Cube2DLocalInterpolation&lt; RT1Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a71ac9e0282b291d7e330fb1340400f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a5a067a72f81c62cee4d421ed9a65d55a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>af9ba687abe8bd223fe5843e4b035fc71</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>af3ce4e6c8a7cc64977e2626d4732cc40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a5ac29b907e164e73d3aeb8c6713698ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aeee71aff6e9048bd133bb7efd9810a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aaae90deff6eb6f8707225b81f152a72e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a37d315719664b04b04df45f5302085cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</name>
    <filename>a02385.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT2Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT2Cube2DLocalBasis&lt; D, R &gt;, RT2Cube2DLocalCoefficients, RT2Cube2DLocalInterpolation&lt; RT2Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a1a8decd101e48654fe6bcc847d1b92e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a34992b3e59ca96e70c6d1e095b75a798</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>aeb3232e6e791f357df42e1433b750518</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a112dced5ecad9b36b5e21425035e84ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a66426bd7727e7380adc42e7aeca5bd21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ae96576be046c8c07275d6112abe13176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a695e401f347436f8fd0b31f41f30f662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a8998c683c4931edda24734589fe59f3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 3 &gt;</name>
    <filename>a02389.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT3Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT3Cube2DLocalBasis&lt; D, R &gt;, RT3Cube2DLocalCoefficients, RT3Cube2DLocalInterpolation&lt; RT3Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a77450cfbb62af8f31e1d49d85096b5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a6f2bdd541c1abfb4e9e8b8812627d1b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a3f1e56c9a9b12e74f1d783c045ac6013</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a0c82787e8f8d75edc624c4c288eb25a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9dec839903f5505195e77a9de88186a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a1636767ef41bfd71626e85e981f20830</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab064d95bc9d58fa634ee0ba63b2a4aba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a658123b92778969618a722d2e7e959b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 4 &gt;</name>
    <filename>a02393.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT4Cube2DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT4Cube2DLocalBasis&lt; D, R &gt;, RT4Cube2DLocalCoefficients, RT4Cube2DLocalInterpolation&lt; RT4Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a14efd77dfafccbdbd1d686661d5ee0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>aed39308fd0bd01903502cbeb5048c4d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02393.html</anchorfile>
      <anchor>a413f7d60f54d39cb05609f9dfc5108d9</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a147cf7bb3c82356382e7d6243a83ed7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a40f2a1f2156033f1db4b0aae5baf8422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af05cc5701fda882f22904daceca287e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a3002df39533e639952958a85ce67aa96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af7766a668e517fe9d383971e75cbcc77</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 0 &gt;</name>
    <filename>a02397.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT0Cube3DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT0Cube3DLocalBasis&lt; D, R &gt;, RT0Cube3DLocalCoefficients, RT0Cube3DLocalInterpolation&lt; RT0Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>acaeb2e9934ff1b40f192e26c38a2868b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>a7e778862ead0fd7ac577fc668c251906</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02397.html</anchorfile>
      <anchor>afc307292b762e56864bf30ffd275428b</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad0e7648874fb977ef58a2bb6c5859ece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a061d83f0e40ce98c91b3942cecf4cad8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ab86588633d6a0ae360d96b451b0b05f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a3af92e434792c4c3b37fb015a1ec4239</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a007b33e2d0f6661f680db25de5b1fd7e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</name>
    <filename>a02401.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RT1Cube3DLocalFiniteElement</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT1Cube3DLocalBasis&lt; D, R &gt;, RT1Cube3DLocalCoefficients, RT1Cube3DLocalInterpolation&lt; RT1Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aacd62ca0413a4071982bbc92a4b2256c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a502e395898169024623958228f91cfa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasCubeLocalFiniteElement</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a9b7cee808f4152016491d095cf24103d</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a25c6882f308ac960642bc129cf2db8c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a50f5c1578223668d04fd520a6aa3f9d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aeb38ed47fd48b5784042bba21b2c5047</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aaee7c1323967b0651526888f4a943587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ad6e1670667921837a8bb2fae0add0188</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasL2Interpolation</name>
    <filename>a02449.html</filename>
    <templarg>dimension</templarg>
    <templarg></templarg>
    <base>Dune::InterpolationHelper</base>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a84a53742ed84abe6e4d93030232f44ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RTL2InterpolationBuilder&lt; dimension, Field &gt;</type>
      <name>Builder</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a840fe50470f40096839936a572bf4d9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasL2Interpolation</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a51453f6c3da8bbb289c705de747a29e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aaa9d2930f7a94f6f54aa625fbc8d83ec</anchor>
      <arglist>(const Function &amp;function, Vector &amp;coefficients) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Vector &gt;().resize(1)), void &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>interpolate</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a62e73c09a0cdd09fe2c209fca075940a</anchor>
      <arglist>(const Basis &amp;basis, Matrix &amp;matrix) const -&gt; std::enable_if_t&lt; std::is_same&lt; decltype(std::declval&lt; Matrix &gt;().rowPtr(0)), typename Matrix::Field * &gt;::value, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a201eeba477c9638cca3925325e3273a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>acd76947b33096c0d329ef59e7b2815a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>aa6dc8705c1872095059f46086f4c8056</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocalKeys</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>ad44859b819ef0d6c47857997e085afda</anchor>
      <arglist>(std::vector&lt; LocalKey &gt; &amp;keys) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02449.html</anchorfile>
      <anchor>a53bebb85ed96ed0f91dc2a97dc3d4119</anchor>
      <arglist>(typename Base::template Helper&lt; Func, Container, type &gt; &amp;func) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RaviartThomasL2InterpolationFactory</name>
    <filename>a02433.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>RTL2InterpolationBuilder&lt; dim, Field &gt;</type>
      <name>Builder</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>ade8317f154281dc568994e264182e63d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const RaviartThomasL2Interpolation&lt; dim, Field &gt;</type>
      <name>Object</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>af194129e2c0f23df3cd918a96bb7483f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>afc218bdec50b739a7e67cd7ed52e8713</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Object &gt;::type</type>
      <name>NonConstObject</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a3404159aaaa6c1aaf1bf9d13d1d4d054</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a5e22caed10783a49f22ef2e89c0a9976</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>supports</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>aa710bf7aa4b17f135fc61272b8e9c87c</anchor>
      <arglist>(const Key &amp;key)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a6ae8517fdbe6f92c54da3cb2f76909d5</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RaviartThomasSimplexLocalFiniteElement</name>
    <filename>a02465.html</filename>
    <templarg>dimDomain</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>GenericLocalFiniteElement&lt; RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;, RaviartThomasCoefficientsFactory&lt; dimDomain &gt;, RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt; &gt;</base>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; typename BasisF::Object, typename CoeffF::Object, typename InterpolF::Object &gt;</type>
      <name>Traits</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>ac11e5c3f8a450a8950251fc7ce42e8c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericLocalFiniteElement&lt; RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;, RaviartThomasCoefficientsFactory&lt; dimDomain &gt;, RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt; &gt;</type>
      <name>This</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>acad1ee520f7a7468fe1f7d3d13a837c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BasisF::Key</type>
      <name>Key</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a97c2f0322dc0db6f7dab27227f313d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasBasisFactory&lt; dimDomain, R, R &gt;</type>
      <name>BasisFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a91fe88aff2e184c77c1a6506ccccd418</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasCoefficientsFactory&lt; dimDomain &gt;</type>
      <name>CoefficientFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a58e6f2d02283bf7930644913ce9222b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RaviartThomasL2InterpolationFactory&lt; dimDomain, R &gt;</type>
      <name>InterpolationFactory</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aa684f47aadcdeb09fb4e4a5a71c1b14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RaviartThomasSimplexLocalFiniteElement</name>
      <anchorfile>a02465.html</anchorfile>
      <anchor>aa6e4d43f09ed9a0ffeccf79f0709c684</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0c531535834aaa88ba91c36b744e6133</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a7722f4283965f04eb84e183ec36042a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a0b9a0d9017def6ed350aedab507fdb5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a53a5f3bf6ce219c21cae51fa785e40dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>a12280be0a098e8e66f69f835ec49d89f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02701.html</anchorfile>
      <anchor>aaf54712b7dfae71e4d63534d0df41c79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalBasis</name>
    <filename>a02485.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <base>Dune::RefinedSimplexLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>abac337514f73e7774480dbff41007fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>ad999b28713e16684df9b86e81b5ce35d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a4ea2311b953277d791926d02aebf5874</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a68625b4f0ed430220eae7fd1922ca2ec</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a156970a47dccdf62fa00ad61872d9c6f</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a71956ed76c714c91d8d368260607730a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalBasis&lt; D, R, 1 &gt;</name>
    <filename>a02485.html</filename>
    <base>Dune::RefinedSimplexLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>abac337514f73e7774480dbff41007fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>ad999b28713e16684df9b86e81b5ce35d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a4ea2311b953277d791926d02aebf5874</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a68625b4f0ed430220eae7fd1922ca2ec</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a156970a47dccdf62fa00ad61872d9c6f</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a71956ed76c714c91d8d368260607730a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalBasis&lt; D, R, 2 &gt;</name>
    <filename>a02485.html</filename>
    <base>Dune::RefinedSimplexLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>abac337514f73e7774480dbff41007fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>ad999b28713e16684df9b86e81b5ce35d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a4ea2311b953277d791926d02aebf5874</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a68625b4f0ed430220eae7fd1922ca2ec</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a156970a47dccdf62fa00ad61872d9c6f</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a71956ed76c714c91d8d368260607730a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalBasis&lt; D, R, 3 &gt;</name>
    <filename>a02485.html</filename>
    <base>Dune::RefinedSimplexLocalBasis</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, dim, Dune::FieldVector&lt; D, dim &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, dim &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>abac337514f73e7774480dbff41007fb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>ad999b28713e16684df9b86e81b5ce35d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a4ea2311b953277d791926d02aebf5874</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a68625b4f0ed430220eae7fd1922ca2ec</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a156970a47dccdf62fa00ad61872d9c6f</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02485.html</anchorfile>
      <anchor>a71956ed76c714c91d8d368260607730a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalCoefficients</name>
    <filename>a02489.html</filename>
    <templarg>k</templarg>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalCoefficients</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a1418e8654bbb261a28293068252a56ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a9dd501c5b3314ec0f8cdb19297e630a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>ae0dea7e3670f134e128bf83cbb36be40</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalCoefficients&lt; 1 &gt;</name>
    <filename>a02489.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalCoefficients</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a1418e8654bbb261a28293068252a56ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a9dd501c5b3314ec0f8cdb19297e630a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>ae0dea7e3670f134e128bf83cbb36be40</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalCoefficients&lt; 2 &gt;</name>
    <filename>a02489.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalCoefficients</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a1418e8654bbb261a28293068252a56ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a9dd501c5b3314ec0f8cdb19297e630a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>ae0dea7e3670f134e128bf83cbb36be40</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalCoefficients&lt; 3 &gt;</name>
    <filename>a02489.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalCoefficients</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a1418e8654bbb261a28293068252a56ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>a9dd501c5b3314ec0f8cdb19297e630a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02489.html</anchorfile>
      <anchor>ae0dea7e3670f134e128bf83cbb36be40</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalFiniteElement</name>
    <filename>a02509.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>P0LocalFiniteElement&lt; D, R, dim &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a9aff50af94ba9065ff35d82ab75599bf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalFiniteElement&lt; D, R, 1 &gt;</name>
    <filename>a02513.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RefinedP0LocalBasis&lt; D, R, 1 &gt;, RefinedP0LocalCoefficients&lt; 1 &gt;, RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 1 &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aab01089caf256780f3b737b8af3d1542</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalFiniteElement</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a1700ceaec05555d49615a572e06678b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>af8d81a78ea075dfb02888c82f50563bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>af7a49e79ad9c7258ebea439d79cbeb09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>af66cc9f7f5ac94358effc3a22c024864</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ab7dbb14e3dd5736d0aa5e220dfe8105f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a0db01ea687c4fe72932f4b6bb6f7e1bb</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalFiniteElement&lt; D, R, 2 &gt;</name>
    <filename>a02517.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RefinedP0LocalBasis&lt; D, R, 2 &gt;, RefinedP0LocalCoefficients&lt; 2 &gt;, RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 2 &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>ab5b8c1aeb95a79ccde27d4c9400a74bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalFiniteElement</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>a5e7c1a5ad7458906d799a221911ce171</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>a577b78689aec986685c4841783a1dcc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>ae42e57f4cf9f478341cb54d62c2781f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>af85bb42985a0e353d021b6946c68cdff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>a46afe8e0b2bf3a9d1448c0c4e91fa8db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02517.html</anchorfile>
      <anchor>a67363307268dcfaedeeb3fea8d3c2f99</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalFiniteElement&lt; D, R, 3 &gt;</name>
    <filename>a02521.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RefinedP0LocalBasis&lt; D, R, 3 &gt;, RefinedP0LocalCoefficients&lt; 3 &gt;, RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 3 &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>af069a39c0a2952ee4ee2560b0ff7bac2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalFiniteElement</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>a211e83164a61d3ca5dd75ca00cf468e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>ac7fec16acf29e22e999e45d0b9e2b7b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>a2d921285a35fad8595e7e3adbdf90569</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>a912834dd4ea08b1235ff76efd24ada0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>a67148c52041de4284fcbfb30dbd08fc4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02521.html</anchorfile>
      <anchor>a65b30043e7748540b79d81c31fe89ca1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalInterpolation</name>
    <filename>a02493.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalInterpolation&lt; Dune::RefinedP0LocalBasis&lt; D, R, 1 &gt; &gt;</name>
    <filename>a02493.html</filename>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalInterpolation&lt; Dune::RefinedP0LocalBasis&lt; D, R, 2 &gt; &gt;</name>
    <filename>a02493.html</filename>
  </compound>
  <compound kind="class">
    <name>RefinedP0LocalInterpolation&lt; Dune::RefinedP0LocalBasis&lt; D, R, 3 &gt; &gt;</name>
    <filename>a02493.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 1 &gt; &gt;</name>
    <filename>a02497.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalInterpolation</name>
      <anchorfile>a02497.html</anchorfile>
      <anchor>aba598beb504c5bf4079975677d049c47</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02497.html</anchorfile>
      <anchor>ac731b1f49c3be9e0bd5e2f4814201ac2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 2 &gt; &gt;</name>
    <filename>a02501.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalInterpolation</name>
      <anchorfile>a02501.html</anchorfile>
      <anchor>a09f8dd8a1fb1973c90c20b366db89e18</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02501.html</anchorfile>
      <anchor>a414e2fc75277f58c7d0a467546ec5020</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 3 &gt; &gt;</name>
    <filename>a02505.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RefinedP0LocalInterpolation</name>
      <anchorfile>a02505.html</anchorfile>
      <anchor>a6be5c8d1dfe634b8c0ab1e955a70f165</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02505.html</anchorfile>
      <anchor>a43718b0607eda33b784b96155b8526d2</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP1LocalBasis</name>
    <filename>a02525.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <base>Dune::RefinedSimplexLocalBasis</base>
    <member kind="function">
      <type></type>
      <name>RefinedP1LocalBasis</name>
      <anchorfile>a02525.html</anchorfile>
      <anchor>a9db400a773d0c535c901a23d430319ca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP1LocalBasis&lt; D, R, 1 &gt;</name>
    <filename>a02529.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RefinedSimplexLocalBasis&lt; D, 1 &gt;</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 1, Dune::FieldVector&lt; D, 1 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 1 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>a07bf91f90cfc4ca4597c35f1655da06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>ab4a828927502c94700504f7fb01ad9bc</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>a4d1bf236c20d60d2580fa15fbc9752bd</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>add4c54a3e63f8fee965f3a4e8e5d2ebb</anchor>
      <arglist>(const std::array&lt; unsigned int, 1 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>af270d81cc876a9e10771a1e63723f0ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>order</name>
      <anchorfile>a02529.html</anchorfile>
      <anchor>a7ca0dda5260be54b9d3f932c2831fd4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a9b3531baa41fd80681585760dce90544</anchor>
      <arglist>(const FieldVector&lt; D, 1 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a6104269da9a56e1465e1722c1df6640f</anchor>
      <arglist>(const FieldVector&lt; D, 1 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 1 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP1LocalBasis&lt; D, R, 2 &gt;</name>
    <filename>a02533.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RefinedSimplexLocalBasis&lt; D, 2 &gt;</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>a3f32e863c6ad9241d2a6a161cfb7bcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>a9c3dc8eb161699b69032551c512fbc53</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>a06b7b8939325e9c448f85843d923049d</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>aa150c7eea137662f4ec0f275533c1fa1</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>ae089b863f624a318bb0109a8226bcc09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>order</name>
      <anchorfile>a02533.html</anchorfile>
      <anchor>ab5c1f9f070b4903425a183e8271e7599</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a6f13f8525e2ce738a7a9aa796387de60</anchor>
      <arglist>(const FieldVector&lt; D, 2 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aaf2d1547c17c9522c62d76834bcf73ef</anchor>
      <arglist>(const FieldVector&lt; D, 2 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 2 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP1LocalBasis&lt; D, R, 3 &gt;</name>
    <filename>a02537.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::RefinedSimplexLocalBasis&lt; D, 3 &gt;</base>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 1, Dune::FieldVector&lt; R, 1 &gt;, Dune::FieldMatrix&lt; R, 1, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>a7e1dff18e283c5b38af6cf2b9855fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>a752d6861c9421b392c3608edc2874b9c</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>afe86c2200b47814a5338f74aac741374</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>a4be5c51dce97d002920324b6d9ee9f21</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>size</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>a9f627166b0a7a3e014ab307275ddc395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr unsigned int</type>
      <name>order</name>
      <anchorfile>a02537.html</anchorfile>
      <anchor>ab9c53876ed6f513ed29c7bdfcdb97060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>af0f4d2ecf3bc598bfba902e449e567a8</anchor>
      <arglist>(const FieldVector&lt; D, 3 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>a13c72cbb881d8f4a9061ce59a0918804</anchor>
      <arglist>(const FieldVector&lt; D, 3 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 3 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedP1LocalFiniteElement</name>
    <filename>a02541.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RefinedP1LocalBasis&lt; D, R, dim &gt;, Impl::LagrangeSimplexLocalCoefficients&lt; dim, 2 &gt;, Impl::LagrangeSimplexLocalInterpolation&lt; Impl::LagrangeSimplexLocalBasis&lt; D, R, dim, 2 &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>aa80298695dac5a732830e2de95adabfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RefinedP1LocalFiniteElement</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a9810295b968d31562684093a8663029d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a245663b071bb061eab321a4a8ebec75b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>afb46e47f6f217b8192543b33eee15ac8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>aea5904c025f3e451ee0d4cf6d429fb94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a8e19885fda858e4505aff2875e29ba8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02541.html</anchorfile>
      <anchor>a7ac0c0a67201886def46e6eb587b7a8d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedSimplexLocalBasis</name>
    <filename>a02469.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>RefinedSimplexLocalBasis</name>
      <anchorfile>a02469.html</anchorfile>
      <anchor>a5df308d381523b19751d9828891993d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedSimplexLocalBasis&lt; D, 1 &gt;</name>
    <filename>a02473.html</filename>
    <templarg></templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>RefinedSimplexLocalBasis</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a0a37d569508d4735659d7a810416748a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a9b3531baa41fd80681585760dce90544</anchor>
      <arglist>(const FieldVector&lt; D, 1 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a6104269da9a56e1465e1722c1df6640f</anchor>
      <arglist>(const FieldVector&lt; D, 1 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 1 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedSimplexLocalBasis&lt; D, 2 &gt;</name>
    <filename>a02477.html</filename>
    <templarg></templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>RefinedSimplexLocalBasis</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a49413662859d8d47bc8e3d10b3286778</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a6f13f8525e2ce738a7a9aa796387de60</anchor>
      <arglist>(const FieldVector&lt; D, 2 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aaf2d1547c17c9522c62d76834bcf73ef</anchor>
      <arglist>(const FieldVector&lt; D, 2 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 2 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RefinedSimplexLocalBasis&lt; D, 3 &gt;</name>
    <filename>a02481.html</filename>
    <templarg></templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>RefinedSimplexLocalBasis</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>a52fad7eddd790f14cd6a12ceda95105d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>getSubElement</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>af0f4d2ecf3bc598bfba902e449e567a8</anchor>
      <arglist>(const FieldVector&lt; D, 3 &gt; &amp;global)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>getSubElement</name>
      <anchorfile>a02481.html</anchorfile>
      <anchor>a13c72cbb881d8f4a9061ce59a0918804</anchor>
      <arglist>(const FieldVector&lt; D, 3 &gt; &amp;global, int &amp;subElement, FieldVector&lt; D, 3 &gt; &amp;local)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT02DLocalBasis</name>
    <filename>a02213.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a39879ff5b14ab7d2d099d00a1b892d52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT02DLocalBasis</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ac27461359db5e8a3acbdd85c652a4507</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a7c3420a6993b5e4eba35fa201859b87c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a5e99a8a55dcc502a756f41864a0dbf35</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a393fff7a8570590c3b48124438b4f52e</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ad353854052a39b438cd7ebca1732fb4f</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a327ee0859c695aa185a6e9bd289e55cd</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT02DLocalCoefficients</name>
    <filename>a02217.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT02DLocalCoefficients</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>aadcd47127b92b1060effd2581cc0559b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>aef63c8f64b72fd75fa241fb9cb35cff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ace3f965edafc32e44c93b5ce8cbbc9c7</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT02DLocalFiniteElement</name>
    <filename>a02225.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT02DLocalBasis&lt; D, R &gt;, RT02DLocalCoefficients, RT02DLocalInterpolation&lt; RT02DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a19a0ef9e409d124f4697f7141a05a6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT02DLocalFiniteElement</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a1193465ed3a0e7c45ead5702ca28d2b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT02DLocalFiniteElement</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a9c2ee095759fffef4bb0ec6d8ec4d74c</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>ae8d300dfb4b821033fd8c8f7d8cdbbb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>afa0943ace5ee6b4972715c631183a419</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a4aa7334aa27c1f6e4f59fa42382f0514</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>acfe2d1fc597cae9327adf6634d9f9da7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02225.html</anchorfile>
      <anchor>a37ff3e0940945484d037ecf9564b06d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT02DLocalInterpolation</name>
    <filename>a02221.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT02DLocalInterpolation</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ae02f4481701a47e42eebec6a68662ebd</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ada9840d581e3122deaf687e76b2a2862</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT02DLocalInterpolation&lt; Dune::RT02DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02221.html</filename>
    <member kind="function">
      <type></type>
      <name>RT02DLocalInterpolation</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ae02f4481701a47e42eebec6a68662ebd</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>ada9840d581e3122deaf687e76b2a2862</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT03DLocalBasis</name>
    <filename>a02229.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 3, Dune::FieldVector&lt; R, 3 &gt;, Dune::FieldMatrix&lt; R, 3, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a79d2a6eb27a29d355eef1f3c874432b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT03DLocalBasis</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a19ef37a00d5eee4f42644243f56d6879</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a3c4eb75588261cc499b7d8995351e891</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a76ce02f8bce118d618ed6e78f9399516</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a5ece21cf26edbc9e001b3d9f4368cb77</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a33b54a376b2132a336ec9baea5c0af09</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02229.html</anchorfile>
      <anchor>a38d2177427b52eb2bc054c6894260ad4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT03DLocalCoefficients</name>
    <filename>a02233.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT03DLocalCoefficients</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a29ba02940410f3f64f0bdf8a80a22d7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>acae5bc1b1c3854c8609b9f3c180b4577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a5266ec85d513c88c314ce6bc7517a504</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT03DLocalFiniteElement</name>
    <filename>a02241.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT03DLocalBasis&lt; D, R &gt;, RT03DLocalCoefficients, RT03DLocalInterpolation&lt; RT03DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a1596fb88fe6ac2ccb506c2512413b400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT03DLocalFiniteElement</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>af05dae146d7005d5eccacc060b913450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT03DLocalFiniteElement</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a6381b2ce9a9d1385ff159cfdf68df21a</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a3a6e7bb7193b5e0e7870dce044a1c198</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a7df74d0165f5b2a632839dfead3189eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a0e26fc0613c7189028295ddd4977ec4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a399c58efffa6fd379cac2f303565a90a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a3b9d775d9817c282f5555ba77f6a1ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT03DLocalInterpolation</name>
    <filename>a02237.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT03DLocalInterpolation</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>af9eb655b8328b18271666720d62035b4</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>ae118859e67218a6220a4b53daca5a8dd</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT03DLocalInterpolation&lt; Dune::RT03DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02237.html</filename>
    <member kind="function">
      <type></type>
      <name>RT03DLocalInterpolation</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>af9eb655b8328b18271666720d62035b4</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>ae118859e67218a6220a4b53daca5a8dd</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube2DLocalBasis</name>
    <filename>a02245.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a4b553683b0d3b8dcf7b4c0fce6364686</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalBasis</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a30cc5a587bca99bbd4041b486d948af1</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aef09f3ad0a8dbd47e196b1b50f3dcaa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a99dfb7382c18dbb197e2fafb9ef65776</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ad970d2a7b182d355bf3e166750abedcf</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aab0b961ae9e23d283dc61eca1733fd46</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ae55717b5a51704bf73662914e16e1fab</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube2DLocalCoefficients</name>
    <filename>a02253.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalCoefficients</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a8cd21dafc9c39fcf522dbd55fe746ecd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a9302eeea137ae0dcb932a1bd64a1d592</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02253.html</anchorfile>
      <anchor>a501a9adc6324f26c237b35461898886e</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube2DLocalFiniteElement</name>
    <filename>a02257.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT0Cube2DLocalBasis&lt; D, R &gt;, RT0Cube2DLocalCoefficients, RT0Cube2DLocalInterpolation&lt; RT0Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a1fbd2abeebf36731efc7e14ff1edc27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalFiniteElement</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a0e15b6c8178c6bb01fac7fda5f98e09b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalFiniteElement</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ace82af2b6f5051410de438f604581309</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a7a46d4f1cdae51dc0dadc61782389d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a1d9a80f06183cca5f4d7ff77a334b324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ab3ac0ff1ff841375ba0b706f72f29bd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>a2a75d009f9b1d7c2c62476739b0ba6da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02257.html</anchorfile>
      <anchor>ad4ef29d13cefda0abe0f6f7e093745aa</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube2DLocalInterpolation</name>
    <filename>a02249.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalInterpolation</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ac7ce7a448cf05725287fb1d99489a869</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a6a0ef8c88c5553c34dc955a152daeed1</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT0Cube2DLocalInterpolation&lt; Dune::RT0Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02249.html</filename>
    <member kind="function">
      <type></type>
      <name>RT0Cube2DLocalInterpolation</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>ac7ce7a448cf05725287fb1d99489a869</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a6a0ef8c88c5553c34dc955a152daeed1</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube3DLocalBasis</name>
    <filename>a02261.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 3, Dune::FieldVector&lt; R, 3 &gt;, Dune::FieldMatrix&lt; R, 3, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a78caef912135d2e6ab2674ca46f41ecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalBasis</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a553add12667f156deaf511f2a3083dfd</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a21222d095a6c88116b562acbad9f142a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a8a838039846984997f350db49dd47376</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a29cf34422299ecaf9f00038ab252ac29</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a53baed26ed097907abadc96fead6995d</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a3904494a56f5ddd216123e8c59cc53fb</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube3DLocalCoefficients</name>
    <filename>a02269.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalCoefficients</name>
      <anchorfile>a02269.html</anchorfile>
      <anchor>a18e7cc9c129520751d72ffaf144923c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02269.html</anchorfile>
      <anchor>a481417e0c8c494c514e38e2306da582a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02269.html</anchorfile>
      <anchor>a1c67c33753ea977b60630a73106c8c0c</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube3DLocalFiniteElement</name>
    <filename>a02273.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT0Cube3DLocalBasis&lt; D, R &gt;, RT0Cube3DLocalCoefficients, RT0Cube3DLocalInterpolation&lt; RT0Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>acaeb2e9934ff1b40f192e26c38a2868b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalFiniteElement</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>abb60b2d494030a652bc21d24cf8b6314</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalFiniteElement</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a1c87607279af01afab112877102f71e6</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ad0e7648874fb977ef58a2bb6c5859ece</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a061d83f0e40ce98c91b3942cecf4cad8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>ab86588633d6a0ae360d96b451b0b05f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a3af92e434792c4c3b37fb015a1ec4239</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02273.html</anchorfile>
      <anchor>a007b33e2d0f6661f680db25de5b1fd7e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT0Cube3DLocalInterpolation</name>
    <filename>a02265.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalInterpolation</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aede1a0be1e055234d7987d59a08da73e</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a5d1f72849a52bc47140c5e3a1e6237c5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT0Cube3DLocalInterpolation&lt; Dune::RT0Cube3DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02265.html</filename>
    <member kind="function">
      <type></type>
      <name>RT0Cube3DLocalInterpolation</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>aede1a0be1e055234d7987d59a08da73e</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02265.html</anchorfile>
      <anchor>a5d1f72849a52bc47140c5e3a1e6237c5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT12DLocalBasis</name>
    <filename>a02277.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>ad33d3dd98fccfb5be43ab0bce62407d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT12DLocalBasis</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a228cce2fe99ea17f9ddcc88df1bc3c25</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a376b6a5834fe884ce92baa544f590646</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>af113a159cb8ea4bdd7a940d11767849f</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a899fa6ffa4bbc0567f90073fee33216b</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>a828bb3ac1e01d3def7d074e9f2ebc4d6</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02277.html</anchorfile>
      <anchor>acabfc014df7a45de21c4695e4486d2f1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT12DLocalCoefficients</name>
    <filename>a02281.html</filename>
    <member kind="function">
      <type></type>
      <name>RT12DLocalCoefficients</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>a147b9e8384a9402c121cfe4002564f99</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>af29332d8560fd91b737013e97aa8c828</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02281.html</anchorfile>
      <anchor>aa8f8a3a4f60e9501946d00e4cc89d69b</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT12DLocalFiniteElement</name>
    <filename>a02289.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT12DLocalBasis&lt; D, R &gt;, RT12DLocalCoefficients, RT12DLocalInterpolation&lt; RT12DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a17ecd36456fdcece6b5915850426e688</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT12DLocalFiniteElement</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a7253859df08811212eb19650bcbf9758</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT12DLocalFiniteElement</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a6465a275bee9d72b1519469ef4eb99f0</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>ad22159b38c602c829db8c12f3cc8cf32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>abdd666bff19e517e674dd07db6a9923b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a7d4ea13a24112eeebe76a1acb47e9506</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a03d7e974a9c9a824a2f7729ebe881a0b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02289.html</anchorfile>
      <anchor>a6c6ccb2dc5f377714e267cc509e2d84a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT12DLocalInterpolation</name>
    <filename>a02285.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT12DLocalInterpolation</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a5df45e2046ac22515d61fa8be26deeb6</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad7ddd31f8359301aefcba8d1dce26eb5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT12DLocalInterpolation&lt; Dune::RT12DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02285.html</filename>
    <member kind="function">
      <type></type>
      <name>RT12DLocalInterpolation</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>a5df45e2046ac22515d61fa8be26deeb6</anchor>
      <arglist>(std::bitset&lt; 3 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02285.html</anchorfile>
      <anchor>ad7ddd31f8359301aefcba8d1dce26eb5</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube2DLocalBasis</name>
    <filename>a02293.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a26cb510a754f7cf505de1c22d6a43864</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalBasis</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a8059ce9999e897f2197009d2d5a0de4a</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a7c43ff2ca624c638e66f592276795da2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a42ed2febaef85fbf13c2259a96322ad7</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a0460600eb49bfb8237d6e9a8bfd8c174</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>aeb3fc583fe1fc59626d773eca07438ce</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02293.html</anchorfile>
      <anchor>a2d23e3b421ed87996d073099a8a2ed9c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube2DLocalCoefficients</name>
    <filename>a02297.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalCoefficients</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a247bbe3a074ee49006b81d4b7c49b563</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>ae7db40a90872a94090bd37c68b187196</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02297.html</anchorfile>
      <anchor>a6ec2f481d4cf7b882ee87c7ab33a40b9</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube2DLocalFiniteElement</name>
    <filename>a02305.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT1Cube2DLocalBasis&lt; D, R &gt;, RT1Cube2DLocalCoefficients, RT1Cube2DLocalInterpolation&lt; RT1Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a71ac9e0282b291d7e330fb1340400f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalFiniteElement</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>afceb8312f5dcc4ecbf2ef75be0a283c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalFiniteElement</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>abf7e3f5f356e6963ab69682a191087f1</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>af3ce4e6c8a7cc64977e2626d4732cc40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a5ac29b907e164e73d3aeb8c6713698ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aeee71aff6e9048bd133bb7efd9810a3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aaae90deff6eb6f8707225b81f152a72e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a37d315719664b04b04df45f5302085cf</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube2DLocalInterpolation</name>
    <filename>a02301.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalInterpolation</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a23f3b7bf49d8e4a855e62953e338886a</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a406433e37c59da29ab528db8ea04b40a</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT1Cube2DLocalInterpolation&lt; Dune::RT1Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02301.html</filename>
    <member kind="function">
      <type></type>
      <name>RT1Cube2DLocalInterpolation</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a23f3b7bf49d8e4a855e62953e338886a</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02301.html</anchorfile>
      <anchor>a406433e37c59da29ab528db8ea04b40a</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube3DLocalBasis</name>
    <filename>a02309.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 3, Dune::FieldVector&lt; D, 3 &gt;, R, 3, Dune::FieldVector&lt; R, 3 &gt;, Dune::FieldMatrix&lt; R, 3, 3 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0c3c31adeb07202aa5d534388440811e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalBasis</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ab830a6d0d5c99414caa2f43fa184315e</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a4d8505f6947657d3fa2d847596bca39f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a7100cf8eac24d9a3d67a73ac9354ab43</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>ad9fda08b20105939698061fa44561eaf</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>a0624275d67d30587e7c0433fad319f4e</anchor>
      <arglist>(const std::array&lt; unsigned int, 3 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02309.html</anchorfile>
      <anchor>af62ae646ea66ef9bf4ab426bf9e9f40c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube3DLocalCoefficients</name>
    <filename>a02313.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalCoefficients</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a7017b6010c2ffa933c302fc197683d1f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a0a5a386003c2420f9061c0d9e53b23c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02313.html</anchorfile>
      <anchor>a1b67cf524b953966bd60c385a12dd449</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube3DLocalFiniteElement</name>
    <filename>a02321.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT1Cube3DLocalBasis&lt; D, R &gt;, RT1Cube3DLocalCoefficients, RT1Cube3DLocalInterpolation&lt; RT1Cube3DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aacd62ca0413a4071982bbc92a4b2256c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalFiniteElement</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a2fd8629ddf227c16de3751fe4d24fc19</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalFiniteElement</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a641401706d4c5eee56d0d6cde42e7f77</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a25c6882f308ac960642bc129cf2db8c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>a50f5c1578223668d04fd520a6aa3f9d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aeb38ed47fd48b5784042bba21b2c5047</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>aaee7c1323967b0651526888f4a943587</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02321.html</anchorfile>
      <anchor>ad6e1670667921837a8bb2fae0add0188</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT1Cube3DLocalInterpolation</name>
    <filename>a02317.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalInterpolation</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ade07e5ffcc1b8984eb2d6e393c859755</anchor>
      <arglist>(std::bitset&lt; 6 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ab02cdb0d52c36eda44a29c78a728002c</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT1Cube3DLocalInterpolation&lt; Dune::RT1Cube3DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02317.html</filename>
    <member kind="function">
      <type></type>
      <name>RT1Cube3DLocalInterpolation</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ade07e5ffcc1b8984eb2d6e393c859755</anchor>
      <arglist>(std::bitset&lt; 6 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ab02cdb0d52c36eda44a29c78a728002c</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT2Cube2DLocalBasis</name>
    <filename>a02325.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>ac2025253707b56e8ce380680ab439836</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalBasis</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a3e52a91ce3d91e890134ea509e7a893a</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>acde047368c800e80079d50b7a7bb41a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>ae104b305a9ae333d95147b37a75441f3</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a4346a132f18876f91b9b7e0e24511c0b</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>a01001426b7698038809bd7a0e44bd815</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>aa9210fbf1e55c11fad53db07a73a8cba</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT2Cube2DLocalCoefficients</name>
    <filename>a02329.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalCoefficients</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a1c1bbed0909136bf3ec42611cfdd0e63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a1bd217cd997c371c6480009aeaabba68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a8518ca88458b7c31e8fabdfe87469358</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT2Cube2DLocalFiniteElement</name>
    <filename>a02337.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT2Cube2DLocalBasis&lt; D, R &gt;, RT2Cube2DLocalCoefficients, RT2Cube2DLocalInterpolation&lt; RT2Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a1a8decd101e48654fe6bcc847d1b92e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalFiniteElement</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>af045a823e2cbdc27e26ac3096af1680c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalFiniteElement</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ac72d30839214df367452a2e68d3e4368</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a112dced5ecad9b36b5e21425035e84ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a66426bd7727e7380adc42e7aeca5bd21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>ae96576be046c8c07275d6112abe13176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a695e401f347436f8fd0b31f41f30f662</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a8998c683c4931edda24734589fe59f3c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT2Cube2DLocalInterpolation</name>
    <filename>a02333.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalInterpolation</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac8105dfb012c0d8e3dc38bc9dea682a8</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a867447df8a6dd99e8a8fd96abf1b961b</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT2Cube2DLocalInterpolation&lt; Dune::RT2Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02333.html</filename>
    <member kind="function">
      <type></type>
      <name>RT2Cube2DLocalInterpolation</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac8105dfb012c0d8e3dc38bc9dea682a8</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>a867447df8a6dd99e8a8fd96abf1b961b</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT3Cube2DLocalBasis</name>
    <filename>a02341.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>ae613b5fd69d5d254bf301a942c8a5738</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalBasis</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a7e95863a55e66e678eccb26bdec3a539</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a320aa07afe7abf13d97c94925877352e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>aa09d55dd9a14264cc0dd932c7a5bdc0c</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>a4f74375a75b157e428c27b6cf37a9e85</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>af838fd52e54dfe5231948eb147224ec2</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>aafb1d90abffe7e8f44f5f415dbdd1c91</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT3Cube2DLocalCoefficients</name>
    <filename>a02345.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalCoefficients</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a1f91ddb833338da3114c9c13add0bbca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>ac0805e1507e831289ad4beb82b6807c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a93f9a01c90c5c497340f1266bb4a8ab6</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT3Cube2DLocalFiniteElement</name>
    <filename>a02353.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT3Cube2DLocalBasis&lt; D, R &gt;, RT3Cube2DLocalCoefficients, RT3Cube2DLocalInterpolation&lt; RT3Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a77450cfbb62af8f31e1d49d85096b5dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalFiniteElement</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>aa55aea30fe68ed5d28e2002b8056186d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalFiniteElement</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a8a7683ca909082c175f964228d119a3d</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a0c82787e8f8d75edc624c4c288eb25a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a9dec839903f5505195e77a9de88186a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a1636767ef41bfd71626e85e981f20830</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>ab064d95bc9d58fa634ee0ba63b2a4aba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02353.html</anchorfile>
      <anchor>a658123b92778969618a722d2e7e959b7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT3Cube2DLocalInterpolation</name>
    <filename>a02349.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalInterpolation</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a5c5249afe8349740433c015c4f048356</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>afae6a73f78eec1fcc7d7decc034bbf5f</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT3Cube2DLocalInterpolation&lt; Dune::RT3Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02349.html</filename>
    <member kind="function">
      <type></type>
      <name>RT3Cube2DLocalInterpolation</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a5c5249afe8349740433c015c4f048356</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>afae6a73f78eec1fcc7d7decc034bbf5f</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT4Cube2DLocalBasis</name>
    <filename>a02357.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalBasisTraits&lt; D, 2, Dune::FieldVector&lt; D, 2 &gt;, R, 2, Dune::FieldVector&lt; R, 2 &gt;, Dune::FieldMatrix&lt; R, 2, 2 &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a803c58717caf3a0fc73b2caceacb0f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalBasis</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>adf2da4051ff66e312acfd23fe38a1729</anchor>
      <arglist>(std::bitset&lt; 4 &gt; s=0)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a8512fa422032cbc7cabdac21aea7b172</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a7d0d914239b747d7441191a405a8681d</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>ad6f7e2115f5a2092c27ebddd2782671a</anchor>
      <arglist>(const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::JacobianType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>a578a27c8924ad5af6d7ff303e37ab5c8</anchor>
      <arglist>(const std::array&lt; unsigned int, 2 &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02357.html</anchorfile>
      <anchor>aa46a34f327898c3ceb2066c3b0ed0b4e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT4Cube2DLocalCoefficients</name>
    <filename>a02361.html</filename>
    <base>Dune::LocalCoefficientsVirtualImp</base>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalCoefficients</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a331c79a9cb689297f5658804a1958d58</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a85d478d6a26b12ebd05458a186da61e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalKey &amp;</type>
      <name>localKey</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>ac0b0c3608b16bf9451ea2bbe5501edc4</anchor>
      <arglist>(std::size_t i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Imp &amp;</type>
      <name>impl_</name>
      <anchorfile>a01689.html</anchorfile>
      <anchor>add66c4283b88c90dfdf2a47450d2e9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT4Cube2DLocalFiniteElement</name>
    <filename>a02369.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LocalFiniteElementTraits&lt; RT4Cube2DLocalBasis&lt; D, R &gt;, RT4Cube2DLocalCoefficients, RT4Cube2DLocalInterpolation&lt; RT4Cube2DLocalBasis&lt; D, R &gt; &gt; &gt;</type>
      <name>Traits</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a14efd77dfafccbdbd1d686661d5ee0c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalFiniteElement</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>aea24b5ae4574700a044518a49b641152</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalFiniteElement</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ac814e4772ac8d91cabb89b8655661517</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalBasisType &amp;</type>
      <name>localBasis</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a147cf7bb3c82356382e7d6243a83ed7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalCoefficientsType &amp;</type>
      <name>localCoefficients</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a40f2a1f2156033f1db4b0aae5baf8422</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalInterpolationType &amp;</type>
      <name>localInterpolation</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af05cc5701fda882f22904daceca287e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a3002df39533e639952958a85ce67aa96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr GeometryType</type>
      <name>type</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af7766a668e517fe9d383971e75cbcc77</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RT4Cube2DLocalInterpolation</name>
    <filename>a02365.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalInterpolation</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a61b1a67c739d6df39118291b80cb3bf8</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>ad0c02e7659bb093afd27bebde9658ca7</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RT4Cube2DLocalInterpolation&lt; Dune::RT4Cube2DLocalBasis&lt; D, R &gt; &gt;</name>
    <filename>a02365.html</filename>
    <member kind="function">
      <type></type>
      <name>RT4Cube2DLocalInterpolation</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a61b1a67c739d6df39118291b80cb3bf8</anchor>
      <arglist>(unsigned int s=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>interpolate</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>ad0c02e7659bb093afd27bebde9658ca7</anchor>
      <arglist>(const F &amp;ff, std::vector&lt; C &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RTL2InterpolationBuilder</name>
    <filename>a02441.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension, Field &gt;</type>
      <name>TestBasisFactory</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac36a523172cb7603bf30832608b6327c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestBasisFactory::Object</type>
      <name>TestBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a437bf8dab967ca6e571c647bee9fb0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension-1, Field &gt;</type>
      <name>TestFaceBasisFactory</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ab74437f96354199563856e6a6b7801a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestFaceBasisFactory::Object</type>
      <name>TestFaceBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a457e18ae8fa6ce1104904dc0359186f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Normal</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a21210ec4c9440ee948fdacd72ba4baa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a87634c8ca8b566d6f5bb2afe01014a03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aace3bc1875902add3c06dc877338e5b8</anchor>
      <arglist>(const RTL2InterpolationBuilder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ab9efb3117bfb52fa8bcbe0bf214e9f9e</anchor>
      <arglist>(RTL2InterpolationBuilder &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>af606d7f8b910e571b12491f017f3cf66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aebcfbf459ef1e8d269574c9073746a3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aa6b975cffeab9a4170a20919f0681438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac3dff58f7c14c4b335b0ee969f91b968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>faceSize</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a667114c32b901f4dddf90c7dafee9969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestBasis *</type>
      <name>testBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a2c3ed2a16e4b5542df9c9bac098c0357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestFaceBasis *</type>
      <name>testFaceBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a9dbff0adedce637b1fd8b0394868a103</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>const Normal &amp;</type>
      <name>normal</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ad131e047e560ba0a5d3d215dadc4dd0a</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a7d55b09d8490af6e6504acb5e7ed1083</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac6d5649e46fa7e1b2c6f03d6e6dcf7d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RTL2InterpolationBuilder&lt; dimension, Field &gt;</name>
    <filename>a02441.html</filename>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension, Field &gt;</type>
      <name>TestBasisFactory</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac36a523172cb7603bf30832608b6327c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestBasisFactory::Object</type>
      <name>TestBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a437bf8dab967ca6e571c647bee9fb0a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OrthonormalBasisFactory&lt; dimension-1, Field &gt;</type>
      <name>TestFaceBasisFactory</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ab74437f96354199563856e6a6b7801a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TestFaceBasisFactory::Object</type>
      <name>TestFaceBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a457e18ae8fa6ce1104904dc0359186f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>Normal</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a21210ec4c9440ee948fdacd72ba4baa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a87634c8ca8b566d6f5bb2afe01014a03</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aace3bc1875902add3c06dc877338e5b8</anchor>
      <arglist>(const RTL2InterpolationBuilder &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ab9efb3117bfb52fa8bcbe0bf214e9f9e</anchor>
      <arglist>(RTL2InterpolationBuilder &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RTL2InterpolationBuilder</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>af606d7f8b910e571b12491f017f3cf66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aebcfbf459ef1e8d269574c9073746a3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>aa6b975cffeab9a4170a20919f0681438</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac3dff58f7c14c4b335b0ee969f91b968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>faceSize</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a667114c32b901f4dddf90c7dafee9969</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestBasis *</type>
      <name>testBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a2c3ed2a16e4b5542df9c9bac098c0357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>TestFaceBasis *</type>
      <name>testFaceBasis</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a9dbff0adedce637b1fd8b0394868a103</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>const Normal &amp;</type>
      <name>normal</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ad131e047e560ba0a5d3d215dadc4dd0a</anchor>
      <arglist>(unsigned int f) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>a7d55b09d8490af6e6504acb5e7ed1083</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimension</name>
      <anchorfile>a02441.html</anchorfile>
      <anchor>ac6d5649e46fa7e1b2c6f03d6e6dcf7d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RTPreBasisFactory</name>
    <filename>a02457.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::RTPreBasisFactory::EvaluationBasisFactory</class>
    <member kind="typedef">
      <type>MonomialBasisProvider&lt; dim, Field &gt;</type>
      <name>MBasisFactory</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a128edcad1837a184962734cc35fe636f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MBasisFactory::Object</type>
      <name>MBasis</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a6f70ec4fa8068fd67fbfdc16b4f8565a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>StandardEvaluator&lt; MBasis &gt;</type>
      <name>EvalMBasis</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>aa365cca1c2ca117de1c575a811dcfa8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PolynomialBasisWithMatrix&lt; EvalMBasis, SparseCoeffMatrix&lt; Field, dim &gt; &gt;</type>
      <name>Basis</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a2f70a7d688da1a3f3eb012b313ce87ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Basis</type>
      <name>Object</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a120b4b8f1025161ccee7eab4dc4cf77c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Key</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9d2b58d0c8368c3c2dc6dc5aa60118fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Object *</type>
      <name>create</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a32ca081f3ebd814b9ee7687d4de6df1a</anchor>
      <arglist>(const Key &amp;order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>release</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9d466e23749b97b67bd60775c83be868</anchor>
      <arglist>(Object *object)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RTVecMatrix</name>
    <filename>a02453.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>MI</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a91906c47c0fbb2f1adf57c811bf95027</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasis&lt; geometryId, MI &gt;</type>
      <name>MIBasis</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>acd4a03b6ba7501bc75a05ddb2d2604bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RTVecMatrix</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a6e1b8002faea5ed9f74c97e8e6a4c761</anchor>
      <arglist>(std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RTVecMatrix</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a58585cd5f43baab909084ccc55405192</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>cols</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a77047729154952ebed4f204a682cc1ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>rows</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>ae9e89b26c8fccfec0c618966f2e2bc7d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>row</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a91e1701ed772bd6338f8a1300dbdf2e3</anchor>
      <arglist>(const unsigned int row, Vector &amp;vec) const</arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>row_</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a81b5576b13d1b0e992b158461e2cad57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>col_</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>aef560aa1a024c0681d983ab31e393bc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Field **</type>
      <name>mat_</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a6bf8b524d545e9c66bc8bac5c698dd93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>ad1bf36a9cd923e676de5a971d0c95892</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dim</name>
      <anchorfile>a02453.html</anchorfile>
      <anchor>a39853723e66cb2127529cbce1a7ea6ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ScalarLocalToGlobalBasisAdaptor</name>
    <filename>a01613.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::BasisInterface</base>
    <member kind="typedef">
      <type>LocalToGlobalBasisAdaptorTraits&lt; typename LocalBasis::Traits, Geometry::coorddimension &gt;</type>
      <name>Traits</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac10d577a90a38cc67846195d5bb57f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalBasisAdaptor</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac33cf7199e790b78dbc037fe73003f4b</anchor>
      <arglist>(const LocalBasis &amp;localBasis_, const Geometry &amp;geometry_)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ae7eb9afa9860603eb1f1bbfa000ad33c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a459442f1be9823503544569427e31a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ad9b7f0f3f15f3f304f213a5cb3eaf313</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a2ad7b7c8e165829681c5391197f20cf7</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a654af6793cae8b2d25380c48c46b6188</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>aa201c35d4810e5675155e746b7d9c5f7</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a1280c3573e90e38b75d17ee5b35ac0ac</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScalarLocalToGlobalBasisAdaptor&lt; typename LocalFiniteElement::Traits::LocalBasisType, Geometry &gt;</name>
    <filename>a01613.html</filename>
    <base>Dune::BasisInterface</base>
    <member kind="typedef">
      <type>LocalToGlobalBasisAdaptorTraits&lt; typename LocalBasis::Traits, Geometry::coorddimension &gt;</type>
      <name>Traits</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac10d577a90a38cc67846195d5bb57f25</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalBasisAdaptor</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ac33cf7199e790b78dbc037fe73003f4b</anchor>
      <arglist>(const typename LocalFiniteElement::Traits::LocalBasisType &amp;localBasis_, const Geometry &amp;geometry_)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ae7eb9afa9860603eb1f1bbfa000ad33c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>order</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a459442f1be9823503544569427e31a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>ad9b7f0f3f15f3f304f213a5cb3eaf313</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Range &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01613.html</anchorfile>
      <anchor>a2ad7b7c8e165829681c5391197f20cf7</anchor>
      <arglist>(const typename Traits::DomainLocal &amp;in, std::vector&lt; typename Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateFunction</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a654af6793cae8b2d25380c48c46b6188</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluateJacobian</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>aa201c35d4810e5675155e746b7d9c5f7</anchor>
      <arglist>(const Traits::DomainType &amp;in, std::vector&lt; Traits::Jacobian &gt; &amp;out) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>partial</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a1280c3573e90e38b75d17ee5b35ac0ac</anchor>
      <arglist>(const std::array&lt; unsigned int, Traits::dimDomain &gt; &amp;order, const typename Traits::DomainType &amp;in, std::vector&lt; typename Traits::RangeType &gt; &amp;out) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ScalarLocalToGlobalFiniteElementAdaptor</name>
    <filename>a01621.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::FiniteElementInterface</base>
    <class kind="struct">Dune::ScalarLocalToGlobalFiniteElementAdaptor::Traits</class>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalFiniteElementAdaptor</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>af6641668cd6de47407f22d310fb08342</anchor>
      <arglist>(const LocalFiniteElement &amp;localFE_, const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Basis &amp;</type>
      <name>basis</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>aad1544192a3e066bd8c4e89b466d7348</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Interpolation &amp;</type>
      <name>interpolation</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a78193d8877c0b6e906483ea410fdb4af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::Coefficients &amp;</type>
      <name>coefficients</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a7c22708d420ea7ba64c3b9d45ee29e27</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01621.html</anchorfile>
      <anchor>a9004e6468e7ec60209290d705dfd76e0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ScalarLocalToGlobalFiniteElementAdaptorFactory</name>
    <filename>a01629.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; LocalFiniteElement, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a6ef7e06069f097ea9a9faacc7c432c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalFiniteElementAdaptorFactory</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>ac3649142533ab8adc221a76e41400f5b</anchor>
      <arglist>(const LocalFiniteElement &amp;localFE_)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a539026b5f64c563f68f1391c0563e9b9</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScalarLocalToGlobalFiniteElementAdaptorFactory&lt; LagrangeCubeLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 1 &gt;, Geometry &gt;</name>
    <filename>a01629.html</filename>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; LagrangeCubeLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 1 &gt;, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a6ef7e06069f097ea9a9faacc7c432c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalFiniteElementAdaptorFactory</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>ac3649142533ab8adc221a76e41400f5b</anchor>
      <arglist>(const LagrangeCubeLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 1 &gt; &amp;localFE_)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a539026b5f64c563f68f1391c0563e9b9</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ScalarLocalToGlobalFiniteElementAdaptorFactory&lt; std::conditional&lt; Geometry::mydimension==1, PkLocalFiniteElement&lt; Geometry::ctype, RF, 1, 2 &gt;, QkLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 2 &gt; &gt;::type, Geometry &gt;</name>
    <filename>a01629.html</filename>
    <base>Dune::FiniteElementFactoryInterface</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalFiniteElementAdaptor&lt; std::conditional&lt; Geometry::mydimension==1, PkLocalFiniteElement&lt; Geometry::ctype, RF, 1, 2 &gt;, QkLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 2 &gt; &gt;::type, Geometry &gt;</type>
      <name>FiniteElement</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a6ef7e06069f097ea9a9faacc7c432c3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScalarLocalToGlobalFiniteElementAdaptorFactory</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>ac3649142533ab8adc221a76e41400f5b</anchor>
      <arglist>(const std::conditional&lt; Geometry::mydimension==1, PkLocalFiniteElement&lt; Geometry::ctype, RF, 1, 2 &gt;, QkLocalFiniteElement&lt; Geometry::ctype, RF, Geometry::mydimension, 2 &gt; &gt;::type &amp;localFE_)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01629.html</anchorfile>
      <anchor>a539026b5f64c563f68f1391c0563e9b9</anchor>
      <arglist>(const Geometry &amp;geometry)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>ab5036c6b1526f0bfafed7e4ecbc65382</anchor>
      <arglist>(const Geometry &amp;, const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>afc7afad5740838bf3b9498c934fe9f36</anchor>
      <arglist>(const Geometry &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a2a484f7e1eb1394fbb96ac1c07b210de</anchor>
      <arglist>(const VertexOrder &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a7005c2d46339b61cea2eef61f60e52b5</anchor>
      <arglist>(const GeometryType &amp;,...)</arglist>
    </member>
    <member kind="function">
      <type>const FiniteElement</type>
      <name>make</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a568b77ace9003873e9c9301ae1e31bc5</anchor>
      <arglist>(...)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SparseCoeffMatrix</name>
    <filename>a02597.html</filename>
    <templarg></templarg>
    <templarg>bSize</templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a44397295e7b4fce78fcfc08468c865b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseCoeffMatrix&lt; Field, blockSize &gt;</type>
      <name>This</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a667c63c2f90f5d287ae41df4dc03e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseCoeffMatrix</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a3a003adf8deeb61509da5648384679a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseCoeffMatrix</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ad4272494b2c84efca1797408a4e1abb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a71f089b8eb62ade0311c052eeddad6cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>baseSize</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a5f5ddbe4126fe939c903b8faa5c338ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>aac85e17eed7970a0e5397c911eb2598d</anchor>
      <arglist>(const BasisIterator &amp;x, unsigned int numLsg, FF *y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ac4c76e9f9edebc053f8cb0629c8cf963</anchor>
      <arglist>(const BasisIterator &amp;x, Vector &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ab619a9d4c8973e59570819870a34a319</anchor>
      <arglist>(const BasisIterator &amp;x, Vector &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a8f6dba4508b5abf8b05f9ae541361ced</anchor>
      <arglist>(const RowMatrix &amp;mat, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>aaab53d87561375f12b95cb66df874b95</anchor>
      <arglist>(unsigned int k, const Field &amp;a, Vector &amp;b) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>blockSize</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a139e09ea51ad1dee1fe1e4a0caa7b1b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SparseCoeffMatrix&lt; typename Eval::Field, Eval::dimRange &gt;</name>
    <filename>a02597.html</filename>
    <member kind="typedef">
      <type>typename Eval::Field</type>
      <name>Field</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a44397295e7b4fce78fcfc08468c865b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SparseCoeffMatrix&lt; Field, blockSize &gt;</type>
      <name>This</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a667c63c2f90f5d287ae41df4dc03e433</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparseCoeffMatrix</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a3a003adf8deeb61509da5648384679a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SparseCoeffMatrix</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ad4272494b2c84efca1797408a4e1abb3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a71f089b8eb62ade0311c052eeddad6cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>baseSize</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a5f5ddbe4126fe939c903b8faa5c338ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>aac85e17eed7970a0e5397c911eb2598d</anchor>
      <arglist>(const BasisIterator &amp;x, unsigned int numLsg, FF *y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ac4c76e9f9edebc053f8cb0629c8cf963</anchor>
      <arglist>(const BasisIterator &amp;x, Vector &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mult</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>ab619a9d4c8973e59570819870a34a319</anchor>
      <arglist>(const BasisIterator &amp;x, Vector &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a8f6dba4508b5abf8b05f9ae541361ced</anchor>
      <arglist>(const RowMatrix &amp;mat, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRow</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>aaab53d87561375f12b95cb66df874b95</anchor>
      <arglist>(unsigned int k, const Field &amp;a, Vector &amp;b) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>blockSize</name>
      <anchorfile>a02597.html</anchorfile>
      <anchor>a139e09ea51ad1dee1fe1e4a0caa7b1b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StandardBiMonomialBasis</name>
    <filename>a02737.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>MonomialBasis&lt; GeometryTypes::cube(dim).toId(), F &gt;</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardBiMonomialBasis</name>
      <anchorfile>a02737.html</anchorfile>
      <anchor>a64c36c4aa2013653d21ba7260fbf7665</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02737.html</anchorfile>
      <anchor>a5390ae79ec1bcb8a80362d1abe8c3976</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02737.html</anchorfile>
      <anchor>a4e441c1fb69353b5faf3100878384b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StandardEvaluator</name>
    <filename>a02557.html</filename>
    <templarg></templarg>
    <base>Dune::MonomialEvaluator</base>
    <class kind="struct">Dune::StandardEvaluator::Iterator</class>
    <member kind="typedef">
      <type>B</type>
      <name>Basis</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>aeb2297b1e9f887acbdf794ea2a8ed3ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::Field</type>
      <name>Field</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a122229854f09a821a2e26c3ec9968b52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Basis::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a351681f1f293c4d4364d3fac66495938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; Field &gt;</type>
      <name>Container</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a89c92a404d1fc9cda380aebacd359e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialEvaluator&lt; B &gt;</type>
      <name>Base</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a54112c8084007bdbeb29333dd75aa923</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardEvaluator</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a7697d3eba10fac25053f4ce90b37deea</anchor>
      <arglist>(const Basis &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type>Iterator&lt; deriv &gt;::All</type>
      <name>evaluate</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a41d5bc7ae6797826fa8800bd0eb6fa86</anchor>
      <arglist>(const DVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>Iterator&lt; 0 &gt;::Integrate</type>
      <name>integrate</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>ade73b5b80bc865ee55c8533615edd6e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>ab50883ee844000ec9b97dde75cece670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>af1abee4cc182e5f35540df521a558048</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimRange</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>a7a072bcc204d5ad66f60eeba56e8c5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>StandardEvaluator</name>
      <anchorfile>a02557.html</anchorfile>
      <anchor>aeb4f8ce466469c220ec097c442f87b3e</anchor>
      <arglist>(const Basis &amp;basis, unsigned int size)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a74f2b738ae19f1148f707a03d1c85db9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a231cdde9ec1ea07611e49db67939a3b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>size_</name>
      <anchorfile>a02545.html</anchorfile>
      <anchor>a51d344612495e08e3d3b741abfaf666e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StandardMonomialBasis</name>
    <filename>a02733.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>MonomialBasis&lt; GeometryTypes::simplex(dim).toId(), F &gt;</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a35bfb2f96375042fb8402a91e7786e95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a69f317d0caab400fd261c7ff36ff648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0826486127e07bcf8263eaaa05dfdc66</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MonomialBasisSize&lt; geometryId &gt;</type>
      <name>Size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ab1c58342ba8e0d23df86a7e0cf8caeee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StandardMonomialBasis</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>a1338eb56dac607c7aa5360260b05e26f</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>ad2699d3556182de35fa4b9ff62d3ed62</anchor>
      <arglist>(unsigned int order) const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a19c3ea7b0ac5fac7896ecbd7e4ee5598</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a01579b58dee84d467c139021a0fad425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>derivSize</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>acb75c27b7d942d5cb9cc94c07c42b18b</anchor>
      <arglist>(const unsigned int deriv) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>af83babaedda82851f01cbde359d1b66e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a235220ddbe5cf3bbc204540fb31460e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a0eeb66813fc2fc38915fbeed4bd45f58</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7a8d448d5e8dba12ef29bde5ba71dde6</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>abdc05ddbe5a3ef20293ca38a435e3e52</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9bd561daee25cf356dcfaad33021b0ed</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a95623fd8eadff4a1cd58aba50b62381b</anchor>
      <arglist>(const DomainVector &amp;x, FieldVector&lt; Field, Derivatives&lt; Field, dimension, 1, deriv, DerivativeLayoutNS::value &gt;::size &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a7edc10868b73fee6e376aa2e98d52a8d</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a9c1a1afab35d982ca91631f91f7835e1</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a458c08fd25b3513e2ef631ecb08a9047</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a3307d71e805d72f67f71b68781cfa461</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr GeometryType</type>
      <name>geometry</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>a04dd873719109a36d3847b3e85a817ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02733.html</anchorfile>
      <anchor>a4b242799a1a4cbc005f70ec08cfef8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02721.html</anchorfile>
      <anchor>a5154f0f86122081a4a26a87a91f22bba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02729.html</anchorfile>
      <anchor>aed1fb61d9b40f1ad5f6f3ba529377fea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BasisInterface::Traits</name>
    <filename>a01533.html</filename>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Jacobian</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a2ddd29329ed24ee62e57687cfcfa953b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a22ed8c98d751a763d07e72c1a5e8c9b1a8558c3b84bc3a43d4d1aba2349f478a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5e23665b4484eafc6cb72ae32379876da3cbc07c7513674618a78f8b8f76f141e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimDomain</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a22ed8c98d751a763d07e72c1a5e8c9b1a8558c3b84bc3a43d4d1aba2349f478a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a6a94c3ff73f8c506b4562d38ae984261</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>DomainType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a3073312b6fe2f9f80fd99395445dcc59</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimRange</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a5e23665b4484eafc6cb72ae32379876da3cbc07c7513674618a78f8b8f76f141e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeFieldType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a4e9f43630f2ae5468b798ad86407f3b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>RangeType</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a804c89e1396050cad9d6bd5e4acdc1b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EdgeS0_5Basis::Traits</name>
    <filename>a02917.html</filename>
    <member kind="typedef">
      <type>Geometry::ctype</type>
      <name>DomainField</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>ad121810357cabf0ea3110fa5b984cbba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; DomainField, dimDomainLocal &gt;</type>
      <name>DomainLocal</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>abdf78376cd30509c3167e83e5d7ff8e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; DomainField, dimDomainGlobal &gt;</type>
      <name>DomainGlobal</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>a25952043902336f0f3b14472b184ac7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RF</type>
      <name>RangeField</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>abd1f95b59a33ff860941847d6d0d59fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; RangeField, dimRange &gt;</type>
      <name>Range</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>ac093981d932d4399435ea39700ef5903</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; RangeField, dimRange, dimDomainGlobal &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>a5c39c94059cc9d7534923b24f36f7a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimDomainLocal</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>a58ab80bfa28d2fa9f3974e3ba4527e9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimDomainGlobal</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>a967824472fd64ec9c29c19d87b35c44b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimRange</name>
      <anchorfile>a02917.html</anchorfile>
      <anchor>a4b870f96b7264c30d92dd831e298cd5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EdgeS0_5FiniteElement::Traits</name>
    <filename>a02937.html</filename>
    <base>Dune::FiniteElementInterface::Traits</base>
    <member kind="typedef">
      <type>EdgeS0_5Basis&lt; Geometry, RF &gt;</type>
      <name>Basis</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>ad1d3ec47c176f152b168187618d9a4af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeS0_5Interpolation&lt; Geometry, typename Basis::Traits &gt;</type>
      <name>Interpolation</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a12ba9d0677abd308cd804ecd17a1611e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeS0_5Coefficients&lt; Geometry::mydimension &gt;</type>
      <name>Coefficients</name>
      <anchorfile>a02937.html</anchorfile>
      <anchor>a0f209cbd1c1eb6b9424d12f4a728e8c3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FiniteElementInterface::Traits</name>
    <filename>a01521.html</filename>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Basis</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a37014c3ce18227405de6192d9b8b1981</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Coefficients</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a56b3557d32612d4c173b5b998b8b3c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Interpolation</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a7c1bd2705cbb186a4024e944049fa620</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalFiniteElementFunctionBase::FunctionBaseDummy::Traits</name>
    <filename>a01645.html</filename>
    <member kind="typedef">
      <type>Range</type>
      <name>RangeType</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a142f6e9dff077f36a019411166b7394b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Domain</type>
      <name>DomainType</name>
      <anchorfile>a01645.html</anchorfile>
      <anchor>a7476c07d0fad61fbb6f1d80481bc0cbe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Pk1DFiniteElement::Traits</name>
    <filename>a01941.html</filename>
    <base>Dune::FiniteElementInterface::Traits</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalBasisAdaptor&lt; LocalBasis, Geometry &gt;</type>
      <name>Basis</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>a7d20fd856b23e9af8f94094a10b787d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalToGlobalInterpolationAdaptor&lt; LocalInterpolation, typename Basis::Traits &gt;</type>
      <name>Interpolation</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>ab25ff156f58d75a488d288a1e82adb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::LagrangeSimplexLocalCoefficients&lt; 1, k &gt;</type>
      <name>Coefficients</name>
      <anchorfile>a01941.html</anchorfile>
      <anchor>af81caa6658548fd5f4c5749ea40d7e5b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Pk2DFiniteElement::Traits</name>
    <filename>a01953.html</filename>
    <base>Dune::FiniteElementInterface::Traits</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalBasisAdaptor&lt; LocalBasis, Geometry &gt;</type>
      <name>Basis</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a795d5e870e2d5820191b1450f5bcdaa6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalToGlobalInterpolationAdaptor&lt; LocalInterpolation, typename Basis::Traits &gt;</type>
      <name>Interpolation</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>ab8a0d0bd2aaf38d6b51926c750e9cf53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::LagrangeSimplexLocalCoefficients&lt; 2, k &gt;</type>
      <name>Coefficients</name>
      <anchorfile>a01953.html</anchorfile>
      <anchor>a969f56ff6ac8c49077543cd0fa3f8684</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PowerBasis::Traits</name>
    <filename>a01997.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; typename Traits::RangeField, dimR &gt;</type>
      <name>Range</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>aeb1033051e6c7bbad7ea0d66afaa1f79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; typename Traits::RangeField, dimR, Traits::dimDomainGlobal &gt;</type>
      <name>Jacobian</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a87058b58bcd6258896eb144747804615</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const std::size_t</type>
      <name>dimRange</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>af49fdc10ce19b5822cc88ec82b49d2b0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PowerFiniteElement::Traits</name>
    <filename>a02017.html</filename>
    <member kind="typedef">
      <type>PowerBasis&lt; typename Backend::Traits::Basis, dimR &gt;</type>
      <name>Basis</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a196649736b38f386301a86a3f520a365</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PowerCoefficients</type>
      <name>Coefficients</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>a23ba35e1ae3762b94dacf388c6731268</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PowerInterpolation&lt; typename Backend::Traits::Interpolation, typename Basis::Traits &gt;</type>
      <name>Interpolation</name>
      <anchorfile>a02017.html</anchorfile>
      <anchor>ae742011fbe0f7a35f2756b5a41579bc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ScalarLocalToGlobalFiniteElementAdaptor::Traits</name>
    <filename>a01625.html</filename>
    <base>Dune::FiniteElementInterface::Traits</base>
    <member kind="typedef">
      <type>ScalarLocalToGlobalBasisAdaptor&lt; typename LocalFiniteElement::Traits::LocalBasisType, Geometry &gt;</type>
      <name>Basis</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>ad1f5efd1c1ddab1b830df9a41900439b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalToGlobalInterpolationAdaptor&lt; typename LocalFiniteElement::Traits::LocalInterpolationType, typename Basis::Traits &gt;</type>
      <name>Interpolation</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a04fa1b20a8d86df843e4508cd3e66d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElement::Traits::LocalCoefficientsType</type>
      <name>Coefficients</name>
      <anchorfile>a01625.html</anchorfile>
      <anchor>a84c63e731aa1dc1d56d8723919f22c23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Unity</name>
    <filename>a02621.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>operator Field</name>
      <anchorfile>a02621.html</anchorfile>
      <anchor>ae8983ffa5ec31a5953df5bae76afb1ad</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Unity&lt; MultiIndex&lt; dim, F &gt; &gt;</name>
    <filename>a02769.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiIndex&lt; dim, F &gt;</type>
      <name>Field</name>
      <anchorfile>a02769.html</anchorfile>
      <anchor>a982fd01dbb521e881f3669c848ca3511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Field</name>
      <anchorfile>a02769.html</anchorfile>
      <anchor>a326ddfe8a8c1d9783382d6213f7d37b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator-</name>
      <anchorfile>a02769.html</anchorfile>
      <anchor>a35cd6ca66511df18fddb4443c03142f4</anchor>
      <arglist>(const Field &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator/</name>
      <anchorfile>a02769.html</anchorfile>
      <anchor>ab929bb88680aa4b09bfde7006050cdaf</anchor>
      <arglist>(const Field &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VirtualMonomialBasis</name>
    <filename>a02741.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a269f443d3327f4474743071a618203cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>StorageField</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a7fb62c08072d19d7dc141915e8918e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>DomainVector</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a075ac652031cebeebc3c7e73082e7d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a95a9f0ac01814e79031da0e8ac64bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a8dffc6e629676ba39db8dc0c918e9aef</anchor>
      <arglist>(unsigned int topologyId, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ad858588f0f0c53811898006e769a062c</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int order)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a9c06c8356c6150355612a7120ada2a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a493dc2df48a3c1bf54cf3aaeae435d9b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a954de87b8837d51e3558fc0659496c25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a341fba3e5100104ad7c4bf61bead04c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a0178d4823af005d2ec66f31793ab1914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac3d4ff833d577333871a5e7359a29de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a9f02f58d4bb31d6070c422380524e960</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a1bcf9aa8e225f14e8c17b3d921eefe45</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ab960fd5215de791b40099060d9b22dbe</anchor>
      <arglist>(const DomainVector &amp;x, Dune::FieldVector&lt; Field, size &gt; *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac57e632c45fabd0c8e4ecfc52c190fe5</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2769a5df724c38c715586c1752c9f635</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a124225d9a66b873887404266a0bedc21</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2f234437da147df6fa62ef1c8da5cbfc</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac01fb0f4e2f4b8802771b3718418a31e</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>integrate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ab8e333b9666dd4567b39d74ddee99c75</anchor>
      <arglist>(Field *const values) const =0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ade323c9d063e7435ddc53a02e617f1c0</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a81b30cb2ec742aabbe5c96ff6781324a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a71232a4404d1410b15ee3a9fe5f1c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a0a6f497129cd598e79489329927afb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryType</type>
      <name>geometry_</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a035d8a5f7cec07aa73eb34ae928e991b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VirtualMonomialBasis&lt; static_cast&lt; GeometryType &gt;(geometryId).dim(), F &gt;</name>
    <filename>a02741.html</filename>
    <member kind="typedef">
      <type>F</type>
      <name>Field</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a269f443d3327f4474743071a618203cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>StorageField</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a7fb62c08072d19d7dc141915e8918e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimension &gt;</type>
      <name>DomainVector</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a075ac652031cebeebc3c7e73082e7d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a95a9f0ac01814e79031da0e8ac64bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a8dffc6e629676ba39db8dc0c918e9aef</anchor>
      <arglist>(unsigned int topologyId, unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ad858588f0f0c53811898006e769a062c</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int order)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualMonomialBasis</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a9c06c8356c6150355612a7120ada2a0a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a493dc2df48a3c1bf54cf3aaeae435d9b</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a954de87b8837d51e3558fc0659496c25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a341fba3e5100104ad7c4bf61bead04c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a0178d4823af005d2ec66f31793ab1914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac3d4ff833d577333871a5e7359a29de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a9f02f58d4bb31d6070c422380524e960</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a1bcf9aa8e225f14e8c17b3d921eefe45</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ab960fd5215de791b40099060d9b22dbe</anchor>
      <arglist>(const DomainVector &amp;x, Dune::FieldVector&lt; Field, size &gt; *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac57e632c45fabd0c8e4ecfc52c190fe5</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2769a5df724c38c715586c1752c9f635</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a124225d9a66b873887404266a0bedc21</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2f234437da147df6fa62ef1c8da5cbfc</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac01fb0f4e2f4b8802771b3718418a31e</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>integrate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ab8e333b9666dd4567b39d74ddee99c75</anchor>
      <arglist>(Field *const values) const=0</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ade323c9d063e7435ddc53a02e617f1c0</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a81b30cb2ec742aabbe5c96ff6781324a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a71232a4404d1410b15ee3a9fe5f1c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>order_</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a0a6f497129cd598e79489329927afb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryType</type>
      <name>geometry_</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a035d8a5f7cec07aa73eb34ae928e991b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VirtualMonomialBasisImpl</name>
    <filename>a02745.html</filename>
    <templarg>geometryId</templarg>
    <templarg></templarg>
    <base>VirtualMonomialBasis&lt; static_cast&lt; GeometryType &gt;(geometryId).dim(), F &gt;</base>
    <member kind="typedef">
      <type>Base::Field</type>
      <name>Field</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>ac5ca7750e0597616f45350adf39ce5c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>abdfead2a168d68194bf6c468f7910360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F</type>
      <name>StorageField</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a7fb62c08072d19d7dc141915e8918e50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Field, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a95a9f0ac01814e79031da0e8ac64bf4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VirtualMonomialBasisImpl</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>afe0f0648e90d602becbfc5d32f462d92</anchor>
      <arglist>(unsigned int order)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int *</type>
      <name>sizes</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a9d042bdd1139a98e43dff8b26297c6c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>af53e116a121a1aa73c6b564924744a2c</anchor>
      <arglist>(const unsigned int deriv, const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02745.html</anchorfile>
      <anchor>a4a6ec0276360a4801f6a42605a69b3a0</anchor>
      <arglist>(Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a954de87b8837d51e3558fc0659496c25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>order</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a341fba3e5100104ad7c4bf61bead04c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a0178d4823af005d2ec66f31793ab1914</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac3d4ff833d577333871a5e7359a29de7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a1bcf9aa8e225f14e8c17b3d921eefe45</anchor>
      <arglist>(const DomainVector &amp;x, Field *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ab960fd5215de791b40099060d9b22dbe</anchor>
      <arglist>(const DomainVector &amp;x, Dune::FieldVector&lt; Field, size &gt; *const values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ac57e632c45fabd0c8e4ecfc52c190fe5</anchor>
      <arglist>(const DomainVector &amp;x, Derivatives&lt; Field, dimension, 1, deriv, layout &gt; *values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2769a5df724c38c715586c1752c9f635</anchor>
      <arglist>(const DomainVector &amp;x, Vector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a2f234437da147df6fa62ef1c8da5cbfc</anchor>
      <arglist>(const DVector &amp;x, RVector &amp;values) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>integrate</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>ade323c9d063e7435ddc53a02e617f1c0</anchor>
      <arglist>(Vector &amp;values) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a81b30cb2ec742aabbe5c96ff6781324a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a71232a4404d1410b15ee3a9fe5f1c867</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GeometryType</type>
      <name>geometry_</name>
      <anchorfile>a02741.html</anchorfile>
      <anchor>a035d8a5f7cec07aa73eb34ae928e991b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Zero</name>
    <filename>a02625.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>operator Field</name>
      <anchorfile>a02625.html</anchorfile>
      <anchor>af6beef5fc3892f9e4e618793f50c768c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Field</type>
      <name>epsilon</name>
      <anchorfile>a02625.html</anchorfile>
      <anchor>ab559efeac4da85be25cd7b138917f84e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Zero&lt; MultiIndex&lt; dim, F &gt; &gt;</name>
    <filename>a02773.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiIndex&lt; dim, F &gt;</type>
      <name>Field</name>
      <anchorfile>a02773.html</anchorfile>
      <anchor>a71cc34e088b5fed93a5b4f5a0048fb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Field</name>
      <anchorfile>a02773.html</anchorfile>
      <anchor>add885374ed00de17d9479affc06d429f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune</name>
    <filename>a00559.html</filename>
    <namespace>Dune::DerivativeLayoutNS</namespace>
    <namespace>Dune::MonomImp</namespace>
    <namespace>Dune::Python</namespace>
    <class kind="class">Dune::BDFMCubeLocalFiniteElement</class>
    <class kind="class">Dune::BDFMCubeLocalBasis</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::BDFMCubeLocalBasis&lt; D, R, 2, 3 &gt;</class>
    <class kind="class">Dune::BDFMCubeLocalCoefficients</class>
    <class kind="class">Dune::BDFMCubeLocalInterpolation</class>
    <class kind="class">Dune::BDM1Cube2DLocalBasis</class>
    <class kind="class">Dune::BDM1Cube2DLocalCoefficients</class>
    <class kind="class">Dune::BDM1Cube2DLocalInterpolation</class>
    <class kind="class">Dune::BDM1Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM1Cube3DLocalBasis</class>
    <class kind="class">Dune::BDM1Cube3DLocalCoefficients</class>
    <class kind="class">Dune::BDM1Cube3DLocalInterpolation</class>
    <class kind="class">Dune::BDM1Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::BDM1Simplex2DLocalBasis</class>
    <class kind="class">Dune::BDM1Simplex2DLocalCoefficients</class>
    <class kind="class">Dune::BDM1Simplex2DLocalInterpolation</class>
    <class kind="class">Dune::BDM1Simplex2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM2Cube2DLocalBasis</class>
    <class kind="class">Dune::BDM2Cube2DLocalCoefficients</class>
    <class kind="class">Dune::BDM2Cube2DLocalInterpolation</class>
    <class kind="class">Dune::BDM2Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM2Simplex2DLocalBasis</class>
    <class kind="class">Dune::BDM2Simplex2DLocalCoefficients</class>
    <class kind="class">Dune::BDM2Simplex2DLocalInterpolation</class>
    <class kind="class">Dune::BDM2Simplex2DLocalFiniteElement</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniSimplexLocalFiniteElement</class>
    <class kind="class">Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::BrezziDouglasMariniSimplexLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::FiniteElementInterface</class>
    <class kind="class">Dune::FiniteElementFactoryInterface</class>
    <class kind="class">Dune::BasisInterface</class>
    <class kind="struct">Dune::InterpolationInterface</class>
    <class kind="struct">Dune::CoefficientsInterface</class>
    <class kind="struct">Dune::FiniteElementInterfaceSwitch</class>
    <class kind="struct">Dune::BasisInterfaceSwitch</class>
    <class kind="struct">Dune::LocalBasisTraits</class>
    <class kind="struct">Dune::LocalFiniteElementTraits</class>
    <class kind="class">Dune::LocalFiniteElementVariant</class>
    <class kind="class">Dune::LocalFiniteElementVariantCache</class>
    <class kind="class">Dune::LocalKey</class>
    <class kind="struct">Dune::LocalToGlobalBasisAdaptorTraits</class>
    <class kind="class">Dune::ScalarLocalToGlobalBasisAdaptor</class>
    <class kind="class">Dune::LocalToGlobalInterpolationAdaptor</class>
    <class kind="struct">Dune::ScalarLocalToGlobalFiniteElementAdaptor</class>
    <class kind="class">Dune::ScalarLocalToGlobalFiniteElementAdaptorFactory</class>
    <class kind="class">Dune::LocalInterpolationVirtualInterface</class>
    <class kind="class">Dune::LocalFiniteElementFunctionBase</class>
    <class kind="class">Dune::LocalBasisVirtualInterface</class>
    <class kind="class">Dune::LocalInterpolationVirtualInterfaceBase</class>
    <class kind="class">Dune::LocalCoefficientsVirtualInterface</class>
    <class kind="class">Dune::LocalFiniteElementVirtualInterface</class>
    <class kind="class">Dune::LocalFiniteElementVirtualImp</class>
    <class kind="struct">Dune::LocalFiniteElementCloneFactoryHelper</class>
    <class kind="struct">Dune::LocalFiniteElementCloneFactory</class>
    <class kind="class">Dune::LocalBasisVirtualImp</class>
    <class kind="class">Dune::LocalInterpolationVirtualImp</class>
    <class kind="class">Dune::LocalCoefficientsVirtualImp</class>
    <class kind="class">Dune::CrouzeixRaviartLocalFiniteElement</class>
    <class kind="class">Dune::DualP1LocalBasis</class>
    <class kind="class">Dune::DualP1LocalCoefficients</class>
    <class kind="class">Dune::DualP1LocalInterpolation</class>
    <class kind="class">Dune::DualP1LocalFiniteElement</class>
    <class kind="class">Dune::DualPQ1LocalFiniteElementCache</class>
    <class kind="class">Dune::DualQ1LocalBasis</class>
    <class kind="class">Dune::DualQ1LocalCoefficients</class>
    <class kind="class">Dune::DualQ1LocalInterpolation</class>
    <class kind="class">Dune::DualQ1LocalFiniteElement</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalBasis&lt; D, R, 3 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2LocalInterpolation</class>
    <class kind="class">Dune::HierarchicalP2LocalFiniteElement</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalBasis&lt; D, R, 3 &gt;</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalCoefficients</class>
    <class kind="class">Dune::HierarchicalSimplexP2WithElementBubbleLocalInterpolation</class>
    <class kind="class">Dune::HierarchicalP2WithElementBubbleLocalFiniteElement</class>
    <class kind="class">Dune::HierarchicalPrismP2LocalBasis</class>
    <class kind="class">Dune::HierarchicalPrismP2LocalInterpolation</class>
    <class kind="class">Dune::HierarchicalPrismP2LocalFiniteElement</class>
    <class kind="class">Dune::LagrangePoint</class>
    <class kind="class">Dune::EmptyPointSet</class>
    <class kind="class">Dune::EquidistantPointSet</class>
    <class kind="struct">Dune::LagrangeInterpolationFactory</class>
    <class kind="class">Dune::LocalLagrangeInterpolation</class>
    <class kind="struct">Dune::LagrangeBasisFactory</class>
    <class kind="struct">Dune::LagrangeCoefficientsFactory</class>
    <class kind="class">Dune::LagrangeCubeLocalFiniteElement</class>
    <class kind="class">Dune::LagrangePrismLocalFiniteElement</class>
    <class kind="class">Dune::LagrangePyramidLocalFiniteElement</class>
    <class kind="class">Dune::LagrangeSimplexLocalFiniteElement</class>
    <class kind="class">Dune::P0LocalBasis</class>
    <class kind="class">Dune::P0LocalCoefficients</class>
    <class kind="class">Dune::P0LocalInterpolation</class>
    <class kind="class">Dune::P0LocalFiniteElement</class>
    <class kind="class">Dune::Pk1DFiniteElement</class>
    <class kind="struct">Dune::Pk1DFiniteElementFactory</class>
    <class kind="class">Dune::Pk2DFiniteElement</class>
    <class kind="struct">Dune::Pk2DFiniteElementFactory</class>
    <class kind="class">Dune::PQ22DLocalFiniteElement</class>
    <class kind="struct">Dune::DimSpecificPQkLocalFiniteElementFactory</class>
    <class kind="struct">Dune::DimSpecificPQkLocalFiniteElementFactory&lt; D, R, 3, k &gt;</class>
    <class kind="struct">Dune::PQkLocalFiniteElementFactory</class>
    <class kind="class">Dune::PQkLocalFiniteElementCache</class>
    <class kind="class">Dune::Q1FiniteElementFactory</class>
    <class kind="class">Dune::Q2FiniteElementFactory</class>
    <class kind="class">Dune::LagrangeLocalFiniteElement</class>
    <class kind="class">Dune::PowerBasis</class>
    <class kind="class">Dune::PowerCoefficients</class>
    <class kind="class">Dune::PowerInterpolation</class>
    <class kind="class">Dune::PowerFiniteElement</class>
    <class kind="class">Dune::PowerFiniteElementFactory</class>
    <class kind="class">Dune::MimeticLocalBasis</class>
    <class kind="class">Dune::MimeticLocalInterpolation</class>
    <class kind="class">Dune::MimeticLocalCoefficients</class>
    <class kind="class">Dune::MimeticLocalFiniteElement</class>
    <class kind="class">Dune::MonomialLocalBasis</class>
    <class kind="class">Dune::MonomialLocalCoefficients</class>
    <class kind="class">Dune::MonomialLocalInterpolation</class>
    <class kind="class">Dune::MonomialLocalFiniteElement</class>
    <class kind="class">Dune::MonomialFiniteElementFactory</class>
    <class kind="class">Dune::Nedelec1stKindCubeLocalFiniteElement</class>
    <class kind="class">Dune::Nedelec1stKindSimplexLocalFiniteElement</class>
    <class kind="struct">Dune::NedelecBasisFactory</class>
    <class kind="struct">Dune::NedelecL2InterpolationFactory</class>
    <class kind="class">Dune::LocalCoefficientsContainer</class>
    <class kind="struct">Dune::NedelecCoefficientsFactory</class>
    <class kind="struct">Dune::NedelecL2InterpolationBuilder</class>
    <class kind="class">Dune::NedelecL2Interpolation</class>
    <class kind="struct">Dune::NedelecVecMatrix</class>
    <class kind="struct">Dune::NedelecPreBasisFactory</class>
    <class kind="struct">Dune::OrthonormalBasisFactory</class>
    <class kind="class">Dune::OrthonormalLocalFiniteElement</class>
    <class kind="struct">Dune::RannacherTurekLocalFiniteElement</class>
    <class kind="struct">Dune::RannacherTurek2DLocalBasis</class>
    <class kind="class">Dune::RannacherTurek3DLocalBasis</class>
    <class kind="struct">Dune::RannacherTurekLocalBasis</class>
    <class kind="struct">Dune::RannacherTurekLocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="struct">Dune::RannacherTurekLocalBasis&lt; D, R, 3 &gt;</class>
    <class kind="struct">Dune::RannacherTurekLocalCoefficients</class>
    <class kind="class">Dune::RannacherTurekLocalInterpolation</class>
    <class kind="class">Dune::RT02DLocalBasis</class>
    <class kind="class">Dune::RT02DLocalCoefficients</class>
    <class kind="class">Dune::RT02DLocalInterpolation</class>
    <class kind="class">Dune::RT02DLocalFiniteElement</class>
    <class kind="class">Dune::RT03DLocalBasis</class>
    <class kind="class">Dune::RT03DLocalCoefficients</class>
    <class kind="class">Dune::RT03DLocalInterpolation</class>
    <class kind="class">Dune::RT03DLocalFiniteElement</class>
    <class kind="class">Dune::RT0Cube2DLocalBasis</class>
    <class kind="class">Dune::RT0Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT0Cube2DLocalCoefficients</class>
    <class kind="class">Dune::RT0Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT0Cube3DLocalBasis</class>
    <class kind="class">Dune::RT0Cube3DLocalInterpolation</class>
    <class kind="class">Dune::RT0Cube3DLocalCoefficients</class>
    <class kind="class">Dune::RT0Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::RT12DLocalBasis</class>
    <class kind="class">Dune::RT12DLocalCoefficients</class>
    <class kind="class">Dune::RT12DLocalInterpolation</class>
    <class kind="class">Dune::RT12DLocalFiniteElement</class>
    <class kind="class">Dune::RT1Cube2DLocalBasis</class>
    <class kind="class">Dune::RT1Cube2DLocalCoefficients</class>
    <class kind="class">Dune::RT1Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT1Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT1Cube3DLocalBasis</class>
    <class kind="class">Dune::RT1Cube3DLocalCoefficients</class>
    <class kind="class">Dune::RT1Cube3DLocalInterpolation</class>
    <class kind="class">Dune::RT1Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::RT2Cube2DLocalBasis</class>
    <class kind="class">Dune::RT2Cube2DLocalCoefficients</class>
    <class kind="class">Dune::RT2Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT2Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT3Cube2DLocalBasis</class>
    <class kind="class">Dune::RT3Cube2DLocalCoefficients</class>
    <class kind="class">Dune::RT3Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT3Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT4Cube2DLocalBasis</class>
    <class kind="class">Dune::RT4Cube2DLocalCoefficients</class>
    <class kind="class">Dune::RT4Cube2DLocalInterpolation</class>
    <class kind="class">Dune::RT4Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 0 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 1 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 2 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 3 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 2, 4 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 0 &gt;</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement&lt; D, R, 3, 1 &gt;</class>
    <class kind="struct">Dune::RaviartThomasBasisFactory</class>
    <class kind="struct">Dune::RaviartThomasL2InterpolationFactory</class>
    <class kind="struct">Dune::RaviartThomasCoefficientsFactory</class>
    <class kind="struct">Dune::RTL2InterpolationBuilder</class>
    <class kind="class">Dune::RaviartThomasL2Interpolation</class>
    <class kind="struct">Dune::RTVecMatrix</class>
    <class kind="struct">Dune::RTPreBasisFactory</class>
    <class kind="class">Dune::RaviartThomasSimplexLocalFiniteElement</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 1 &gt;</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 2 &gt;</class>
    <class kind="class">Dune::RefinedSimplexLocalBasis&lt; D, 3 &gt;</class>
    <class kind="class">Dune::RefinedP0LocalBasis</class>
    <class kind="class">Dune::RefinedP0LocalCoefficients</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 1 &gt; &gt;</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 2 &gt; &gt;</class>
    <class kind="class">Dune::RefinedP0LocalInterpolation&lt; RefinedP0LocalBasis&lt; D, R, 3 &gt; &gt;</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::RefinedP0LocalFiniteElement&lt; D, R, 3 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalBasis</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 1 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 2 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalBasis&lt; D, R, 3 &gt;</class>
    <class kind="class">Dune::RefinedP1LocalFiniteElement</class>
    <class kind="struct">Dune::MonomialEvaluator</class>
    <class kind="struct">Dune::StandardEvaluator</class>
    <class kind="struct">Dune::BasisMatrix</class>
    <class kind="struct">Dune::BasisMatrixBase</class>
    <class kind="struct">Dune::BasisMatrix&lt; const MonomialBasis&lt; geometryId, F &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const Dune::VirtualMonomialBasis&lt; dim, F &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const PolynomialBasis&lt; Eval, CM, D, R &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::BasisMatrix&lt; const PolynomialBasisWithMatrix&lt; Eval, CM &gt;, Interpolation, Field &gt;</class>
    <class kind="struct">Dune::Mult</class>
    <class kind="struct">Dune::Mult&lt; Field, FieldVector&lt; Field2, dimRange &gt; &gt;</class>
    <class kind="class">Dune::SparseCoeffMatrix</class>
    <class kind="struct">Dune::Identity</class>
    <class kind="struct">Dune::DefaultBasisFactory</class>
    <class kind="class">Dune::DGLocalCoefficients</class>
    <class kind="struct">Dune::DGLocalCoefficientsFactory</class>
    <class kind="struct">Dune::Unity</class>
    <class kind="struct">Dune::Zero</class>
    <class kind="struct">Dune::FieldCast</class>
    <class kind="struct">Dune::FieldCast&lt; F2, Dune::FieldVector&lt; F1, dim &gt; &gt;</class>
    <class kind="struct">Dune::FieldCast&lt; F2, Dune::FieldMatrix&lt; F1, dim1, dim2 &gt; &gt;</class>
    <class kind="struct">Dune::Precision</class>
    <class kind="struct">Dune::Precision&lt; double &gt;</class>
    <class kind="struct">Dune::Precision&lt; long double &gt;</class>
    <class kind="struct">Dune::Precision&lt; float &gt;</class>
    <class kind="struct">Dune::ComputeField</class>
    <class kind="struct">Dune::InterpolationHelper</class>
    <class kind="struct">Dune::LocalL2Interpolation</class>
    <class kind="class">Dune::LocalL2InterpolationBase</class>
    <class kind="struct">Dune::LocalL2Interpolation&lt; B, Q, true &gt;</class>
    <class kind="struct">Dune::LocalL2Interpolation&lt; B, Q, false &gt;</class>
    <class kind="struct">Dune::LocalL2InterpolationFactory</class>
    <class kind="class">Dune::LFEMatrix</class>
    <class kind="struct">Dune::GenericLocalFiniteElement</class>
    <class kind="struct">Dune::DGLocalFiniteElement</class>
    <class kind="struct">Dune::L2LocalFiniteElement</class>
    <class kind="class">Dune::MonomialBasisSize</class>
    <class kind="class">Dune::MonomialBasis</class>
    <class kind="struct">Dune::MonomialBasisHelper</class>
    <class kind="class">Dune::MonomialBasisImpl</class>
    <class kind="class">Dune::StandardMonomialBasis</class>
    <class kind="class">Dune::StandardBiMonomialBasis</class>
    <class kind="class">Dune::VirtualMonomialBasis</class>
    <class kind="class">Dune::VirtualMonomialBasisImpl</class>
    <class kind="struct">Dune::MonomialBasisFactory</class>
    <class kind="struct">Dune::MonomialBasisProvider</class>
    <class kind="class">Dune::MultiIndex</class>
    <class kind="struct">Dune::Unity&lt; MultiIndex&lt; dim, F &gt; &gt;</class>
    <class kind="struct">Dune::Zero&lt; MultiIndex&lt; dim, F &gt; &gt;</class>
    <class kind="class">Dune::PolynomialBasis</class>
    <class kind="class">Dune::PolynomialBasisWithMatrix</class>
    <class kind="class">Dune::LFETensor</class>
    <class kind="struct">Dune::LFETensor&lt; F, 0, deriv &gt;</class>
    <class kind="struct">Dune::LFETensor&lt; F, 0, 0 &gt;</class>
    <class kind="class">Dune::LFETensor&lt; F, dimD, 0 &gt;</class>
    <class kind="struct">Dune::Derivatives</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt;</class>
    <class kind="struct">Dune::Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, dimR, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::derivative &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::LFETensorAxpy&lt; Derivatives&lt; F1, dimD, 1, d, DerivativeLayoutNS::value &gt;, Vec2, deriv &gt;</class>
    <class kind="struct">Dune::DerivativeAssign</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, layout &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, Derivatives&lt; F2, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::value &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, Derivatives&lt; F2, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, layout &gt;, F2 &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, dimR &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::value &gt;, FieldVector&lt; F2, 1 &gt; &gt;</class>
    <class kind="struct">Dune::DerivativeAssign&lt; Derivatives&lt; F1, dimD, 1, deriv, DerivativeLayoutNS::derivative &gt;, FieldVector&lt; F2, 1 &gt; &gt;</class>
    <class kind="class">Dune::EdgeS0_5Basis</class>
    <class kind="class">Dune::EdgeS0_5Coefficients</class>
    <class kind="struct">Dune::EdgeS0_5Common</class>
    <class kind="class">Dune::EdgeS0_5Interpolation</class>
    <class kind="class">Dune::EdgeS0_5FiniteElement</class>
    <class kind="struct">Dune::EdgeS0_5FiniteElementFactory</class>
    <member kind="typedef">
      <type>LocalFiniteElementVariantCache&lt; Impl::ImplementedLagrangeFiniteElements&lt; D, R, dim, order &gt; &gt;</type>
      <name>LagrangeLocalFiniteElementCache</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab585b20191b64f3ff507227d45718aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, dim, 1 &gt;</type>
      <name>P1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9cbe31c47dd72aa557e361ff43287fea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, d, 2 &gt;</type>
      <name>P2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af6ad2bbf13d0be739ccd1fc0c16d27bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 3, 2 &gt;</type>
      <name>P23DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>acb9efedb2dfb2d21e6df328af385de01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, d, k &gt;</type>
      <name>PkLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aaff625586b0cf6d0676b7ead05383b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 1, k &gt;</type>
      <name>Pk1DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a09cb741c7682af02985555c1211cafce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 2, k &gt;</type>
      <name>Pk2DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af44702636762c4497f93c275404c358e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeSimplexLocalFiniteElement&lt; D, R, 3, k &gt;</type>
      <name>Pk3DLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3dc7c1ac1b5a65ece0bad1fe0ba4b91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePrismLocalFiniteElement&lt; D, R, 1 &gt;</type>
      <name>PrismP1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a715613d9ab83a92edaafa924ed314e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePrismLocalFiniteElement&lt; D, R, 2 &gt;</type>
      <name>PrismP2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6ce456d71a630bbc7e8779588e9748df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePyramidLocalFiniteElement&lt; D, R, 1 &gt;</type>
      <name>PyramidP1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa452b8a2c96f0017af7dda4547d27a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangePyramidLocalFiniteElement&lt; D, R, 2 &gt;</type>
      <name>PyramidP2LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae8cbbb31613326d6c3c60089a16186ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeCubeLocalFiniteElement&lt; D, R, dim, 1 &gt;</type>
      <name>Q1LocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a493fad3b04a69017e323c1b332067137</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LagrangeCubeLocalFiniteElement&lt; D, R, d, k &gt;</type>
      <name>QkLocalFiniteElement</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a51b6c1a44d0c8a206a6ab35609208691</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalFiniteElementVariantCache&lt; Impl::ImplementedRaviartThomasLocalFiniteElements&lt; D, R, dim, order &gt; &gt;</type>
      <name>RaviartThomasLocalFiniteElementCache</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a819bbc5d411d26deab8f6c9683d6d762</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1cd5cc7e4a3db569f40875b51febffe4</anchor>
      <arglist>(const GeometryType &amp;gt, std::size_t order)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a9274e9f9c0e33d6f079594c6c9cdde9f</anchor>
      <arglist>(unsigned int topologyId, unsigned int dim, std::size_t order)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>equidistantLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a4526cca5c0c55d6449dbd64a5fdf46</anchor>
      <arglist>(const GeometryType &amp;gt, unsigned int codim, std::size_t order, unsigned int *count, LagrangePoint&lt; ct, cdim &gt; *points)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static unsigned int</type>
      <name>equidistantLagrangePoints</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae6f981433d37cd15cb7bc2be9c360903</anchor>
      <arglist>(unsigned int topologyId, unsigned int dim, unsigned int codim, std::size_t order, unsigned int *count, LagrangePoint&lt; ct, cdim &gt; *points)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisPrint</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aa65dc65e5daa187d5ac6e61620dc5d47</anchor>
      <arglist>(std::ostream &amp;out, typename BasisFactory::Object &amp;basis)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>basisPrint</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a598a8acbb3ce5c8f71dbdbdc4a63eaf0</anchor>
      <arglist>(std::ostream &amp;out, typename BasisFactory::Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator+</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8a70799efc758478ecf434b9e8786001</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator-</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a1f36ac9f98478852168894c57daa5da1</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af99cedd10c1c4dc63a021ee661b974d0</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>Field</type>
      <name>operator/</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a966b8d739e48d676c3480e2288d3f382</anchor>
      <arglist>(const Unity&lt; Field &gt; &amp;u, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3e55443d9ff5419cfce9a70e6c37c6e0</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a56b7b4941be3583597c6a42d05dfcbc7</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a24127181970eebb5e704dc32ca520ec0</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6fdd9bf1e7d01f03808ebcc168bd6415</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a831e5d02dd0babbe210cd90e8e017dc9</anchor>
      <arglist>(const Zero&lt; Field &gt; &amp;z, const Field &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a29d512452c1abe87010be877afcaaa42</anchor>
      <arglist>(const Field &amp;f, const Zero&lt; Field &gt; &amp;z)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a21dc7d62b42eb19c5bf573afa02f4701</anchor>
      <arglist>(const F1 &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a60c721e6fe8850994e436325493fde01</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, dim &gt; &amp;f1, Dune::FieldVector&lt; F2, dim &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af20c41112e186985c51be6b19c828e58</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a6be8eab69ad9479d456107338e12207f</anchor>
      <arglist>(const F1 &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ae0feaa87f8ccc1704f72cf19118524b2</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, rdim, cdim &gt; &amp;f1, Dune::FieldMatrix&lt; F2, rdim, cdim &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>af4880906b28dfc75e2c7f120f4a025af</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7b0a354bfee3933bb1b4ef3983a6cfd6</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, F2 &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a353bbbc4c4acc563352e1fdf9f5d4619</anchor>
      <arglist>(const F1 &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>aca73d5455b9faf76e0c4b171b16a86a8</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, Dune::FieldMatrix&lt; F2, 1, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a99dd7ad57e6aac992a7eeb80ec01729d</anchor>
      <arglist>(const Dune::FieldMatrix&lt; F1, 1, 1 &gt; &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a37e751795d9423b374e6ddceb0365531</anchor>
      <arglist>(const Dune::FieldVector&lt; F1, 1 &gt; &amp;f1, Dune::FieldVector&lt; F2, 1 &gt; &amp;f2)</arglist>
    </member>
    <member kind="function">
      <type>FieldCast&lt; F2, V &gt;::type</type>
      <name>field_cast</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a99dca4e0151b30e5e122884feda8e766</anchor>
      <arglist>(const V &amp;f1)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab3fdad87f2673dbe165a6628ff204718</anchor>
      <arglist>(std::ostream &amp;out, const LFEMatrix&lt; Field &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a48356fd6fae1020532a63b79f4a3527e</anchor>
      <arglist>(std::ostream &amp;, const MultiIndex&lt; dim, Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>operator*</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>afb2c1b9aa389270f5cb4c3359e5b3d13</anchor>
      <arglist>(const F &amp;f, const MultiIndex&lt; dim, Field &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>MultiIndex&lt; dim, Field &gt;</type>
      <name>operator/</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a556e575cab91370af35ceb1389e66aa9</anchor>
      <arglist>(const F &amp;f, const MultiIndex&lt; dim, Field &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab5a09420108b7b407129c3a8deffa8f6</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; MultiIndex&lt; d, F &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ada33a3f2b2ce6eef7576d920971396af</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Dune::FieldVector&lt; MultiIndex&lt; d, F &gt;, dimR &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ab110785adde82ff9776bb845bff0b1a6</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Dune::FieldMatrix&lt; MultiIndex&lt; d, F &gt;, dimR1, dimR2 &gt; &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a3509e62417222c2214a755b3f0ee06b1</anchor>
      <arglist>(std::ostream &amp;out, const MultiIndex&lt; d, F &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8d0e4680bac6d2e2f8cee122ae9d8f45</anchor>
      <arglist>(const Zero&lt; MultiIndex&lt; dim, Field &gt; &gt; &amp;, const MultiIndex&lt; dim, Field &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a7bbbdb77ac7ed9df36c91e084535545a</anchor>
      <arglist>(const MultiIndex&lt; dim, Field &gt; &amp;f, const Zero&lt; MultiIndex&lt; dim, Field &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>ababbc30af3b42910049bb59c5ad6a234</anchor>
      <arglist>(std::ostream &amp;out, const LFETensor&lt; F, dimD, deriv &gt; &amp;tensor)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a49c7ebe4f6eb581f5ffc2cf89e0bde10</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::derivative &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a8c35b72dabe6e9c81ce0dcba81b3a8eb</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, deriv, DerivativeLayoutNS::value &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a124997eb4c57b0e3798cd84821f1952e</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::derivative &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a22b80ec060c84ec5be5a7b6626dd86bb</anchor>
      <arglist>(std::ostream &amp;out, const Derivatives&lt; F, dimD, dimR, 0, DerivativeLayoutNS::value &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00559.html</anchorfile>
      <anchor>a2408f4a688b117c70a341eb9fda18830</anchor>
      <arglist>(std::ostream &amp;out, const std::vector&lt; Derivatives&lt; F, dimD, dimR, deriv, layout &gt; &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::DerivativeLayoutNS</name>
    <filename>a00563.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>DerivativeLayout</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0a811ae86f7133497672d9229a382f754a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>derivative</name>
      <anchorfile>a00563.html</anchorfile>
      <anchor>add705beef9cafc8fdff680302f42d6c0a0767ce89090503f50f831b6c9f97080c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::MonomImp</name>
    <filename>a00561.html</filename>
    <class kind="class">Dune::MonomImp::EvalAccess</class>
    <class kind="class">Dune::MonomImp::JacobianAccess</class>
    <class kind="struct">Dune::MonomImp::Evaluate</class>
    <class kind="struct">Dune::MonomImp::Evaluate&lt; Traits, 1 &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::Python</name>
    <filename>a00564.html</filename>
    <member kind="function">
      <type>DUNE_EXPORT auto</type>
      <name>registerLocalFiniteElement</name>
      <anchorfile>a00564.html</anchorfile>
      <anchor>a9e2f7c8d9bdba1910978f3281344f0d9</anchor>
      <arglist>(pybind11::handle scope, const char *name=&quot;LocalFiniteElement&quot;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>ONBCompute</name>
    <filename>a00562.html</filename>
    <class kind="struct">ONBCompute::Integral</class>
    <class kind="class">ONBCompute::ONBMatrix</class>
    <member kind="function">
      <type>scalar_t</type>
      <name>factorial</name>
      <anchorfile>a00562.html</anchorfile>
      <anchor>a2469aecd2f524a96e9306d349878b356</anchor>
      <arglist>(int start, int end)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>LocalFunctions</name>
    <title>LocalFunctions</title>
    <filename>a00547.html</filename>
    <subgroup>BrezziDouglasFortinMarini</subgroup>
    <subgroup>BrezziDouglasMarini</subgroup>
    <subgroup>DualMortar</subgroup>
    <subgroup>Lagrange</subgroup>
    <subgroup>Mimetic</subgroup>
    <subgroup>Monomial</subgroup>
    <subgroup>Orthonormal</subgroup>
    <subgroup>RannacherTurek</subgroup>
    <subgroup>RaviartThomas</subgroup>
    <subgroup>Whitney</subgroup>
  </compound>
  <compound kind="group">
    <name>BrezziDouglasFortinMarini</name>
    <title>Brezzi-Douglas-Fortin-Marini elements</title>
    <filename>a00548.html</filename>
    <class kind="class">Dune::BDFMCubeLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>BrezziDouglasMarini</name>
    <title>Brezzi-Douglas-Marini elements</title>
    <filename>a00549.html</filename>
    <class kind="class">Dune::BDM1Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM1Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::BDM1Simplex2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM2Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::BDM2Simplex2DLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>DualMortar</name>
    <title>Dual Mortar basis elements</title>
    <filename>a00550.html</filename>
    <class kind="class">Dune::DualP1LocalFiniteElement</class>
    <class kind="class">Dune::DualQ1LocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>Lagrange</name>
    <title>Lagrange elements</title>
    <filename>a00551.html</filename>
    <class kind="class">Dune::LagrangeLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>Mimetic</name>
    <title>Mimetic elements</title>
    <filename>a00552.html</filename>
    <class kind="class">Dune::MimeticLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>Monomial</name>
    <title>Monomial elements</title>
    <filename>a00553.html</filename>
    <class kind="class">Dune::MonomialLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>Orthonormal</name>
    <title>Orthonormal elements</title>
    <filename>a00554.html</filename>
    <class kind="class">Dune::OrthonormalLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>RannacherTurek</name>
    <title>Rannacher-Turek elements</title>
    <filename>a00555.html</filename>
    <class kind="struct">Dune::RannacherTurekLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>RaviartThomas</name>
    <title>Raviart-Thomas elements</title>
    <filename>a00556.html</filename>
    <class kind="class">Dune::RT02DLocalFiniteElement</class>
    <class kind="class">Dune::RT03DLocalFiniteElement</class>
    <class kind="class">Dune::RT0Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT0Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::RT12DLocalFiniteElement</class>
    <class kind="class">Dune::RT1Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT1Cube3DLocalFiniteElement</class>
    <class kind="class">Dune::RT2Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT3Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RT4Cube2DLocalFiniteElement</class>
    <class kind="class">Dune::RaviartThomasCubeLocalFiniteElement</class>
    <class kind="class">Dune::RaviartThomasSimplexLocalFiniteElement</class>
  </compound>
  <compound kind="group">
    <name>Whitney</name>
    <title>Whitney elements</title>
    <filename>a00557.html</filename>
    <class kind="class">Dune::EdgeS0_5FiniteElement</class>
  </compound>
  <compound kind="page">
    <name>modules</name>
    <title>Modules</title>
    <filename>a04299.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>dune-localfunctions Automatic Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="Modules">mods</docanchor>
  </compound>
</tagfile>
