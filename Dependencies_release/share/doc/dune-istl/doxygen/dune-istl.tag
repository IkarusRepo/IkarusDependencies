<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1" doxygen_gitid="ef9b20ac7f8a8621fcfc299f8bd0b80422390f4b">
  <compound kind="file">
    <name>aggregates.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00113.html</filename>
    <includes id="a00158" name="parameters.hh" local="yes" imported="no">parameters.hh</includes>
    <includes id="a00140" name="graph.hh" local="yes" imported="no">graph.hh</includes>
    <includes id="a00164" name="properties.hh" local="yes" imported="no">properties.hh</includes>
    <includes id="a00119" name="combinedfunctor.hh" local="yes" imported="no">combinedfunctor.hh</includes>
    <class kind="class">Dune::Amg::AggregationCriterion</class>
    <class kind="class">Dune::Amg::SymmetricMatrixDependency</class>
    <class kind="class">Dune::Amg::Dependency</class>
    <class kind="class">Dune::Amg::SymmetricDependency</class>
    <class kind="class">Dune::Amg::Diagonal</class>
    <class kind="class">Dune::Amg::FirstDiagonal</class>
    <class kind="struct">Dune::Amg::RowSum</class>
    <class kind="struct">Dune::Amg::FrobeniusNorm</class>
    <class kind="struct">Dune::Amg::AlwaysOneNorm</class>
    <class kind="class">Dune::Amg::SymmetricCriterion</class>
    <class kind="class">Dune::Amg::UnSymmetricCriterion</class>
    <class kind="class">Dune::Amg::AggregatesMap</class>
    <class kind="class">Dune::Amg::AggregatesMap::DummyEdgeVisitor</class>
    <class kind="class">Dune::Amg::Aggregate</class>
    <class kind="class">Dune::Amg::Aggregator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3b1322dc105dc48e2cfbb19bdc157416</anchor>
      <arglist>(std::ostream &amp;os, const AggregationCriterion&lt; T &gt; &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf619ca4d1318ace19831096270fb506c</anchor>
      <arglist>(G &amp;graph, const typename C::Matrix &amp;matrix, C criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAggregates2d</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67437d2f75e7e1216ee57306825332be</anchor>
      <arglist>(const AggregatesMap&lt; V &gt; &amp;aggregates, int n, int m, std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>allocator.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00008.html</filename>
    <class kind="struct">Dune::exists</class>
    <class kind="struct">Dune::DefaultAllocatorTraits</class>
    <class kind="struct">Dune::DefaultAllocatorTraits&lt; T, std::void_t&lt; typename T::allocator_type &gt; &gt;</class>
    <class kind="struct">Dune::AllocatorTraits</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>typename AllocatorTraits&lt; T &gt;::type</type>
      <name>AllocatorType</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9ab4e8c72359591b27aede17f5ec6615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; typename AllocatorTraits&lt; T &gt;::type &gt;::template rebind_alloc&lt; X &gt;</type>
      <name>ReboundAllocatorType</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9020314eeb58ec32f6fab5ef0c196674</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>amg.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00116.html</filename>
    <includes id="a00170" name="smoother.hh" local="no" imported="no">dune/istl/paamg/smoother.hh</includes>
    <includes id="a00173" name="transfer.hh" local="no" imported="no">dune/istl/paamg/transfer.hh</includes>
    <includes id="a00155" name="matrixhierarchy.hh" local="no" imported="no">dune/istl/paamg/matrixhierarchy.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="no" imported="no">dune/istl/scalarproducts.hh</includes>
    <includes id="a00218" name="superlu.hh" local="no" imported="no">dune/istl/superlu.hh</includes>
    <includes id="a00227" name="umfpack.hh" local="no" imported="no">dune/istl/umfpack.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <class kind="class">Dune::Amg::AMG</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver&lt; M, superlu &gt;</class>
    <class kind="struct">Dune::AMGCreator</class>
    <class kind="struct">Dune::AMGCreator::isValidBlockType</class>
    <class kind="struct">Dune::AMGCreator::isValidBlockType&lt; FieldMatrix&lt; T, n, m &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9f1d7465bf71a0549ed5596e9b142f7f</anchor>
      <arglist>(&quot;amg&quot;, AMGCreator())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>arpackpp.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/eigenvalue/</path>
    <filename>a00047.html</filename>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="no" imported="no">dune/istl/istlexception.hh</includes>
    <includes id="a00068" name="io.hh" local="no" imported="no">dune/istl/io.hh</includes>
    <class kind="class">Dune::ArPackPlusPlus_Algorithms</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>basearray.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00011.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>bccsmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00014.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::ISTL</namespace>
  </compound>
  <compound kind="file">
    <name>bccsmatrixinitializer.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00017.html</filename>
    <includes id="a00014" name="bccsmatrix.hh" local="no" imported="no">dune/istl/bccsmatrix.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::ISTL</namespace>
  </compound>
  <compound kind="file">
    <name>bcrsmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00020.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00092" name="matrixutils.hh" local="yes" imported="no">matrixutils.hh</includes>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <class kind="struct">Dune::CompressionStatistics</class>
    <class kind="class">Dune::ImplicitMatrixBuilder</class>
    <class kind="class">Dune::ImplicitMatrixBuilder::row_object</class>
    <class kind="class">Dune::BCRSMatrix</class>
    <class kind="class">Dune::BCRSMatrix::RealRowIterator</class>
    <class kind="class">Dune::BCRSMatrix::CreateIterator</class>
    <class kind="class">Dune::BCRSMatrix::Deallocator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>bdmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00023.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <class kind="class">Dune::BDMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>blocklevel.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00026.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>maxBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a33fa4c0298cf146aa9589b519344907f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>minBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a93a728a69e20c62c789c9e4b616208d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasUniqueBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2d487fafa117ba8beb053d1c3417dee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>blockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a477c671e3966936ca929dee4be2dcf95</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>btdmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00029.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <class kind="class">Dune::BTDMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>bvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00032.html</filename>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <includes id="a00011" name="basearray.hh" local="yes" imported="no">basearray.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <class kind="class">Dune::BlockVector</class>
    <class kind="struct">Dune::FieldTraits&lt; BlockVector&lt; B, A &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2d6c22497a84e2ec8803ba78a7e2e988</anchor>
      <arglist>(std::ostream &amp;s, const BlockVector&lt; K, A &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cholmod.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00035.html</filename>
  </compound>
  <compound kind="file">
    <name>colcompmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00038.html</filename>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <class kind="struct">Dune::ColCompMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>combinedfunctor.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00119.html</filename>
    <class kind="struct">Dune::Amg::ApplyHelper</class>
    <class kind="struct">Dune::Amg::ApplyHelper&lt; 0 &gt;</class>
    <class kind="class">Dune::Amg::CombinedFunctor</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>construction.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00122.html</filename>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00104" name="operators.hh" local="no" imported="no">dune/istl/operators.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <includes id="a00200" name="solvercategory.hh" local="no" imported="no">dune/istl/solvercategory.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="yes" imported="no">pinfo.hh</includes>
    <class kind="struct">Dune::Amg::ConstructionTraits</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ParallelOperatorArgs</class>
    <class kind="struct">Dune::Amg::OwnerOverlapCopyCommunicationArgs</class>
    <class kind="struct">Dune::Amg::SequentialCommunicationArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::MatrixAdapterArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; MatrixAdapter&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>counter.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/common/</path>
    <filename>a00041.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::CounterImpl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_GET_COUNTER</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a52c18e20d25c64cfa14ec5faaa4eb3bd</anchor>
      <arglist>(Tag)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_INC_COUNTER</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a5d969c720adf3ae3114e5a51e2cf5d96</anchor>
      <arglist>(Tag)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>maxcount</name>
      <anchorfile>a00041.html</anchorfile>
      <anchor>a691e9cc830a63581384caef120bcbef8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dependency.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00125.html</filename>
    <includes id="a00140" name="graph.hh" local="yes" imported="no">graph.hh</includes>
    <includes id="a00164" name="properties.hh" local="yes" imported="no">properties.hh</includes>
    <class kind="class">Dune::Amg::EdgeProperties</class>
    <class kind="class">Dune::Amg::VertexProperties</class>
    <class kind="class">Dune::Amg::PropertyGraphVertexPropertyMap</class>
    <class kind="struct">Dune::PropertyMapTypeSelector&lt; Amg::VertexVisitedTag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type>PropertyMapTypeSelector&lt; Amg::VertexVisitedTag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &gt;::Type</type>
      <name>get</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a405d30f54803def97082030c715c8791</anchor>
      <arglist>([[maybe_unused]] const Amg::VertexVisitedTag &amp;tag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabfdb505d54f97595d5b559f9493978b1</anchor>
      <arglist>(std::ostream &amp;os, const EdgeProperties &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab001191f50333ad683c2faeb8de5e4d2</anchor>
      <arglist>(std::ostream &amp;os, const VertexProperties &amp;props)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fastamg.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00128.html</filename>
    <includes id="a00170" name="smoother.hh" local="no" imported="no">dune/istl/paamg/smoother.hh</includes>
    <includes id="a00173" name="transfer.hh" local="no" imported="no">dune/istl/paamg/transfer.hh</includes>
    <includes id="a00155" name="matrixhierarchy.hh" local="no" imported="no">dune/istl/paamg/matrixhierarchy.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="no" imported="no">dune/istl/scalarproducts.hh</includes>
    <includes id="a00218" name="superlu.hh" local="no" imported="no">dune/istl/superlu.hh</includes>
    <includes id="a00227" name="umfpack.hh" local="no" imported="no">dune/istl/umfpack.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00068" name="io.hh" local="no" imported="no">dune/istl/io.hh</includes>
    <includes id="a00182" name="preconditioners.hh" local="no" imported="no">dune/istl/preconditioners.hh</includes>
    <includes id="a00131" name="fastamgsmoother.hh" local="yes" imported="no">fastamgsmoother.hh</includes>
    <class kind="class">Dune::Amg::FastAMG</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DIRECTSOLVER</name>
      <anchorfile>a00128.html</anchorfile>
      <anchor>a72c0db94af03bbad6ae55a51224a4a4a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fastamgsmoother.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00131.html</filename>
    <class kind="struct">Dune::Amg::GaussSeidelPresmoothDefect</class>
    <class kind="struct">Dune::Amg::GaussSeidelPostsmoothDefect</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>foreach.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00053.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00191" name="scaledidmatrix.hh" local="no" imported="no">dune/istl/scaledidmatrix.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::ForEach</namespace>
    <member kind="function">
      <type>auto</type>
      <name>rows</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a4ae853c93f3cb1318493dc4086e1dea7</anchor>
      <arglist>(Matrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cols</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>ab478e5d632f7718fc4434d7dcf29b23f</anchor>
      <arglist>(Matrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>afde43496a87705b3b5687ce18072553c</anchor>
      <arglist>(Vector const &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>flatVectorForEach</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7a87108c26ee37e7e43de1e8b15e4e67</anchor>
      <arglist>(Vector &amp;&amp;vector, F &amp;&amp;f, std::size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::size_t &gt;</type>
      <name>flatMatrixForEach</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af2f3b70931de2f8f81b08a30865a17c2</anchor>
      <arglist>(Matrix &amp;&amp;matrix, F &amp;&amp;f, std::size_t rowOffset=0, std::size_t colOffset=0)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>galerkin.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00134.html</filename>
    <includes id="a00113" name="aggregates.hh" local="yes" imported="no">aggregates.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="yes" imported="no">pinfo.hh</includes>
    <class kind="struct">Dune::Amg::OverlapVertex</class>
    <class kind="class">Dune::Amg::SparsityBuilder</class>
    <class kind="class">Dune::Amg::BaseGalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::BaseConnectivityConstructor</class>
    <class kind="class">Dune::Amg::BaseConnectivityConstructor::ConnectedBuilder</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor&lt; G, SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter&lt; SequentialInformation &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>globalaggregates.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00137.html</filename>
    <includes id="a00113" name="aggregates.hh" local="yes" imported="no">aggregates.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="yes" imported="no">pinfo.hh</includes>
    <class kind="struct">Dune::Amg::GlobalAggregatesMap</class>
    <class kind="class">Dune::Amg::GlobalAggregatesMap::Proxy</class>
    <class kind="struct">Dune::Amg::AggregatesGatherScatter</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, SequentialInformation &gt;</class>
    <class kind="struct">Dune::CommPolicy&lt; Amg::GlobalAggregatesMap&lt; T, TI &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>graph.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00140.html</filename>
    <includes id="a00071" name="istlexception.hh" local="no" imported="no">dune/istl/istlexception.hh</includes>
    <class kind="class">Dune::Amg::MatrixGraph</class>
    <class kind="class">Dune::Amg::MatrixGraph::EdgeIteratorT</class>
    <class kind="class">Dune::Amg::MatrixGraph::VertexIteratorT</class>
    <class kind="class">Dune::Amg::SubGraph</class>
    <class kind="class">Dune::Amg::SubGraph::EdgeIndexMap</class>
    <class kind="class">Dune::Amg::SubGraph::EdgeIterator</class>
    <class kind="class">Dune::Amg::SubGraph::VertexIterator</class>
    <class kind="class">Dune::Amg::VertexPropertiesGraph</class>
    <class kind="class">Dune::Amg::VertexPropertiesGraph::VertexIteratorT</class>
    <class kind="class">Dune::Amg::PropertiesGraph</class>
    <class kind="class">Dune::Amg::PropertiesGraph::EdgeIteratorT</class>
    <class kind="class">Dune::Amg::PropertiesGraph::VertexIteratorT</class>
    <class kind="class">Dune::Amg::GraphVertexPropertiesSelector</class>
    <class kind="class">Dune::Amg::GraphEdgePropertiesSelector</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type>int</type>
      <name>visitNeighbours</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c84915dd8eafb315ce76b1f689f1cf3</anchor>
      <arglist>(const G &amp;graph, const typename G::VertexDescriptor &amp;vertex, V &amp;visitor)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>graphcreator.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00143.html</filename>
    <includes id="a00140" name="graph.hh" local="yes" imported="no">graph.hh</includes>
    <includes id="a00125" name="dependency.hh" local="yes" imported="no">dependency.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="yes" imported="no">pinfo.hh</includes>
    <includes id="a00104" name="operators.hh" local="no" imported="no">dune/istl/operators.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <class kind="struct">Dune::Amg::PropertiesGraphCreator</class>
    <class kind="struct">Dune::Amg::PropertiesGraphCreator&lt; M, SequentialInformation &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>gsetc.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00056.html</filename>
    <includes id="a00098" name="multitypeblockvector.hh" local="yes" imported="no">multitypeblockvector.hh</includes>
    <includes id="a00095" name="multitypeblockmatrix.hh" local="yes" imported="no">multitypeblockmatrix.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <class kind="struct">Dune::BL</class>
    <class kind="struct">Dune::algmeta_btsolve</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; 0, M &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; I, MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="enumeration">
      <type></type>
      <name>WithDiagType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1d016a8baf2c49b7cf2f4381ac26dae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withdiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8aeee05f0dca4c1c766073efa5a0ce1864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8a2797146c0f86bb2e64d5dcdd09af49fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WithRelaxType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8d35e02d27a4916c1ba6435f0c2d6ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withrelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a6275e2591067a32a12c32074ae56a4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>norelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a4fcdb30f993f475659d8e031aff47b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga0f053fd0407ed1cc4bddd149fb6fb8ca</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf814921e91eff2665f6faf02f5f2077f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga44f4aa6e2cf4928911a3f5d1de3044d5</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaccddb305f448a410d5092fc19e65fde7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gae258e10601de666271f1fc70365acaaf</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga83b10b12a29ea2971cf8176d641b830f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaff15f888a81d558e39b36ac74fea2e42</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6559fd0a70f600ab376dd2083d8cb0dd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8c2d3410df660b6891f6a1eedafd49f6</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga9d84c99a51fe0795b06b825a13538852</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga112a6621ef260e4b265a0df07fede1be</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga29094b87e08482d955ab1b4f731678fd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1ab5372aabac8f03a77f50227b611fd8</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaaed21180843947bd0efef18d54038998</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga00c2e6cbce34cf6d04e94567a48bb13c</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga89e9f76f178486c9ded34ed26f367bc4</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab20f25b7927dae733827e729fc3c25f7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab158b39f3ee085609cbae90a0cf6a5fb</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga7d7f687712467b7651d62ea0712aa5a3</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gac245a72ffeecc409c7d242c6841738a9</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga5bec8914ff3d25fb86ddffef6e38677d</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga70ff88e446d2bb3927e2ae963292d02b</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf2caef773a37fd65ee1fa76ee0a95c47</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga65105d18c5a743d1739179e696f5c022</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga3a70747a68e23231ab6cb72b396942ec</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gabdb801f4a4aea1201bc09d32b202042a</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga51ae0ff4aea09b29d3f31ae2f6dfacc5</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6642a19372a5ec5f405ce8cc56515596</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hierarchy.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00146.html</filename>
    <includes id="a00122" name="construction.hh" local="no" imported="no">dune/istl/paamg/construction.hh</includes>
    <class kind="class">Dune::Amg::Hierarchy</class>
    <class kind="class">Dune::Amg::Hierarchy::LevelIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>ildl.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00059.html</filename>
    <includes id="a00062" name="ilu.hh" local="yes" imported="no">ilu.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af8de6b1951fa7f95a3e9f89973579115</anchor>
      <arglist>(const FieldMatrix&lt; K, m, n &gt; &amp;B, const FieldMatrix&lt; K, m, n &gt; &amp;CT, FieldMatrix&lt; K, m, n &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad3f5c61e1bb13aaae63f8229ca8fcf17</anchor>
      <arglist>(const K &amp;B, const K &amp;CT, K &amp;A, typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab8a3af34e2b0e78906f8ac136b8a77b9</anchor>
      <arglist>(const Matrix &amp;B, const Matrix &amp;CT, Matrix &amp;A, typename std::enable_if_t&lt;!Dune::IsNumber&lt; Matrix &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bildl_decompose</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a07a0ae9d92f1458eceb71778d88b9429</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bildl_backsolve</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae801cb0f5df40c48568bc703f8c802b6</anchor>
      <arglist>(const Matrix &amp;A, X &amp;v, const Y &amp;d, bool isLowerTriangular=false)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilu.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00062.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <class kind="struct">Dune::ILU::CRS</class>
    <namespace>Dune</namespace>
    <namespace>Dune::ILU</namespace>
    <member kind="function">
      <type>void</type>
      <name>blockILU0Decomposition</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>aba8693db4336d6eca66538c71b7570aa</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUBacksolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a42563bed9371413feba968bec7522b74</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>M::field_type &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a82c4742837894aa12e113be97d60b88d</anchor>
      <arglist>(M &amp;A, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a7f314ebe46a79c8433ee54926042382d</anchor>
      <arglist>(K &amp;A, [[maybe_unused]] typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>aeba6c573e710f37b1bfa57cba4f843af</anchor>
      <arglist>(FieldMatrix&lt; K, n, m &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUDecomposition</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>ae1d57c22d90aef3f76a8818fc36cc38b</anchor>
      <arglist>(const M &amp;A, int n, M &amp;ILU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToCRS</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a243d4f4b5829efb30039b4a36e0f0cd5</anchor>
      <arglist>(const M &amp;A, CRS &amp;lower, CRS &amp;upper, InvVector &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_backsolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>ad753bb8cde1ea3aae5ca889d6cc5a68f</anchor>
      <arglist>(const CRS &amp;lower, const CRS &amp;upper, const InvVector &amp;inv, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUBacksolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a57f371097dec97a09d4bdc3b99077b7c</anchor>
      <arglist>(const CRS &amp;lower, const CRS &amp;upper, const InvVector &amp;inv, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu0_decomposition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae67699f4a1392779203441b91402a834</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_backsolve</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9a874f8e0ab8b1bd84d6e615f7cde9ee</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>firstmatrixelement</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3410aebbe1151eaaf477a6229321bbdb</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_decomposition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>acfbd5513917454e0e1423e5be13cda74</anchor>
      <arglist>(const M &amp;A, int n, M &amp;ilu)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ilusubdomainsolver.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00065.html</filename>
    <includes id="a00182" name="preconditioners.hh" local="no" imported="no">dune/istl/preconditioners.hh</includes>
    <includes id="a00077" name="matrix.hh" local="yes" imported="no">matrix.hh</includes>
    <class kind="class">Dune::ILUSubdomainSolver</class>
    <class kind="class">Dune::ILU0SubdomainSolver</class>
    <class kind="class">Dune::ILUNSubdomainSolver</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>indicescoarsener.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00149.html</filename>
    <includes id="a00167" name="renumberer.hh" local="yes" imported="no">renumberer.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="yes" imported="no">pinfo.hh</includes>
    <class kind="class">Dune::Amg::IndicesCoarsener</class>
    <class kind="class">Dune::Amg::ParallelIndicesCoarsener</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; SequentialInformation, E &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>io.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00068.html</filename>
    <includes id="a00092" name="matrixutils.hh" local="yes" imported="no">matrixutils.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>recursive_printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gacfa35a4c02a1d2802460eb62ecbf3689</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string rowtext, int &amp;counter, int columns, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8674c142d6b29e12bcb94075f952d1e1</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string title, std::string rowtext, int columns=1, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga16a8aa6ba46f5e6afed17b49f25ccaf5</anchor>
      <arglist>(std::ostream &amp;s, int m, int width, [[maybe_unused]] int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga5416e87c493938d5c9c670428aa29c0b</anchor>
      <arglist>(std::ostream &amp;s, const K &amp;value, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type I, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type J, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type therow, int width, [[maybe_unused]] int precision, typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga6637eaf1e8d0c72f46f9edec7747c4d7</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, typename M::size_type I, typename M::size_type J, typename M::size_type therow, int width, int precision, typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printmatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga81eff30b8e58a169e319b49f62e4ea7b</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, std::string title, std::string rowtext, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSparseMatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaef563e4586001e657d48f01fae628846</anchor>
      <arglist>(std::ostream &amp;s, const BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, A &gt; &amp;mat, std::string title, std::string rowtext, int width=3, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga93b011f0c65384ec08aa12d56464daf9</anchor>
      <arglist>(const FieldType &amp;value, int rowOffset, int colOffset, std::ostream &amp;s, typename std::enable_if_t&lt; Dune::IsNumber&lt; FieldType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1b083f3c81128b09bbfc7665a07b4b57</anchor>
      <arglist>(const MatrixType &amp;matrix, int externalRowOffset, int externalColOffset, std::ostream &amp;s, typename std::enable_if_t&lt;!Dune::IsNumber&lt; MatrixType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga19c64bcf9cfcba21151f54c6cee16bba</anchor>
      <arglist>(const MatrixType &amp;matrix, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga95cc09d9210e3e99d3f3151e41b43536</anchor>
      <arglist>(const V &amp;v, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaab0213399acb112e901dc043b338ac00</anchor>
      <arglist>(const VectorType &amp;vector, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>istlexception.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00071.html</filename>
    <class kind="class">Dune::ISTLError</class>
    <class kind="class">Dune::BCRSMatrixError</class>
    <class kind="class">Dune::ImplicitModeCompressionBufferExhausted</class>
    <class kind="class">Dune::SolverAbort</class>
    <class kind="class">Dune::MatrixBlockError</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>ImplicitModeCompressionBufferExhausted</type>
      <name>ImplicitModeOverflowExhausted</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga31a901b8fb8394865710949d0b466149</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>kamg.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00152.html</filename>
    <includes id="a00182" name="preconditioners.hh" local="no" imported="no">dune/istl/preconditioners.hh</includes>
    <includes id="a00116" name="amg.hh" local="yes" imported="no">amg.hh</includes>
    <class kind="class">Dune::Amg::KAmgTwoGrid</class>
    <class kind="class">Dune::Amg::KAMG</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>ldl.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00074.html</filename>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00203" name="solverfactory.hh" local="no" imported="no">dune/istl/solverfactory.hh</includes>
    <class kind="class">Dune::LDL</class>
    <class kind="class">Dune::LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::LDLCreator</class>
    <class kind="struct">Dune::LDLCreator::isValidBlock</class>
    <class kind="struct">Dune::LDLCreator::isValidBlock&lt; FieldVector&lt; double, k &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4ab4a1f419552328d594727627e696cb</anchor>
      <arglist>(&quot;ldl&quot;, Dune::LDLCreator())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/doc/doxygen/</path>
    <filename>a00002.html</filename>
  </compound>
  <compound kind="file">
    <name>matrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00077.html</filename>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="no" imported="no">dune/istl/istlexception.hh</includes>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase</class>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase::Iterator</class>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase::ConstIterator</class>
    <class kind="class">Dune::Matrix</class>
    <namespace>Dune</namespace>
    <namespace>Dune::MatrixImp</namespace>
  </compound>
  <compound kind="file">
    <name>matrixhierarchy.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00155.html</filename>
    <includes id="a00113" name="aggregates.hh" local="yes" imported="no">aggregates.hh</includes>
    <includes id="a00140" name="graph.hh" local="yes" imported="no">graph.hh</includes>
    <includes id="a00134" name="galerkin.hh" local="yes" imported="no">galerkin.hh</includes>
    <includes id="a00167" name="renumberer.hh" local="yes" imported="no">renumberer.hh</includes>
    <includes id="a00143" name="graphcreator.hh" local="yes" imported="no">graphcreator.hh</includes>
    <includes id="a00146" name="hierarchy.hh" local="yes" imported="no">hierarchy.hh</includes>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00092" name="matrixutils.hh" local="no" imported="no">dune/istl/matrixutils.hh</includes>
    <includes id="a00089" name="matrixredistribute.hh" local="no" imported="no">dune/istl/matrixredistribute.hh</includes>
    <includes id="a00125" name="dependency.hh" local="no" imported="no">dune/istl/paamg/dependency.hh</includes>
    <includes id="a00149" name="indicescoarsener.hh" local="no" imported="no">dune/istl/paamg/indicescoarsener.hh</includes>
    <includes id="a00137" name="globalaggregates.hh" local="no" imported="no">dune/istl/paamg/globalaggregates.hh</includes>
    <includes id="a00122" name="construction.hh" local="no" imported="no">dune/istl/paamg/construction.hh</includes>
    <includes id="a00170" name="smoother.hh" local="no" imported="no">dune/istl/paamg/smoother.hh</includes>
    <includes id="a00173" name="transfer.hh" local="no" imported="no">dune/istl/paamg/transfer.hh</includes>
    <class kind="class">Dune::Amg::MatrixHierarchy</class>
    <class kind="struct">Dune::Amg::MatrixHierarchy::MatrixStats&lt; Matrix, true &gt;::calc</class>
    <class kind="class">Dune::Amg::CoarsenCriterion</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="enumvalue">
      <name>MAX_PROCESSES</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga2ff22a293069aebfba3194cb909ce2e2ad6b62d6d5abdcb2557c2a3a69feccdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2f21163b67b8b6b6558543829d3fbb66</anchor>
      <arglist>([[maybe_unused]] const M &amp;origMatrix, [[maybe_unused]] std::shared_ptr&lt; M &gt; newMatrix, [[maybe_unused]] SequentialInformation &amp;origComm, [[maybe_unused]] std::shared_ptr&lt; SequentialInformation &gt; &amp;newComm, [[maybe_unused]] RedistributeInformation&lt; SequentialInformation &gt; &amp;ri, [[maybe_unused]] int nparts, [[maybe_unused]] C1 &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga992041e5fe1798be7fd728be5578b525</anchor>
      <arglist>(const M &amp;origMatrix, std::shared_ptr&lt; M &gt; newMatrix, C &amp;origComm, std::shared_ptr&lt; C &gt; &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri, int nparts, C1 &amp;criterion)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrixindexset.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00080.html</filename>
    <class kind="class">Dune::MatrixIndexSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>matrixmarket.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00083.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00092" name="matrixutils.hh" local="no" imported="no">dune/istl/matrixutils.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; int &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; double &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; float &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; float &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; BlockVector&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; FieldVector&lt; T, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; FieldMatrix&lt; T, i, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; FieldMatrix&lt; T, i, j &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldMatrix&lt; T, i, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldVector&lt; T, i &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::MMHeader</class>
    <class kind="struct">Dune::MatrixMarketImpl::IndexData</class>
    <class kind="struct">Dune::MatrixMarketImpl::NumericWrapper</class>
    <class kind="struct">Dune::MatrixMarketImpl::PatternDummy</class>
    <class kind="struct">Dune::MatrixMarketImpl::NumericWrapper&lt; PatternDummy &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::MatrixValuesSetter</class>
    <class kind="struct">Dune::MatrixMarketImpl::MatrixValuesSetter&lt; PatternDummy, brows, bcols &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::is_complex</class>
    <class kind="struct">Dune::MatrixMarketImpl::is_complex&lt; std::complex&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; FieldMatrix&lt; B, i, j &gt;, A &gt; &gt;</class>
    <class kind="class">Dune::MatrixMarketFormatError</class>
    <namespace>Dune</namespace>
    <namespace>Dune::MatrixMarketImpl</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LineType</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_HEADER</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cda12fe49ca30d8d5a52c1dc70ace8d18ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_ISTLSTRUCT</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cdad77d19ed994d35e12407037e045921ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cda0fbdf01a4ab8bfeab99055a1b0616e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_MAX_LINE_LENGTH</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ac5fd06f7cc4e72f733bbc3160e1796fea4945d19de19850deef23453940d61d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_TYPE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coordinate_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a6f558b994af91ee41c0714a44c5b6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>array_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a6bb37eeb823be6a79d40b9df1c181f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a7e892bb34cab22b30cc56e6dcd047c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_CTYPE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>integer_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceade6720960c684d9d11d20020631471ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>double_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995cead2703fd95f1bb4993e77a4174157aab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>complex_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceac1aa771c3462961c9eca0189436779ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pattern</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceab957ad3ef8783e5f30348f7c937ece68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_ctype</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceaa4964758c3e93b0f7fa12485464ace04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_STRUCTURE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>general</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051a2e4b623fd05b60b25f93d1a56b857db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>symmetric</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051acae227482a2f9f85340759688143533e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>skew_symmetric</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051a0568e0cba4f7ad110d2257caac3a72b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hermitian</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051aa90eba109717e70ef416ecfc671f9567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_structure</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051ab158d28f5455f1fcdce4ba36cb83412a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lineFeed</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ab51f7249b025353a6a44ac2e7cd3946b</anchor>
      <arglist>(std::istream &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipComments</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ab061c3ade067c3b4a06d2e9d945a04d9</anchor>
      <arglist>(std::istream &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readMatrixMarketBanner</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a265f42be073f67deb7b2176c4ca31b4b</anchor>
      <arglist>(std::istream &amp;file, MMHeader &amp;mmHeader)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; std::size_t, std::size_t, std::size_t &gt;</type>
      <name>calculateNNZ</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a40ad9e100d2d30ca61d10e0154ac6787</anchor>
      <arglist>(std::size_t rows, std::size_t cols, std::size_t entries, const MMHeader &amp;header)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a1d66d28b4075ae8d2d6ea452d0503c8c</anchor>
      <arglist>(std::istream &amp;is, NumericWrapper&lt; T &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a523bea9e0ff6a5de0e5b611d01bf7e43</anchor>
      <arglist>(std::istream &amp;is, [[maybe_unused]] NumericWrapper&lt; PatternDummy &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a2115104055c40a0fddb0715a028d6f4c</anchor>
      <arglist>(const IndexData&lt; T &gt; &amp;i1, const IndexData&lt; T &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a6a19637b68b072783f458cf499a3aff8</anchor>
      <arglist>(std::istream &amp;is, IndexData&lt; T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a8c1b163aa30feb773a8035911fa92e08</anchor>
      <arglist>(std::istream &amp;is, IndexData&lt; NumericWrapper&lt; std::complex&lt; T &gt;&gt;&gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt;!is_complex&lt; T &gt;::value, T &gt;</type>
      <name>conj</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>aa92d8d65d8bfbade4149325b31739f3f</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; is_complex&lt; T &gt;::value, T &gt;</type>
      <name>conj</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a4074ae78d70be63459665268d9f7a2aa</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readSparseEntries</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a5d91731ac5a7348c81521d45091599df</anchor>
      <arglist>(Dune::BCRSMatrix&lt; T, A &gt; &amp;matrix, std::istream &amp;file, std::size_t entries, const MMHeader &amp;mmHeader, const D &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_header</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf5669d944b34a0042d13688aaae6cd41</anchor>
      <arglist>(std::size_t &amp;rows, std::size_t &amp;cols, MatrixMarketImpl::MMHeader &amp;header, std::istream &amp;istr, bool isVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaed3a11d2d57007d599549bdaac2dfb83</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gae0ec9d52cd4eab5d7c10b7ac15032026</anchor>
      <arglist>(Dune::BlockVector&lt; Dune::FieldVector&lt; T, entries &gt;, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga050fdeb74ac186e9a2d3481230b64e54</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga3d1901dfd6a884df0a1295856c203df9</anchor>
      <arglist>(Dune::BCRSMatrix&lt; T, A &gt; &amp;matrix, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gafb63c87901fc6242102349fb245581f6</anchor>
      <arglist>(const B &amp;entry, std::size_t rowidx, std::size_t colidx, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaa308293be3836cb24c981bcd2d270bf5</anchor>
      <arglist>(const V &amp;entry, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf0233e0c56e727d0e3fa63a79ffcdeb3</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga26b91d6c608f5dc37407dfdbb84eb7d1</anchor>
      <arglist>(const BlockVector&lt; T, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga4ffd3c490badd2df43eb4a6d0e0119c4</anchor>
      <arglist>(const BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga2e94fcf7e81237a8f132a0f6a3ddaf21</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf37b15dbfaeb5fa5639d38b560407c4b</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8da01d126c9f37e57fa4f719e1d05487</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1064c670426a98617b9e048a40f50a8c</anchor>
      <arglist>(const M &amp;matrix, std::string filename, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac0c687a6e0c2feb4351f3364e4cbbce6</anchor>
      <arglist>(const M &amp;matrix, std::string filename, const OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool storeIndices=true, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1bc5b5677a5be24d72a7d95214fd0d30</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename, OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool readIndices=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac23bb6abb2a5b397781ea75c0ba134d8</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>default_precision</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gab36dc22122e5b7f555b64ef9f418d329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrixmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00086.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <class kind="struct">Dune::MatMultMatResult</class>
    <class kind="struct">Dune::MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::MatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; FieldMatrix&lt; T, k, n &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>matMultTransposeMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga74b699cb2d43dc8d89a507df207ff832</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1829a6141ae2cae5a1ecab7e0207123d</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMatMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac55861f0d592348e259984077e14960e</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix &amp;</type>
      <name>mat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga7051f2cf6a74fbd2d74ef52b1389cb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Col</type>
      <name>col</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga67ae04c7e7c030370f82da49ab2b98d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrixredistribute.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00089.html</filename>
    <includes id="a00185" name="repartition.hh" local="yes" imported="no">repartition.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="no" imported="no">dune/istl/paamg/pinfo.hh</includes>
    <class kind="struct">Dune::RedistributeInformation</class>
    <class kind="class">Dune::RedistributeInformation&lt; OwnerOverlapCopyCommunication&lt; T, T1 &gt; &gt;</class>
    <class kind="struct">Dune::CommMatrixRowSize</class>
    <class kind="struct">Dune::CommMatrixSparsityPattern</class>
    <class kind="struct">Dune::CommPolicy&lt; CommMatrixSparsityPattern&lt; M, I &gt; &gt;</class>
    <class kind="struct">Dune::CommMatrixRow</class>
    <class kind="struct">Dune::CommPolicy&lt; CommMatrixRow&lt; M, I &gt; &gt;</class>
    <class kind="struct">Dune::MatrixRowSizeGatherScatter</class>
    <class kind="struct">Dune::MatrixCopyRowSizeGatherScatter</class>
    <class kind="struct">Dune::MatrixSparsityPatternGatherScatter</class>
    <class kind="struct">Dune::MatrixRowGatherScatter</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>redistributeSparsityPattern</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a63e2af44500c49cc412112bcc645c7bd</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrixEntries</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3f63ab17e9c1235103a0512bda341ca2</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab59fe4d0a58ea0575b42993d7563d34b</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrixEntries</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a706b106c6123e900b004a90d4dcf42c7</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, Dune::Amg::SequentialInformation &amp;origComm, Dune::Amg::SequentialInformation &amp;newComm, RedistributeInformation&lt; Dune::Amg::SequentialInformation &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a345908acc30a0bf6affab15d04fcd0a8</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, Dune::Amg::SequentialInformation &amp;origComm, Dune::Amg::SequentialInformation &amp;newComm, RedistributeInformation&lt; Dune::Amg::SequentialInformation &gt; &amp;ri)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matrixutils.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00092.html</filename>
    <includes id="a00191" name="scaledidmatrix.hh" local="no" imported="no">dune/istl/scaledidmatrix.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <class kind="struct">Dune::CheckIfDiagonalPresent</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; Matrix, 0, l &gt;</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; MultiTypeBlockMatrix&lt; T1, Args... &gt;, blocklevel, l &gt;</class>
    <class kind="struct">Dune::MatrixDimension</class>
    <class kind="struct">Dune::MatrixDimension&lt; Matrix&lt; B, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; BCRSMatrix&lt; B, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; FieldMatrix&lt; K, n, m &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; Dune::DynamicMatrix&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; Matrix&lt; FieldMatrix&lt; K, n, m &gt;, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; DiagonalMatrix&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; ScaledIdentityMatrix&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::IsMatrix</class>
    <class kind="struct">Dune::IsMatrix&lt; DenseMatrix&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::IsMatrix&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::PointerCompare</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3dc83143ecd9d259d220a655d7a850bd</anchor>
      <arglist>(const M &amp;, [[maybe_unused]] typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab71a994a1885eda6a663e8fa22535ce6</anchor>
      <arglist>(const M &amp;matrix, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalSparseMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a131e13bda7cee7fa0c8e4a96e8d46801</anchor>
      <arglist>(const M &amp;mat, C &amp;ooc, std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/doc/doxygen/</path>
    <filename>a00005.html</filename>
  </compound>
  <compound kind="file">
    <name>multitypeblockmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00095.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00056" name="gsetc.hh" local="yes" imported="no">gsetc.hh</includes>
    <class kind="class">Dune::MultiTypeBlockMatrix</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col&lt; I, crow, ccol, 0 &gt;</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver&lt; I, crow, 0 &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5681a3ce128d5db798ddb4c6dcdfb1c6</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockMatrix&lt; T1, Args... &gt; &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>multitypeblockvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00098.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00056" name="gsetc.hh" local="yes" imported="no">gsetc.hh</includes>
    <class kind="struct">Dune::FieldTraits&lt; MultiTypeBlockVector&lt; Arg0, Args... &gt; &gt;</class>
    <class kind="class">Dune::MultiTypeBlockVector</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaa4de74df39eaede5eddcd10b898e380a</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockVector&lt; Args... &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>novlpschwarz.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00101.html</filename>
    <includes id="a00068" name="io.hh" local="yes" imported="no">io.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00230" name="vbvector.hh" local="yes" imported="no">vbvector.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="yes" imported="no">bcrsmatrix.hh</includes>
    <includes id="a00056" name="gsetc.hh" local="yes" imported="no">gsetc.hh</includes>
    <includes id="a00062" name="ilu.hh" local="yes" imported="no">ilu.hh</includes>
    <includes id="a00104" name="operators.hh" local="yes" imported="no">operators.hh</includes>
    <includes id="a00209" name="solvers.hh" local="yes" imported="no">solvers.hh</includes>
    <includes id="a00182" name="preconditioners.hh" local="yes" imported="no">preconditioners.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="yes" imported="no">scalarproducts.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="yes" imported="no">owneroverlapcopy.hh</includes>
    <class kind="class">Dune::NonoverlappingSchwarzOperator</class>
    <class kind="class">Dune::NonoverlappingBlockPreconditioner</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>operators.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00104.html</filename>
    <includes id="a00200" name="solvercategory.hh" local="yes" imported="no">solvercategory.hh</includes>
    <class kind="class">Dune::LinearOperator</class>
    <class kind="class">Dune::AssembledLinearOperator</class>
    <class kind="class">Dune::MatrixAdapter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>overlappingschwarz.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00107.html</filename>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <includes id="a00182" name="preconditioners.hh" local="yes" imported="no">preconditioners.hh</includes>
    <includes id="a00218" name="superlu.hh" local="yes" imported="no">superlu.hh</includes>
    <includes id="a00227" name="umfpack.hh" local="yes" imported="no">umfpack.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="yes" imported="no">bcrsmatrix.hh</includes>
    <includes id="a00065" name="ilusubdomainsolver.hh" local="yes" imported="no">ilusubdomainsolver.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <class kind="class">Dune::OverlappingSchwarzInitializer</class>
    <class kind="struct">Dune::AdditiveSchwarzMode</class>
    <class kind="struct">Dune::MultiplicativeSchwarzMode</class>
    <class kind="struct">Dune::SymmetricMultiplicativeSchwarzMode</class>
    <class kind="class">Dune::DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::OverlappingAssignerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="class">Dune::OverlappingAssignerILUBase</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::AdditiveAdder</class>
    <class kind="struct">Dune::AdditiveAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MultiplicativeAdder</class>
    <class kind="struct">Dune::MultiplicativeAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::AdderSelector</class>
    <class kind="struct">Dune::AdderSelector&lt; AdditiveSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; MultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; SymmetricMultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::IteratorDirectionSelector</class>
    <class kind="struct">Dune::IteratorDirectionSelector&lt; T1, T2, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier&lt; SeqOverlappingSchwarz&lt; M, X, SymmetricMultiplicativeSchwarzMode, TD, TA &gt; &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerILUBase</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="class">Dune::SeqOverlappingSchwarz</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>OverlappingAssignerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>OverlappingAssigner</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga57430ed63b8d6900976df9950af0a0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarzAssemblerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>SeqOverlappingSchwarzAssembler</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5a5d6fa4ec6f65757b49ed7fe09e15e2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>owneroverlapcopy.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00110.html</filename>
    <includes id="a00200" name="solvercategory.hh" local="yes" imported="no">solvercategory.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00083" name="matrixmarket.hh" local="no" imported="no">dune/istl/matrixmarket.hh</includes>
    <class kind="struct">Dune::OwnerOverlapCopyAttributeSet</class>
    <class kind="class">Dune::IndexInfoFromGrid</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
    <class kind="struct">Dune::OwnerOverlapCopyCommunication::CopyGatherScatter</class>
    <class kind="struct">Dune::OwnerOverlapCopyCommunication::AddGatherScatter</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>testRedistributed</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>abcfd3b2ed3c4dd837b155879a3247503</anchor>
      <arglist>(int s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parameters.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00158.html</filename>
    <class kind="class">Dune::Amg::DependencyParameters</class>
    <class kind="class">Dune::Amg::AggregationParameters</class>
    <class kind="class">Dune::Amg::CoarseningParameters</class>
    <class kind="class">Dune::Amg::Parameters</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="enumeration">
      <type></type>
      <name>AccumulationMode</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf6f2fe996122d7c9d139e86a84957f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a5c5f5e0aa08de3ed0d0fe8cec4838260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>atOnceAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a4fe2fe3869543e6e15fc480bea94909a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>successiveAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a69257c9fc3443058ecc8d3d542fe0b0a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>pinfo.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00161.html</filename>
    <includes id="a00200" name="solvercategory.hh" local="no" imported="no">dune/istl/solvercategory.hh</includes>
    <class kind="class">Dune::Amg::SequentialInformation</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>poweriteration.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/eigenvalue/</path>
    <filename>a00050.html</filename>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <includes id="a00104" name="operators.hh" local="no" imported="no">dune/istl/operators.hh</includes>
    <includes id="a00200" name="solvercategory.hh" local="no" imported="no">dune/istl/solvercategory.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="no" imported="no">dune/istl/istlexception.hh</includes>
    <includes id="a00068" name="io.hh" local="no" imported="no">dune/istl/io.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <class kind="class">Dune::PowerIteration_Algorithms</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>preconditioner.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00179.html</filename>
    <includes id="a00200" name="solvercategory.hh" local="yes" imported="no">solvercategory.hh</includes>
    <class kind="class">Dune::Preconditioner</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>preconditioners.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00182.html</filename>
    <includes id="a00206" name="solverregistry.hh" local="no" imported="no">dune/istl/solverregistry.hh</includes>
    <includes id="a00179" name="preconditioner.hh" local="yes" imported="no">preconditioner.hh</includes>
    <includes id="a00197" name="solver.hh" local="yes" imported="no">solver.hh</includes>
    <includes id="a00200" name="solvercategory.hh" local="yes" imported="no">solvercategory.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00092" name="matrixutils.hh" local="yes" imported="no">matrixutils.hh</includes>
    <includes id="a00056" name="gsetc.hh" local="yes" imported="no">gsetc.hh</includes>
    <includes id="a00059" name="ildl.hh" local="yes" imported="no">ildl.hh</includes>
    <includes id="a00062" name="ilu.hh" local="yes" imported="no">ilu.hh</includes>
    <class kind="class">Dune::InverseOperator2Preconditioner</class>
    <class kind="class">Dune::SeqSSOR</class>
    <class kind="class">Dune::SeqSOR</class>
    <class kind="class">Dune::SeqJac</class>
    <class kind="class">Dune::SeqILU</class>
    <class kind="class">Dune::Richardson</class>
    <class kind="class">Dune::SeqILDL</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>SeqSOR&lt; M, X, Y, l &gt;</type>
      <name>SeqGS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaf04e8521e43d7b1c8fdb3a412210b36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga31161bee90db194d09f233f00ab4de9c</anchor>
      <arglist>(&quot;ssor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga84e1da868870a635c00649be4e1d101b</anchor>
      <arglist>(&quot;sor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga08abf358156090136c1433291819a194</anchor>
      <arglist>(&quot;gs&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqGS &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8e0768493ba56650387ef7f1171d2620</anchor>
      <arglist>(&quot;jac&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqJac &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gabdfc9bd7597c826fa723af53d0cb0e2d</anchor>
      <arglist>(&quot;ilu&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqILU &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga6c0383c6a267d2dd7bdf0425463c95dc</anchor>
      <arglist>(&quot;richardson&quot;, [](auto tl, const auto &amp;, const ParameterTree &amp;config){ using D=typename Dune::TypeListElement&lt; 1, decltype(tl)&gt;::type;using R=typename Dune::TypeListElement&lt; 2, decltype(tl)&gt;::type;return std::make_shared&lt; Richardson&lt; D, R &gt;&gt;(config);})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gada61707dc136db5a195bef80037d5246</anchor>
      <arglist>(&quot;ildl&quot;, defaultPreconditionerCreator&lt; Dune::SeqILDL &gt;())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>properties.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00164.html</filename>
    <class kind="struct">Dune::Amg::VertexVisitedTag</class>
    <class kind="class">Dune::Amg::RandomAccessBundledPropertyMap</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>registry.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/common/</path>
    <filename>a00044.html</filename>
    <includes id="a00041" name="counter.hh" local="yes" imported="no">counter.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_REGISTRY_PUT</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a5aba8ecf7926f3c3dade1b898db68cf7</anchor>
      <arglist>(Tag, id,...)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>renumberer.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00167.html</filename>
    <includes id="a00113" name="aggregates.hh" local="yes" imported="no">aggregates.hh</includes>
    <class kind="class">Dune::Amg::AggregateRenumberer</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type>void</type>
      <name>renumberAggregates</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a577d044e1622cb386cd4f6821ac63169</anchor>
      <arglist>(const G &amp;graph, I index, I endIndex, V &amp;visitedMap, AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>repartition.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00185.html</filename>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <includes id="a00140" name="graph.hh" local="no" imported="no">dune/istl/paamg/graph.hh</includes>
    <class kind="struct">Dune::RedistributeInterface</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Metis</namespace>
    <member kind="typedef">
      <type>float</type>
      <name>real_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a89fb21eb1009297a64db2503e4cda21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>idx_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>ab1b879eebd5d32701c7b5879bbe64a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillIndexSetHoles</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a62bc57d5768b1bc98357bac259795327</anchor>
      <arglist>(const G &amp;graph, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildCommunication</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aecfad52fbb6f783a2ce3c01aefa7838c</anchor>
      <arglist>(const G &amp;graph, std::vector&lt; int &gt; &amp;realparts, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_carray</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8fd07ea3f22cb47275859d39d7bdffef</anchor>
      <arglist>(S &amp;os, T *array, std::size_t l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidGraph</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aa754fe56e078eb1b50db4ace1e7fc1b1</anchor>
      <arglist>(std::size_t noVtx, std::size_t gnoVtx, S noEdges, T *xadj, T *adjncy, bool checkSymmetry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commGraphRepartition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aba345909b93e7811c7b937e3de3bf381</anchor>
      <arglist>(const M &amp;mat, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, Metis::idx_t nparts, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>graphRepartition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8217b8a1761fe09e89c8cfd8a84f21ff</anchor>
      <arglist>(const G &amp;graph, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, Metis::idx_t nparts, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>globalOwnerVertices</name>
      <anchorfile>a00185.html</anchorfile>
      <anchor>ae1de746d0ff4ac76e9ddc08c991d0e41</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scalarproducts.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00188.html</filename>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00200" name="solvercategory.hh" local="yes" imported="no">solvercategory.hh</includes>
    <class kind="class">Dune::ScalarProduct</class>
    <class kind="class">Dune::ParallelScalarProduct</class>
    <class kind="class">Dune::SeqScalarProduct</class>
    <class kind="class">Dune::NonoverlappingSchwarzScalarProduct</class>
    <class kind="class">Dune::OverlappingSchwarzScalarProduct</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>makeScalarProduct</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a13f43ac2f62e510522f7cdb07828a41f</anchor>
      <arglist>(std::shared_ptr&lt; const Comm &gt; comm, SolverCategory::Category category)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>afaf47e66b019fa82bce1ea1abfba6080</anchor>
      <arglist>(const Comm &amp;comm, SolverCategory::Category category)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scaledidmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00191.html</filename>
    <class kind="class">Dune::ScaledIdentityMatrix</class>
    <class kind="struct">Dune::DenseMatrixAssigner&lt; DenseMatrix, ScaledIdentityMatrix&lt; field, N &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>schwarz.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00194.html</filename>
    <includes id="a00068" name="io.hh" local="yes" imported="no">io.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00230" name="vbvector.hh" local="yes" imported="no">vbvector.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="yes" imported="no">bcrsmatrix.hh</includes>
    <includes id="a00056" name="gsetc.hh" local="yes" imported="no">gsetc.hh</includes>
    <includes id="a00062" name="ilu.hh" local="yes" imported="no">ilu.hh</includes>
    <includes id="a00104" name="operators.hh" local="yes" imported="no">operators.hh</includes>
    <includes id="a00209" name="solvers.hh" local="yes" imported="no">solvers.hh</includes>
    <includes id="a00182" name="preconditioners.hh" local="yes" imported="no">preconditioners.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="yes" imported="no">scalarproducts.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="yes" imported="no">owneroverlapcopy.hh</includes>
    <class kind="class">Dune::OverlappingSchwarzOperator</class>
    <class kind="class">Dune::ParSSOR</class>
    <class kind="class">Dune::BlockPreconditioner</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>smoother.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00170.html</filename>
    <includes id="a00122" name="construction.hh" local="no" imported="no">dune/istl/paamg/construction.hh</includes>
    <includes id="a00113" name="aggregates.hh" local="no" imported="no">dune/istl/paamg/aggregates.hh</includes>
    <includes id="a00182" name="preconditioners.hh" local="no" imported="no">dune/istl/preconditioners.hh</includes>
    <includes id="a00194" name="schwarz.hh" local="no" imported="no">dune/istl/schwarz.hh</includes>
    <includes id="a00101" name="novlpschwarz.hh" local="no" imported="no">dune/istl/novlpschwarz.hh</includes>
    <class kind="struct">Dune::Amg::DefaultSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs</class>
    <class kind="struct">Dune::Amg::ConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultParallelConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SeqOverlappingSchwarzSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
    <member kind="function">
      <type>void</type>
      <name>presmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c53f44b3b6ff7f8ccf90503bc995e11</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac8448b6118691fd94bc14d2126496c40</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solver.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00197.html</filename>
    <includes id="a00212" name="solvertype.hh" local="yes" imported="no">solvertype.hh</includes>
    <includes id="a00179" name="preconditioner.hh" local="yes" imported="no">preconditioner.hh</includes>
    <includes id="a00104" name="operators.hh" local="yes" imported="no">operators.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="yes" imported="no">scalarproducts.hh</includes>
    <class kind="struct">Dune::InverseOperatorResult</class>
    <class kind="class">Dune::InverseOperator</class>
    <class kind="class">Dune::IterativeSolver</class>
    <class kind="class">Dune::IterativeSolver::Iteration</class>
    <class kind="class">Dune::SolverHelper</class>
    <class kind="struct">Dune::SolverHelper::Implementation</class>
    <class kind="struct">Dune::SolverHelper::Implementation&lt; true, Dummy &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>solvercategory.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00200.html</filename>
    <class kind="struct">Dune::SolverCategory</class>
    <class kind="class">Dune::InvalidSolverCategory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>solverfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00203.html</filename>
    <includes id="a00206" name="solverregistry.hh" local="yes" imported="no">solverregistry.hh</includes>
    <includes id="a00197" name="solver.hh" local="no" imported="no">dune/istl/solver.hh</includes>
    <includes id="a00194" name="schwarz.hh" local="no" imported="no">dune/istl/schwarz.hh</includes>
    <includes id="a00101" name="novlpschwarz.hh" local="no" imported="no">dune/istl/novlpschwarz.hh</includes>
    <class kind="class">Dune::SolverFactory</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const M &amp;, const ParameterTree &amp;)</type>
      <name>DirectSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga91168438e4b9a921333311a3a08798dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; DirectSolverSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>DirectSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4ed393ca70204435e43fe1d993d94146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; M &gt; &amp;, const ParameterTree &amp;)</type>
      <name>PreconditionerSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae55f25267d1fd33e3ca7d1626e0c2309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; PreconditionerSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>PreconditionerFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga3331f94d4529c3668c246bb292d8616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; &amp;, const std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; &amp;, const std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;, const ParameterTree &amp;)</type>
      <name>IterativeSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4f1eb86d7953f95ba7cbc5e7364533fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; IterativeSolverSignature&lt; X, Y &gt; &gt;&gt;</type>
      <name>IterativeSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab390de02beef7edaa843bf24ffbe10b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga8cd87704fdf718eb91e0438ece40dc90</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const O &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gacaa45f8d22a9e430403dc0a933c40718</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae3ab5a656b6ac5e2f52304689e535597</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaffc9f5f8d427f2d98dbef49624117634</anchor>
      <arglist>(const std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga569512130000aa1e72d00b1427407201</anchor>
      <arglist>(const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab48d6cf38494913a86506075ee00388d</anchor>
      <arglist>(const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; InverseOperator&lt; typename Operator::domain_type, typename Operator::range_type &gt; &gt;</type>
      <name>getSolverFromFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga1ce543e29164b14be8dcfdf63197f3dd</anchor>
      <arglist>(std::shared_ptr&lt; Operator &gt; op, const ParameterTree &amp;config, std::shared_ptr&lt; Preconditioner&lt; typename Operator::domain_type, typename Operator::range_type &gt;&gt; prec=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solverregistry.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00206.html</filename>
    <includes id="a00044" name="registry.hh" local="no" imported="no">dune/istl/common/registry.hh</includes>
    <includes id="a00179" name="preconditioner.hh" local="no" imported="no">dune/istl/preconditioner.hh</includes>
    <includes id="a00197" name="solver.hh" local="no" imported="no">dune/istl/solver.hh</includes>
    <class kind="class">Dune::UnsupportedType</class>
    <class kind="class">Dune::InvalidSolverFactoryConfiguration</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a3ae3b642fa70a9ad21350f7f90488169</anchor>
      <arglist>(name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>aabca0a60c41408685e4ef6fa3903dcf0</anchor>
      <arglist>(name,...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00206.html</anchorfile>
      <anchor>a2e50053eee47875dee3ab97cd6ab4278</anchor>
      <arglist>(name,...)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerBlockLevelCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga335dd7b0d29e9493a7f193c9f07767bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaaf82ab9baa6ac2e24bb927e953ffb4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultIterativeSolverCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga2a5d86e17fb4ce0299537c0704264996</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solvers.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00209.html</filename>
    <includes id="a00008" name="allocator.hh" local="no" imported="no">dune/istl/allocator.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00047" name="arpackpp.hh" local="no" imported="no">dune/istl/eigenvalue/arpackpp.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="no" imported="no">dune/istl/istlexception.hh</includes>
    <includes id="a00104" name="operators.hh" local="no" imported="no">dune/istl/operators.hh</includes>
    <includes id="a00179" name="preconditioner.hh" local="no" imported="no">dune/istl/preconditioner.hh</includes>
    <includes id="a00188" name="scalarproducts.hh" local="no" imported="no">dune/istl/scalarproducts.hh</includes>
    <includes id="a00197" name="solver.hh" local="no" imported="no">dune/istl/solver.hh</includes>
    <includes id="a00206" name="solverregistry.hh" local="no" imported="no">dune/istl/solverregistry.hh</includes>
    <class kind="class">Dune::LoopSolver</class>
    <class kind="class">Dune::GradientSolver</class>
    <class kind="class">Dune::CGSolver</class>
    <class kind="class">Dune::BiCGSTABSolver</class>
    <class kind="class">Dune::MINRESSolver</class>
    <class kind="class">Dune::RestartedGMResSolver</class>
    <class kind="class">Dune::RestartedFlexibleGMResSolver</class>
    <class kind="class">Dune::GeneralizedPCGSolver</class>
    <class kind="class">Dune::RestartedFCGSolver</class>
    <class kind="class">Dune::CompleteFCGSolver</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gabd2045a9be5c024d2c92e3f4cdfa3eb2</anchor>
      <arglist>(&quot;loopsolver&quot;, defaultIterativeSolverCreator&lt; Dune::LoopSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga3c66a86b003ab534cdd42cad22508ef6</anchor>
      <arglist>(&quot;gradientsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GradientSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gab43f1b948010bb468503c277c15f8eb5</anchor>
      <arglist>(&quot;cgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac041cf0b9a9364c1844ef5b3d2528d30</anchor>
      <arglist>(&quot;bicgstabsolver&quot;, defaultIterativeSolverCreator&lt; Dune::BiCGSTABSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaa120eff85c543a03ef1772f13de8684f</anchor>
      <arglist>(&quot;minressolver&quot;, defaultIterativeSolverCreator&lt; Dune::MINRESSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga7cc4a9320ba7c35fae50b4360d80ecf4</anchor>
      <arglist>(&quot;restartedgmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga8845c190b12bb823c017a8dfe514706b</anchor>
      <arglist>(&quot;restartedflexiblegmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFlexibleGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga311f32233cd4c7b3458590c6e12a4317</anchor>
      <arglist>(&quot;generalizedpcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GeneralizedPCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaaa79e6ce5a91a1bec65fff22b187143b</anchor>
      <arglist>(&quot;restartedfcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaf6cceb219c9cb222a7be9729f616e09b</anchor>
      <arglist>(&quot;completefcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CompleteFCGSolver &gt;())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>solvertype.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00212.html</filename>
    <class kind="struct">Dune::IsDirectSolver</class>
    <class kind="struct">Dune::StoresColumnCompressed</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>spqr.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00215.html</filename>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00203" name="solverfactory.hh" local="no" imported="no">dune/istl/solverfactory.hh</includes>
    <class kind="class">Dune::SPQR</class>
    <class kind="class">Dune::SPQR&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::SPQRCreator</class>
    <class kind="struct">Dune::SPQRCreator::isValidBlock</class>
    <class kind="struct">Dune::SPQRCreator::isValidBlock&lt; FieldVector&lt; double, 1 &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaee2b8c91109cd15b0ee757e98eac25f3</anchor>
      <arglist>(&quot;spqr&quot;, Dune::SPQRCreator())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>superlu.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00218.html</filename>
    <includes id="a00221" name="superlufunctions.hh" local="yes" imported="no">superlufunctions.hh</includes>
    <includes id="a00209" name="solvers.hh" local="yes" imported="no">solvers.hh</includes>
    <includes id="a00224" name="supermatrix.hh" local="yes" imported="no">supermatrix.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="yes" imported="no">bcrsmatrix.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00203" name="solverfactory.hh" local="no" imported="no">dune/istl/solverfactory.hh</includes>
    <class kind="struct">Dune::SuperLUSolveChooser</class>
    <class kind="struct">Dune::SuperLUDenseMatChooser</class>
    <class kind="struct">Dune::SuperLUQueryChooser</class>
    <class kind="struct">Dune::QuerySpaceChooser</class>
    <class kind="class">Dune::SuperLU</class>
    <class kind="struct">Dune::IsDirectSolver&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; double, k &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; std::complex&lt; double &gt;, k &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; double &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; std::complex&lt; double &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad6ff6f6d268c3f382e470135e978eabf</anchor>
      <arglist>(&quot;superlu&quot;, SuperLUCreator())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>superlufunctions.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00221.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>int_t</name>
      <anchorfile>a00221.html</anchorfile>
      <anchor>adae0e0955f67a0812302aab3d89a7cb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>supermatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00224.html</filename>
    <includes id="a00020" name="bcrsmatrix.hh" local="yes" imported="no">bcrsmatrix.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <includes id="a00221" name="superlufunctions.hh" local="yes" imported="no">superlufunctions.hh</includes>
    <class kind="struct">Dune::SuperMatrixCreateSparseChooser</class>
    <class kind="struct">Dune::SuperMatrixPrinter</class>
    <class kind="struct">Dune::BaseGetSuperLUType</class>
    <class kind="struct">Dune::GetSuperLUType</class>
    <class kind="struct">Dune::GetSuperLUType&lt; double &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; float &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; std::complex&lt; float &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUMatrix</class>
    <class kind="struct">Dune::SuperMatrixInitializer</class>
    <class kind="class">Dune::SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt;</class>
    <class kind="class">Dune::SuperMatrixInitializer&lt; BCRSMatrix&lt; B, A &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>transfer.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00173.html</filename>
    <includes id="a00032" name="bvector.hh" local="no" imported="no">dune/istl/bvector.hh</includes>
    <includes id="a00089" name="matrixredistribute.hh" local="no" imported="no">dune/istl/matrixredistribute.hh</includes>
    <includes id="a00161" name="pinfo.hh" local="no" imported="no">dune/istl/paamg/pinfo.hh</includes>
    <includes id="a00110" name="owneroverlapcopy.hh" local="no" imported="no">dune/istl/owneroverlapcopy.hh</includes>
    <includes id="a00113" name="aggregates.hh" local="no" imported="no">dune/istl/paamg/aggregates.hh</includes>
    <class kind="class">Dune::Amg::Transfer</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, SequentialInformation &gt;</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>twolevelmethod.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/paamg/</path>
    <filename>a00176.html</filename>
    <includes id="a00104" name="operators.hh" local="no" imported="no">dune/istl/operators.hh</includes>
    <includes id="a00116" name="amg.hh" local="yes" imported="no">amg.hh</includes>
    <includes id="a00134" name="galerkin.hh" local="yes" imported="no">galerkin.hh</includes>
    <includes id="a00197" name="solver.hh" local="no" imported="no">dune/istl/solver.hh</includes>
    <class kind="class">Dune::Amg::LevelTransferPolicy</class>
    <class kind="class">Dune::Amg::AggregationLevelTransferPolicy</class>
    <class kind="class">Dune::Amg::OneStepAMGCoarseSolverPolicy</class>
    <class kind="class">Dune::Amg::TwoLevelMethod</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Amg</namespace>
  </compound>
  <compound kind="file">
    <name>umfpack.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00227.html</filename>
    <includes id="a00017" name="bccsmatrixinitializer.hh" local="no" imported="no">dune/istl/bccsmatrixinitializer.hh</includes>
    <includes id="a00020" name="bcrsmatrix.hh" local="no" imported="no">dune/istl/bcrsmatrix.hh</includes>
    <includes id="a00209" name="solvers.hh" local="no" imported="no">dune/istl/solvers.hh</includes>
    <includes id="a00212" name="solvertype.hh" local="no" imported="no">dune/istl/solvertype.hh</includes>
    <includes id="a00203" name="solverfactory.hh" local="no" imported="no">dune/istl/solverfactory.hh</includes>
    <class kind="struct">Dune::UMFPackMethodChooser</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; double &gt;</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="class">Dune::UMFPack</class>
    <class kind="struct">Dune::IsDirectSolver&lt; UMFPack&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; UMFPack&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::UMFPackCreator</class>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock</class>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock&lt; B, std::enable_if_t&lt; std::is_same&lt; typename FieldTraits&lt; B &gt;::real_type, double &gt;::value &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0960774f62ee399c3f9c2b57781e4fde</anchor>
      <arglist>(&quot;umfpack&quot;, Dune::UMFPackCreator())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vbvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-istl-prefix/src/dune-istl/dune/istl/</path>
    <filename>a00230.html</filename>
    <includes id="a00071" name="istlexception.hh" local="yes" imported="no">istlexception.hh</includes>
    <includes id="a00032" name="bvector.hh" local="yes" imported="no">bvector.hh</includes>
    <includes id="a00026" name="blocklevel.hh" local="no" imported="no">dune/istl/blocklevel.hh</includes>
    <class kind="class">Dune::VariableBlockVector</class>
    <class kind="class">Dune::VariableBlockVector::CreateIterator</class>
    <class kind="class">Dune::VariableBlockVector::RealIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="struct">
    <name>Dune::AdderSelector</name>
    <filename>a01895.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AdderSelector&lt; AdditiveSchwarzMode, X, S &gt;</name>
    <filename>a01899.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>AdditiveAdder&lt; S, X &gt;</type>
      <name>Adder</name>
      <anchorfile>a01899.html</anchorfile>
      <anchor>a38d2e5e8a3d6d8a8e1e56afed067128e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AdderSelector&lt; MultiplicativeSchwarzMode, X, S &gt;</name>
    <filename>a01903.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiplicativeAdder&lt; S, X &gt;</type>
      <name>Adder</name>
      <anchorfile>a01903.html</anchorfile>
      <anchor>a287dceffa6c7baa1434b045911825443</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AdderSelector&lt; SymmetricMultiplicativeSchwarzMode, X, S &gt;</name>
    <filename>a01907.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>MultiplicativeAdder&lt; S, X &gt;</type>
      <name>Adder</name>
      <anchorfile>a01907.html</anchorfile>
      <anchor>a7035b491878b621701f8c698c568f7de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OwnerOverlapCopyCommunication::AddGatherScatter</name>
    <filename>a01971.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommPolicy&lt; T &gt;::IndexedType</type>
      <name>V</name>
      <anchorfile>a01971.html</anchorfile>
      <anchor>a08aefa5750943515200f332c49a80aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static V</type>
      <name>gather</name>
      <anchorfile>a01971.html</anchorfile>
      <anchor>a49458735529015e5dd666a1bac665180</anchor>
      <arglist>(const T &amp;a, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01971.html</anchorfile>
      <anchor>afe9c0d46591382dfc9c1047abfe271f7</anchor>
      <arglist>(T &amp;a, V v, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AdditiveAdder</name>
    <filename>a01879.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AdditiveAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</name>
    <filename>a01883.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01883.html</anchorfile>
      <anchor>ab2a79d712eb561d5a5faa8aba1535076</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(Impl::asVector(std::declval&lt; T &gt;)))&gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01883.html</anchorfile>
      <anchor>a06eb0b7aec34e55bdffa3a89ca4c2736</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdditiveAdder</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4426d91edd8cc9b0b3334067843955ab</anchor>
      <arglist>(BlockVector&lt; T, A &gt; &amp;v, BlockVector&lt; T, A &gt; &amp;x, OverlappingAssigner&lt; S &gt; &amp;assigner, const field_type &amp;relax_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga76542a5eff5f5f0fd32c73b17ba2eaf1</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9b4e23858765034998eae99df253ce73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01883.html</anchorfile>
      <anchor>a68804e32566736363936f096a22f3c7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AdditiveSchwarzMode</name>
    <filename>a01835.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Aggregate</name>
    <filename>a02031.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>MatrixGraph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe66c315b121adc1696ec5c01a153dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae74c2b19f544e906513cd9ac0afc7130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; Vertex, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc7873758f2bdaf7248ff38de7b068e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>VertexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad2746016c83dd969424be92239a9ff10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga71f30f28df2df99cc6972b1950c8ef9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t *</type>
      <name>SphereMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5cfc9c3bf9c4511fb9f24e72883c5947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga58668f00140e1b2118beae599010bc6c</anchor>
      <arglist>(MatrixGraph &amp;graph, AggregatesMap&lt; Vertex &gt; &amp;aggregates, VertexSet &amp;connectivity, std::vector&lt; Vertex &gt; &amp;front_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68468b49499667f3d4d64cc318376a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstruct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae59a0f089b579d9419f64457777870ca</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae9025a3acbb466318746dd8b22105e41</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e8832b256d1b9b30cb9d1ee33716e64</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga81d71bc901ff945e0a1e3ef730a6084b</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeda6226aba2ee1830624ec55a9bdbd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>size</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8b28f6821f82421d8516637fead0d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>connectSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62ea047be5b3f11ef8a844bdc9ce7bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga081f05180b52ea1016c1b07b04812e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae5ab79d4e08e1005cd88acf3e730ab4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaba7091ab843734f091d3fce748e6da94</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Aggregate&lt; MatrixGraph, VertexSet &gt;</name>
    <filename>a02031.html</filename>
    <member kind="typedef">
      <type>MatrixGraph</type>
      <name>MatrixGraph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe66c315b121adc1696ec5c01a153dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae74c2b19f544e906513cd9ac0afc7130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; Vertex, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc7873758f2bdaf7248ff38de7b068e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexSet</type>
      <name>VertexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad2746016c83dd969424be92239a9ff10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga71f30f28df2df99cc6972b1950c8ef9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t *</type>
      <name>SphereMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5cfc9c3bf9c4511fb9f24e72883c5947</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga58668f00140e1b2118beae599010bc6c</anchor>
      <arglist>(MatrixGraph &amp;graph, AggregatesMap&lt; Vertex &gt; &amp;aggregates, VertexSet &amp;connectivity, std::vector&lt; Vertex &gt; &amp;front_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68468b49499667f3d4d64cc318376a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstruct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae59a0f089b579d9419f64457777870ca</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae9025a3acbb466318746dd8b22105e41</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e8832b256d1b9b30cb9d1ee33716e64</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga81d71bc901ff945e0a1e3ef730a6084b</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeda6226aba2ee1830624ec55a9bdbd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>size</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8b28f6821f82421d8516637fead0d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>connectSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62ea047be5b3f11ef8a844bdc9ce7bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga081f05180b52ea1016c1b07b04812e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae5ab79d4e08e1005cd88acf3e730ab4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaba7091ab843734f091d3fce748e6da94</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregateRenumberer</name>
    <filename>a02423.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>a3caa274b482bcd71d3ee01a1cf2e4d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregateRenumberer</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>ad0d9533060c9ed9559ededaf7cadd108</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Vertex</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>a42ddd4f90f31e36685fa108b11978f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>a7ea5e46aab34271c7145c9e860d596fb</anchor>
      <arglist>(const typename G::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>a36dad416243ab69f43a51382c5e7ec97</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vertex</type>
      <name>number_</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>aee6f79733a184e38d80a333b0aa9a56a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>AggregatesMap&lt; Vertex &gt; &amp;</type>
      <name>aggregates_</name>
      <anchorfile>a02423.html</anchorfile>
      <anchor>ac0fc01c0a77a520889cb938d8c80f107</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::AggregatesGatherScatter</name>
    <filename>a02259.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TI</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac723d5f24036501c52f9d7d63bf4ffeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab33381645d3ff14e82e380f198b72893</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GlobalIndex &amp;</type>
      <name>gather</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga01360f36f3a5e27f0806308050573432</anchor>
      <arglist>(const GlobalAggregatesMap&lt; T, TI &gt; &amp;ga, size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4ee5b5319fc712669aaf92d29fbaf506</anchor>
      <arglist>(GlobalAggregatesMap&lt; T, TI &gt; &amp;ga, GlobalIndex global, size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregatesMap</name>
    <filename>a02023.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::Amg::AggregatesMap::DummyEdgeVisitor</class>
    <member kind="typedef">
      <type>V</type>
      <name>VertexDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf657e8e9f35ddf9811f6ab7ea72ab9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9258a3f0e9738c7c77d348cbb28b4b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; VertexDescriptor, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05d2193d449d4f9fe9e562a25e4fcf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLList&lt; VertexDescriptor, Allocator &gt;</type>
      <name>VertexList</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab0e20fc899e8046c7a5eb565cd8025f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AggregateDescriptor *</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac23d88ffee9cbe209afdeaf84e707162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AggregateDescriptor *</type>
      <name>iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga78fc91f2de6682f06b414f12fedfaea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaa86514f266a48b07787ab5c8440c9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa57de3c523ca120b4deec855f5e4c124</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga556e4f96555dae9b025dc74b5c16467d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int, int, int &gt;</type>
      <name>buildAggregates</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe8eb7ed39badbee958a77aa979651e</anchor>
      <arglist>(const M &amp;matrix, G &amp;graph, const C &amp;criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad36222f801a92959560f83953273816a</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, F &amp;aggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05b088ec8c1ab2a6bfc1c7956ea86539</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, L &amp;visited, F1 &amp;aggregateVisitor, F2 &amp;nonAggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadf10f6b77f88384bcbcd59cfe29a2002</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa283871dbcdc8e2bafba6c19ec92d5db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf34f175c3ba3e120b84ca16c8c5df2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e35f8054f9e50c2aa272ba7b6511cbd</anchor>
      <arglist>(const VertexDescriptor &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2453135552fed7c60ae928709d93a6e5</anchor>
      <arglist>(const VertexDescriptor &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga69bdbd39fe106067a963795665b0cf11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8d1bf17809a11fce96f43027612f2547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0780437816e61ec5488bd3a6ab2cc658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga332ed1c7459860df1638d47c2bad3c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const V</type>
      <name>UNAGGREGATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad35c6c9e3aa1ec18c07a97279f8d3f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const V</type>
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9431f7b35947083f3d2a270a4b3b8bb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregatesMap&lt; Vertex &gt;</name>
    <filename>a02023.html</filename>
    <member kind="typedef">
      <type>Vertex</type>
      <name>VertexDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf657e8e9f35ddf9811f6ab7ea72ab9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vertex</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9258a3f0e9738c7c77d348cbb28b4b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; VertexDescriptor, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05d2193d449d4f9fe9e562a25e4fcf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLList&lt; VertexDescriptor, Allocator &gt;</type>
      <name>VertexList</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab0e20fc899e8046c7a5eb565cd8025f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AggregateDescriptor *</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac23d88ffee9cbe209afdeaf84e707162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AggregateDescriptor *</type>
      <name>iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga78fc91f2de6682f06b414f12fedfaea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaa86514f266a48b07787ab5c8440c9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa57de3c523ca120b4deec855f5e4c124</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga556e4f96555dae9b025dc74b5c16467d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int, int, int &gt;</type>
      <name>buildAggregates</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe8eb7ed39badbee958a77aa979651e</anchor>
      <arglist>(const M &amp;matrix, G &amp;graph, const C &amp;criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad36222f801a92959560f83953273816a</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, F &amp;aggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05b088ec8c1ab2a6bfc1c7956ea86539</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, L &amp;visited, F1 &amp;aggregateVisitor, F2 &amp;nonAggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadf10f6b77f88384bcbcd59cfe29a2002</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa283871dbcdc8e2bafba6c19ec92d5db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf34f175c3ba3e120b84ca16c8c5df2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e35f8054f9e50c2aa272ba7b6511cbd</anchor>
      <arglist>(const VertexDescriptor &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2453135552fed7c60ae928709d93a6e5</anchor>
      <arglist>(const VertexDescriptor &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga69bdbd39fe106067a963795665b0cf11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0780437816e61ec5488bd3a6ab2cc658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8d1bf17809a11fce96f43027612f2547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga332ed1c7459860df1638d47c2bad3c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Vertex</type>
      <name>UNAGGREGATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad35c6c9e3aa1ec18c07a97279f8d3f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Vertex</type>
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9431f7b35947083f3d2a270a4b3b8bb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::AggregatesPublisher</name>
    <filename>a02263.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::AggregatesPublisher&lt; T, O, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</name>
    <filename>a02267.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2f2d6e4a87f6949ac2cbd56c741f56ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>OverlapFlags</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1778928ffd507ec84443bd2ef5ce5095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OwnerOverlapCopyCommunication&lt; T1, T2 &gt;</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5c3a58df4704bbf80f037c6a833ae9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::GlobalLookupIndexSet</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga01794bf23ba2a4a54b272612f1c0f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38c4bbf31867370a5377250a72171605</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>publish</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa2b7874ce116744313484deb7586f967</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates, ParallelInformation &amp;pinfo, const GlobalLookupIndexSet &amp;globalLookup)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::AggregatesPublisher&lt; T, O, SequentialInformation &gt;</name>
    <filename>a02271.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac90a03d9af06304c8278fb4da96fb327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SequentialInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga384a8e2259887830e213879973ae8579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::GlobalLookupIndexSet</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad35968a39532e7b8464292f7f3e4717a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>publish</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08f9f6de6164f3f781d53be46f13d2a4</anchor>
      <arglist>([[maybe_unused]] AggregatesMap&lt; Vertex &gt; &amp;aggregates, [[maybe_unused]] ParallelInformation &amp;pinfo, [[maybe_unused]] const GlobalLookupIndexSet &amp;globalLookup)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregationCriterion</name>
    <filename>a01975.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f63d04bf01bab42917249ec824b9319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5fbd5400b54866d891945852874ee80e</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregationCriterion&lt; Dependency&lt; M, Norm &gt; &gt;</name>
    <filename>a01975.html</filename>
    <base>Dune::Amg::Dependency</base>
    <member kind="typedef">
      <type>Dependency&lt; M, Norm &gt;</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1baaec66f4b574b2cef650c8faa3320f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga321acf98b939f0b93a7410b189e4a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62b0d02ee5cbaa9714dd453aa0db5567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga00c973edf4b506a16aea1fc25a14b897</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f63d04bf01bab42917249ec824b9319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5fbd5400b54866d891945852874ee80e</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c251ce75374647a53f53f17ffe5ccc1</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga14e65ff5e7d99c39b38aa55c7e80b0a8</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83757595a4c63000d5ca728bf72320a8</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d817e43d5427d7d01ef0f8d9723de81</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga37eef1b68f03154eacfc3324ecdc638c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad90b5c6a78351664999222c0e5ccc495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf72f67c861cccdfbc79b297a380e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d18731e26edb51c8dcf567f169fab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7898ad122d26cfaeb622d152318b782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0849baf99502da25d7aab61433702189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4092bf0b04b38b0bea723bf99dfe1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa06549181446abcb1d1c1899e5cd780e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AggregationCriterion&lt; SymmetricDependency&lt; M, Norm &gt; &gt;</name>
    <filename>a01975.html</filename>
    <base>Dune::Amg::SymmetricDependency</base>
    <member kind="typedef">
      <type>SymmetricDependency&lt; M, Norm &gt;</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30338139b017b5a898350c3c5e368a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga65efb2e151489eb39de0b953bc205a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c9089eed18a881ea305ab6eb3a464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5354f976f8656a31fb61761f3cfc594b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f63d04bf01bab42917249ec824b9319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5fbd5400b54866d891945852874ee80e</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabb7b7362105cccadd41c912142061234</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaca3638072863982d108fd6081ac4eb62</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fee6a17a971fce9fa8696cdba418b28</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga50ecac18351ec35ce29e1aed68238b7f</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaea541c8df65d3ce1d00dbac64f1096c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa6e92a58d04a032499f92d7266c3e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c61e4b54daeccbc59b7fb2dccc49e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11737c528bb8a66108c28e5430b6d79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga758ae8319a1b2815cbe9d5ed7a658c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga24be101071dea7448b30e71c1ba325a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9544d0f92497c059c356c4af967fd313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7744864a59f4dd34ff15daba4b95e5aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregationLevelTransferPolicy</name>
    <filename>a02563.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>LevelTransferPolicy&lt; O, O &gt;</base>
    <member kind="typedef">
      <type>LevelTransferPolicy&lt; O, O &gt;</type>
      <name>FatherType</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>ac344b9181db29c78284952bed8b00dfd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Criterion</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a12ebd921b0b59bb8b300e1a971daad58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SequentialInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a8554524c74a4898c891c22037c6f6cb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>FineOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa4ace1314e18bc180f2bb9265728a1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::range_type</type>
      <name>FineRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a1c8a4baff865e072806df0a2b51a657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::domain_type</type>
      <name>FineDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>af319a221a494d42eb1624805fe217ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>CoarseOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a057e5f22a8287e7e783cac63d40148d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::range_type</type>
      <name>CoarseRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a378e47c0041f0d781fa278290821d946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::domain_type</type>
      <name>CoarseDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa6f289a761b8488aa0100854d34461d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationLevelTransferPolicy</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a464ccfcc20d9306f714cbc23a83c5a08</anchor>
      <arglist>(const Criterion &amp;crit)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createCoarseLevelSystem</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>af018bdb1b5471641b9d921256b4212b3</anchor>
      <arglist>(const O &amp;fineOperator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToCoarseLevel</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a8259f92f840abc65db51262d9bb63d2b</anchor>
      <arglist>(const typename FatherType::FineRangeType &amp;fineRhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>moveToFineLevel</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a814a75ea46827f38c45162583ee27a9d</anchor>
      <arglist>(typename FatherType::FineDomainType &amp;fineLhs)</arglist>
    </member>
    <member kind="function">
      <type>AggregationLevelTransferPolicy *</type>
      <name>clone</name>
      <anchorfile>a02563.html</anchorfile>
      <anchor>a26ab91039280e0dbd36ea6e54d491b4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt; &amp;</type>
      <name>getCoarseLevelOperator</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a95431e884f8eb57d0fc591fbfd9fdb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseRangeType &amp;</type>
      <name>getCoarseLevelRhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a3c7cb6e391a2ae52b14b8ef1d01d4478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseDomainType &amp;</type>
      <name>getCoarseLevelLhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ad9b8ad8a8773b67e527f3c8fcdd827b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToCoarseLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a15e8c29206562eac2d0236abd6606e6b</anchor>
      <arglist>(const FineRangeType &amp;fineRhs)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseRangeType</type>
      <name>rhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a869722b290a67fa93ddf17a3faf21af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseDomainType</type>
      <name>lhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a4b4c1b7ece3b7a7d785b458161ac73a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt;</type>
      <name>operator_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a73199de2406818fabd11b4377f008235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregationParameters</name>
    <filename>a02399.html</filename>
    <base>Dune::Amg::DependencyParameters</base>
    <member kind="function">
      <type></type>
      <name>AggregationParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab9dd338bbafbb5dad03d9aa733370ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Aggregator</name>
    <filename>a02019.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>MatrixGraph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga239664e57c4c996c7fbd3976267a26d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f4859e7d55855bace8c873cfdafa678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga753ac555d3d946b7cf76e5ab9b5824c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aggregator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga841366f64cc179802c21d4fd5a5ac684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Aggregator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d14d8929ca6f47b57706e35c6f83c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int, int, int &gt;</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga39137177d63670ba72fe053c3b10d49b</anchor>
      <arglist>(const M &amp;m, G &amp;graph, AggregatesMap&lt; Vertex &gt; &amp;aggregates, const C &amp;c, bool finestLevel)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Stack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4641b458711966e157e765a8aef3476c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_bdsolve</name>
    <filename>a01335.html</filename>
    <templarg>I</templarg>
    <templarg>relax</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bdsolve</name>
      <anchorfile>a01335.html</anchorfile>
      <anchor>a2fb293999f57720443e6bba6385db621</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_bdsolve&lt; 0, norelax &gt;</name>
    <filename>a01343.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bdsolve</name>
      <anchorfile>a01343.html</anchorfile>
      <anchor>ab73662fc33abfc1763008b0caf83f6ee</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_bdsolve&lt; 0, withrelax &gt;</name>
    <filename>a01339.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bdsolve</name>
      <anchorfile>a01339.html</anchorfile>
      <anchor>a0578f0791502678764d8570a5962cf66</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_btsolve</name>
    <filename>a01315.html</filename>
    <templarg>I</templarg>
    <templarg>diag</templarg>
    <templarg>relax</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bltsolve</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a4fbe51923ee9e761badfa52c94e1c9cf</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>butsolve</name>
      <anchorfile>a01315.html</anchorfile>
      <anchor>a4ee5488b46a36222d8f604ce1bad67cc</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_btsolve&lt; 0, nodiag, norelax &gt;</name>
    <filename>a01331.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bltsolve</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a7bbc44eb972d566aed64cdddeed62700</anchor>
      <arglist>(const M &amp;, X &amp;v, const Y &amp;d, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>butsolve</name>
      <anchorfile>a01331.html</anchorfile>
      <anchor>a7f0765dd2d2540d1906e112a0253c93b</anchor>
      <arglist>(const M &amp;, X &amp;v, const Y &amp;d, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_btsolve&lt; 0, nodiag, withrelax &gt;</name>
    <filename>a01327.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bltsolve</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>a9167ee83afbec897d1fc995e6f77f031</anchor>
      <arglist>(const M &amp;, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>butsolve</name>
      <anchorfile>a01327.html</anchorfile>
      <anchor>ab4b95f401448c8c00d01fea7a3688643</anchor>
      <arglist>(const M &amp;, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_btsolve&lt; 0, withdiag, norelax &gt;</name>
    <filename>a01323.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bltsolve</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>a1cb4e9f5053474c0c59be5c39d248fd0</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>butsolve</name>
      <anchorfile>a01323.html</anchorfile>
      <anchor>ad7353f7968fe8f8d9a54c075735eb8ab</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_btsolve&lt; 0, withdiag, withrelax &gt;</name>
    <filename>a01319.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bltsolve</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>a7923eb236fd1dc78046d750df398c997</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>butsolve</name>
      <anchorfile>a01319.html</anchorfile>
      <anchor>af07653987fde36892051670679b1ad11</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_itsteps</name>
    <filename>a01347.html</filename>
    <templarg>I</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>af8b4ed362c8ce27818fc8a4fd52921a0</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a60bf58acddc39afd91f73ac6a756ad73</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>a4151454ae4121faed5d0e813f3844d8e</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a01347.html</anchorfile>
      <anchor>aa66018c68f1237f87c9ad311ca347583</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_itsteps&lt; 0, M &gt;</name>
    <filename>a01351.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a2c01cf6f8b0fb434c47166ae660d4dc7</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a394b38667bcc31fbf0807c32a4ada480</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a3a917ad3257c8526b12e5e30fbdb646c</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a01351.html</anchorfile>
      <anchor>a370c426e70af83dd74ef70d959e00a4b</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::algmeta_itsteps&lt; I, MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &gt;</name>
    <filename>a01355.html</filename>
    <templarg>I</templarg>
    <templarg></templarg>
    <templarg>MultiTypeMatrixArgs</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>a36fe81aa10e538c2c496ed7e1e62a930</anchor>
      <arglist>(const MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &amp;A, MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;x, const MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>a67b0baa5f5dcf22636a2258f12383aa3</anchor>
      <arglist>(const MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &amp;A, MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;x, const MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>af8efefd8778bfb4e1b4ce2c1408e4b6f</anchor>
      <arglist>(const MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &amp;A, MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;x, const MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a01355.html</anchorfile>
      <anchor>a54b1cfc467849d240a946448a4ab671c</anchor>
      <arglist>(const MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &amp;A, MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;x, const MultiTypeBlockVector&lt; MultiTypeVectorArgs... &gt; &amp;b, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AllocatorTraits</name>
    <filename>a01099.html</filename>
    <templarg></templarg>
    <base>Dune::DefaultAllocatorTraits</base>
    <member kind="typedef">
      <type>std::allocator&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>af72bf9d3fadb19725dc7663df702bfb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::AlwaysOneNorm</name>
    <filename>a02007.html</filename>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga807b20876f3459df903b1cf6deb085e8a27353347880706829b87fd0014fdd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga807b20876f3459df903b1cf6deb085e8a27353347880706829b87fd0014fdd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga64a3301831363af2e004ab378e3d22d7</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AMG</name>
    <filename>a02079.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>Operator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga66dc78b3214f4ebfc19c8ba3d467d25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PI</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc3d32c625bd4cabd2481107019b2fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; M, ParallelInformation, A &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef37f955d0f91544f873eb26177a9978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe146a3971a12af39b849c10e71e26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2baddcf013a5166a162950672bd21a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c0496b0f7de49193c227a8c93c045d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab775b7ff79213774ad098fdf1c4c65cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60efd923eab7d4f2e8e66755c1d86843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmootherTraits&lt; Smoother &gt;::Arguments</type>
      <name>SmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b093095df84e9990eff5581cfe4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a89a4e31e658d858016f5a6ef3ecc69</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae4c4447a1c2a32c4a67fe5a8ee60da4e</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3e29ade2ae24a0f782fe3ac677f979e8</anchor>
      <arglist>(std::shared_ptr&lt; const Operator &gt; fineOperator, const ParameterTree &amp;configuration, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga03586c2dfb592d1ae71d30461812fbcc</anchor>
      <arglist>(const AMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a5e6da5989b1a67b0a63766c48b568e</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae719bd458f78ab3a6cd6a9ad884ac0c9</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf332edc0dc7fcd54a1238811e67f2f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d12cab3e3493cb0af7b4592fb47943</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7ebdc127c9754fe1221a201d359d208d</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga88e6fc3d3184da7443285d613295e750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d6c5102cef19c8349ccf94a1f68ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa92d8726e030c57c72e4a82bf054f464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ac877650209f65534f4858f0514214b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf91f5307055ee7eb3a392902ab41943d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>KAmgTwoGrid&lt; AMG &gt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c812e1d63c310c6b28713b196382d86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AMG&lt; M, X, S, SequentialInformation, std::allocator&lt; X &gt; &gt;</name>
    <filename>a02079.html</filename>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>Operator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga66dc78b3214f4ebfc19c8ba3d467d25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SequentialInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc3d32c625bd4cabd2481107019b2fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; M, ParallelInformation, std::allocator&lt; X &gt; &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef37f955d0f91544f873eb26177a9978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe146a3971a12af39b849c10e71e26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2baddcf013a5166a162950672bd21a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c0496b0f7de49193c227a8c93c045d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab775b7ff79213774ad098fdf1c4c65cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60efd923eab7d4f2e8e66755c1d86843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmootherTraits&lt; Smoother &gt;::Arguments</type>
      <name>SmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b093095df84e9990eff5581cfe4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a89a4e31e658d858016f5a6ef3ecc69</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae4c4447a1c2a32c4a67fe5a8ee60da4e</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3e29ade2ae24a0f782fe3ac677f979e8</anchor>
      <arglist>(std::shared_ptr&lt; const Operator &gt; fineOperator, const ParameterTree &amp;configuration, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga03586c2dfb592d1ae71d30461812fbcc</anchor>
      <arglist>(const AMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a5e6da5989b1a67b0a63766c48b568e</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae719bd458f78ab3a6cd6a9ad884ac0c9</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf332edc0dc7fcd54a1238811e67f2f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d12cab3e3493cb0af7b4592fb47943</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7ebdc127c9754fe1221a201d359d208d</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga88e6fc3d3184da7443285d613295e750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d6c5102cef19c8349ccf94a1f68ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa92d8726e030c57c72e4a82bf054f464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ac877650209f65534f4858f0514214b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AMG&lt; Operator, X, Smoother &gt;</name>
    <filename>a02079.html</filename>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>Operator</type>
      <name>Operator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga66dc78b3214f4ebfc19c8ba3d467d25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SequentialInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc3d32c625bd4cabd2481107019b2fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; Operator, ParallelInformation, std::allocator&lt; X &gt; &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef37f955d0f91544f873eb26177a9978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe146a3971a12af39b849c10e71e26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2baddcf013a5166a162950672bd21a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c0496b0f7de49193c227a8c93c045d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab775b7ff79213774ad098fdf1c4c65cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60efd923eab7d4f2e8e66755c1d86843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmootherTraits&lt; Smoother &gt;::Arguments</type>
      <name>SmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b093095df84e9990eff5581cfe4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a89a4e31e658d858016f5a6ef3ecc69</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae4c4447a1c2a32c4a67fe5a8ee60da4e</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3e29ade2ae24a0f782fe3ac677f979e8</anchor>
      <arglist>(std::shared_ptr&lt; const Operator &gt; fineOperator, const ParameterTree &amp;configuration, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga03586c2dfb592d1ae71d30461812fbcc</anchor>
      <arglist>(const AMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a5e6da5989b1a67b0a63766c48b568e</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae719bd458f78ab3a6cd6a9ad884ac0c9</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf332edc0dc7fcd54a1238811e67f2f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d12cab3e3493cb0af7b4592fb47943</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7ebdc127c9754fe1221a201d359d208d</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga88e6fc3d3184da7443285d613295e750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d6c5102cef19c8349ccf94a1f68ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa92d8726e030c57c72e4a82bf054f464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ac877650209f65534f4858f0514214b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AMGCreator</name>
    <filename>a02103.html</filename>
    <class kind="struct">Dune::AMGCreator::isValidBlockType</class>
    <class kind="struct">Dune::AMGCreator::isValidBlockType&lt; FieldMatrix&lt; T, n, m &gt; &gt;</class>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename OP::element_type::domain_type, typename OP::element_type::range_type &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga19457c01f5935d262f1c25f1115db304</anchor>
      <arglist>(const OP &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8a5b154380721a2f5e9e3849081ab871</anchor>
      <arglist>(const std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa8cfafaad592965eda163fdf17e25df6</anchor>
      <arglist>(const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9af18eb2097ad9f50ab6299eb550baa3</anchor>
      <arglist>(const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4b4657eb5de46e7330178fbb67f635e</anchor>
      <arglist>(TL tl, const std::shared_ptr&lt; OP &gt; &amp;op, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlockType&lt; typename OP::matrix_type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga55ee29a116465de88ad13cee464be8f1</anchor>
      <arglist>(TL, const std::shared_ptr&lt; OP &gt; &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt;!isValidBlockType&lt; typename OP::matrix_type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ApplyHelper</name>
    <filename>a02115.html</filename>
    <templarg>i</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02115.html</anchorfile>
      <anchor>ac31f96c684a1e92ef05d6fed5023cc7f</anchor>
      <arglist>(TT tuple, const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ApplyHelper&lt; 0 &gt;</name>
    <filename>a02119.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02119.html</anchorfile>
      <anchor>a0381f1503173508f3440b1f4eac21d04</anchor>
      <arglist>([[maybe_unused]] TT tuple, [[maybe_unused]] const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ArPackPlusPlus_Algorithms</name>
    <filename>a01279.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BlockVector::field_type</type>
      <name>Real</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a1d1b27c0e7c8a3f758137365c2578285</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArPackPlusPlus_Algorithms</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a8cc6b5dbbc8fe0bde44d4f35132493dd</anchor>
      <arglist>(const BCRSMatrix &amp;m, const unsigned int nIterationsMax=100000, const unsigned int verbosity_level=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSymMaxMagnitude</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a3b10437a07109f82f870f97580346a02</anchor>
      <arglist>(const Real &amp;epsilon, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSymMinMagnitude</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a433f112742d5c031703d33e38d3fa24a</anchor>
      <arglist>(const Real &amp;epsilon, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeSymCond2</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a903d4f1d338d22eb5bca4b1abafc5388</anchor>
      <arglist>(const Real &amp;epsilon, Real &amp;cond_2) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNonSymMax</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>af28d7ba0dc509e5f8347229548e7b9ce</anchor>
      <arglist>(const Real &amp;epsilon, BlockVector &amp;x, Real &amp;sigma) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNonSymMin</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>ac4083064b446d60add2935fe11c1b629</anchor>
      <arglist>(const Real &amp;epsilon, BlockVector &amp;x, Real &amp;sigma) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>computeNonSymCond2</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>af00bea53e1c4da5e90679537103cba4e</anchor>
      <arglist>(const Real &amp;epsilon, Real &amp;cond_2) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIterationCount</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a1715f6ed1d4145c0746fa0faaf69b745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BCRSMatrix &amp;</type>
      <name>m_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a68f9b9a5b18996406a9a4e1cc1d2fe44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>nIterationsMax_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a77a180781712196bc4f53ce9b808e3d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>verbosity_level_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a052a50dfa5f4ae31bc205fb375dd7c36</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nIterations_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a9dac40fd9dbc3759cb7637802777d229</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>title_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a1a3a4659d44c15c0a148c545ff4b0ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>blank_</name>
      <anchorfile>a01279.html</anchorfile>
      <anchor>a82a9ae7c53f5d2a502d933b108de9e8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AssembledLinearOperator</name>
    <filename>a01823.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::LinearOperator</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>ab37d6321eb45a5deacac91ae879c58fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a1be8b523f86dcd7316dc7d5e1e5a003c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a9ce7f23c9e5103d7a0531ae85151e262</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>a9448c9e65f4b9eadfd4dec4a0cc37b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual const M &amp;</type>
      <name>getmat</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>aa89022d003d613efecfe96d4bd58e49c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~AssembledLinearOperator</name>
      <anchorfile>a01823.html</anchorfile>
      <anchor>ac807b160af572b7572805c9bf4e31074</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ad6c20f17cf2f3421cd388b2b60fd0fe3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a624e0c93085fcfe15f009454d5afb7df</anchor>
      <arglist>(field_type alpha, const X &amp;x, Y &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>abe6e03b772c5b7a029fcf3f2231b92f3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::BaseConnectivityConstructor</name>
    <filename>a02227.html</filename>
    <class kind="class">Dune::Amg::BaseConnectivityConstructor::ConnectedBuilder</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2b1ed929c55403e6bb9e46d2ab52c850</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *&amp;seed, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *overlapEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructNonOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0bd93dcb846c1e048d2c218bd266260e</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::VertexDescriptor &amp;seed)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::BaseGalerkinProduct</name>
    <filename>a02211.html</filename>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9fbf22e8c85b9465f4c721f1a1740b6</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const I &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251ccd3ae014270cf5e9c77fbd0644b7</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const P &amp;pinfo, [[maybe_unused]] const O &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BaseGetSuperLUType</name>
    <filename>a02883.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGetSuperLUType&lt; double &gt;</name>
    <filename>a02883.html</filename>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGetSuperLUType&lt; float &gt;</name>
    <filename>a02883.html</filename>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGetSuperLUType&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a02883.html</filename>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BaseGetSuperLUType&lt; std::complex&lt; float &gt; &gt;</name>
    <filename>a02883.html</filename>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BCRSMatrix</name>
    <filename>a01155.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::BCRSMatrix::CreateIterator</class>
    <class kind="class">Dune::BCRSMatrix::Deallocator</class>
    <class kind="class">Dune::BCRSMatrix::RealRowIterator</class>
    <member kind="enumeration">
      <type></type>
      <name>BuildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notbuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a31ccbde5d5bf1931d8aa6342b887e4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notAllocated</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab598bbcf6b1be00f3e86737ec4b32770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>building</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab8ebe0b91a94788eadfe7dd910c8114f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rowSizesBuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a0d4ce3a26588f45f4661065dd7968976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>built</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a2c7de4fa501570a5a65b74b112c3af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_wise</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecaf7c450c73d8588d16cf4c65552b0ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>random</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecad05f70b8e286d23abee639a8d50552e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implicit</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca0b6109e215775999912e5634a2fff10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca92b68407d7d0300588b1279b91838917</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a036327219e82429eb5056cdcb8029325</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac27f92bda3724989a12c908d5b0bb355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>afbabf44198dc84c120bd577ef6166d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::CompressedBlockVectorWindow&lt; B, A &gt;</type>
      <name>row_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab81a157954e0da4d4f1b80ad432a5fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a92dcd5f5afa082cf7c70ca745117108b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::Dune::CompressionStatistics&lt; size_type &gt;</type>
      <name>CompressionStatistics</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a78acdc4dca86c07dbbdf1a779d22a7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6426ed2b23a28e0b942ceb88cad77259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5dbba06948485933958ce9bd74642828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2efdf9ce2539b8aead490775ba26dac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8a2230f988557dfbbc5a2bb7d688fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1cec23735a4b8543c573e7b7e01a9bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a7c8d9c5b05609459f46042339623c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a55aab1eeee5f07e1a1a19318cf196c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa76d2016ee31d3781ec5d48925251d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notbuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a31ccbde5d5bf1931d8aa6342b887e4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notAllocated</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab598bbcf6b1be00f3e86737ec4b32770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>building</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab8ebe0b91a94788eadfe7dd910c8114f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rowSizesBuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a0d4ce3a26588f45f4661065dd7968976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>built</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a2c7de4fa501570a5a65b74b112c3af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_wise</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecaf7c450c73d8588d16cf4c65552b0ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>random</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecad05f70b8e286d23abee639a8d50552e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implicit</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca0b6109e215775999912e5634a2fff10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca92b68407d7d0300588b1279b91838917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a9a455ff0bc014b25b29a7aca924ee5b8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac6af1511525cd421479f487fd44ef2b9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0ad9c5258e0c65fde36f8793fdc96413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a801d09e6e79eba0e588d633e6d9d5049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa4b470c5f794f9fc941ebc49e8631951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a80e2c47e10c0881b03d78213ab583b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af721176754c07eab9b0f23824cc52418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af57e3dcf6621aa88b9545fb432ef6b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aff8d80654ea7151f9f74f73e1e2b6f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a69042d0e88c4633d0350368629a1985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a34b65fb52b4b7da95999604d8fabba92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a76bc4d8de5595e723c623f2fc6bb3122</anchor>
      <arglist>(size_type _n, size_type _m, size_type _nnz, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acdbe4d1f81bc548f3be507d6e9a45bff</anchor>
      <arglist>(size_type _n, size_type _m, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a98d56fd3642d319a2ba06d45b7455e78</anchor>
      <arglist>(size_type _n, size_type _m, size_type _avg, double compressionBufferSize, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a79a0f0d9b34cada933c1c919cd67416b</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2afb5571f80472c948bd0db3b7440f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae747343dfc94f181f31471ceed7e5d4a</anchor>
      <arglist>(BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae89150f5ae2f2927657bddfb78610e55</anchor>
      <arglist>(size_type rows, size_type columns, size_type nnz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImplicitBuildModeParameters</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc7ebace380a42cd240d1b65118384a6</anchor>
      <arglist>(size_type _avg, double compressionBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2bdbdfb1376f047a9b45fa357ab13861</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abcb3dea50ab1eac4cb2ab8955af19e82</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createbegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9217545ae9d4ea1e3950cf21e6899c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createend</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa0839499f658a2d3e7a5ea908cc86130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5a8fdcc48798af5363b9fd8cdf2a4dac</anchor>
      <arglist>(size_type i, size_type s)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>getrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aadf307bf8ed209291680918218906ac6</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a41e41b7274abb109855e80f76a66f4d7</anchor>
      <arglist>(size_type i, size_type s=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endrowsizes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a3ebc537e4755cf1ab02ea0dd93c942fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addindex</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a82d12c2fa3e3e956e4257aed1bf247ec</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a813bb1a256498169c9e384847721f4a5</anchor>
      <arglist>(size_type row, It begin, It end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endindices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aceeae57760ab2b4c297f19ac8522eef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>B &amp;</type>
      <name>entry</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adbcd06dccd4a9d7350df5c0fbb6d2db8</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>CompressionStatistics</type>
      <name>compress</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad8da8508e9f65564f91ea6f00934bc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad59f6d33e271ed3acd9223b9535913a4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a7177e68fadef1d8054c232815759b595</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa326dc908b26901ec421d3894904f366</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acef4af977012c9eb300262c32079f48f</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>axpy</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa16961c0bc920e87cb3d488deed54c63</anchor>
      <arglist>(field_type alpha, const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac1aed9a57f822ad924d482cfe51cf5fc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac92b996f0db8954bd178109e6b5ecca0</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abf88fa7c6056933790ef9ef3beed9d0c</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aaa1c771ee60aaa04f581a2e15f3a5cef</anchor>
      <arglist>(F &amp;&amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a48c93a4ea67b7f82d91f614eddd898d3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a15301031ed46d3f3d0055a5dc34bb14e</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac5fefc567a0dd5cd15cc39c2152f74be</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a66b1a2d615e1b61e0782675e24d3c8f0</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a49553869d73e239258d2b52653900537</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a10c57682346c2da57f43b2277244de95</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1351c6ecbca38afaf5c6b7b2da6b48c9</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a719f3e2bbb745700d089a6e56c7ecaaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a02263c6c7dfbe056b758fdd4c7f400d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae640c4fc5a9343b8836b30733b98f9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab2a70ec04bff3b0413020ca6ee2d11c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonzeroes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a50486320ea446b5c7d37c5dfb5c6ee18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildStage</type>
      <name>buildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a06d86fafc4fcefcadff13ae41a757cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildMode</type>
      <name>buildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abc93aa9afe0bac637589a9cd42a35bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a05ce55f7a7a81dec25717dd9e8fb54e2</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>blocklevel</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a210d1cadcde1eb99c6f33ee21f52fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::pair&lt; size_type, size_type &gt;, B &gt;</type>
      <name>OverflowType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a846eeb91adc53152aa32531e4621c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWindowPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aec4d821c4ffdb8eaa8e358914be9cd68</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColumnPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af263809fff8f4c4949ad0c364e8f6c55</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adefb501cd2953cf91eb676db12751482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyWindowStructure</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0e4b236ed04fd3da227b931312c68386</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2ced2acc98894c921da00d0fbe1bfc87</anchor>
      <arglist>(bool deallocateRows=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a23538fdea1991446d5ea83d67c11bb70</anchor>
      <arglist>(size_type rows, size_type columns, size_type allocationSize, bool allocateRows, bool allocate_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocateData</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2c39e3488286138661eeb60c2a0ff861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>implicit_allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc53e4119b13405269be63a31350afcb</anchor>
      <arglist>(size_type _n, size_type _m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildMode</type>
      <name>build_mode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a59d53fafbc0e1d8365f374781a542f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildStage</type>
      <name>ready</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a594b2bf93f559ed7c77f9f28e1338462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; B &gt;</type>
      <name>allocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae143d5cdc0f58455669df8cedf8c519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; row_type &gt;</type>
      <name>rowAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a04cdd06e79648de953faf5c34a4784c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; size_type &gt;</type>
      <name>sizeAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a63c50a313360dd3919050574a2617bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>n</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab647dfcec2e9b6d7eb859e323d6fed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>m</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a629cfcdbb749dba27ad6bb972e033f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>nnz_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5e7991647a57776d254edc890384c0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>allocationSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5227a5dc09391af92221bb06ea12bb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>row_type *</type>
      <name>r</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a811ac6c78bf57efe0f8e6204b486aba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>B *</type>
      <name>a</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6bdbfcac679b19d10ea4b18856ed7798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; size_type &gt;</type>
      <name>j_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae90823e0ce3127042e0c915deeab9b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>avg</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac8d599e322adb15721b8492d29aee808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>compressionBufferSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a5d660b0ed40ea2cac31d0098c83991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverflowType</type>
      <name>overflow</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a96b4f211ba9f8639329fbc3a14e8233b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MatrixDimension&lt; BCRSMatrix &gt;</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad0e7de841ab0bbce59497ac9f0a67aa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CreateIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0e3d1a15a1c40f30085bd50393372d7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BCRSMatrix&lt; B, std::allocator&lt; B &gt; &gt;</name>
    <filename>a01155.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>BuildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a036327219e82429eb5056cdcb8029325</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac27f92bda3724989a12c908d5b0bb355</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; B &gt;</type>
      <name>allocator_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>afbabf44198dc84c120bd577ef6166d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::CompressedBlockVectorWindow&lt; B, std::allocator&lt; B &gt; &gt;</type>
      <name>row_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab81a157954e0da4d4f1b80ad432a5fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a92dcd5f5afa082cf7c70ca745117108b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::Dune::CompressionStatistics&lt; size_type &gt;</type>
      <name>CompressionStatistics</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a78acdc4dca86c07dbbdf1a779d22a7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6426ed2b23a28e0b942ceb88cad77259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5dbba06948485933958ce9bd74642828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2efdf9ce2539b8aead490775ba26dac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8a2230f988557dfbbc5a2bb7d688fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1cec23735a4b8543c573e7b7e01a9bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a7c8d9c5b05609459f46042339623c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a55aab1eeee5f07e1a1a19318cf196c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa76d2016ee31d3781ec5d48925251d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notbuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a31ccbde5d5bf1931d8aa6342b887e4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notAllocated</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab598bbcf6b1be00f3e86737ec4b32770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>building</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab8ebe0b91a94788eadfe7dd910c8114f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rowSizesBuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a0d4ce3a26588f45f4661065dd7968976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>built</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a2c7de4fa501570a5a65b74b112c3af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_wise</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecaf7c450c73d8588d16cf4c65552b0ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>random</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecad05f70b8e286d23abee639a8d50552e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implicit</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca0b6109e215775999912e5634a2fff10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca92b68407d7d0300588b1279b91838917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a9a455ff0bc014b25b29a7aca924ee5b8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac6af1511525cd421479f487fd44ef2b9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0ad9c5258e0c65fde36f8793fdc96413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af721176754c07eab9b0f23824cc52418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a801d09e6e79eba0e588d633e6d9d5049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af57e3dcf6621aa88b9545fb432ef6b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa4b470c5f794f9fc941ebc49e8631951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aff8d80654ea7151f9f74f73e1e2b6f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a80e2c47e10c0881b03d78213ab583b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a69042d0e88c4633d0350368629a1985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a34b65fb52b4b7da95999604d8fabba92</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a76bc4d8de5595e723c623f2fc6bb3122</anchor>
      <arglist>(size_type _n, size_type _m, size_type _nnz, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acdbe4d1f81bc548f3be507d6e9a45bff</anchor>
      <arglist>(size_type _n, size_type _m, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a98d56fd3642d319a2ba06d45b7455e78</anchor>
      <arglist>(size_type _n, size_type _m, size_type _avg, double compressionBufferSize, BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a79a0f0d9b34cada933c1c919cd67416b</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BCRSMatrix</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2afb5571f80472c948bd0db3b7440f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae747343dfc94f181f31471ceed7e5d4a</anchor>
      <arglist>(BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae89150f5ae2f2927657bddfb78610e55</anchor>
      <arglist>(size_type rows, size_type columns, size_type nnz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImplicitBuildModeParameters</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc7ebace380a42cd240d1b65118384a6</anchor>
      <arglist>(size_type _avg, double compressionBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2bdbdfb1376f047a9b45fa357ab13861</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abcb3dea50ab1eac4cb2ab8955af19e82</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createbegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9217545ae9d4ea1e3950cf21e6899c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createend</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa0839499f658a2d3e7a5ea908cc86130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5a8fdcc48798af5363b9fd8cdf2a4dac</anchor>
      <arglist>(size_type i, size_type s)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>getrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aadf307bf8ed209291680918218906ac6</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a41e41b7274abb109855e80f76a66f4d7</anchor>
      <arglist>(size_type i, size_type s=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endrowsizes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a3ebc537e4755cf1ab02ea0dd93c942fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addindex</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a82d12c2fa3e3e956e4257aed1bf247ec</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a813bb1a256498169c9e384847721f4a5</anchor>
      <arglist>(size_type row, It begin, It end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endindices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aceeae57760ab2b4c297f19ac8522eef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>B &amp;</type>
      <name>entry</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adbcd06dccd4a9d7350df5c0fbb6d2db8</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>CompressionStatistics</type>
      <name>compress</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad8da8508e9f65564f91ea6f00934bc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad59f6d33e271ed3acd9223b9535913a4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a7177e68fadef1d8054c232815759b595</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa326dc908b26901ec421d3894904f366</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acef4af977012c9eb300262c32079f48f</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>axpy</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa16961c0bc920e87cb3d488deed54c63</anchor>
      <arglist>(field_type alpha, const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac1aed9a57f822ad924d482cfe51cf5fc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac92b996f0db8954bd178109e6b5ecca0</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abf88fa7c6056933790ef9ef3beed9d0c</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aaa1c771ee60aaa04f581a2e15f3a5cef</anchor>
      <arglist>(F &amp;&amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a48c93a4ea67b7f82d91f614eddd898d3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a15301031ed46d3f3d0055a5dc34bb14e</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac5fefc567a0dd5cd15cc39c2152f74be</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a66b1a2d615e1b61e0782675e24d3c8f0</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a49553869d73e239258d2b52653900537</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a10c57682346c2da57f43b2277244de95</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1351c6ecbca38afaf5c6b7b2da6b48c9</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a719f3e2bbb745700d089a6e56c7ecaaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a02263c6c7dfbe056b758fdd4c7f400d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae640c4fc5a9343b8836b30733b98f9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab2a70ec04bff3b0413020ca6ee2d11c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonzeroes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a50486320ea446b5c7d37c5dfb5c6ee18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildStage</type>
      <name>buildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a06d86fafc4fcefcadff13ae41a757cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildMode</type>
      <name>buildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abc93aa9afe0bac637589a9cd42a35bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a05ce55f7a7a81dec25717dd9e8fb54e2</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>blocklevel</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a210d1cadcde1eb99c6f33ee21f52fb5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::pair&lt; size_type, size_type &gt;, B &gt;</type>
      <name>OverflowType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a846eeb91adc53152aa32531e4621c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWindowPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aec4d821c4ffdb8eaa8e358914be9cd68</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColumnPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af263809fff8f4c4949ad0c364e8f6c55</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adefb501cd2953cf91eb676db12751482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyWindowStructure</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0e4b236ed04fd3da227b931312c68386</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2ced2acc98894c921da00d0fbe1bfc87</anchor>
      <arglist>(bool deallocateRows=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a23538fdea1991446d5ea83d67c11bb70</anchor>
      <arglist>(size_type rows, size_type columns, size_type allocationSize, bool allocateRows, bool allocate_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocateData</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2c39e3488286138661eeb60c2a0ff861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>implicit_allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc53e4119b13405269be63a31350afcb</anchor>
      <arglist>(size_type _n, size_type _m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildMode</type>
      <name>build_mode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a59d53fafbc0e1d8365f374781a542f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildStage</type>
      <name>ready</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a594b2bf93f559ed7c77f9f28e1338462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; B &gt;</type>
      <name>allocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae143d5cdc0f58455669df8cedf8c519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; row_type &gt;</type>
      <name>rowAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a04cdd06e79648de953faf5c34a4784c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; size_type &gt;</type>
      <name>sizeAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a63c50a313360dd3919050574a2617bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>n</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab647dfcec2e9b6d7eb859e323d6fed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>m</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a629cfcdbb749dba27ad6bb972e033f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>nnz_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5e7991647a57776d254edc890384c0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>allocationSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5227a5dc09391af92221bb06ea12bb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>row_type *</type>
      <name>r</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a811ac6c78bf57efe0f8e6204b486aba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>B *</type>
      <name>a</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6bdbfcac679b19d10ea4b18856ed7798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; size_type &gt;</type>
      <name>j_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae90823e0ce3127042e0c915deeab9b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>avg</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac8d599e322adb15721b8492d29aee808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>compressionBufferSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a5d660b0ed40ea2cac31d0098c83991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverflowType</type>
      <name>overflow</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a96b4f211ba9f8639329fbc3a14e8233b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BCRSMatrixError</name>
    <filename>a01387.html</filename>
    <base>Dune::ISTLError</base>
  </compound>
  <compound kind="class">
    <name>Dune::BDMatrix</name>
    <filename>a01171.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BCRSMatrix&lt; B, std::allocator&lt; B &gt; &gt;</base>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a03ca6275a60068d00677c5448cb44d65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a37315671a5dc119250b434dbe47ce387</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a63ac0af4f7339d621559892975f3a66b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a0cb47f109df53828b4afdda036f01cc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::CompressedBlockVectorWindow&lt; B, std::allocator&lt; B &gt; &gt;</type>
      <name>row_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab81a157954e0da4d4f1b80ad432a5fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::Dune::CompressionStatistics&lt; size_type &gt;</type>
      <name>CompressionStatistics</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a78acdc4dca86c07dbbdf1a779d22a7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6426ed2b23a28e0b942ceb88cad77259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5dbba06948485933958ce9bd74642828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2efdf9ce2539b8aead490775ba26dac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8a2230f988557dfbbc5a2bb7d688fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1cec23735a4b8543c573e7b7e01a9bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a7c8d9c5b05609459f46042339623c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a55aab1eeee5f07e1a1a19318cf196c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa76d2016ee31d3781ec5d48925251d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notbuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a31ccbde5d5bf1931d8aa6342b887e4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notAllocated</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab598bbcf6b1be00f3e86737ec4b32770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>building</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab8ebe0b91a94788eadfe7dd910c8114f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rowSizesBuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a0d4ce3a26588f45f4661065dd7968976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>built</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a2c7de4fa501570a5a65b74b112c3af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_wise</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecaf7c450c73d8588d16cf4c65552b0ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>random</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecad05f70b8e286d23abee639a8d50552e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implicit</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca0b6109e215775999912e5634a2fff10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca92b68407d7d0300588b1279b91838917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDMatrix</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a1cd4eb27d43b98a522642ba722e3f15e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDMatrix</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>aaad20d9a2628604f634986b8af23b758</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BDMatrix</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a2947e11a629ceb35ee649f6b398eda58</anchor>
      <arglist>(std::initializer_list&lt; B &gt; const &amp;list)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>af395acba217a5c5c7599b32b42edd954</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>BDMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a8502b6f5b906e54bdffcab57c0e1af34</anchor>
      <arglist>(const BDMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BDMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a7cf5fcc3f358458afaa7610b8ad630d5</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>a4f2662796f1dd1290334664ce5d8e78f</anchor>
      <arglist>(V &amp;x, const V &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>afa1b54794751a02b7a9228299a04fe72</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a9a455ff0bc014b25b29a7aca924ee5b8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac6af1511525cd421479f487fd44ef2b9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0ad9c5258e0c65fde36f8793fdc96413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af721176754c07eab9b0f23824cc52418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a801d09e6e79eba0e588d633e6d9d5049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af57e3dcf6621aa88b9545fb432ef6b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa4b470c5f794f9fc941ebc49e8631951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aff8d80654ea7151f9f74f73e1e2b6f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a80e2c47e10c0881b03d78213ab583b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a69042d0e88c4633d0350368629a1985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae747343dfc94f181f31471ceed7e5d4a</anchor>
      <arglist>(BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae89150f5ae2f2927657bddfb78610e55</anchor>
      <arglist>(size_type rows, size_type columns, size_type nnz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImplicitBuildModeParameters</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc7ebace380a42cd240d1b65118384a6</anchor>
      <arglist>(size_type _avg, double compressionBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createbegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9217545ae9d4ea1e3950cf21e6899c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createend</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa0839499f658a2d3e7a5ea908cc86130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>getrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aadf307bf8ed209291680918218906ac6</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a41e41b7274abb109855e80f76a66f4d7</anchor>
      <arglist>(size_type i, size_type s=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a813bb1a256498169c9e384847721f4a5</anchor>
      <arglist>(size_type row, It begin, It end)</arglist>
    </member>
    <member kind="function">
      <type>B &amp;</type>
      <name>entry</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adbcd06dccd4a9d7350df5c0fbb6d2db8</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>CompressionStatistics</type>
      <name>compress</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad8da8508e9f65564f91ea6f00934bc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad59f6d33e271ed3acd9223b9535913a4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a7177e68fadef1d8054c232815759b595</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa326dc908b26901ec421d3894904f366</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acef4af977012c9eb300262c32079f48f</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>axpy</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa16961c0bc920e87cb3d488deed54c63</anchor>
      <arglist>(field_type alpha, const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac1aed9a57f822ad924d482cfe51cf5fc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac92b996f0db8954bd178109e6b5ecca0</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abf88fa7c6056933790ef9ef3beed9d0c</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aaa1c771ee60aaa04f581a2e15f3a5cef</anchor>
      <arglist>(F &amp;&amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a48c93a4ea67b7f82d91f614eddd898d3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a15301031ed46d3f3d0055a5dc34bb14e</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac5fefc567a0dd5cd15cc39c2152f74be</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a66b1a2d615e1b61e0782675e24d3c8f0</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a49553869d73e239258d2b52653900537</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a10c57682346c2da57f43b2277244de95</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1351c6ecbca38afaf5c6b7b2da6b48c9</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a719f3e2bbb745700d089a6e56c7ecaaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a02263c6c7dfbe056b758fdd4c7f400d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae640c4fc5a9343b8836b30733b98f9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab2a70ec04bff3b0413020ca6ee2d11c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonzeroes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a50486320ea446b5c7d37c5dfb5c6ee18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildStage</type>
      <name>buildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a06d86fafc4fcefcadff13ae41a757cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildMode</type>
      <name>buildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abc93aa9afe0bac637589a9cd42a35bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a05ce55f7a7a81dec25717dd9e8fb54e2</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>blocklevel</name>
      <anchorfile>a01171.html</anchorfile>
      <anchor>ae6f2321299350f5f42f9df749c188588</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::pair&lt; size_type, size_type &gt;, B &gt;</type>
      <name>OverflowType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a846eeb91adc53152aa32531e4621c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWindowPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aec4d821c4ffdb8eaa8e358914be9cd68</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColumnPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af263809fff8f4c4949ad0c364e8f6c55</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adefb501cd2953cf91eb676db12751482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyWindowStructure</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0e4b236ed04fd3da227b931312c68386</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2ced2acc98894c921da00d0fbe1bfc87</anchor>
      <arglist>(bool deallocateRows=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a23538fdea1991446d5ea83d67c11bb70</anchor>
      <arglist>(size_type rows, size_type columns, size_type allocationSize, bool allocateRows, bool allocate_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocateData</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2c39e3488286138661eeb60c2a0ff861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>implicit_allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc53e4119b13405269be63a31350afcb</anchor>
      <arglist>(size_type _n, size_type _m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildMode</type>
      <name>build_mode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a59d53fafbc0e1d8365f374781a542f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildStage</type>
      <name>ready</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a594b2bf93f559ed7c77f9f28e1338462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; B &gt;</type>
      <name>allocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae143d5cdc0f58455669df8cedf8c519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; row_type &gt;</type>
      <name>rowAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a04cdd06e79648de953faf5c34a4784c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; size_type &gt;</type>
      <name>sizeAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a63c50a313360dd3919050574a2617bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>n</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab647dfcec2e9b6d7eb859e323d6fed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>m</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a629cfcdbb749dba27ad6bb972e033f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>nnz_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5e7991647a57776d254edc890384c0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>allocationSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5227a5dc09391af92221bb06ea12bb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>row_type *</type>
      <name>r</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a811ac6c78bf57efe0f8e6204b486aba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>B *</type>
      <name>a</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6bdbfcac679b19d10ea4b18856ed7798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; size_type &gt;</type>
      <name>j_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae90823e0ce3127042e0c915deeab9b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>avg</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac8d599e322adb15721b8492d29aee808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>compressionBufferSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a5d660b0ed40ea2cac31d0098c83991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverflowType</type>
      <name>overflow</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a96b4f211ba9f8639329fbc3a14e8233b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BiCGSTABSolver</name>
    <filename>a02747.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02747.html</anchorfile>
      <anchor>a9531f3a435dfb9b4eb1ace39345fc8bb</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; CountType &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02747.html</anchorfile>
      <anchor>a6f1f6a7afee9b80cdef66bcc899555ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BL</name>
    <filename>a01311.html</filename>
    <templarg>l</templarg>
    <member kind="enumvalue">
      <name>recursion_level</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a25a12ee321c163ce0597245ed3ecd643a51ddd3bfd87f5eda1efed28b5553c653</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>recursion_level</name>
      <anchorfile>a01311.html</anchorfile>
      <anchor>a25a12ee321c163ce0597245ed3ecd643a51ddd3bfd87f5eda1efed28b5553c653</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BlockPreconditioner</name>
    <filename>a02671.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a7b0cdbd8b5e0fa7755a980daf0400a26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ad75078a5c3f4aa5ad075f3885c7b9838</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ac3811210f350330386b679bc6f59628c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ac2140481728bf00cadbbc36495a25475</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockPreconditioner</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a9e8284cffa4c7717a4eeb1a7b59c2d49</anchor>
      <arglist>(P &amp;p, const communication_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockPreconditioner</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a7ecf4c847a8a52bb3a8a58e2fce056da</anchor>
      <arglist>(const std::shared_ptr&lt; P &gt; &amp;p, const communication_type &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a59eb9676288320c626425964dbe5ccb6</anchor>
      <arglist>(X &amp;x, Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>a99721b0021f90275f142b1d070449087</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ab5ec5e6a471a35ee846448d0c7ac0943</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ad5600aff3cd32fa662f442d0dbe4a8fe</anchor>
      <arglist>(X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>ad92b8bb689fed433a2b6cd958058f814</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Amg::ConstructionTraits&lt; BlockPreconditioner&lt; X, Y, C, P &gt; &gt;</name>
      <anchorfile>a02671.html</anchorfile>
      <anchor>aff5a22e8d3d9cd0a7c2ae8115e77aba7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BlockVector</name>
    <filename>a01239.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aa2debec6431c850994dc2d735fe1ce13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ae6c370b75f9cf5d60cc9497537b86066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a7234d1e543e99d0fcb7e2cbe2a91f9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aad1aa0e3aabaa0ccd4aad8e49d81f349</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::block_vector_unmanaged&lt; B, A &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a58343eb979ecdb0975518a40425d7741</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::block_vector_unmanaged&lt; B, A &gt;::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>af8f7c1f4d678d67204daff9fc77b7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a02fc2457c736ed2c26e22b6d2b67207d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4c7e9b921dca0b2c4bdf33f85ebf341a</anchor>
      <arglist>(size_type _n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aae4b3e1e543e116f66f8993a6f8b1b96</anchor>
      <arglist>(std::initializer_list&lt; B &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ae645c8daaa1feada2be0a5bbf4b9c9aa</anchor>
      <arglist>(size_type _n, S _capacity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a13bed42cd26580d6c81a1406589ce1da</anchor>
      <arglist>(size_type capacity)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ac38c155e30098a5887c1ad0f34840b3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4c827318ce2fc4dbc1f3d61d04e62f16</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a6e17f28660c4e56100fd82132bab56bf</anchor>
      <arglist>(const BlockVector &amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().storage_=a.storage_))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a45a25328357a4158bbd65ea3e1c06fc5</anchor>
      <arglist>(BlockVector &amp;&amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().swap(a)))</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a22cb35272533c055b3e45fec5e36d490</anchor>
      <arglist>(const BlockVector &amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().storage_=a.storage_))</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4d34e9b8701afbab8599413cec7022c8</anchor>
      <arglist>(BlockVector &amp;&amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().swap(a)))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>af02395a3170f5a53bfc88ba6f7b33e97</anchor>
      <arglist>(BlockVector &amp;other) noexcept(noexcept(std::declval&lt; BlockVector &amp; &gt;().storage_.swap(other.storage_)))</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aadfc3a9d047f164205319590d7ea6712</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>blocklevel</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a6a766d1205e0d6a81397e7b39db37e81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BlockVector&lt; T, A &gt;</name>
    <filename>a01239.html</filename>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aa2debec6431c850994dc2d735fe1ce13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>block_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ae6c370b75f9cf5d60cc9497537b86066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a7234d1e543e99d0fcb7e2cbe2a91f9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aad1aa0e3aabaa0ccd4aad8e49d81f349</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::block_vector_unmanaged&lt; T, A &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a58343eb979ecdb0975518a40425d7741</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::block_vector_unmanaged&lt; T, A &gt;::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>af8f7c1f4d678d67204daff9fc77b7fcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a02fc2457c736ed2c26e22b6d2b67207d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4c7e9b921dca0b2c4bdf33f85ebf341a</anchor>
      <arglist>(size_type _n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aae4b3e1e543e116f66f8993a6f8b1b96</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ae645c8daaa1feada2be0a5bbf4b9c9aa</anchor>
      <arglist>(size_type _n, S _capacity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a6e17f28660c4e56100fd82132bab56bf</anchor>
      <arglist>(const BlockVector &amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().storage_=a.storage_))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BlockVector</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a45a25328357a4158bbd65ea3e1c06fc5</anchor>
      <arglist>(BlockVector &amp;&amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().swap(a)))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a13bed42cd26580d6c81a1406589ce1da</anchor>
      <arglist>(size_type capacity)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>ac38c155e30098a5887c1ad0f34840b3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4c827318ce2fc4dbc1f3d61d04e62f16</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a22cb35272533c055b3e45fec5e36d490</anchor>
      <arglist>(const BlockVector &amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().storage_=a.storage_))</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a4d34e9b8701afbab8599413cec7022c8</anchor>
      <arglist>(BlockVector &amp;&amp;a) noexcept(noexcept(std::declval&lt; BlockVector &gt;().swap(a)))</arglist>
    </member>
    <member kind="function">
      <type>BlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>aadfc3a9d047f164205319590d7ea6712</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>af02395a3170f5a53bfc88ba6f7b33e97</anchor>
      <arglist>(BlockVector &amp;other) noexcept(noexcept(std::declval&lt; BlockVector &amp; &gt;().storage_.swap(other.storage_)))</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr unsigned int</type>
      <name>blocklevel</name>
      <anchorfile>a01239.html</anchorfile>
      <anchor>a6a766d1205e0d6a81397e7b39db37e81</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BTDMatrix</name>
    <filename>a01215.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>BCRSMatrix&lt; B, std::allocator&lt; B &gt; &gt;</base>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a9bbe74a9906424b32d4b9e5e2bca681d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a8f04f8bec88c066b8ca0b9285f141326</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a47fc415a9ac1bcf10c2cc7a964183960</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a3ccd903a9f2a24cd5f37192a1a1d7a28</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>BuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::CompressedBlockVectorWindow&lt; B, std::allocator&lt; B &gt; &gt;</type>
      <name>row_type</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab81a157954e0da4d4f1b80ad432a5fd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>::Dune::CompressionStatistics&lt; size_type &gt;</type>
      <name>CompressionStatistics</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a78acdc4dca86c07dbbdf1a779d22a7c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6426ed2b23a28e0b942ceb88cad77259</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; row_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5dbba06948485933958ce9bd74642828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2efdf9ce2539b8aead490775ba26dac0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8a2230f988557dfbbc5a2bb7d688fd35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1cec23735a4b8543c573e7b7e01a9bd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealRowIterator&lt; const row_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a7c8d9c5b05609459f46042339623c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a55aab1eeee5f07e1a1a19318cf196c7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa76d2016ee31d3781ec5d48925251d3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notbuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a31ccbde5d5bf1931d8aa6342b887e4d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>notAllocated</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab598bbcf6b1be00f3e86737ec4b32770</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>building</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7ab8ebe0b91a94788eadfe7dd910c8114f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rowSizesBuilt</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a0d4ce3a26588f45f4661065dd7968976</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>built</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9b0acf9f9613dedc7d93f857c4ae2b7a2c7de4fa501570a5a65b74b112c3af51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>row_wise</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecaf7c450c73d8588d16cf4c65552b0ff18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>random</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9ecad05f70b8e286d23abee639a8d50552e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implicit</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca0b6109e215775999912e5634a2fff10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6f09a4c408e14428d3a62ad00ceac9eca92b68407d7d0300588b1279b91838917</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTDMatrix</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>ac84186b7eba0a92b89cbf4573c4b0ff0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BTDMatrix</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a264db998f76dab050a4caece6b047897</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>aea5febed8a40ac8437b1a3f4879b1ea1</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>BTDMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a2fdf78c44483c47d2a54590b7a9560c9</anchor>
      <arglist>(const BTDMatrix &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>BTDMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>ad7e37aabb47d862fe0f2505d8201bd50</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a2f57083aa7460059f319231948f4f664</anchor>
      <arglist>(V &amp;x, const V &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a9a455ff0bc014b25b29a7aca924ee5b8</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const row_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac6af1511525cd421479f487fd44ef2b9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0ad9c5258e0c65fde36f8793fdc96413</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af721176754c07eab9b0f23824cc52418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a801d09e6e79eba0e588d633e6d9d5049</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af57e3dcf6621aa88b9545fb432ef6b26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa4b470c5f794f9fc941ebc49e8631951</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aff8d80654ea7151f9f74f73e1e2b6f0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6a80e2c47e10c0881b03d78213ab583b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a69042d0e88c4633d0350368629a1985d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBuildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae747343dfc94f181f31471ceed7e5d4a</anchor>
      <arglist>(BuildMode bm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae89150f5ae2f2927657bddfb78610e55</anchor>
      <arglist>(size_type rows, size_type columns, size_type nnz=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setImplicitBuildModeParameters</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc7ebace380a42cd240d1b65118384a6</anchor>
      <arglist>(size_type _avg, double compressionBufferSize)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createbegin</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab9217545ae9d4ea1e3950cf21e6899c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createend</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa0839499f658a2d3e7a5ea908cc86130</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>getrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aadf307bf8ed209291680918218906ac6</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>incrementrowsize</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a41e41b7274abb109855e80f76a66f4d7</anchor>
      <arglist>(size_type i, size_type s=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndices</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a813bb1a256498169c9e384847721f4a5</anchor>
      <arglist>(size_type row, It begin, It end)</arglist>
    </member>
    <member kind="function">
      <type>B &amp;</type>
      <name>entry</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adbcd06dccd4a9d7350df5c0fbb6d2db8</anchor>
      <arglist>(size_type row, size_type col)</arglist>
    </member>
    <member kind="function">
      <type>CompressionStatistics</type>
      <name>compress</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad8da8508e9f65564f91ea6f00934bc3b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ad59f6d33e271ed3acd9223b9535913a4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a7177e68fadef1d8054c232815759b595</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa326dc908b26901ec421d3894904f366</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acef4af977012c9eb300262c32079f48f</anchor>
      <arglist>(const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BCRSMatrix &amp;</type>
      <name>axpy</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aa16961c0bc920e87cb3d488deed54c63</anchor>
      <arglist>(field_type alpha, const BCRSMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac1aed9a57f822ad924d482cfe51cf5fc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac92b996f0db8954bd178109e6b5ecca0</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abf88fa7c6056933790ef9ef3beed9d0c</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aaa1c771ee60aaa04f581a2e15f3a5cef</anchor>
      <arglist>(F &amp;&amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a48c93a4ea67b7f82d91f614eddd898d3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a15301031ed46d3f3d0055a5dc34bb14e</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac5fefc567a0dd5cd15cc39c2152f74be</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a66b1a2d615e1b61e0782675e24d3c8f0</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a49553869d73e239258d2b52653900537</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a10c57682346c2da57f43b2277244de95</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1351c6ecbca38afaf5c6b7b2da6b48c9</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a719f3e2bbb745700d089a6e56c7ecaaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a02263c6c7dfbe056b758fdd4c7f400d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a8dc927f0078c3ec53ac788f8a813f4bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a52c0fd5308531c96ab0fba4cc1077f82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae640c4fc5a9343b8836b30733b98f9b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab2a70ec04bff3b0413020ca6ee2d11c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonzeroes</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a50486320ea446b5c7d37c5dfb5c6ee18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildStage</type>
      <name>buildStage</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a06d86fafc4fcefcadff13ae41a757cc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>BuildMode</type>
      <name>buildMode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>abc93aa9afe0bac637589a9cd42a35bcf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a05ce55f7a7a81dec25717dd9e8fb54e2</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>blocklevel</name>
      <anchorfile>a01215.html</anchorfile>
      <anchor>a11a15a53a00f241dcb7c93fc434d8b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::pair&lt; size_type, size_type &gt;, B &gt;</type>
      <name>OverflowType</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a846eeb91adc53152aa32531e4621c564</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setWindowPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>aec4d821c4ffdb8eaa8e358914be9cd68</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setColumnPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>af263809fff8f4c4949ad0c364e8f6c55</anchor>
      <arglist>(ConstRowIterator row)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setDataPointers</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>adefb501cd2953cf91eb676db12751482</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>copyWindowStructure</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a0e4b236ed04fd3da227b931312c68386</anchor>
      <arglist>(const BCRSMatrix &amp;Mat)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2ced2acc98894c921da00d0fbe1bfc87</anchor>
      <arglist>(bool deallocateRows=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a23538fdea1991446d5ea83d67c11bb70</anchor>
      <arglist>(size_type rows, size_type columns, size_type allocationSize, bool allocateRows, bool allocate_data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>allocateData</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a2c39e3488286138661eeb60c2a0ff861</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>implicit_allocate</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>acc53e4119b13405269be63a31350afcb</anchor>
      <arglist>(size_type _n, size_type _m)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildMode</type>
      <name>build_mode</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a59d53fafbc0e1d8365f374781a542f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BuildStage</type>
      <name>ready</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a594b2bf93f559ed7c77f9f28e1338462</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; B &gt;</type>
      <name>allocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae143d5cdc0f58455669df8cedf8c519b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; row_type &gt;</type>
      <name>rowAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a04cdd06e79648de953faf5c34a4784c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::allocator_traits&lt; std::allocator&lt; B &gt; &gt;::template rebind_alloc&lt; size_type &gt;</type>
      <name>sizeAllocator_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a63c50a313360dd3919050574a2617bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>n</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ab647dfcec2e9b6d7eb859e323d6fed66</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>m</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a629cfcdbb749dba27ad6bb972e033f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>nnz_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5e7991647a57776d254edc890384c0c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>allocationSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a5227a5dc09391af92221bb06ea12bb31</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>row_type *</type>
      <name>r</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a811ac6c78bf57efe0f8e6204b486aba6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>B *</type>
      <name>a</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a6bdbfcac679b19d10ea4b18856ed7798</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; size_type &gt;</type>
      <name>j_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ae90823e0ce3127042e0c915deeab9b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>avg</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>ac8d599e322adb15721b8492d29aee808</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>compressionBufferSize_</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a1a5d660b0ed40ea2cac31d0098c83991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OverflowType</type>
      <name>overflow</name>
      <anchorfile>a01155.html</anchorfile>
      <anchor>a96b4f211ba9f8639329fbc3a14e8233b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::MatrixHierarchy::MatrixStats&lt; Matrix, true &gt;::calc</name>
    <filename>a02387.html</filename>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>ae7c8618dc4cec439cde1e2af0f184a89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>matrix_row</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a2aa9af4138fc2b006c31453e91f90544</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>calc</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a7d0a5806dd38cd9f1c87c3ab779f21e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a15223899e00ae3800a9a63fc4f05aae1</anchor>
      <arglist>(const matrix_row &amp;row)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>min</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a674fda6e1a7fd5f629dc10d7b02aab11</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>max</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>a93071c18fac2dbdef04a6b36c6bcd81f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>sum</name>
      <anchorfile>a02387.html</anchorfile>
      <anchor>adc370fa144876ef58bc6bd8bf2815d85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CGSolver</name>
    <filename>a02743.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGSolver</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a32325d96785ba9a20be7c986f8c6bc46</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, bool condition_estimate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGSolver</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a3e84c7e02e520db3fc46bf9d730c3841</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, bool condition_estimate)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CGSolver</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a9d3b71368fa158c22ccda7b671ea381f</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, scalar_real_type reduction, int maxit, int verbose, bool condition_estimate)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a56c73d203a465dc8cd09a99254cc47d0</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::bool_constant&lt; enableConditionEstimate &gt;</type>
      <name>enableConditionEstimate_t</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a3bf11825b08466a305568ed26064dcc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>af70bace9d25470af76785e4a193ebe19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static constexpr bool</type>
      <name>enableConditionEstimate</name>
      <anchorfile>a02743.html</anchorfile>
      <anchor>a0722203c534ff03dc0a4cb1682ab652a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CheckIfDiagonalPresent</name>
    <filename>a01723.html</filename>
    <templarg></templarg>
    <templarg>blocklevel</templarg>
    <templarg>l</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>check</name>
      <anchorfile>a01723.html</anchorfile>
      <anchor>a535b6643bccafec35add16ce60485762</anchor>
      <arglist>([[maybe_unused]] const Matrix &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CheckIfDiagonalPresent&lt; Matrix, 0, l &gt;</name>
    <filename>a01727.html</filename>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>check</name>
      <anchorfile>a01727.html</anchorfile>
      <anchor>af9de573cce664f3009c055ad338eb0d0</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CheckIfDiagonalPresent&lt; MultiTypeBlockMatrix&lt; T1, Args... &gt;, blocklevel, l &gt;</name>
    <filename>a01731.html</filename>
    <templarg>blocklevel</templarg>
    <templarg>l</templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>MultiTypeBlockMatrix&lt; T1, Args... &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>ad58717f0864a12ea7c75dc781f4733ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>check</name>
      <anchorfile>a01731.html</anchorfile>
      <anchor>a504ff71272b97308bd8d77777e1c9def</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::CoarsenCriterion</name>
    <filename>a02391.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>AggregationCriterion</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a88b31ded4cc94e13fbb9a54679571b34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarsenCriterion</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>abca02a5be67579755da207814aec05ef</anchor>
      <arglist>(int maxLevel=100, int coarsenTarget=1000, double minCoarsenRate=1.2, double prolongDamp=1.6, AccumulationMode accumulate=successiveAccu)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarsenCriterion</name>
      <anchorfile>a02391.html</anchorfile>
      <anchor>a81d89ea51663894c598a713004605d75</anchor>
      <arglist>(const Dune::Amg::Parameters &amp;parms)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::CoarseningParameters</name>
    <filename>a02403.html</filename>
    <base>Dune::Amg::AggregationParameters</base>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseningParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae675df9c62a6ddf93fa98e82c1718814</anchor>
      <arglist>(int maxLevel=100, int coarsenTarget=1000, double minCoarsenRate=1.2, double prolongDamp=1.6, AccumulationMode accumulate=successiveAccu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ColCompMatrix</name>
    <filename>a01263.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::CombinedFunctor</name>
    <filename>a02123.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CombinedFunctor</name>
      <anchorfile>a02123.html</anchorfile>
      <anchor>a0e9d6add9bb4620c444b76cc66401e84</anchor>
      <arglist>(const T &amp;tuple_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02123.html</anchorfile>
      <anchor>ae715b12571490ec700815c620fb84c61</anchor>
      <arglist>(const T1 &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommMatrixRow</name>
    <filename>a01695.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CommMatrixRow</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>afbd7c7d337ebdb2d2c2f5f2e1fda8823</anchor>
      <arglist>(M &amp;m_, const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;idxset_, const I &amp;aggidxset_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommMatrixRow</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>a6a0c4cf5cb7ac1f7bfd265647d0a5d71</anchor>
      <arglist>(M &amp;m_, const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;idxset_, const I &amp;aggidxset_, std::vector&lt; size_t &gt; &amp;rowsize_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOverlapRowsToDirichlet</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>ad3cbd2da9980d930476ae5de57ad4f71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>M &amp;</type>
      <name>matrix</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>a55b6e85d4f92cf9be8a072c6a4def083</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;</type>
      <name>idxset</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>acee5c8b9f6d3c22836b2b55d3f3f4ac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const I &amp;</type>
      <name>aggidxset</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>ae227109741f5c6ca2610a148787ca1ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_t &gt; *</type>
      <name>rowsize</name>
      <anchorfile>a01695.html</anchorfile>
      <anchor>a07a2bd227776098a87c1355bdf93b009</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommMatrixRowSize</name>
    <filename>a01683.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M::size_type</type>
      <name>value_type</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a5dda75bad27bd0e58770470cca595d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::size_type</type>
      <name>size_type</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>a06bca79d461754dd1434f7b197323a16</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommMatrixRowSize</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>acf74a4d0688aee423ce3d6ecc08412c2</anchor>
      <arglist>(const M &amp;m_, RI &amp;rowsize_)</arglist>
    </member>
    <member kind="variable">
      <type>const M &amp;</type>
      <name>matrix</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>ac818ce61488b3403669dc95548dee109</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RI &amp;</type>
      <name>rowsize</name>
      <anchorfile>a01683.html</anchorfile>
      <anchor>aa1b94bf04fa5464cf1bb58b2d57a606d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommMatrixSparsityPattern</name>
    <filename>a01687.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M::size_type</type>
      <name>size_type</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a11af98380c4fe6a5eb002932f99c4b4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GlobalLookupIndexSet&lt; I &gt;</type>
      <name>LookupIndexSet</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ae53a923685b8c59dbbea88b6cb1e7820</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommMatrixSparsityPattern</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ab7662ce84d3fef449ca5183a7bb43c13</anchor>
      <arglist>(const M &amp;m_, const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;idxset_, const I &amp;aggidxset_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommMatrixSparsityPattern</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ac72ff8316d9cdc7d4f8ca24006571b55</anchor>
      <arglist>(const M &amp;m_, const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;idxset_, const I &amp;aggidxset_, const std::vector&lt; typename M::size_type &gt; &amp;rowsize_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeSparsityPattern</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a482c5c77c57e33a1d7c189f4f5912b44</anchor>
      <arglist>(M &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>completeSparsityPattern</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a9d1703d3479f54d48fbee123d530bf07</anchor>
      <arglist>(std::vector&lt; std::set&lt; size_type &gt; &gt; add_sparsity)</arglist>
    </member>
    <member kind="variable">
      <type>const M &amp;</type>
      <name>matrix</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>abf1ebffee0a602dd139ed63abf05dbc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const Dune::GlobalLookupIndexSet&lt; I &gt; &amp;</type>
      <name>idxset</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a2b5e24d1cfbe952b9dcc8651b667b016</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const I &amp;</type>
      <name>aggidxset</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a7ddee5089e7127414f6f210f4f89acf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::set&lt; size_type &gt; &gt;</type>
      <name>sparsity</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>ad89dd07475e6a0d4792bb4b931f8b0d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const std::vector&lt; size_type &gt; *</type>
      <name>rowsize</name>
      <anchorfile>a01687.html</anchorfile>
      <anchor>a84097d63fbc6198b782e62cb264e163e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy&lt; Amg::GlobalAggregatesMap&lt; T, TI &gt; &gt;</name>
    <filename>a02275.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Amg::AggregatesMap&lt; T &gt;</type>
      <name>Type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga489f324c3ca8964bf6151baf7dab3bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::GlobalAggregatesMap&lt; T, TI &gt;::IndexedType</type>
      <name>IndexedType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2737b811580b46f7b4de14164532a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeOne</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6e32f38d16d5f74d2b61c922a62751f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c126bf59cb49114e2d707410c82e231</anchor>
      <arglist>(const Type &amp;, int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy&lt; CommMatrixRow&lt; M, I &gt; &gt;</name>
    <filename>a01699.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommMatrixRow&lt; M, I &gt;</type>
      <name>Type</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a44f5725e0dd98360af974f653a1de78a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; typename I::GlobalIndex, typename M::block_type &gt;</type>
      <name>IndexedType</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a1ec1f799c7bada3272b1049b3a8a8e38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariableSize</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>afa0e1f07aa098051cde00df84caf199b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>getSize</name>
      <anchorfile>a01699.html</anchorfile>
      <anchor>a95845b1b0931261c3a47ba87b13020f6</anchor>
      <arglist>(const Type &amp;t, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy&lt; CommMatrixSparsityPattern&lt; M, I &gt; &gt;</name>
    <filename>a01691.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommMatrixSparsityPattern&lt; M, I &gt;</type>
      <name>Type</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>aeee86f2cd3a4d4a3e095a30c1480a908</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I::GlobalIndex</type>
      <name>IndexedType</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>af14d639cc22c3ffe71ca91b0b86a9782</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariableSize</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>af1fe7eeae5bc9d8c976a9549784b333f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static M::size_type</type>
      <name>getSize</name>
      <anchorfile>a01691.html</anchorfile>
      <anchor>abfe744a17023c6248038f985a9ed8ec2</anchor>
      <arglist>(const Type &amp;t, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CompleteFCGSolver</name>
    <filename>a02771.html</filename>
    <templarg></templarg>
    <base>Dune::RestartedFCGSolver</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02771.html</anchorfile>
      <anchor>ab9f6aeaed8af96e9ae901f1b8852de2e</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a86250eae8b53d906a88116d2ce7cf75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mmax</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a56b1bdfd2a70152f06ea884624099477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CompressionStatistics</name>
    <filename>a01143.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>double</type>
      <name>avg</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>ab624363d9289414f014eb64f4ed7dd2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>maximum</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>aaed6aa56900311cdeec5e50e7949350c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>overflow_total</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>a5054839e37eb933fdafea76f7724b526</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>mem_ratio</name>
      <anchorfile>a01143.html</anchorfile>
      <anchor>ad8b403951c95d72a50f3e0e8429fea60</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::BaseConnectivityConstructor::ConnectedBuilder</name>
    <filename>a02231.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1101b3d4651097cd30faa0db028fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ConstEdgeIterator</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6669e30805fb10ce64bbc532330dd6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9ef43daa726f0e5682019b382d98fad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>VisitedMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga846f7449dd71228f1242008abccd25dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadeb2a026f87fd62cfe7cfac493a6f465</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectedBuilder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga653f898b20814d3e5023a295b88e4f3e</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Graph &amp;graph, VisitedMap &amp;visitedMap, Set &amp;connected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c76c672594522d2d0d95be0bb5ecc1d</anchor>
      <arglist>(const ConstEdgeIterator &amp;edge)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConnectivityConstructor</name>
    <filename>a02235.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::BaseConnectivityConstructor</base>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5d832f5fc6d0e71c5f217285a7500165</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga76045741d4a5941ca4ee9ff35ff27d9c</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, const T &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, const O &amp;overlap, const OverlapVertex&lt; Vertex &gt; *overlapVertices, const OverlapVertex&lt; Vertex &gt; *overlapEnd, R &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2b1ed929c55403e6bb9e46d2ab52c850</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *&amp;seed, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *overlapEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructNonOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0bd93dcb846c1e048d2c218bd266260e</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::VertexDescriptor &amp;seed)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConnectivityConstructor&lt; G, SequentialInformation &gt;</name>
    <filename>a02239.html</filename>
    <templarg></templarg>
    <base>Dune::Amg::BaseConnectivityConstructor</base>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6dfc439e074993b646a8cfac48b76dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae42053968cdc6a582d262e2360f44139</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, [[maybe_unused]] const SequentialInformation &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, R &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf751555f3474c939d193c4a33063d777</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, R &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2b1ed929c55403e6bb9e46d2ab52c850</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *&amp;seed, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *overlapEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructNonOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0bd93dcb846c1e048d2c218bd266260e</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::VertexDescriptor &amp;seed)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixImp::DenseMatrixBase::ConstIterator</name>
    <filename>a01447.html</filename>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aa4ce95fd19333f79f66293ff1db94ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a6e412c7a263872985af744a93d3a36e1</anchor>
      <arglist>(const B *data, size_type columns, size_type _i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstIterator</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a77d801947dea997c057508905dbf4e53</anchor>
      <arglist>(const Iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aa14e7ee22400be37e67c7e631b1b0233</anchor>
      <arglist>(Iterator &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a929b617683ce418e5316e169e69a820e</anchor>
      <arglist>(Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a1c669afd9c7d90e3fe15115826ac2f7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator &amp;</type>
      <name>operator--</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a5d7dc54fbfe772ca1abc9e20663d4834</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aac49cf813d3ee879af5a4c2656b03cb9</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a9370e8223bbeb62c7fed212650c09cea</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a602c8111d4ed3b5d19e3c05f1123792d</anchor>
      <arglist>(const Iterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a67e8345e0b170e8c3a5f2cb6a8ff66c5</anchor>
      <arglist>(const Iterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>const window_type &amp;</type>
      <name>operator*</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a1411b299bacd2aced48ea56c4024e1c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const window_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>aee7cb3baf81b43e035e22d50961d03e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>ace6da84b4813a3d5cf5632738d2474b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Iterator</name>
      <anchorfile>a01447.html</anchorfile>
      <anchor>a9830fc407400559db7e7783cc10a9394</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionArgs</name>
    <filename>a02451.html</filename>
    <templarg></templarg>
    <base>Dune::Amg::DefaultConstructionArgs</base>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix, [[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</name>
    <filename>a02479.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DefaultConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>ConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeff35e5b7a88e85ff4b829e9d6ec4cc9</anchor>
      <arglist>(int n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setN</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaac248f894d4b1bbc8f77f2626c3fb114</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getN</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a37c53e60a58cc618bb375d7cb68e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix,[[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</name>
    <filename>a02527.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>DefaultConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</base>
    <member kind="typedef">
      <type>MatrixGraph&lt; M &gt;::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab6997643f6953fd3d41268aeeb12b5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::AggregatesMap&lt; VertexDescriptor &gt;</type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac89ab2f20d72217b2a5900a30c47264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AggregatesMap::AggregateDescriptor</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a812deb529b1ef988c74a08f559c3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt;::subdomain_vector</type>
      <name>Vector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5d9d057ff84fbc04951225d76f031c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::value_type</type>
      <name>Subdomain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35c985e477ba05ef528c8982585f0c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4fe83b9d13cb80f98f0b5c892cd43d68</anchor>
      <arglist>(const M &amp;matrix, const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga977d4d33b6ef69ea3fc73ca3684d677f</anchor>
      <arglist>(const M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getSubDomains</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8eec5fd2cb58427c78f947b9e8f2c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix,[[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits</name>
    <filename>a01811.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const void *</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9dafe554e419097e37bcb2fe0a511119</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4e5c6ca92bf6dc83b96a4c5fb6d4540</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</name>
    <filename>a02491.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; T, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga883bbb73f522febb3c1217d1b61abba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; T &gt;</type>
      <name>SeqConstructionTraits</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaed03ebfb74f04227af1be8a10326d8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7619affcda7b50d4827f254c95462022</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; BlockVector&lt; T, A &gt; &gt;</name>
    <filename>a02127.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>const int</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3150e8ae9f22ae238cfdabce81cb98a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; BlockVector&lt; T, A &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9ca1aad5ae6c5ee34d9b6d6269a91deb</anchor>
      <arglist>(Arguments &amp;n)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; MatrixAdapter&lt; M, X, Y &gt; &gt;</name>
    <filename>a02159.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>const MatrixAdapterArgs&lt; M, X, Y &gt;</type>
      <name>Arguments</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>ae273ed11548818e2f8a1e1d81e015877</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a02159.html</anchorfile>
      <anchor>aa84852a27be1ea351a71d6cb5407169e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</name>
    <filename>a02495.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; T, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8ae93c9b498fc5e166f2572297700872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; T &gt;</type>
      <name>SeqConstructionTraits</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga146c0e8832aa864667c30802d875a999</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5742b972aece00a759279adeedfb23ab</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</name>
    <filename>a02151.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParallelOperatorArgs&lt; M, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>a23e1af05d9960eba13b16060ce6dabe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a02151.html</anchorfile>
      <anchor>a548880ed0a2f3dbf1bb5aeea64a43f95</anchor>
      <arglist>(const Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</name>
    <filename>a02147.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ParallelOperatorArgs&lt; M, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>a38bbb0905053dc7229dbe0dfa1f5d511</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a02147.html</anchorfile>
      <anchor>a558a157441c169fcba4b32c7ded870d6</anchor>
      <arglist>(const Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</name>
    <filename>a02167.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>const OwnerOverlapCopyCommunicationArgs</type>
      <name>Arguments</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>add301e5f7e1ffca529a2c2341e9c27ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a02167.html</anchorfile>
      <anchor>a39ef6fbebd677c58f3d3ac39ba1fa9db</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</name>
    <filename>a02487.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; M, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad187f67abafc5958151f1d6840b251d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaac2c8f959318ae264ef68222710c643</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; Richardson&lt; X, Y &gt; &gt;</name>
    <filename>a02475.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fdf6128357be622cfdb69a6e6c1f81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Richardson&lt; X, Y &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b7fc0bd4513bc95d67a366c5b4a0b0b</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SeqILU&lt; M, X, Y &gt; &gt;</name>
    <filename>a02483.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0ccd5ee94f4d71588a461cbe0da40555</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqILU&lt; M, X, Y &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga022a8b69f516f9d3e4391e862e9d5cc2</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</name>
    <filename>a02471.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56b0a238774737e21a41ef6c1ec07818</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56a333b5e206f51ac6ac7b5636098ba4</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</name>
    <filename>a02543.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1deed6ab0d6323bf867fd7b2eec4cb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gada2208cd207aa5945e90c2fa6a756f65</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</name>
    <filename>a02467.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4ed41f2a1d9bbcc6be62ec58e876e847</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5a2f8ca9fa5c4cee0b6c8d06b46ac949</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</name>
    <filename>a02463.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5707c0b06d10567d269371f278dd2432</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490a58f6e66712cfd5d1eada6d2ccb44</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ConstructionTraits&lt; SequentialInformation &gt;</name>
    <filename>a02163.html</filename>
    <member kind="typedef">
      <type>const SequentialCommunicationArgs</type>
      <name>Arguments</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a66dd5f65767ab48e6f6346c7ec16f929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SequentialInformation &gt;</type>
      <name>construct</name>
      <anchorfile>a02163.html</anchorfile>
      <anchor>a3a1f70bed440836bf45fa666fb2d6adf</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OwnerOverlapCopyCommunication::CopyGatherScatter</name>
    <filename>a01967.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommPolicy&lt; T &gt;::IndexedType</type>
      <name>V</name>
      <anchorfile>a01967.html</anchorfile>
      <anchor>ae725e95c77821cdc578eaa39fad4b919</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static V</type>
      <name>gather</name>
      <anchorfile>a01967.html</anchorfile>
      <anchor>a1ecebb51294fbd7fff0c8e88af499459</anchor>
      <arglist>(const T &amp;a, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01967.html</anchorfile>
      <anchor>a2c0b665c73f9fa5c6b025de26b83ca19</anchor>
      <arglist>(T &amp;a, V v, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BCRSMatrix::CreateIterator</name>
    <filename>a01163.html</filename>
    <member kind="function">
      <type></type>
      <name>CreateIterator</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a7783414b8165d73990f91941a59a6d3f</anchor>
      <arglist>(BCRSMatrix &amp;_Mat, size_type _i)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a9e8befa999b60b84ab5ba710c1a81e3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a50e89c0589eb96fb4e7bdcd785c47456</anchor>
      <arglist>(const CreateIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a1e0fccaec063ca77bcd6835833d06ea6</anchor>
      <arglist>(const CreateIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>a2a8acc6b633fe998460de3cd6795e695</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>aa5d5922fa50decc42cb164bee0a6b81e</anchor>
      <arglist>(size_type j)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>acddb385fa2e594243b0d35ed3df8d760</anchor>
      <arglist>(size_type j)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01163.html</anchorfile>
      <anchor>afc61951adbf96c16c02b2b9089a40779</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VariableBlockVector::CreateIterator</name>
    <filename>a02975.html</filename>
    <member kind="typedef">
      <type>std::output_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>ab98525df8a11a2cd6c9cc4bf0502ce76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_type</type>
      <name>value_type</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a682abfef5900af6c58c2e2dba31aedf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>difference_type</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>ae4a5df029155b5451d580f1a1a21abd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_type *</type>
      <name>pointer</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a476984675c43c4f7484dfc281b0748e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeProxy</type>
      <name>reference</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a2de1e9332406462e64e2ee05a0b48d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CreateIterator</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a6aa9ee681905c0cd43ae1ba26e91cfe8</anchor>
      <arglist>(VariableBlockVector &amp;_v, int _i, bool _isEnd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~CreateIterator</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a649b6ba38fc584d2008b33708cad9b6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a3ff3a9aea66f02bb503408b6d6779b12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>operator++</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>ad89d2fec15f2adc4348b4f8b027ac480</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a54bc7cb1b100c9fa448bb553d53151b2</anchor>
      <arglist>(const CreateIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a0be6a6ac6f9ebbb996680fb22eb5c7f8</anchor>
      <arglist>(const CreateIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a2888b1a0563d88d1a6d25406a65f500d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setblocksize</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>a8146a3b770d17ced94914e23a866b490</anchor>
      <arglist>(size_type _k)</arglist>
    </member>
    <member kind="function">
      <type>size_type &amp;</type>
      <name>operator*</name>
      <anchorfile>a02975.html</anchorfile>
      <anchor>ac40ef39de74d0fafc6d6713f9c9868dc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ILU::CRS</name>
    <filename>a01359.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>B</type>
      <name>block_type</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a902d46157718b9abd4bbb146303d8ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>ab310ad982f975583cae67c44311b58c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CRS</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a7fb0da736cd161bf2efe211689271285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a73700274daed9dcc2b25e9bef1c95697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonZeros</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a0f311725678cc8278af69d9f10f31aaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a5362f808278cf4407ca9c60203e69d24</anchor>
      <arglist>(const size_type nRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveAdditional</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a8d9d2392749d04f9e9716458014ee7c0</anchor>
      <arglist>(const size_type nonZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>af17f5f8b673766088af55d0df859e6c3</anchor>
      <arglist>(const block_type &amp;value, const size_type index)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_type &gt;</type>
      <name>rows_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>abdc45d5849f59a3a3678330d09d1181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; block_type, Alloc &gt;</type>
      <name>values_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aa995f59eb0526a63888fe3c12d681d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_type &gt;</type>
      <name>cols_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a0a7c12352aec9f834871801ff9777e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>nRows_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aaf7ec13415b2f0f1189c0792aab1c658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CRS&lt; block_type, typename M::allocator_type &gt;</name>
    <filename>a01359.html</filename>
    <member kind="typedef">
      <type>block_type</type>
      <name>block_type</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a902d46157718b9abd4bbb146303d8ca7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>ab310ad982f975583cae67c44311b58c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CRS</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a7fb0da736cd161bf2efe211689271285</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a73700274daed9dcc2b25e9bef1c95697</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>nonZeros</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a0f311725678cc8278af69d9f10f31aaa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a5362f808278cf4407ca9c60203e69d24</anchor>
      <arglist>(const size_type nRows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveAdditional</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a8d9d2392749d04f9e9716458014ee7c0</anchor>
      <arglist>(const size_type nonZeros)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>af17f5f8b673766088af55d0df859e6c3</anchor>
      <arglist>(const block_type &amp;value, const size_type index)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_type &gt;</type>
      <name>rows_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>abdc45d5849f59a3a3678330d09d1181d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; block_type, typename M::allocator_type &gt;</type>
      <name>values_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aa995f59eb0526a63888fe3c12d681d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_type &gt;</type>
      <name>cols_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>a0a7c12352aec9f834871801ff9777e28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>nRows_</name>
      <anchorfile>a01359.html</anchorfile>
      <anchor>aaf7ec13415b2f0f1189c0792aab1c658</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BCRSMatrix::Deallocator</name>
    <filename>a01167.html</filename>
    <member kind="function">
      <type></type>
      <name>Deallocator</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>ab1cdb357718eca95dd874deccaf899f0</anchor>
      <arglist>(typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; size_type &gt; &amp;sizeAllocator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01167.html</anchorfile>
      <anchor>ae551543a4ef142d4117cd727e5005cf0</anchor>
      <arglist>(size_type *p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultAllocatorTraits</name>
    <filename>a01091.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::allocator&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>a01091.html</anchorfile>
      <anchor>af72bf9d3fadb19725dc7663df702bfb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultAllocatorTraits&lt; T, std::void_t&lt; typename T::allocator_type &gt; &gt;</name>
    <filename>a01095.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename T::allocator_type</type>
      <name>type</name>
      <anchorfile>a01095.html</anchorfile>
      <anchor>acc835ad082282cfaa8583f5add92452f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::DefaultConstructionArgs</name>
    <filename>a02447.html</filename>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb7c9a4a5b2844599b0a4d8333518992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix, [[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</name>
    <filename>a02459.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30207b407b57a30909e6e1d84848f26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5622694604694327167d95a683909cad</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf63be6f20ce6ced40cfad47f8702afcd</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9aaa269c13668790df9b461d00650908</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08e396a2fbbdaea04d90fbdc3fda5842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac94dccbb52c46d0c264df03b197c3cd1</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</name>
    <filename>a02447.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb7c9a4a5b2844599b0a4d8333518992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix,[[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DefaultConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</name>
    <filename>a02447.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb7c9a4a5b2844599b0a4d8333518992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix,[[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::DefaultParallelConstructionArgs</name>
    <filename>a02455.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::ConstructionArgs</base>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultParallelConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad46da99493f46fec52a4067a8bea4676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2cec2ac1f2785322cd2c8185d6a6ab2e</anchor>
      <arglist>(const C &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const C &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac09de9760012fee67d9b912ce682f130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix, [[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DefaultSmootherArgs</name>
    <filename>a02427.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>RelaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa96ee6835f5db1ddd21234ac1f272874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultSmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga95bfa81d687ce27c29ce918234d26423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf86eaea0d7dc0f7841c91ee60cadc3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelaxationFactor</type>
      <name>relaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad1b07aaab2acba6665e54db06cec5e4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatrixAssigner&lt; DenseMatrix, ScaledIdentityMatrix&lt; field, N &gt; &gt;</name>
    <filename>a02663.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02663.html</anchorfile>
      <anchor>a1b4a3b70232ea2b935ce7ab3c3eec2b7</anchor>
      <arglist>(DenseMatrix &amp;denseMatrix, ScaledIdentityMatrix&lt; field, N &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixImp::DenseMatrixBase</name>
    <filename>a01439.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase::ConstIterator</class>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase::Iterator</class>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a0d35d0025465aa905480765bcd5e73a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ab580cbe598e93c8e9335c32af12a7b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ada1738900d706b0b48abdbca265faf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; B, A &gt;</type>
      <name>value_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a59d77914d69af0709744e9700a7bb72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; B, A &gt;</type>
      <name>block_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a04e3b18b611e0814dc855602b3bd8e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::BlockVectorWindow&lt; B, A &gt;</type>
      <name>window_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a03062a9cd63c4d95f32ceebdc78c7b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>window_type</type>
      <name>reference</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9816deb35da6b6dc869f69ad06c557f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const window_type</type>
      <name>const_reference</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a31fe7eeb504415162c5e83db04aa0215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a21c452fde9f39bbe6c7b68e398d6a328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ad631513f0317f8d6eac5bd6e2ae72e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>abe87e59b45133f8a10ffe3e31c7c0371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a34c836fc0d7f3a8d73082822b08760f2</anchor>
      <arglist>(size_type rows, size_type columns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>afc26e89bd521eb18fb77326b59944062</anchor>
      <arglist>(const DenseMatrixBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>adf9cba8574ae9243a7c8a319bedf8428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a2298ffa7421e09cf189fe286d2946950</anchor>
      <arglist>(size_type rows, size_type columns)</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a36cf2ab7bd43126158da610c87c3c72d</anchor>
      <arglist>(const DenseMatrixBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>aa541a6de3f7190694a401879bf38ddd4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a4e02a9d4e8d4c7134f6bcacfe558ea7a</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>af865826b47d1cb74b623cbbce2d54d46</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ae859a7da12cc776377a99fb891f7190b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a402ab770c7fa920ba60534567b9333b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>aa910c50cb965d9a6021f536d9ae0b5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a206a45b71605908654c2135ff52db372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a60817c1883295a87a16990e08b99de19</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ad296cce0cf0446534b1b97aa8a7f60c9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ab542258ebca5ba9336d229d502cadfb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a83c263129a1adc67aff1f6c718ba9a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a70a1121d73bd291c4e67fab6410f35e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>rend</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9d0cef311a94fbfdb9a79c26e042d30b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a637d67d4a36294f384dc1842e35e40a8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseMatrixBase&lt; T, std::allocator&lt; T &gt; &gt;</name>
    <filename>a01439.html</filename>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a0d35d0025465aa905480765bcd5e73a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::allocator&lt; T &gt;</type>
      <name>allocator_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ab580cbe598e93c8e9335c32af12a7b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ada1738900d706b0b48abdbca265faf10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; T, std::allocator&lt; T &gt; &gt;</type>
      <name>value_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a59d77914d69af0709744e9700a7bb72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; T, std::allocator&lt; T &gt; &gt;</type>
      <name>block_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a04e3b18b611e0814dc855602b3bd8e13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Imp::BlockVectorWindow&lt; T, std::allocator&lt; T &gt; &gt;</type>
      <name>window_type</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a03062a9cd63c4d95f32ceebdc78c7b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>window_type</type>
      <name>reference</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9816deb35da6b6dc869f69ad06c557f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const window_type</type>
      <name>const_reference</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a31fe7eeb504415162c5e83db04aa0215</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a21c452fde9f39bbe6c7b68e398d6a328</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ad631513f0317f8d6eac5bd6e2ae72e2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>abe87e59b45133f8a10ffe3e31c7c0371</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a34c836fc0d7f3a8d73082822b08760f2</anchor>
      <arglist>(size_type rows, size_type columns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>afc26e89bd521eb18fb77326b59944062</anchor>
      <arglist>(const DenseMatrixBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DenseMatrixBase</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>adf9cba8574ae9243a7c8a319bedf8428</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a2298ffa7421e09cf189fe286d2946950</anchor>
      <arglist>(size_type rows, size_type columns)</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a36cf2ab7bd43126158da610c87c3c72d</anchor>
      <arglist>(const DenseMatrixBase &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>DenseMatrixBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>aa541a6de3f7190694a401879bf38ddd4</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a4e02a9d4e8d4c7134f6bcacfe558ea7a</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>af865826b47d1cb74b623cbbce2d54d46</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ae859a7da12cc776377a99fb891f7190b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ab542258ebca5ba9336d229d502cadfb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a402ab770c7fa920ba60534567b9333b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a83c263129a1adc67aff1f6c718ba9a20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>aa910c50cb965d9a6021f536d9ae0b5c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a70a1121d73bd291c4e67fab6410f35e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a206a45b71605908654c2135ff52db372</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a60817c1883295a87a16990e08b99de19</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>ad296cce0cf0446534b1b97aa8a7f60c9</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>rend</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a9d0cef311a94fbfdb9a79c26e042d30b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01439.html</anchorfile>
      <anchor>a637d67d4a36294f384dc1842e35e40a8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Dependency</name>
    <filename>a01983.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::Parameters</base>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1baaec66f4b574b2cef650c8faa3320f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga321acf98b939f0b93a7410b189e4a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62b0d02ee5cbaa9714dd453aa0db5567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga00c973edf4b506a16aea1fc25a14b897</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c251ce75374647a53f53f17ffe5ccc1</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga14e65ff5e7d99c39b38aa55c7e80b0a8</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83757595a4c63000d5ca728bf72320a8</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d817e43d5427d7d01ef0f8d9723de81</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga37eef1b68f03154eacfc3324ecdc638c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3db167bce46d1efa5dc002bdd1c2c847</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d02122ea3c03849278efdd3c9f32ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad90b5c6a78351664999222c0e5ccc495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf72f67c861cccdfbc79b297a380e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d18731e26edb51c8dcf567f169fab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7898ad122d26cfaeb622d152318b782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0849baf99502da25d7aab61433702189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4092bf0b04b38b0bea723bf99dfe1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa06549181446abcb1d1c1899e5cd780e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::DependencyParameters</name>
    <filename>a02395.html</filename>
    <member kind="function">
      <type></type>
      <name>DependencyParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf07527f9c494debc36abbca053b2fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Diagonal</name>
    <filename>a01991.html</filename>
    <templarg>N</templarg>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d0978f5441546c44070e0a50dc39564</anchor>
      <arglist>(const M &amp;m, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11d2d6bf546f0de546908e8710ae9450</anchor>
      <arglist>(const M &amp;m, typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Diagonal&lt; 0 &gt;</name>
    <filename>a01991.html</filename>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d0978f5441546c44070e0a50dc39564</anchor>
      <arglist>(const M &amp;m,[[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11d2d6bf546f0de546908e8710ae9450</anchor>
      <arglist>(const M &amp;m, typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DirectSolverSelector</name>
    <filename>a02091.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver&lt; M, superlu &gt;</class>
    <member kind="enumeration">
      <type></type>
      <name>SolverType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga431257c31350ceea0bc805b09ac09e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umfpack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fab3e5e80a6fbb1726ac67e0469f131c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>superlu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fae4cf54eeb9c47e4dd9aeb04ff6c1abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fa07a2aee6da89fa5bcaccc6e52a1eb980</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix ::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga25bae091b8d36cb2647c216e6a28ed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Solver&lt; Matrix, solver &gt;</type>
      <name>SelectedSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e79399c827a5a200d1f01b736bef952</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SelectedSolver ::type</type>
      <name>DirectSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6d12435b4f1ef65049600b4f0069b6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umfpack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fab3e5e80a6fbb1726ac67e0469f131c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>superlu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fae4cf54eeb9c47e4dd9aeb04ff6c1abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fa07a2aee6da89fa5bcaccc6e52a1eb980</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0dc727b9d2360b991b6e721072baeddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectSolver *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d9a7731544e037e9214fefd7f260b83</anchor>
      <arglist>(const Matrix &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr SolverType</type>
      <name>solver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9f2b660f07c84309add90546dccba884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>isDirectSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa8ddd5fc5245d18239cd1215b33487fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DirichletBoundarySetter</name>
    <filename>a02243.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacfc483e810541dab4d37c7afce86eba5</anchor>
      <arglist>(M &amp;coarse, const T &amp;pinfo, const O &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DirichletBoundarySetter&lt; SequentialInformation &gt;</name>
    <filename>a02247.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56815c2eb449b9ae59d52bf202aa20f9</anchor>
      <arglist>(M &amp;coarse, const SequentialInformation &amp;pinfo, const O &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::AggregatesMap::DummyEdgeVisitor</name>
    <filename>a02027.html</filename>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a3d2f48ac19c8fa9dd53dd09a5eac51</anchor>
      <arglist>([[maybe_unused]] const EdgeIterator &amp;edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DynamicMatrixSubdomainSolver</name>
    <filename>a01847.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;</name>
    <filename>a01851.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>matrix_type</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a6c7fd19497c18d18b7cb14aa8b0880c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a8fb4417e9245554b04c2dabc223ff587</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>rilu_type</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>aeb82a7f4e1bdea04824ca96a0b0dde6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a9aef6df514d98690bb9db6757fd61c19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>ac83ac736343949550cf3d79137a25caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>ad8ca4259e61b09fb0176e216f4ebbf34</anchor>
      <arglist>(DynamicVector&lt; field_type &gt; &amp;v, DynamicVector&lt; field_type &gt; &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>ad58d55c7bfbe20ffce9991797a2a2623</anchor>
      <arglist>(const M &amp;BCRS, S &amp;rowset)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01851.html</anchorfile>
      <anchor>a8209541e779cedf38af4e640dba8b502</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SubGraph::EdgeIndexMap</name>
    <filename>a02295.html</filename>
    <member kind="typedef">
      <type>ReadablePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a02295.html</anchorfile>
      <anchor>a994587138e90d86e44dfaf04036f2a9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndexMap</name>
      <anchorfile>a02295.html</anchorfile>
      <anchor>aab6753c8340e9feb0885d701e5485d1e</anchor>
      <arglist>(const EdgeDescriptor &amp;firstEdge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIndexMap</name>
      <anchorfile>a02295.html</anchorfile>
      <anchor>a3c2aba2f8000afaf1f193f47a8a7afc7</anchor>
      <arglist>(const EdgeIndexMap &amp;emap)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator[]</name>
      <anchorfile>a02295.html</anchorfile>
      <anchor>adc039d70c1f1779a59377e057f8e6ea2</anchor>
      <arglist>(const EdgeDescriptor &amp;edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SubGraph::EdgeIterator</name>
    <filename>a02299.html</filename>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>aebb52889d4d4ca77442ca7bb00e52bb5</anchor>
      <arglist>(const VertexDescriptor &amp;source, const EdgeDescriptor &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIterator</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a1a93df6d36c486e495755f6d5c7e274a</anchor>
      <arglist>(const EdgeDescriptor &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a44fb0d4c703341c7e1fb10cbf40ccfcd</anchor>
      <arglist>(const EdgeIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator &amp;</type>
      <name>increment</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a8478e9e5c548e5bf0493be9deb843a41</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator &amp;</type>
      <name>decrement</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a69238e6ca8a94cedd2b5ba50e1d456fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator &amp;</type>
      <name>advance</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a556fcd0e30a143876bc059a54642f05e</anchor>
      <arglist>(std::ptrdiff_t n)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeDescriptor &amp;</type>
      <name>dereference</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>aa9ab06e1bb6b378966a825f29ca40b4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VertexDescriptor &amp;</type>
      <name>target</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>a69e815819222dfebfa5c8c9dcf912745</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VertexDescriptor &amp;</type>
      <name>source</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>abc39c556932e493e8125b00c23aea163</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a02299.html</anchorfile>
      <anchor>ac982f577b7f5461d76c4ec9968cd11b5</anchor>
      <arglist>(const EdgeIterator &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::MatrixGraph::EdgeIteratorT</name>
    <filename>a02283.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>isMutable</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a28b87e5e915990be6ac45c11ef44d0d3ae0f0601214d4508e3435df781548b407</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; C &gt;::type</type>
      <name>MutableContainer</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>ac8156db184a868664069b833ce676e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const std::remove_const&lt; C &gt;::type</type>
      <name>ConstContainer</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>aabe68844c9dee357eeb45fb85adbbfbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; isMutable &amp;&amp;C::mutableMatrix, typename Matrix::row_type::Iterator, typename Matrix::row_type::ConstIterator &gt;::type</type>
      <name>ColIterator</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a08e8a6bc5501621839edb720f9a3cd61</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; isMutable &amp;&amp;C::mutableMatrix, typename M::block_type, const typename M::block_type &gt;::type</type>
      <name>Weight</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>aad7aec08525b57299a4080b0718f6d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; C, typename std::remove_const&lt; C &gt;::type &gt;::value &amp;&amp;C::mutableMatrix, typename M::block_type, const typename M::block_type &gt;::type</type>
      <name>WeightType</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a4f9735ec2f478f5652cedb3d6b47e22f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isMutable</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a28b87e5e915990be6ac45c11ef44d0d3ae0f0601214d4508e3435df781548b407</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a05fd5193403bd77cf47d468f96aa28b1</anchor>
      <arglist>(const VertexDescriptor &amp;source, const ColIterator &amp;block, const ColIterator &amp;end, const EdgeDescriptor &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>ab1d04970fd2292a918cac2450682f4dc</anchor>
      <arglist>(const ColIterator &amp;block)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a7a6bb493bdfffe001579ac848f7265d5</anchor>
      <arglist>(const EdgeIteratorT&lt; C1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>WeightType &amp;</type>
      <name>weight</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a6983a7b06553d3aeeb315247fc69c656</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIteratorT&lt; C &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>abf8f91bf9dd017fe27ac952056d1ce75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a86cdd191a19dfeaefcddf026f4d511e9</anchor>
      <arglist>(const EdgeIteratorT&lt; typename std::remove_const&lt; C &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a60562711c62577b0bd2cd2ff5719a2e5</anchor>
      <arglist>(const EdgeIteratorT&lt; const typename std::remove_const&lt; C &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>ab13d4aa4507a7f17efc1acb13fcd7eff</anchor>
      <arglist>(const EdgeIteratorT&lt; typename std::remove_const&lt; C &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a76996ec9d9ff15b8887f1afde401a55f</anchor>
      <arglist>(const EdgeIteratorT&lt; const typename std::remove_const&lt; C &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>target</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a31f77ca414e00f6364c7e83425ecb02c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>source</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a8cfc5b00729d722441d35ebb4d057d37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EdgeDescriptor &amp;</type>
      <name>operator*</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a7f20cba9a1786880927c6a4ed97e7f3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const EdgeDescriptor *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>ae153779fecc85bca0fb27650a6c3d064</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EdgeIteratorT&lt; MutableContainer &gt;</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a0595f3af404c1e4471791ae6154b7d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EdgeIteratorT&lt; ConstContainer &gt;</name>
      <anchorfile>a02283.html</anchorfile>
      <anchor>a17c407e07d83ec382b15e743664b5be9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::PropertiesGraph::EdgeIteratorT</name>
    <filename>a02319.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; typename std::remove_const&lt; C &gt;::type, C &gt;::value, typename Graph::EdgeIterator, typename Graph::ConstEdgeIterator &gt;::type</type>
      <name>Father</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>aa6ab70b1357b9655f11b81dd564bf9c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>a2cb541cae6cdb31f3d02baa45127b974</anchor>
      <arglist>(const Father &amp;iter, C *graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>a43fa9d1d988c0ea6fd5790a9321ac178</anchor>
      <arglist>(const Father &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeIteratorT</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>acfc79c7c9654e782a2aa0c9c47e8c4c5</anchor>
      <arglist>(const EdgeIteratorT&lt; C1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; C, typename std::remove_const&lt; C &gt;::type &gt;::value, EdgeProperties &amp;, const EdgeProperties &amp; &gt;::type</type>
      <name>properties</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>a395fafa243b732a0384cbdbfef9f67c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EdgeIteratorT&lt; const typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>a3cde419443b4c0faa4d409579ede603c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>EdgeIteratorT&lt; typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02319.html</anchorfile>
      <anchor>a8ecc05d43b3a64963c1d07ddec4a45d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::EdgeProperties</name>
    <filename>a02171.html</filename>
    <member kind="enumvalue">
      <name>INFLUENCE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a73394a1d1915825ad7932398be5df291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPEND</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a0e3794e09dc21cc14c6847a606de62ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a1f95ac17686d8e2b836256707603dbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFLUENCE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a73394a1d1915825ad7932398be5df291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPEND</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a0e3794e09dc21cc14c6847a606de62ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a1f95ac17686d8e2b836256707603dbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeProperties</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6b225fc437b7776aad0fdc95294b969d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; SIZE &gt;::reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9ed70e8c29de119849997fa9c5ee715</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga42aeff7aca6ab8d9d6c94719b70223b3</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>depends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga066384d9359ac65a1ee8eabfd2becb94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38d49bd7fc239574c852219b40534aa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDepends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad07409861535f9d530094eff12395e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>influences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga995cf44d6e5cc09e3fb2046eebe85729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfluences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga32b969d0ec7555e95bf78097257189cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInfluences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6e28aac9c19a543070f372f05da1c2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOneWay</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaff2c435a0e9500533b0d443a896645f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTwoWay</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30d66468b50e6f9eaf5401314d03075d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStrong</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae257fc0cb9246fafae25edb91e7f5ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac915d9cb2f218d94b60f53c275b2fccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFlags</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga87531848f7f096279a48fc16d241c771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60bee2ca3491dda86fc93ca442eafccc</anchor>
      <arglist>(std::ostream &amp;os, const EdgeProperties &amp;props)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::exists</name>
    <filename>a01087.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>a01087.html</anchorfile>
      <anchor>ae3ef78ead3c3073b11789958503ab9d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::FastAMG</name>
    <filename>a02187.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>Operator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga75aeb145a05ee3e5323b6e7f7de1bcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PI</type>
      <name>ParallelInformation</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga5d3d612da81bdddf2fc3582b17eefbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; M, ParallelInformation, A &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga416225297edd0377d1fc9aa43eb56d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gae662ab0809413cd9430009b83d3d3b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga34042ac957d2236eba20c04a8c844330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga5d367c7ae6350e248bdb65d7fcf020f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gab6ea07c81c60f3fdd0e92aae879bdb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gaf93549915ddcbebd39d480dbd8aac5f8</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const Parameters &amp;parms, bool symmetric=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gab06b781cacc2d8ac3e0e4d8c64d4231d</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const Parameters &amp;parms=Parameters(), bool symmetric=true, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga26470f1f9f639f42db7b60658088d59e</anchor>
      <arglist>(const FastAMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gaf1ed183e717b6e62f5a239509dd63007</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gadbfd6eb1972a3bc237bfef5194433a72</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga40d9993df13a2229ce1c783bbcd75c4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga17c451f6558a1f1c52f6532d9b377df1</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0970da862f38d0c8e7eef9b8d89dfe4b</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga99b7e9d174ef8577ec1ffab01287179e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga3109b7a9881c5627ae36ae324a2d3d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0e381b6c7ce83ab6dcb7a8b5b1cb8f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gabc02fd4688d2a3a2e04b19de7861a118</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FieldMatrix</name>
    <filename>a01719.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; BlockVector&lt; B, A &gt; &gt;</name>
    <filename>a01243.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>a9f0c43739203cdf8ce23ca9887d18b88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; B &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01243.html</anchorfile>
      <anchor>a4dcfdc47597151c6c89ddedcb380c1f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; MultiTypeBlockVector&lt; Arg0, Args... &gt; &gt;</name>
    <filename>a01803.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; Arg0 &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0216b070b9664056e84876c9c582d170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; Arg0 &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga09b6cdbf9503cea3d74c8ea5c9edc2b8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::FirstDiagonal</name>
    <filename>a01995.html</filename>
    <base>Diagonal&lt; 0 &gt;</base>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d0978f5441546c44070e0a50dc39564</anchor>
      <arglist>(const M &amp;m,[[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11d2d6bf546f0de546908e8710ae9450</anchor>
      <arglist>(const M &amp;m, typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::FrobeniusNorm</name>
    <filename>a02003.html</filename>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga184b7d4b77d190a08a1c8423c67e934aa85ec4f8e5182c346089980a998e06a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga184b7d4b77d190a08a1c8423c67e934aa85ec4f8e5182c346089980a998e06a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2428da305402970c2c9c352798f0b5ce</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::GalerkinProduct</name>
    <filename>a02215.html</filename>
    <templarg></templarg>
    <base>Dune::Amg::BaseGalerkinProduct</base>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b30f298e7c103aab602c32cbfdd387c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3f5a35e2bcf913af2009562aab059e4c</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const ParallelInformation &amp;pinfo, AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, const Set &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9fbf22e8c85b9465f4c721f1a1740b6</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const I &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251ccd3ae014270cf5e9c77fbd0644b7</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const P &amp;pinfo, [[maybe_unused]] const O &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::GalerkinProduct&lt; SequentialInformation &gt;</name>
    <filename>a02223.html</filename>
    <base>Dune::Amg::BaseGalerkinProduct</base>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7cac7bc4bcfbc1466aa2db4b6ba740b9</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, const Set &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga52b3257266939d09215dc1354f6f3a55</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, [[maybe_unused]] const Set &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9fbf22e8c85b9465f4c721f1a1740b6</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const I &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251ccd3ae014270cf5e9c77fbd0644b7</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const P &amp;pinfo, [[maybe_unused]] const O &amp;copy)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::GaussSeidelPostsmoothDefect</name>
    <filename>a02199.html</filename>
    <templarg>level</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02199.html</anchorfile>
      <anchor>ab48ae04e9ceedb61840a630e8a3b0068</anchor>
      <arglist>(const M &amp;A, X &amp;x, Y &amp;d, const Y &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::GaussSeidelPresmoothDefect</name>
    <filename>a02195.html</filename>
    <templarg>level</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02195.html</anchorfile>
      <anchor>a9409ab4b21d8d26e4f5ce159152e8930</anchor>
      <arglist>(const M &amp;A, X &amp;x, Y &amp;d, const Y &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeneralizedPCGSolver</name>
    <filename>a02763.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedPCGSolver</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>a46a64a25d67b2695a14d2c996faa0ec4</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, int restart=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedPCGSolver</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>a8e51ad7a00ec99486d9de4aad98bfb3c</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, int restart=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedPCGSolver</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>a0b9f41c8d47fec2a515a0901fa82fed1</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedPCGSolver</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>a6dd95cad0ad9d2521daef00eedd3d7f2</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeneralizedPCGSolver</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>ac0e1851d9e890f1743596037fdb387e5</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, scalar_real_type reduction, int maxit, int verbose, int restart=10)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02763.html</anchorfile>
      <anchor>a6f5103064e2d418df87cdf32f32763d0</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GetSuperLUType</name>
    <filename>a02887.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::GetSuperLUType&lt; double &gt;</name>
    <filename>a02891.html</filename>
    <base>BaseGetSuperLUType&lt; double &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>float_type</name>
      <anchorfile>a02891.html</anchorfile>
      <anchor>a25beb362b4d59540db6c10ac9c79a9c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GetSuperLUType&lt; float &gt;</name>
    <filename>a02895.html</filename>
    <base>BaseGetSuperLUType&lt; float &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>float_type</name>
      <anchorfile>a02895.html</anchorfile>
      <anchor>a82ed4019de9fd7b1919ac1b6d727d897</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GetSuperLUType&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a02899.html</filename>
    <base>BaseGetSuperLUType&lt; std::complex&lt; double &gt; &gt;</base>
    <member kind="typedef">
      <type>double</type>
      <name>float_type</name>
      <anchorfile>a02899.html</anchorfile>
      <anchor>ac211fd55b86a8b4cba18b5270c8a4dbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GetSuperLUType&lt; std::complex&lt; float &gt; &gt;</name>
    <filename>a02903.html</filename>
    <base>BaseGetSuperLUType&lt; std::complex&lt; float &gt; &gt;</base>
    <member kind="typedef">
      <type>float</type>
      <name>float_type</name>
      <anchorfile>a02903.html</anchorfile>
      <anchor>add79f906d82c4f133b4bbb986b231122</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Dtype_t</type>
      <name>type</name>
      <anchorfile>a02883.html</anchorfile>
      <anchor>a9c0086dc8e6e26f0217815e49adac5f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::GlobalAggregatesMap</name>
    <filename>a02251.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::Amg::GlobalAggregatesMap::Proxy</class>
    <member kind="typedef">
      <type>TI</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47e94618e246ab2f8b314acd23d0cde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga384b43f09dddb88d52f9ca6f7fe52c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>IndexedType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf418d902d39fe4747756d3b8e08fe996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac3cfde1e3caadee9fb2f3dfb88197459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga41fc04e75e89f64daf55cdea8916b86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalAggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga45b708f095bb0d5649b01676f401d46c</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates, const GlobalLookupIndexSet&lt; ParallelIndexSet &gt; &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIndex &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad1a8d1f86c52d64800b67c38d4065a9a</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalIndex &amp;</type>
      <name>get</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga21446c3eb792fbd917df0c8df063a91f</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>Proxy</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafebb4d4376401c71363c7c0a0c23167c</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3b8725df6cef3327d0aab38f0f3b48e5</anchor>
      <arglist>(const GlobalIndex &amp;global, size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GradientSolver</name>
    <filename>a02739.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a2aeda3b340632ac7cf4efd509a1f7ba2</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02739.html</anchorfile>
      <anchor>a8b50b1675d054138ffdd4fcc7b571011</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::GraphEdgePropertiesSelector</name>
    <filename>a02331.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>abe98f2726e9c5d82774f3d353167af5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::EdgeProperties</type>
      <name>EdgeProperties</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>a2903844980f7a95f32945accbc276f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::EdgeDescriptor</type>
      <name>Edge</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>a5f4752650f1c02df7c18d533bdb1dfd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphEdgePropertiesSelector</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>ae9dc41df76574eed959f111e57dee5e3</anchor>
      <arglist>(G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphEdgePropertiesSelector</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>a9837d195429d3945436fd6ed165d8745</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EdgeProperties &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02331.html</anchorfile>
      <anchor>a8f0775b0b6dc015f6000eda81a55a569</anchor>
      <arglist>(const Edge &amp;edge) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::GraphVertexPropertiesSelector</name>
    <filename>a02327.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>a53f342f19d746b3bf148b79da39e6683</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexProperties</type>
      <name>VertexProperties</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>a7c00d819f4ae8dfd76645d192346c026</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>afb8e69c950e4ced37b435ea4bd1af81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphVertexPropertiesSelector</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>a015d20cc374325f0abb6ff5a7cc0cb7e</anchor>
      <arglist>(G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GraphVertexPropertiesSelector</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>a8701304b6f621e0a81d4f94b5bf21a4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexProperties &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02327.html</anchorfile>
      <anchor>a229caba0e5afe396c3660c3441b0fdac</anchor>
      <arglist>(const Vertex &amp;vertex) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Hierarchy</name>
    <filename>a02343.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::Amg::Hierarchy::LevelIterator</class>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; T &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; T, A &gt;, T &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; T, A &gt;, const T &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hierarchy&lt; Domain, A &gt;</name>
    <filename>a02343.html</filename>
    <member kind="typedef">
      <type>Domain</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; Domain &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; Domain, A &gt;, Domain &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; Domain, A &gt;, const Domain &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hierarchy&lt; MatrixOperator, Allocator &gt;</name>
    <filename>a02343.html</filename>
    <member kind="typedef">
      <type>MatrixOperator</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; MatrixOperator &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; MatrixOperator, Allocator &gt;, MatrixOperator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; MatrixOperator, Allocator &gt;, const MatrixOperator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hierarchy&lt; ParallelInformation, Allocator &gt;</name>
    <filename>a02343.html</filename>
    <member kind="typedef">
      <type>ParallelInformation</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; ParallelInformation &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; ParallelInformation, Allocator &gt;, ParallelInformation &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; ParallelInformation, Allocator &gt;, const ParallelInformation &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hierarchy&lt; Range, A &gt;</name>
    <filename>a02343.html</filename>
    <member kind="typedef">
      <type>Range</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; Range &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; Range, A &gt;, Range &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; Range, A &gt;, const Range &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Hierarchy&lt; Smoother, A &gt;</name>
    <filename>a02343.html</filename>
    <member kind="typedef">
      <type>Smoother</type>
      <name>MemberType</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a174c9e78c20945f946429d1ca5c24eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac41a3f14b571eb4d6354703d6bc8e26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; Smoother &gt;::Arguments</type>
      <name>Arguments</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>abe2132c9a878f889f6af01ba92f97c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; Hierarchy&lt; Smoother, A &gt;, Smoother &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>a4b48b3288872cb8bccef3b78f287e527</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LevelIterator&lt; const Hierarchy&lt; Smoother, A &gt;, const Smoother &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>aafac7de57341e1d0cd0b91d4a013da34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a02343.html</anchorfile>
      <anchor>ac1ac61848513d182a9111ae4d4ca2593</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ILU0SubdomainSolver</name>
    <filename>a01367.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::ILUSubdomainSolver</base>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>matrix_type</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>abda519a1591afcf20b70771caf54e5a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>rilu_type</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a9753fe645956df7871c1fa0e7ca72df9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a182c434dfddf56b910b1bada0ae4fef1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>a8906d02e5b2409e2a678ef2d8e486526</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01367.html</anchorfile>
      <anchor>ae4acce7adbc1a9d6a6ee4584eeff705f</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafa21731f06b876f98d9431bb7bd20759</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>copyToLocalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ffa7104c573c6b114387fef2f155541</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_type</type>
      <name>ILU</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1c213fb018a38492c3ad49c30ae278ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ILUNSubdomainSolver</name>
    <filename>a01371.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::ILUSubdomainSolver</base>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>matrix_type</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a7213b96fb48ec5f301ed4b33e1f906dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>rilu_type</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a8ef256f39cc7bf54f896025622ca2d2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>a506e5945e2d7f1b7c74703455b375a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>af9254550420844492c65839aabf02fcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01371.html</anchorfile>
      <anchor>ac3798f39f0fe27029b8ed83134c1682b</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga73c6843e677895d542ad0453c6097d3e</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>copyToLocalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ffa7104c573c6b114387fef2f155541</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_type</type>
      <name>ILU</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1c213fb018a38492c3ad49c30ae278ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ILUSubdomainSolver</name>
    <filename>a01363.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>matrix_type</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a72aa28857869533b220a40e32b1724ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a4900ba7853c0e8b1e0518fcb4fe2aca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a70ce191b4e93d4817676c86d5e32839e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>ac70c4a354470bc601749ac4bbbc98511</anchor>
      <arglist>(X &amp;v, const Y &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ILUSubdomainSolver</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a695fc16bcd384a815c4e312678c3ef24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>copyToLocalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ffa7104c573c6b114387fef2f155541</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>matrix_type</type>
      <name>ILU</name>
      <anchorfile>a01363.html</anchorfile>
      <anchor>a1c213fb018a38492c3ad49c30ae278ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SolverHelper::Implementation</name>
    <filename>a02695.html</filename>
    <templarg>is_direct_solver</templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMatrix</name>
      <anchorfile>a02695.html</anchorfile>
      <anchor>a068af673ea1154bb50bcdb48f32afbf5</anchor>
      <arglist>(ISTLLinearSolver &amp;, const BCRSMatrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SolverHelper::Implementation&lt; true, Dummy &gt;</name>
    <filename>a02699.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMatrix</name>
      <anchorfile>a02699.html</anchorfile>
      <anchor>a0a2fc5010b9b75a36d5394570bd5d756</anchor>
      <arglist>(ISTLLinearSolver &amp;solver, const BCRSMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ImplicitMatrixBuilder</name>
    <filename>a01147.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::ImplicitMatrixBuilder::row_object</class>
    <member kind="typedef">
      <type>M_</type>
      <name>Matrix</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a38e03c90c9b43c25b8b6e9511daa6ef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::block_type</type>
      <name>block_type</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a17af37becd90e0349c7c030831dd4128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a8459b45742100c9bbc3a8ee7dd3140cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitMatrixBuilder</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a2b2e21ff370b3f445775a9eec727e713</anchor>
      <arglist>(Matrix &amp;m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ImplicitMatrixBuilder</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a43c99db0d160779cb5fcc74789268454</anchor>
      <arglist>(Matrix &amp;m, size_type rows, size_type cols, size_type avg_cols_per_row, double overflow_fraction)</arglist>
    </member>
    <member kind="function">
      <type>row_object</type>
      <name>operator[]</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a8c8eb051626cd2856d8fc9f27b472c79</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>ae4ce4af2823db91af6ad85bfdd61c31c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01147.html</anchorfile>
      <anchor>a7b720e92c2c33d9d7cb919791449c618</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ImplicitModeCompressionBufferExhausted</name>
    <filename>a01391.html</filename>
    <base>Dune::BCRSMatrixError</base>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::IndexData</name>
    <filename>a01535.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>a01535.html</anchorfile>
      <anchor>abd6cc40eda46ae911e0e0b161329a298</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndexInfoFromGrid</name>
    <filename>a01959.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>GlobalIdType</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a1f3b5adf7b577dfbab3874f1aa1ee6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>L</type>
      <name>LocalIdType</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a6aed54da56489b41890db40b94659d8c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; GlobalIdType, LocalIdType, int &gt;</type>
      <name>IndexTripel</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a144355aef734fa2f8a45978674dfa988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; int, GlobalIdType, int &gt;</type>
      <name>RemoteIndexTripel</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>ac5648614720892fe9d6d01f8224326f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLocalIndex</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>abe68ec246c9997a684109912da7f21f8</anchor>
      <arglist>(const IndexTripel &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRemoteIndex</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a19a502ca3b5f6947013be3195e206dd0</anchor>
      <arglist>(const RemoteIndexTripel &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; IndexTripel &gt; &amp;</type>
      <name>localIndices</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a7a39382dd4b281492e24f618f180b58b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; RemoteIndexTripel &gt; &amp;</type>
      <name>remoteIndices</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>ac34ed9f292db68c551525b6cda3207a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01959.html</anchorfile>
      <anchor>a99513b4177ba3bf5634701c0be9c140e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::IndicesCoarsener</name>
    <filename>a02355.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::IndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</name>
    <filename>a02367.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>ParallelIndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</base>
    <member kind="typedef">
      <type>E</type>
      <name>ExcludedAttributes</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaccac2c87b0834201c07a5930d7554173</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OwnerOverlapCopyCommunication&lt; G, L &gt;</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d6183e4126cd6a645ea194ac1944d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d4745703c4e8e878773dafaa99f54d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d29bd3eeb184f0042b3e72de6cca32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bd142f155d0e97931e76a914f793c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga18a399553eda5531ae901932cfc42c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad52c7354eb72d033a3da2c2d594e5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3572024f811fcaf94d7f5bdfe1bbd30a</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo,[[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c6f6c1bf60c3c4a4d87aeac2f270aad</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::IndicesCoarsener&lt; SequentialInformation, E &gt;</name>
    <filename>a02371.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga77c312b890773e46e79a74b3bb381e94</anchor>
      <arglist>([[maybe_unused]] const SequentialInformation &amp;fineInfo, [[maybe_unused]] Graph &amp;fineGraph, [[maybe_unused]] VM &amp;visitedMap, [[maybe_unused]] AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, [[maybe_unused]] SequentialInformation &amp;coarseInfo, [[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga10e45d29562e3e0bdb64b7ff9d1f2827</anchor>
      <arglist>(const SequentialInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, SequentialInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InvalidSolverCategory</name>
    <filename>a02707.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::InvalidSolverFactoryConfiguration</name>
    <filename>a02731.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::InverseOperator</name>
    <filename>a02679.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(X &amp;x, Y &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(X &amp;x, Y &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae74604dd6afec05c0e2a080fe403d2a1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseOperator</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a0c15f8be3b793a367af0b0cb324a942d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InverseOperator2Preconditioner</name>
    <filename>a02587.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <base>Preconditioner&lt; O::domain_type, O::range_type &gt;</base>
    <member kind="typedef">
      <type>O::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a208d7e96f40cca3cf5f75c07f8a76d77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O::range_type</type>
      <name>range_type</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a089d9fd98011dbcecf1bba403e1258e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_type::field_type</type>
      <name>field_type</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a63287a4a45c6c7bc348ca4ae73e8a6e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a7bc78e3ba6cc673d47913a3a909a4eff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a689052e29fb299a1f20338c1b2338555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>InverseOperator</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>acfb9383a2392b77a62e63996cdf2ab0f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InverseOperator2Preconditioner</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>acf9c69516581bde6d63fbad00c9345eb</anchor>
      <arglist>(InverseOperator &amp;inverse_operator)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>ab103343357eb8f4c86ab1d0e5c9f2ae4</anchor>
      <arglist>(domain_type &amp;, range_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>aedeb59e58d8dce4ec24d68d81f55ec78</anchor>
      <arglist>(domain_type &amp;v, const range_type &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a560359e8e0e914872950d27ad0bc86cb</anchor>
      <arglist>(domain_type &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02587.html</anchorfile>
      <anchor>a848f78fb38ca1876c59154a2403fe735</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InverseOperator&lt; BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &gt;</name>
    <filename>a02679.html</filename>
    <member kind="typedef">
      <type>BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt;</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae74604dd6afec05c0e2a080fe403d2a1</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseOperator</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a0c15f8be3b793a367af0b0cb324a942d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InverseOperator&lt; Impl::SuperLUVectorChooser&lt; M &gt;::domain_type, Impl::SuperLUVectorChooser&lt; M &gt;::range_type &gt;</name>
    <filename>a02679.html</filename>
  </compound>
  <compound kind="class">
    <name>InverseOperator&lt; Impl::UMFPackVectorChooser&lt; M &gt;::domain_type, Impl::UMFPackVectorChooser&lt; M &gt;::range_type &gt;</name>
    <filename>a02679.html</filename>
  </compound>
  <compound kind="class">
    <name>InverseOperator&lt; X, X &gt;</name>
    <filename>a02679.html</filename>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae74604dd6afec05c0e2a080fe403d2a1</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InverseOperator</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a0c15f8be3b793a367af0b0cb324a942d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::InverseOperatorResult</name>
    <filename>a02675.html</filename>
    <member kind="function">
      <type></type>
      <name>InverseOperatorResult</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>a007457c192debe371ae62caa3db02127</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>af6eb51e594a8cb7ab84cabd5e5743b77</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>ac42bf46e67cf01e6eb29f2b05bdb9f42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>reduction</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>ad6068f30dda791930ee16d4e9f3af353</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>converged</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>afefe366c3c36a5a9a599c2ba4c711ab6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>conv_rate</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>af8839098f24da4a9305b62adb1ad25fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>condition_estimate</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>a53279693ec639d61538909b952ede7ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>a02675.html</anchorfile>
      <anchor>a93d6c1ada77e3a99962bfdf94d4bdb9c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::is_complex</name>
    <filename>a01559.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::is_complex&lt; std::complex&lt; T &gt; &gt;</name>
    <filename>a01563.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDirectSolver</name>
    <filename>a02775.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02775.html</anchorfile>
      <anchor>a6cae9d0d704134079b9a96aff83a8bf0a1b6408cece86ccb8562149b8f03850dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02775.html</anchorfile>
      <anchor>a6cae9d0d704134079b9a96aff83a8bf0a1b6408cece86ccb8562149b8f03850dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDirectSolver&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</name>
    <filename>a01419.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggabb5f552bd9a885c086cce920f62ea8d9aa150aa34259598f045447b7aeff7d416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggabb5f552bd9a885c086cce920f62ea8d9aa150aa34259598f045447b7aeff7d416</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDirectSolver&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</name>
    <filename>a02791.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga7fd4b2bf093c8cd46bfc80aa43fedacda96a22f52e7b811d728794ff4b8dfce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga7fd4b2bf093c8cd46bfc80aa43fedacda96a22f52e7b811d728794ff4b8dfce6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDirectSolver&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</name>
    <filename>a02843.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02843.html</anchorfile>
      <anchor>a46d1ee8dc33cc1b0e329553c7cb69955aea536d242bc75e59fc9b027d29422a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02843.html</anchorfile>
      <anchor>a46d1ee8dc33cc1b0e329553c7cb69955aea536d242bc75e59fc9b027d29422a80</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsDirectSolver&lt; UMFPack&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</name>
    <filename>a02951.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggad22adf97acc384035c3db9c9f6d00ea1ab518b6581cac3aac90a0b02a398909f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggad22adf97acc384035c3db9c9f6d00ea1ab518b6581cac3aac90a0b02a398909f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsMatrix</name>
    <filename>a01771.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>ac4b6f703c239e4001677eede44eb0481ad7a8001b1cc434a9451a3b652af3488a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01771.html</anchorfile>
      <anchor>ac4b6f703c239e4001677eede44eb0481ad7a8001b1cc434a9451a3b652af3488a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsMatrix&lt; BCRSMatrix&lt; T, A &gt; &gt;</name>
    <filename>a01779.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01779.html</anchorfile>
      <anchor>ac8b8962f3b26ff6bf5f9c95ce78679b1ac4cd9620dbbe7ab40fc550db0ed97a51</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01779.html</anchorfile>
      <anchor>ac8b8962f3b26ff6bf5f9c95ce78679b1ac4cd9620dbbe7ab40fc550db0ed97a51</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsMatrix&lt; DenseMatrix&lt; T &gt; &gt;</name>
    <filename>a01775.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>ae1a33e7fa98529e4c6e830f459dfb81fae01cd5fb71fb468d130ece4bb5e93fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01775.html</anchorfile>
      <anchor>ae1a33e7fa98529e4c6e830f459dfb81fae01cd5fb71fb468d130ece4bb5e93fd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ISTLError</name>
    <filename>a01383.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::LDLCreator::isValidBlock</name>
    <filename>a01431.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SPQRCreator::isValidBlock</name>
    <filename>a02803.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator::isValidBlock</name>
    <filename>a02855.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackCreator::isValidBlock</name>
    <filename>a02963.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackCreator::isValidBlock&lt; B, std::enable_if_t&lt; std::is_same&lt; typename FieldTraits&lt; B &gt;::real_type, double &gt;::value &gt; &gt;</name>
    <filename>a02967.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator::isValidBlock&lt; double &gt;</name>
    <filename>a02867.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; double, k &gt; &gt;</name>
    <filename>a02859.html</filename>
    <templarg>k</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; std::complex&lt; double &gt;, k &gt; &gt;</name>
    <filename>a02863.html</filename>
    <templarg>k</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SPQRCreator::isValidBlock&lt; FieldVector&lt; double, 1 &gt; &gt;</name>
    <filename>a02807.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::LDLCreator::isValidBlock&lt; FieldVector&lt; double, k &gt; &gt;</name>
    <filename>a01435.html</filename>
    <templarg>k</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator::isValidBlock&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a02871.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::AMGCreator::isValidBlockType</name>
    <filename>a02107.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AMGCreator::isValidBlockType&lt; FieldMatrix&lt; T, n, m &gt; &gt;</name>
    <filename>a02111.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::IterativeSolver::Iteration</name>
    <filename>a02687.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Iteration</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a01db9f251b305695f6ede7edae579970</anchor>
      <arglist>(const IterativeSolver &amp;parent, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iteration</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a84153f8c63471c148532d3bcddcce54b</anchor>
      <arglist>(const Iteration &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iteration</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a0870995022d0c5e1cee1f1b8fa84d6cd</anchor>
      <arglist>(Iteration &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Iteration</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ae5a464a44d3df1b30f1452a7e313d2c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>step</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ac6ab252966c7aff8bcd672ea58d0361a</anchor>
      <arglist>(CountType i, real_type def)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>adb9ada3a3a9fa9b0e6d5955f4e17d04e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>_def0</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ab225834a68c68d6289badd96f4e783e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>_def</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>ae2d5ee5ea1ac1747063687427b21b554</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CountType</type>
      <name>_i</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a9bab7086c42d975f942b6c8babd0c5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Timer</type>
      <name>_watch</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a72944218d9cc08701a763b3fa4e7cc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>InverseOperatorResult &amp;</type>
      <name>_res</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a578b54e82b28dd193ff20dcd463b63ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IterativeSolver &amp;</type>
      <name>_parent</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>a6feea72dd4985c4ea2c75d3768d43dc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>_valid</name>
      <anchorfile>a02687.html</anchorfile>
      <anchor>aef0d0c1da2cb0516ee561856025f5888</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IterativeSolver</name>
    <filename>a02683.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::InverseOperator</base>
    <class kind="class">Dune::IterativeSolver::Iteration</class>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aa3aac0420d78c7e981855173998dfdbd</anchor>
      <arglist>(LinearOperator&lt; X, Y &gt; &amp;op, Preconditioner&lt; X, Y &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a2e5c17e2cf1c34f2ff6c696d551c3acb</anchor>
      <arglist>(LinearOperator&lt; X, Y &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, Y &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95ff9476da2017980a0574aa0c3d3048</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af2fa55775d41709b976bfa306d8cd50e</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9591f7951c8d340cda51ad6093ac9c12</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, Y &gt;&gt; prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(X &amp;x, Y &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(X &amp;x, Y &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IterativeSolver&lt; X, X &gt;</name>
    <filename>a02683.html</filename>
    <base>InverseOperator&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aa3aac0420d78c7e981855173998dfdbd</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a2e5c17e2cf1c34f2ff6c696d551c3acb</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95ff9476da2017980a0574aa0c3d3048</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af2fa55775d41709b976bfa306d8cd50e</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IterativeSolver</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9591f7951c8d340cda51ad6093ac9c12</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, scalar_real_type reduction, int maxit, int verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixImp::DenseMatrixBase::Iterator</name>
    <filename>a01443.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aa9f5ddf67096e75e307f5601359e906c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a3714c3c2ae638e801d482e1c61cee148</anchor>
      <arglist>(Iterator &amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a4e259edac1fc42414d4cb78fb58f60d6</anchor>
      <arglist>(Iterator &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ae2c182785d01c5bb9a04f1181ad19311</anchor>
      <arglist>(B *data, size_type columns, size_type _i)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aa4ce4cfcf62bb875962e93d39b9caae4</anchor>
      <arglist>(Iterator &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>aea5965d3f20062a0e5c5171bd69088cb</anchor>
      <arglist>(Iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a581b356cc4c6087ed5e213658687d7dc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator--</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a86363e9d27050c664b4188c2366d74a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>adc5f21024c115786e0375b88d425b653</anchor>
      <arglist>(const Iterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a5db929db0190ae3870ee06a09fb0fb66</anchor>
      <arglist>(const Iterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>ab9ff06c1f5f01914742d1e4dc1e1905a</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a9b81468d83203a70cb714b8e0cd52477</anchor>
      <arglist>(const ConstIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>window_type &amp;</type>
      <name>operator*</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a8eee520c4e11dbab61180d9872092570</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>window_type *</type>
      <name>operator-&gt;</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>acb33d8aba7541bed07e4dfc477310f2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a1a447c34f16f05e16b16af2524ba07de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ConstIterator</name>
      <anchorfile>a01443.html</anchorfile>
      <anchor>a5485970bb9da6b5d782fa28638b5658f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IteratorDirectionSelector</name>
    <filename>a01911.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>forward</templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>solver_vector</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a891930696412e3a90cd31d16a2eeae31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>solver_vector::iterator</type>
      <name>solver_iterator</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a0a8e5a9fc0275159cd1f4436c9b05bca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>subdomain_vector</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>ab809fd5237aedc06122023f2f1443d68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>subdomain_vector::const_iterator</type>
      <name>domain_iterator</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a2f8833cea6c07f23f6706702e76ab4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static solver_iterator</type>
      <name>begin</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a00d054439d86e0ba5d20eb5f9f70e047</anchor>
      <arglist>(solver_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static solver_iterator</type>
      <name>end</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>afdfb42b0b70cb067ce2e18eab75fe042</anchor>
      <arglist>(solver_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static domain_iterator</type>
      <name>begin</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>aabdf0993eee339fec6c91efac3edbd7f</anchor>
      <arglist>(const subdomain_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static domain_iterator</type>
      <name>end</name>
      <anchorfile>a01911.html</anchorfile>
      <anchor>a2104572b088c65d8a09b07d79cb0a7e8</anchor>
      <arglist>(const subdomain_vector &amp;sv)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IteratorDirectionSelector&lt; T1, T2, false &gt;</name>
    <filename>a01915.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>solver_vector</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ae0db09874f9e41eb3c4b8690a1090efe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>solver_vector::reverse_iterator</type>
      <name>solver_iterator</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ab59d913ac1ba55945811223d2352109c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>subdomain_vector</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>a0127734a425d4b1f329398a0c099eb3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>subdomain_vector::const_reverse_iterator</type>
      <name>domain_iterator</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ab9656071308f9da42c1621315b988bd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static solver_iterator</type>
      <name>begin</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ad4928282ba629a3f1ad74174db1f49aa</anchor>
      <arglist>(solver_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static solver_iterator</type>
      <name>end</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>aaa1a8a95432323a9739789217ca363d3</anchor>
      <arglist>(solver_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static domain_iterator</type>
      <name>begin</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>ae6e2ba1970e0e3071911541e150b71a6</anchor>
      <arglist>(const subdomain_vector &amp;sv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static domain_iterator</type>
      <name>end</name>
      <anchorfile>a01915.html</anchorfile>
      <anchor>aed7ac9fe5b277ec6bf8b4b944eb34626</anchor>
      <arglist>(const subdomain_vector &amp;sv)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::KAMG</name>
    <filename>a02071.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>AMG&lt; M, X, S, PI, A &gt;</type>
      <name>Amg</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>aadb12fe2c19323e23aeddf5032ade422</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>KrylovSolver</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>ad67f4d58267ba57613310741f6701b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::OperatorHierarchy</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a7e3413154b8e7cbf122dfd9fcc35bec3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::CoarseSolver</type>
      <name>CoarseSolver</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a201cf0811a621236cfaa90f7ab96178b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::ParallelInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a0f2e810563bafd087d53f7b9cdf0f0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::SmootherArgs</type>
      <name>SmootherArgs</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a0c5423c11195465307c453ca3c476cde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::Operator</type>
      <name>Operator</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>ab39ce79e42d2c9459c0824a9c64bd596</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::Domain</type>
      <name>Domain</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a0827421e95230dd79b1964820f5a5188</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::Range</type>
      <name>Range</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a89bb6e26e7e26da6e251ce76cf259c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>ab715d269102c8e3cdabc81e0cf11527c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::ScalarProduct</type>
      <name>ScalarProduct</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>a9496d834c44a3fb08400f1e2be9915f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02071.html</anchorfile>
      <anchor>ad470b061a6d4ce3366da6115827645e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3923d2f4d4d9b8fda692da71210ddb0a</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms, std::size_t maxLevelKrylovSteps=3, double minDefectReduction=1e-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad6407508988b509f32cab6cb6f85fed1</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), std::size_t maxLevelKrylovSteps=3, double minDefectReduction=1e-1, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef3e58cdeac191a467f4a8c9cc39ebf4</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6dfeef8a854c652e39412a24679055bd</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga15d0a529de8f78321953fef8dd88d4f6</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a070cc7bc87f8600931736042a42fe9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::KAmgTwoGrid</name>
    <filename>a02075.html</filename>
    <templarg></templarg>
    <base>Preconditioner&lt; AMG::Domain, AMG::Range &gt;</base>
    <member kind="typedef">
      <type>AMG::Domain</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AMG::Range</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a8a97df5c3ceb629a4dce6c7258795ed8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KAmgTwoGrid</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a13d3da72f282e04f2fbbb8e6ee7a4724</anchor>
      <arglist>(AMG &amp;amg, std::shared_ptr&lt; InverseOperator&lt; Domain, Range &gt; &gt; coarseSolver)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a91b79c8509792c0f2a022cff6936b757</anchor>
      <arglist>([[maybe_unused]] typename AMG::Domain &amp;x, [[maybe_unused]] typename AMG::Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>aa216ed44cd677a5332cfb977864ba431</anchor>
      <arglist>([[maybe_unused]] typename AMG::Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>ae7e5b82e07f49643b683c0125ad453eb</anchor>
      <arglist>(typename AMG::Domain &amp;v, const typename AMG::Range &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>InverseOperator&lt; Domain, Range &gt; *</type>
      <name>coarseSolver</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a13659ea8197676a196736be881452f2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLevelContext</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a8d82e681993d250da80a5499ed23513e</anchor>
      <arglist>(std::shared_ptr&lt; typename AMG::LevelContext &gt; p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~KAmgTwoGrid</name>
      <anchorfile>a02075.html</anchorfile>
      <anchor>a3a7a6e83e9bec4135ae952799b5efcc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(AMG::Domain &amp;x, AMG::Range &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(AMG::Domain &amp;v, const AMG::Range &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(AMG::Domain &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LDL</name>
    <filename>a01411.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</name>
    <filename>a01415.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <base>InverseOperator&lt; BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2719d5ed0b691ca5d935941ffa9c9b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga963d590342d5796cfcfd46141bba51be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ISTL::Impl::BCCSMatrix&lt; T, int &gt;</type>
      <name>LDLMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga494f7182544eafc91bf8a057153968b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;, int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad9efb6140ed353a70807f39c8bd4bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, m &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1317746d0f20fa11101b3e6855eafb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, n &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt;</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7048c2fdcc5475f9d529ff58940b9447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gacb0ebf206ada98ad819720b00e7e274a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaffc39102eb3c20ba057c2897b43bda6f</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaabbd074c605597b4ad1740b031d6e112</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac05deb83f4eab6cec6769b3d8fc4f27b</anchor>
      <arglist>(const Matrix &amp;matrix, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf749c72a0b4b75ee87bee81323c1a39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga768fb5ff9bd370ec420bb94895dc05c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8eb4225e81fdffb094a8eab2f4a539c8</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5a4e3c79c54667da91b7c3832d933a24</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga552c9e270da5aa2393f0d71619544504</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga34be730e19ff703d99ae4322653424a0</anchor>
      <arglist>([[maybe_unused]] unsigned int option, [[maybe_unused]] double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga9b64b0d9778ef7fd278d556736129783</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf61b186de4c25626bab68067f255b988</anchor>
      <arglist>(const Matrix &amp;matrix, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga532266bc4c00a98388d7d6d142dbcd36</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>LDLMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafb4c600f28bb8ffd037db149508efe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga85b3bcd7a92809668ed66dbc030862e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa703c6646e9d0015ecd371b7065316d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getD</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf8c67b99e44a46b329d598b897382018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getLp</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac3d21613d05a84b171b07a264f7d3837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getLi</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa9e629da7a999d2898a87c945bf7bd79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getLx</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5d7f4b106809353aaf28a64f2f29e2bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; LDL&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6d92182384e6669d5bd612fb2d290293</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LDLCreator</name>
    <filename>a01427.html</filename>
    <class kind="struct">Dune::LDLCreator::isValidBlock</class>
    <class kind="struct">Dune::LDLCreator::isValidBlock&lt; FieldVector&lt; double, k &gt; &gt;</class>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga41591e300621eb2cc91edb5237ecc4fe</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gada8afc6ab8bdf8b4df97708ca2d45381</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt; !isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Hierarchy::LevelIterator</name>
    <filename>a02347.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>LevelIterator</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>ae8a4aa05f2b0bf3e2b507df67b7e7cae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIterator</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>aaa23d6dec4c5fa635fba58c76db7d564</anchor>
      <arglist>(std::shared_ptr&lt; Element &gt; element)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIterator</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a098170809564c230e5fa2a0f86e00248</anchor>
      <arglist>(const LevelIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T1 &gt;::type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelIterator</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a8941ecc00928efabab3891f42bb089af</anchor>
      <arglist>(const LevelIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T1 &gt;::type &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a59d3e7e31015258cb6c3a23236d569b4</anchor>
      <arglist>(const LevelIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T1 &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a6003a6f4284545106afcbae35339cfbb</anchor>
      <arglist>(const LevelIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T1 &gt;::type &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>T1 &amp;</type>
      <name>dereference</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>af1f43eeacd75f7f997accacafaf8aea3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a709db0b093ccc3c7869b559c85170dba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a982be169660f8ec7ee2a185934b2362c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRedistributed</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a5f5a8282259007d2bddde7a3d7f5d7bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T1 &amp;</type>
      <name>getRedistributed</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a724966bf4a1ee97f29040c169fd28349</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributed</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a10bd76f83dfab266d1b1570dbf8347d5</anchor>
      <arglist>(std::shared_ptr&lt; T1 &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteRedistributed</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a958911b330b146eb6dca2eeb8f4a4fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T1 &gt;::type &gt;</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a0b878ebf5eac2fe01731ea44e4986ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>LevelIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T1 &gt;::type &gt;</name>
      <anchorfile>a02347.html</anchorfile>
      <anchor>a0094033ac6fc4120bcee72c3d110a3c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::LevelTransferPolicy</name>
    <filename>a02559.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FO</type>
      <name>FineOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa4ace1314e18bc180f2bb9265728a1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::range_type</type>
      <name>FineRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a1c8a4baff865e072806df0a2b51a657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::domain_type</type>
      <name>FineDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>af319a221a494d42eb1624805fe217ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CO</type>
      <name>CoarseOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a057e5f22a8287e7e783cac63d40148d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::range_type</type>
      <name>CoarseRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a378e47c0041f0d781fa278290821d946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::domain_type</type>
      <name>CoarseDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa6f289a761b8488aa0100854d34461d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt; &amp;</type>
      <name>getCoarseLevelOperator</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a95431e884f8eb57d0fc591fbfd9fdb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseRangeType &amp;</type>
      <name>getCoarseLevelRhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a3c7cb6e391a2ae52b14b8ef1d01d4478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseDomainType &amp;</type>
      <name>getCoarseLevelLhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ad9b8ad8a8773b67e527f3c8fcdd827b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToCoarseLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a15e8c29206562eac2d0236abd6606e6b</anchor>
      <arglist>(const FineRangeType &amp;fineRhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToFineLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a9db4924006dda4303bd52e478074e56c</anchor>
      <arglist>(FineDomainType &amp;fineLhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createCoarseLevelSystem</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a33edc3f4deed4939af9baa35c1c48437</anchor>
      <arglist>(const FineOperatorType &amp;fineOperator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LevelTransferPolicy *</type>
      <name>clone</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ae77a7f9b47ca3ca4bca69de8bc69cea5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelTransferPolicy</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a483386f91852b03cda2763067af64812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseRangeType</type>
      <name>rhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a869722b290a67fa93ddf17a3faf21af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseDomainType</type>
      <name>lhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a4b4c1b7ece3b7a7d785b458161ac73a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt;</type>
      <name>operator_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a73199de2406818fabd11b4377f008235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LevelTransferPolicy&lt; FO, typename CSP::Operator &gt;</name>
    <filename>a02559.html</filename>
    <member kind="typedef">
      <type>FO</type>
      <name>FineOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa4ace1314e18bc180f2bb9265728a1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::range_type</type>
      <name>FineRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a1c8a4baff865e072806df0a2b51a657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::domain_type</type>
      <name>FineDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>af319a221a494d42eb1624805fe217ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CSP::Operator</type>
      <name>CoarseOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a057e5f22a8287e7e783cac63d40148d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::range_type</type>
      <name>CoarseRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a378e47c0041f0d781fa278290821d946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::domain_type</type>
      <name>CoarseDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa6f289a761b8488aa0100854d34461d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt; &amp;</type>
      <name>getCoarseLevelOperator</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a95431e884f8eb57d0fc591fbfd9fdb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseRangeType &amp;</type>
      <name>getCoarseLevelRhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a3c7cb6e391a2ae52b14b8ef1d01d4478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseDomainType &amp;</type>
      <name>getCoarseLevelLhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ad9b8ad8a8773b67e527f3c8fcdd827b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToCoarseLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a15e8c29206562eac2d0236abd6606e6b</anchor>
      <arglist>(const FineRangeType &amp;fineRhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToFineLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a9db4924006dda4303bd52e478074e56c</anchor>
      <arglist>(FineDomainType &amp;fineLhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createCoarseLevelSystem</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a33edc3f4deed4939af9baa35c1c48437</anchor>
      <arglist>(const FineOperatorType &amp;fineOperator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LevelTransferPolicy *</type>
      <name>clone</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ae77a7f9b47ca3ca4bca69de8bc69cea5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelTransferPolicy</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a483386f91852b03cda2763067af64812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseRangeType</type>
      <name>rhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a869722b290a67fa93ddf17a3faf21af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseDomainType</type>
      <name>lhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a4b4c1b7ece3b7a7d785b458161ac73a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt;</type>
      <name>operator_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a73199de2406818fabd11b4377f008235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LevelTransferPolicy&lt; O, O &gt;</name>
    <filename>a02559.html</filename>
    <member kind="typedef">
      <type>O</type>
      <name>FineOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa4ace1314e18bc180f2bb9265728a1e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::range_type</type>
      <name>FineRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a1c8a4baff865e072806df0a2b51a657f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::domain_type</type>
      <name>FineDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>af319a221a494d42eb1624805fe217ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>CoarseOperatorType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a057e5f22a8287e7e783cac63d40148d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::range_type</type>
      <name>CoarseRangeType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a378e47c0041f0d781fa278290821d946</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::domain_type</type>
      <name>CoarseDomainType</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>aa6f289a761b8488aa0100854d34461d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt; &amp;</type>
      <name>getCoarseLevelOperator</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a95431e884f8eb57d0fc591fbfd9fdb87</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseRangeType &amp;</type>
      <name>getCoarseLevelRhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a3c7cb6e391a2ae52b14b8ef1d01d4478</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoarseDomainType &amp;</type>
      <name>getCoarseLevelLhs</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ad9b8ad8a8773b67e527f3c8fcdd827b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToCoarseLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a15e8c29206562eac2d0236abd6606e6b</anchor>
      <arglist>(const FineRangeType &amp;fineRhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>moveToFineLevel</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a9db4924006dda4303bd52e478074e56c</anchor>
      <arglist>(FineDomainType &amp;fineLhs)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>createCoarseLevelSystem</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a33edc3f4deed4939af9baa35c1c48437</anchor>
      <arglist>(const FineOperatorType &amp;fineOperator)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual LevelTransferPolicy *</type>
      <name>clone</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>ae77a7f9b47ca3ca4bca69de8bc69cea5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LevelTransferPolicy</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a483386f91852b03cda2763067af64812</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseRangeType</type>
      <name>rhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a869722b290a67fa93ddf17a3faf21af2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CoarseDomainType</type>
      <name>lhs_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a4b4c1b7ece3b7a7d785b458161ac73a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; CoarseOperatorType &gt;</type>
      <name>operator_</name>
      <anchorfile>a02559.html</anchorfile>
      <anchor>a73199de2406818fabd11b4377f008235</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LinearOperator</name>
    <filename>a01819.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>afdf74cc90b91fff5667616d5bf15c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ac77913fabbbe89fe873f5a968d7cc49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5d5218e9fb679ecd710c3e98f6994f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ad6c20f17cf2f3421cd388b2b60fd0fe3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a624e0c93085fcfe15f009454d5afb7df</anchor>
      <arglist>(field_type alpha, const X &amp;x, Y &amp;y) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearOperator</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a0e5b0d86c97b59d6c75977186e0c5540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>abe6e03b772c5b7a029fcf3f2231b92f3</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearOperator&lt; OP1::domain_type, OP1::range_type &gt;</name>
    <filename>a01819.html</filename>
    <member kind="typedef">
      <type>OP1::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>afdf74cc90b91fff5667616d5bf15c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OP1::range_type</type>
      <name>range_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ac77913fabbbe89fe873f5a968d7cc49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5d5218e9fb679ecd710c3e98f6994f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ad6c20f17cf2f3421cd388b2b60fd0fe3</anchor>
      <arglist>(const OP1::domain_type &amp;x, OP1::range_type &amp;y) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a624e0c93085fcfe15f009454d5afb7df</anchor>
      <arglist>(field_type alpha, const OP1::domain_type &amp;x, OP1::range_type &amp;y) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearOperator</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a0e5b0d86c97b59d6c75977186e0c5540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>abe6e03b772c5b7a029fcf3f2231b92f3</anchor>
      <arglist>() const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>LinearOperator&lt; X, X &gt;</name>
    <filename>a01819.html</filename>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>afdf74cc90b91fff5667616d5bf15c60e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ac77913fabbbe89fe873f5a968d7cc49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a5d5218e9fb679ecd710c3e98f6994f19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>ad6c20f17cf2f3421cd388b2b60fd0fe3</anchor>
      <arglist>(const X &amp;x, X &amp;y) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a624e0c93085fcfe15f009454d5afb7df</anchor>
      <arglist>(field_type alpha, const X &amp;x, X &amp;y) const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LinearOperator</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>a0e5b0d86c97b59d6c75977186e0c5540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01819.html</anchorfile>
      <anchor>abe6e03b772c5b7a029fcf3f2231b92f3</anchor>
      <arglist>() const=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LoopSolver</name>
    <filename>a02735.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02735.html</anchorfile>
      <anchor>a4dc4fe89a41de2aaee395ade4ac96e7c</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02735.html</anchorfile>
      <anchor>a4fb95af50c6a78e79bd35e624b38eea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatMultMatResult</name>
    <filename>a01651.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</name>
    <filename>a01659.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>k</templarg>
    <templarg>m</templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type, std::allocator&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type &gt; &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gabcfbc6e1235402605c661d22c2daa52e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</name>
    <filename>a01655.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>k</templarg>
    <templarg>m</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; T, n, m &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0f9c86740af13d095856c4dad92dd1d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Matrix</name>
    <filename>a01451.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aacbb31c47cff715c9cd80819905f8a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>block_type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ad1305a3b5bfe5883f0cf1ac871887fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a1603f2b5da405059c7254c6d51f659f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixImp::DenseMatrixBase&lt; T, A &gt;::window_type</type>
      <name>row_type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae52c98f6591ac55dbe50aa4242506c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a271b96fc66a2daec66c25d827e19f52f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixImp::DenseMatrixBase&lt; T, A &gt;::Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>afe5ea934fc064515b78891ad623aa342</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a6b5e73de34bc4f8c44a6b0f9d380bef8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixImp::DenseMatrixBase&lt; T, A &gt;::ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a398b8f81d68ee7a34a381451b5a4d4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::const_iterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>abd4dbd77caee12c3ebd5291f341c34a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a5041f4a60b255129aa7fff2a32d1955e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>afb897f21588c5d92e914559415722b8c</anchor>
      <arglist>(size_type rows, size_type cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSize</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a40bf97c14ba14f31e28c0b78a3471c41</anchor>
      <arglist>(size_type rows, size_type cols)</arglist>
    </member>
    <member kind="function">
      <type>RowIterator</type>
      <name>begin</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa9c848bc4b441bd6cc6d6b2edcbb5bb6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowIterator</type>
      <name>end</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a7e87368b3c6cc8884c37ea20a5e6f753</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a4c76f8321cc6134aa505255c50fc0880</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RowIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a4c15d37d1c54472d84cfe156605ba4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstRowIterator</type>
      <name>begin</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa3f1dd3bddec70398a73f9f3945f35e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstRowIterator</type>
      <name>end</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a82879114cb769a2453d639931a1fc982</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstRowIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a6e1cbe0f6e1b0cdff751e9610919ab40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstRowIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>afb6c68dab86d34f16f4da17c38cb7f2c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2d852632246134368a3c8775963da9da</anchor>
      <arglist>(const field_type &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>row_type</type>
      <name>operator[]</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a8de77ef615d02e92cd21396f218b28ae</anchor>
      <arglist>(size_type row)</arglist>
    </member>
    <member kind="function">
      <type>const row_type</type>
      <name>operator[]</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a7f05b7c49f5a295f3c80a4bb61f026dc</anchor>
      <arglist>(size_type row) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>af488f2e97699ed6ec6597869012465dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ad0c257b6f61f0822ddf7dcd5aac9efd7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>afb744f6d7063c1532bc8990b5045f033</anchor>
      <arglist>(const field_type &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>Matrix&lt; T &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a3648c7a6ab2c6246aafdacd97d99db29</anchor>
      <arglist>(const field_type &amp;scalar)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae6d7d1c0ab626433490111c6b0de8ad1</anchor>
      <arglist>(const Matrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a759f66cebad019dafe7d7ef995cb9ce9</anchor>
      <arglist>(const Matrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>Matrix</type>
      <name>transpose</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a29efbcc869ca7da30095c9004f3ecbc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a38ffd4e50d933b5a5aaad4f7a1baf3ab</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a33739427a7086fcfb71a701b5fd93397</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a34386a7a625c93a9f0ccb80a3d1c53d3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a916189d6514d4a00f64bd6c456718f75</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a2105a643d18415ceba998a42e9ff273a</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>adc3b3506b05ebe7b2cf42421bee615c5</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae51e9e8c17120c2d0a1473d9f52f00cc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae9101d2ff8ac0f62f12160c076d22324</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aeb81d87fc1d7507e5e3adb80396c5a0e</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa6b0d280f8ede22ddda4e023a7978978</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a1fe9d17eb002144183120c3b652e7a72</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a1e2bb14d269d8735ea886e48701be2c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ae4933c2e6f925ef976a14f39e2ac3d1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a62e513f2c2793010bf21ba5dda440199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa248030d90c7d861d6227e78d32d38a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a62e513f2c2793010bf21ba5dda440199</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; ft &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>aa248030d90c7d861d6227e78d32d38a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a3efee6ecf73a85904f1ea6c4e2997358</anchor>
      <arglist>([[maybe_unused]] size_type i, [[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>blocklevel</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>ac2e784f461e0593dc3e8bf908b9cfc97</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MatrixImp::DenseMatrixBase&lt; T, A &gt;</type>
      <name>data_</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a27d815a8dd3afe8f285b3ed94017e6d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>cols_</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a059663623cee31d80433cd9be1ab89d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend Matrix&lt; T &gt;</type>
      <name>operator*</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>acf819da84eef44416f50951d1f2a51e2</anchor>
      <arglist>(const Matrix&lt; T &gt; &amp;m1, const Matrix&lt; T &gt; &amp;m2)</arglist>
    </member>
    <member kind="friend">
      <type>friend Y</type>
      <name>operator*</name>
      <anchorfile>a01451.html</anchorfile>
      <anchor>a85834dff6e28eae497892ba48d310097</anchor>
      <arglist>(const Matrix&lt; T &gt; &amp;m, const X &amp;vec)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixAdapter</name>
    <filename>a01827.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::AssembledLinearOperator</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>affc7b346d6e1565fd6d7977fffc0ea77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a706dd6fb869011909aae82164b25019b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a38f8dec99a1bdc40a1ad6876308bce67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a7ec6a2b57c242b81cff2cd95c482b1ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAdapter</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a2ab266deff6a09006a50d1fa34bfaac4</anchor>
      <arglist>(const M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixAdapter</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a24cba807af21639c2c19434fbdfc1e1d</anchor>
      <arglist>(std::shared_ptr&lt; const M &gt; A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ab3976a20eda9f438f1be0fbc9ac93e5b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>a322562d474295f40aa01a1f1769c1fa5</anchor>
      <arglist>(field_type alpha, const X &amp;x, Y &amp;y) const override</arglist>
    </member>
    <member kind="function">
      <type>const M &amp;</type>
      <name>getmat</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>ad9c290c55d02d7f606bbf18599a4bdc3</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01827.html</anchorfile>
      <anchor>aa3dc68afdcef43c78c6e4faab2c3cce8</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::MatrixAdapterArgs</name>
    <filename>a02155.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MatrixAdapterArgs</name>
      <anchorfile>a02155.html</anchorfile>
      <anchor>a44bd44eb25cd3bee34b4843e8b84c74b</anchor>
      <arglist>(std::shared_ptr&lt; M &gt; matrix, const SequentialInformation)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; M &gt;</type>
      <name>matrix_</name>
      <anchorfile>a02155.html</anchorfile>
      <anchor>af040f2a65b8cbdbab60d6601d3671ee3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixBlockError</name>
    <filename>a01399.html</filename>
    <member kind="variable">
      <type>int</type>
      <name>r</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>af8fd88a1b3316e093d7a0640d0eaf40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>c</name>
      <anchorfile>a01399.html</anchorfile>
      <anchor>a2592e2f90dbc488e2737faa36960a3d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixCopyRowSizeGatherScatter</name>
    <filename>a01707.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommMatrixRowSize&lt; M, RI &gt;</type>
      <name>Container</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>acea7fcd12d02d4e2347eb7a908e1174d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const M::size_type</type>
      <name>gather</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a0aaf16f3e75df392472546a5d8632ef5</anchor>
      <arglist>(const Container &amp;cont, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01707.html</anchorfile>
      <anchor>a572149c38955abf03b419922769f433d</anchor>
      <arglist>(Container &amp;cont, const typename M::size_type &amp;rowsize, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension</name>
    <filename>a01139.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>rowdim</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>ad7ef3568ded1efb7cb0e16c97f33723b</anchor>
      <arglist>(const M &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>coldim</name>
      <anchorfile>a01139.html</anchorfile>
      <anchor>ab0b7252d626ff1b7d42ef13c30a91e47</anchor>
      <arglist>(const M &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; BCRSMatrix&lt; B, TA &gt; &gt;</name>
    <filename>a01743.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; B, TA &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a344faeb0578da880aa077236992e06dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::block_type</type>
      <name>block_type</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a71f6a4e0bbf966a21480bde8b217dff8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a94123debc2c616bf752f5c3fa996a92f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>ab8924bda317fc508085625026d959424</anchor>
      <arglist>(const Matrix &amp;A, size_type i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a769911ce5e61bcd10292522a892b50e8</anchor>
      <arglist>(const Matrix &amp;A, size_type c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>ab9c35272ecd2770a1601574be10d6c1f</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01743.html</anchorfile>
      <anchor>a6f4ea9c524edc57529726aaec7ed71a6</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, TA &gt; &gt;</name>
    <filename>a01747.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;,TA &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a4c844947c6d83ec0a64cff6130c758fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a2c41e14b56f5435cb4a363c6c250c27f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a12130fc62052c8ef138dd41102ef448d</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>ab6cd51e323496aa227b03b228120a2af</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a173acc90caaedaf0fad39f2beddfa72f</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01747.html</anchorfile>
      <anchor>a0ed0055fd2791011a079956b185a5957</anchor>
      <arglist>(const Matrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; DiagonalMatrix&lt; K, n &gt; &gt;</name>
    <filename>a01763.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>DiagonalMatrix&lt; K, n &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aadb5a436238d15afe2d3c86a5e5265e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a4bc1da0cabf9f85811d78e507fcf4612</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aed24f8d61cb87cd6b3e856cb00fa3b5d</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a3626e50fced56e2665add2ac86ed57b3</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>aaa478346810e2e80bc3350c918294153</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01763.html</anchorfile>
      <anchor>a9af5352a14ac840225d540b980ef8254</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; Dune::DynamicMatrix&lt; T &gt; &gt;</name>
    <filename>a01755.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::DynamicMatrix&lt; T &gt;</type>
      <name>MatrixType</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>ad21d51d27d05a6b6ed90ae07924357ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixType::size_type</type>
      <name>size_type</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a83e7810a4b7eb52ee45472f3dd1c2720</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a7b6751d3444c27e1826f3942550f51a5</anchor>
      <arglist>(const MatrixType &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a983c894060491ba97b7a03b3b147f4df</anchor>
      <arglist>(const MatrixType &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a21e223be3761d7e5c4a75c6bfa606f85</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01755.html</anchorfile>
      <anchor>a13ce3c744fef3a68960c8f307aabb65e</anchor>
      <arglist>(const MatrixType &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; FieldMatrix&lt; K, n, m &gt; &gt;</name>
    <filename>a01751.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; K, n, m &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a895ed969cd81fc2869c4ece184226d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a4f8501cd0d15710aebe6b342e68a5be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a0fc46ebaf827e642f9af424a1da7d1cd</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>aad811bd69036648f2f0381c91a63317c</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>aebabbd3491f3e4af53b8f1680a3cea46</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01751.html</anchorfile>
      <anchor>a2a40c70747cf8751ffa5368a2851b660</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; Matrix&lt; B, TA &gt; &gt;</name>
    <filename>a01739.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename Matrix&lt; B, TA &gt;::block_type</type>
      <name>block_type</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>ad3482152321bebf45d2b3ff5811ab994</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Matrix&lt; B, TA &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>ac6d9db40acba2b86031ea68b4ded5ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>a3e5aeb851a55e8fc26be5cafe7c22ada</anchor>
      <arglist>(const Matrix&lt; B, TA &gt; &amp;A, size_type i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>ac9408519fe5faaf055ca672272c6ef20</anchor>
      <arglist>(const Matrix&lt; B, TA &gt; &amp;A, size_type c)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>a75dd183ae504df1c93fde1df50567b77</anchor>
      <arglist>(const Matrix&lt; B, TA &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01739.html</anchorfile>
      <anchor>a5a00aaed44bd29d5e1426bf3c0b9be90</anchor>
      <arglist>(const Matrix&lt; B, TA &gt; &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; Matrix&lt; FieldMatrix&lt; K, n, m &gt;, TA &gt; &gt;</name>
    <filename>a01759.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Matrix&lt; FieldMatrix&lt; K, n, m &gt;, TA &gt;</type>
      <name>ThisMatrix</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>aaa8ab85b4a73c81a88c1a14944ad9bf3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ThisMatrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>ae5b475831fa2f05d1cbaac195e8ddb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>ad35b3c984ef9a7b1580df29bb4a379ed</anchor>
      <arglist>(const ThisMatrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>ab48899785eb089975432c2dd1efc6a99</anchor>
      <arglist>(const ThisMatrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a6899c4d4c1e04deb8745c816067908a0</anchor>
      <arglist>(const ThisMatrix &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01759.html</anchorfile>
      <anchor>a289e2d2bd806c40d8f39be017ace5a35</anchor>
      <arglist>(const ThisMatrix &amp;A)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixDimension&lt; ScaledIdentityMatrix&lt; K, n &gt; &gt;</name>
    <filename>a01767.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>ScaledIdentityMatrix&lt; K, n &gt;</type>
      <name>Matrix</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>aac09a715e6f8fd50cac84377176f30b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a6bfb41f9881c9bfbc77f18e738a5fc58</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a20e17b174b3151e26305c989527eeed1</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a65100079fb2e3e6850c4b83b6b701990</anchor>
      <arglist>(const Matrix &amp;, size_type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>rowdim</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>acd709a162a483f0926853298737df737</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static size_type</type>
      <name>coldim</name>
      <anchorfile>a01767.html</anchorfile>
      <anchor>a16fff4479ed40baa3e277e86254bf137</anchor>
      <arglist>(const Matrix &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::MatrixGraph</name>
    <filename>a02279.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::Amg::MatrixGraph::EdgeIteratorT</class>
    <class kind="class">Dune::Amg::MatrixGraph::VertexIteratorT</class>
    <member kind="enumvalue">
      <name>mutableMatrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a64084875d2fd184079f5892dc675b3fcaed027ca662c0688313729889f48bc46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a42666462149491c680fa6c558b7323b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>MutableMatrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac35f2987142da48003023832fd976703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::block_type</type>
      <name>Weight</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac35d23495d6a44edb732dc3ef796da49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::size_type</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a594cca89416b534b0b1a196c39684447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a58193efcda473147fe4a3d85fdedc38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; const MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa09d463bdf24dcddac52b4a7cbbaacf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>EdgeIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac9f0e95986eee4720bb019d578f3aa28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; const MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a4f7d6424fd8ccc9b6275f08b06c59c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>VertexIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ad40b199f53ca05212bf9ebe4a134a2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mutableMatrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a64084875d2fd184079f5892dc675b3fcaed027ca662c0688313729889f48bc46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixGraph</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a13970306365ecf9de9cc46372ed9f035</anchor>
      <arglist>(Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixGraph</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a53886320f0887b5103eb19da843f7477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>begin</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aff8529fb89b316980d6b2d0839de3c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>end</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a29cf5bc163e2773ef630dcacc0fa14f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a4f78503e0fa4fd509195e14daab4dedf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a90cd6d89c07f99dfd39bebc927afafa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aaaf821f645a6145be3a5be271b66716b</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ad6c93d21aa32167c0d5269dd77c17775</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a7118ae7115fb3f64c93876724bb650a0</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a5824882f282f797fa89f3ced381d0aaa</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa5f42917aeb7fea5169815ac0a8cc885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa5ee105b6150fd56d2f7daeb812fb706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>abdc959065acd3368af2c3a309cac591a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a34f8aa269f9bfd28ef86c3dee50d3eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ae2fba87d0638371e03608a01b5885e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeDescriptor</type>
      <name>findEdge</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac34d058fc0a57e92f601f711cee8fbe5</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MatrixGraph&lt; const M &gt;</name>
    <filename>a02279.html</filename>
    <member kind="typedef">
      <type>const M</type>
      <name>Matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a42666462149491c680fa6c558b7323b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; const M &gt;::type</type>
      <name>MutableMatrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac35f2987142da48003023832fd976703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::block_type</type>
      <name>Weight</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac35d23495d6a44edb732dc3ef796da49</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::size_type</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a594cca89416b534b0b1a196c39684447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a58193efcda473147fe4a3d85fdedc38e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; const MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa09d463bdf24dcddac52b4a7cbbaacf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>EdgeIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac9f0e95986eee4720bb019d578f3aa28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; const MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a4f7d6424fd8ccc9b6275f08b06c59c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; MatrixGraph&lt; Matrix &gt; &gt;</type>
      <name>VertexIterator</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ad40b199f53ca05212bf9ebe4a134a2f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mutableMatrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a64084875d2fd184079f5892dc675b3fcaed027ca662c0688313729889f48bc46f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixGraph</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a13970306365ecf9de9cc46372ed9f035</anchor>
      <arglist>(Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixGraph</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a53886320f0887b5103eb19da843f7477</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>begin</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aff8529fb89b316980d6b2d0839de3c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a4f78503e0fa4fd509195e14daab4dedf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>end</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a29cf5bc163e2773ef630dcacc0fa14f7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a90cd6d89c07f99dfd39bebc927afafa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aaaf821f645a6145be3a5be271b66716b</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a7118ae7115fb3f64c93876724bb650a0</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ad6c93d21aa32167c0d5269dd77c17775</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a5824882f282f797fa89f3ced381d0aaa</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa5f42917aeb7fea5169815ac0a8cc885</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>matrix</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>aa5ee105b6150fd56d2f7daeb812fb706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>abdc959065acd3368af2c3a309cac591a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>a34f8aa269f9bfd28ef86c3dee50d3eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ae2fba87d0638371e03608a01b5885e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeDescriptor</type>
      <name>findEdge</name>
      <anchorfile>a02279.html</anchorfile>
      <anchor>ac34d058fc0a57e92f601f711cee8fbe5</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::MatrixHierarchy</name>
    <filename>a02375.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M</type>
      <name>MatrixOperator</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>af74ed9452d007de1b3b930f8e2fa91ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixOperator::matrix_type</type>
      <name>Matrix</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ae548027d082c5a5dee4617922e824d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PI</type>
      <name>ParallelInformation</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a7055367d7a4da283a81703b79f2c81d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>Allocator</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a8d76f6398ccc9596d184fde35be2cdeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::AggregatesMap&lt; typename MatrixGraph&lt; Matrix &gt;::VertexDescriptor &gt;</type>
      <name>AggregatesMap</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ad92755a2544b62984bc8ea72013b662d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::Hierarchy&lt; MatrixOperator, Allocator &gt;</type>
      <name>ParallelMatrixHierarchy</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a7a28a2f0bbc896ba3a211f3ffb9fde92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::Hierarchy&lt; ParallelInformation, Allocator &gt;</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a361b7ff74b1d5160b1c825adfb020a32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; AggregatesMap * &gt;</type>
      <name>AAllocator</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a34adcea02d07f4f47df3e5a041dea3fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; AggregatesMap *, AAllocator &gt;</type>
      <name>AggregatesMapList</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a6398c1c231e62776678ea80c8b9dc438</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RedistributeInformation&lt; ParallelInformation &gt;</type>
      <name>RedistributeInfoType</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>a99f9023528309325b52806cd5e42f74e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; RedistributeInfoType &gt;</type>
      <name>RILAllocator</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ab9d09f9bb3fe9dd679d32d54c7d139f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::list&lt; RedistributeInfoType, RILAllocator &gt;</type>
      <name>RedistributeInfoList</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>ac119523880a5b83b83db6ef73dc68b5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacc847ee00d14ceea29b0ab06c3f47cbe</anchor>
      <arglist>(std::shared_ptr&lt; MatrixOperator &gt; fineMatrix, std::shared_ptr&lt; ParallelInformation &gt; pinfo=std::make_shared&lt; ParallelInformation &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaffc3a56a8c826be4a7a8e600d079850c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae078119494cbaef8bc37e2f01f83841a</anchor>
      <arglist>(const T &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateGalerkin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga98f19e8c83876884bcc81b0b62e84124</anchor>
      <arglist>(const F &amp;copyFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac145eb0ee4712d7d47ddad2acd2e60cf</anchor>
      <arglist>(Hierarchy&lt; BlockVector&lt; V, BA &gt;, TA &gt; &amp;hierarchy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenSmoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf5023ede2f8395dad11ca7180a3166f1</anchor>
      <arglist>(Hierarchy&lt; S, TA &gt; &amp;smoothers, const typename SmootherTraits&lt; S &gt;::Arguments &amp;args) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bc239f239436e80b59aa5083010f0db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799b63cd9479c3f2cee23c97099790da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga22f9ba50af24bac6ac1373e8df08b9e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBuilt</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0aaad1d1d0c64f7c2e9ee2c2afb93c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelMatrixHierarchy &amp;</type>
      <name>matrices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga702880c61ac502bf364fa17edf8e5aa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelInformationHierarchy &amp;</type>
      <name>parallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5696a76fd896e8d4abf163dc0e5d5e7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const AggregatesMapList &amp;</type>
      <name>aggregatesMaps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga003ecca2da8744ae1fe9a2b4bf00b08e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RedistributeInfoList &amp;</type>
      <name>redistributeInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e6ac7d088228cb323fb3edbcf5fa7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a02375.html</anchorfile>
      <anchor>aa048945dfeb3a6db9c27a2eafcc08b51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregatesOnFinest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafec7921eab9b62ed89be01893af9ee74</anchor>
      <arglist>(std::vector&lt; std::size_t &gt; &amp;data) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixIndexSet</name>
    <filename>a01455.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a7fff2aaed2a329e528f17ce209aa80b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixIndexSet</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a3a3f9e3d8e32529322f512bd2bbf228d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixIndexSet</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>ac3f63c4a962adaec908d70ab00eb5123</anchor>
      <arglist>(size_type rows, size_type cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a159b60431eaf52fdb3f95126dd60afd1</anchor>
      <arglist>(size_type rows, size_type cols)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a3e3c8cb08310b885f6975b74e1ab5ca0</anchor>
      <arglist>(size_type i, size_type j)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>ad863ea255d01996e9e2932323292686e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rows</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a727562d033078439901481a7614094bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rowsize</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>ad5d5092fcb73392c0982b1a518415538</anchor>
      <arglist>(size_type row) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>import</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a56f71f65f250147e3ad5a4b6bc1c66ba</anchor>
      <arglist>(const MatrixType &amp;m, size_type rowOffset=0, size_type colOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exportIdx</name>
      <anchorfile>a01455.html</anchorfile>
      <anchor>a9cb618648d2e5dccab3b5a49d52cddbd</anchor>
      <arglist>(MatrixType &amp;matrix) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MatrixMarketFormatError</name>
    <filename>a01579.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixRowGatherScatter</name>
    <filename>a01715.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>I::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a197e220a0fc73184b8dc40f5e1713597</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CommMatrixRow&lt; M, I &gt;</type>
      <name>Container</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>af18eabbd20505834434213429f53e37e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a72a7239d7b0fa7dc3e6fafc3cf49a4cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; GlobalIndex, typename M::block_type &gt;</type>
      <name>Data</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>aaa91fe76ea79ab4f235daea61c6a9e09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Data &amp;</type>
      <name>gather</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a4c52e3701b98d72d32eb1e01430f1538</anchor>
      <arglist>(const Container &amp;cont, std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>ab400cf0cc27a2c17d355567c3be339c9</anchor>
      <arglist>(Container &amp;cont, const Data &amp;data, std::size_t i, [[maybe_unused]] std::size_t j)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ColIter</type>
      <name>col</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>ae35091e1d76360372fb3a7f9c61036c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static Data</type>
      <name>datastore</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a24c08a786a8f1b710a55d7aa4e1e235b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GlobalIndex</type>
      <name>numlimits</name>
      <anchorfile>a01715.html</anchorfile>
      <anchor>a32a14cd044929e7367ac71dbb80be926</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixRowSizeGatherScatter</name>
    <filename>a01703.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommMatrixRowSize&lt; M, RI &gt;</type>
      <name>Container</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a7cbaf97e90b93a1c663b53d571ea4098</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const M::size_type</type>
      <name>gather</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a1c56e60b52d648c3d505ace35b3da30f</anchor>
      <arglist>(const Container &amp;cont, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01703.html</anchorfile>
      <anchor>a0c8127e0364720f772721fa5734de4df</anchor>
      <arglist>(Container &amp;cont, const typename M::size_type &amp;rowsize, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixSparsityPatternGatherScatter</name>
    <filename>a01711.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>I::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a8a6192ac23e723597e13906e09289e2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CommMatrixSparsityPattern&lt; M, I &gt;</type>
      <name>Container</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a16bc2273dcee1ee4bbf0a6e040801d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a0a940c0793176936cd00bd1b8d0a6bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GlobalIndex &amp;</type>
      <name>gather</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a8c09e9c89ce6b38eb5d4f5294c91fde3</anchor>
      <arglist>(const Container &amp;cont, std::size_t i, std::size_t j)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>acae9e48b051b8c209d96addbf04876cd</anchor>
      <arglist>(Container &amp;cont, const GlobalIndex &amp;gi, std::size_t i, [[maybe_unused]] std::size_t j)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static ColIter</type>
      <name>col</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a79c59a23903e2fc70a4d91cf37824285</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static GlobalIndex</type>
      <name>numlimits</name>
      <anchorfile>a01711.html</anchorfile>
      <anchor>a73f9ba3ba9e1b60f0ea906720889434d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::MatrixValuesSetter</name>
    <filename>a01551.html</filename>
    <templarg></templarg>
    <templarg>brows</templarg>
    <templarg>bcols</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>a9866801a68a49ea257874540510d0297</anchor>
      <arglist>(const std::vector&lt; std::set&lt; IndexData&lt; D &gt; &gt; &gt; &amp;rows, BCRSMatrix&lt; T &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01551.html</anchorfile>
      <anchor>adfb9cdf16504001ba374072cb293badb</anchor>
      <arglist>(const std::vector&lt; std::set&lt; IndexData&lt; D &gt; &gt; &gt; &amp;rows, BCRSMatrix&lt; FieldMatrix&lt; T, brows, bcols &gt; &gt; &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::MatrixValuesSetter&lt; PatternDummy, brows, bcols &gt;</name>
    <filename>a01555.html</filename>
    <templarg>brows</templarg>
    <templarg>bcols</templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01555.html</anchorfile>
      <anchor>a9eb002a6615b5bd6a7cc752d8f94fed4</anchor>
      <arglist>(const std::vector&lt; std::set&lt; IndexData&lt; PatternDummy &gt; &gt; &gt; &amp;rows, M &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MINRESSolver</name>
    <filename>a02751.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02751.html</anchorfile>
      <anchor>a05aa4f1d7d2ce815c9018a511aa74536</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02751.html</anchorfile>
      <anchor>a0c31d08a36b0c3d37953e347e62aa03f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header</name>
    <filename>a01503.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; FieldMatrix&lt; T, i, j &gt;, A &gt; &gt;</name>
    <filename>a01519.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>i</templarg>
    <templarg>j</templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, i, j &gt;, A &gt;</type>
      <name>M</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>acb979308666d9af189430a2ffdf24c9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01519.html</anchorfile>
      <anchor>af1a30d1c09124cc226acd5770675f90d</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; T, A &gt; &gt;</name>
    <filename>a01515.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; T, A &gt;</type>
      <name>M</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>a2b8965b153b23499bb0450cd1adc11b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01515.html</anchorfile>
      <anchor>ae861e57baa045e30feee13f1f1a3e8bb</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &gt;</name>
    <filename>a01511.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>i</templarg>
    <member kind="typedef">
      <type>BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt;</type>
      <name>M</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>a489209b1c14872850930b071b416fd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01511.html</anchorfile>
      <anchor>adb68dc4e9cbf68f0d6ee0d00c8823bb9</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; T, A &gt; &gt;</name>
    <filename>a01507.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BlockVector&lt; T, A &gt;</type>
      <name>M</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>ad6fa37e10b4c33c68f339f5b07440ad4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01507.html</anchorfile>
      <anchor>a4045fe7bcc0f127473f9ccc331e99f2a</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldMatrix&lt; T, i, j &gt; &gt;</name>
    <filename>a01523.html</filename>
    <templarg></templarg>
    <templarg>i</templarg>
    <templarg>j</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; T, i, j &gt;</type>
      <name>M</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>ab3f8e44ed7dc69b2eb39a326312d007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01523.html</anchorfile>
      <anchor>a24fe4d738f0d171ead22e345d9604c09</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldVector&lt; T, i &gt; &gt;</name>
    <filename>a01527.html</filename>
    <templarg></templarg>
    <templarg>i</templarg>
    <member kind="typedef">
      <type>FieldVector&lt; T, i &gt;</type>
      <name>M</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>adbd19e758302931e9736bfde401625f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01527.html</anchorfile>
      <anchor>ac95a40d4dd1ad9085f67c2049c1470d1</anchor>
      <arglist>(std::ostream &amp;os, const M &amp;m)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_header_printer</name>
    <filename>a01483.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_header_printer&lt; BCRSMatrix&lt; T, A &gt; &gt;</name>
    <filename>a01487.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01487.html</anchorfile>
      <anchor>adf6b2e27c54efe2de08fb557fece56ba</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_header_printer&lt; BlockVector&lt; B, A &gt; &gt;</name>
    <filename>a01491.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01491.html</anchorfile>
      <anchor>a5d4896e1c65d4b34f3afd65795f9b9b4</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_header_printer&lt; FieldMatrix&lt; T, i, j &gt; &gt;</name>
    <filename>a01499.html</filename>
    <templarg></templarg>
    <templarg>i</templarg>
    <templarg>j</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01499.html</anchorfile>
      <anchor>a707f7688daa95068fce31815eab77716</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_header_printer&lt; FieldVector&lt; T, j &gt; &gt;</name>
    <filename>a01495.html</filename>
    <templarg></templarg>
    <templarg>j</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>print</name>
      <anchorfile>a01495.html</anchorfile>
      <anchor>a4660a9026387f41b19ffd839acec8fb1</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_multipliers</name>
    <filename>a01567.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; B, A &gt; &gt;</name>
    <filename>a01571.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a154b18b54eefc37b6b1aa58deb325855a80e992f5a4f0122cae781d7895ac888d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a154b18b54eefc37b6b1aa58deb325855a19b8cf5ebb6cec5a12a4c18775a32937</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a154b18b54eefc37b6b1aa58deb325855a80e992f5a4f0122cae781d7895ac888d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01571.html</anchorfile>
      <anchor>a154b18b54eefc37b6b1aa58deb325855a19b8cf5ebb6cec5a12a4c18775a32937</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; FieldMatrix&lt; B, i, j &gt;, A &gt; &gt;</name>
    <filename>a01575.html</filename>
    <templarg></templarg>
    <templarg>i</templarg>
    <templarg>j</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab849bb16741db71307445efa2d2a9c0aa5da119f4010228ad778296430f722f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab849bb16741db71307445efa2d2a9c0aab1b22200d38568e3c12697cd16be80dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab849bb16741db71307445efa2d2a9c0aa5da119f4010228ad778296430f722f72</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01575.html</anchorfile>
      <anchor>ab849bb16741db71307445efa2d2a9c0aab1b22200d38568e3c12697cd16be80dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type</name>
    <filename>a01459.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a2af15f7500b2ca1ce08be55b0f221b5fa15affc9955b1cdef6345b4ef90b7c25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01459.html</anchorfile>
      <anchor>a2af15f7500b2ca1ce08be55b0f221b5fa15affc9955b1cdef6345b4ef90b7c25b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type&lt; double &gt;</name>
    <filename>a01467.html</filename>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01467.html</anchorfile>
      <anchor>a0e54aa4214e61146c5c19d81c9349c02a25c3f2d9c9923a7b35ea572c97af5099</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01467.html</anchorfile>
      <anchor>a0e54aa4214e61146c5c19d81c9349c02a25c3f2d9c9923a7b35ea572c97af5099</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>str</name>
      <anchorfile>a01467.html</anchorfile>
      <anchor>a9f32751153575084b74728c5b9d40a44</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type&lt; float &gt;</name>
    <filename>a01471.html</filename>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01471.html</anchorfile>
      <anchor>af3c8562f2a0b8145a9038ca74eb48649afa955cbfd8213ed33861cc1370032c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01471.html</anchorfile>
      <anchor>af3c8562f2a0b8145a9038ca74eb48649afa955cbfd8213ed33861cc1370032c49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>str</name>
      <anchorfile>a01471.html</anchorfile>
      <anchor>ac30f2e37ee70dc795ab0b7c4a0fb5f7b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type&lt; int &gt;</name>
    <filename>a01463.html</filename>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a805fa231e341982b795b2e8609fbf6dca821ea40228eb9229d6c662b297245220</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a805fa231e341982b795b2e8609fbf6dca821ea40228eb9229d6c662b297245220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>str</name>
      <anchorfile>a01463.html</anchorfile>
      <anchor>a3b452aef58d81ba727dfd9779a6f5d38</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a01475.html</filename>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a7bcb1f27a72563346a76189bd862981ea92f9c4c07cd33724601176545eeb047e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a7bcb1f27a72563346a76189bd862981ea92f9c4c07cd33724601176545eeb047e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>str</name>
      <anchorfile>a01475.html</anchorfile>
      <anchor>a7591943f0996da18b8cf89ec423415d2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; float &gt; &gt;</name>
    <filename>a01479.html</filename>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01479.html</anchorfile>
      <anchor>a1c61f312321f201f406a67ff0f4a0782ae993ed4480c7f2939a622c87d1eb5ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_numeric</name>
      <anchorfile>a01479.html</anchorfile>
      <anchor>a1c61f312321f201f406a67ff0f4a0782ae993ed4480c7f2939a622c87d1eb5ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>str</name>
      <anchorfile>a01479.html</anchorfile>
      <anchor>a62d6bf3878a51f20dd887e454e1c5359</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::MMHeader</name>
    <filename>a01531.html</filename>
    <member kind="function">
      <type></type>
      <name>MMHeader</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a73a634c9b630fbe1f1ae94d70383b594</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>MM_TYPE</type>
      <name>type</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a7369231c3a40df9e27b131960aa59f43</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MM_CTYPE</type>
      <name>ctype</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a8cc9f88aabe4e32fa3a98d3585da968a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MM_STRUCTURE</type>
      <name>structure</name>
      <anchorfile>a01531.html</anchorfile>
      <anchor>a1131cd0c61c79da856a685932f47ac12</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MultiplicativeAdder</name>
    <filename>a01887.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MultiplicativeAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</name>
    <filename>a01891.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>aae47cc62c59890b49ad57451d54795af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::decay_t&lt; decltype(Impl::asVector(std::declval&lt; T &gt;)))&gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a9e8cae7cc3223077b125254efb329516</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplicativeAdder</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga168a62b5b202ef08f67cb016096571d5</anchor>
      <arglist>(BlockVector&lt; T, A &gt; &amp;v, BlockVector&lt; T, A &gt; &amp;x, OverlappingAssigner&lt; S &gt; &amp;assigner_, const field_type &amp;relax_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga385efdb7af8bcdcd9afe46e6297d82fa</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaacf07a33120284d3626dc8853373235f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01891.html</anchorfile>
      <anchor>a9b3a2b1944d7aa9cf4ce2458c8c1f745</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MultiplicativeSchwarzMode</name>
    <filename>a01839.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockMatrix</name>
    <filename>a01179.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>MultiTypeBlockMatrix&lt; FirstRow, Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga061870c6667e40c8cd61bdfa0eb42d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga734a19380699255094cb759a76c4d154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FirstRow::field_type</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3696f7d6dd97ca70665d91e7bd18ae9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga76778529bea4352a6735da16227f2cb5</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) -&gt; decltype(std::get&lt; index &gt;(*this))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab63e3a3be738e8657af5aa9888777cd3</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) const -&gt; decltype(std::get&lt; index &gt;(*this))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga57e763009679e92fe30d9b705f9cb1f7</anchor>
      <arglist>(const T &amp;newval)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae204c0dd2644e91550032cc5521e784a</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3025f35607860f0e9054ae9784d398f1</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab75332b58bae9c16e6585c0e60a4492d</anchor>
      <arglist>(const MultiTypeBlockMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaed94aa63e6b78b173a4eb6efed3ce82a</anchor>
      <arglist>(const MultiTypeBlockMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1141a836363e468737c6321921fe866b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5e7eb2f99f0cd50335612b5c71c03159</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacd6ff951febb986470dd0af0d59d16e8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3d892f49ac37d9e916c939c8564abc5a</anchor>
      <arglist>(const AlphaType &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac4f5a5d99d6f1c194fb134740584e9ad</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gade1d9d36d0e1f33ffc5d067ce5e56719</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga150b6952b0afedf640e7d7379ce3afb3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga534c68afbe8acf5d5bea6cf5509b7241</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5012e91122151f271780bcbaa0ff98d8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1d88bc608cb53be44c54017cd5fcc1e8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga31e609be6d1b59557dbdd6acc8bc5aab</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>frobenius_norm2</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga651662a248765e5fbd1e02dd3dab854a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab31e222acd8039c0765e2a0a0a8c19b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>infinity_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga7774260b221076aa34b8166c23819e2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga63d0f62a0e54db2fb43b56bc5d156f05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga53053612d0cb59515ac8cbb14f2bb0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga6155c377f16a99ad9cc6c10161176f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>M</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacb8f9cf369fe8eaefe2edb0a9d096261</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockMatrix_Solver</name>
    <filename>a01787.html</filename>
    <templarg>I</templarg>
    <templarg>crow</templarg>
    <templarg>remain_row</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2e08545781ce5121abb0a30507ccc9e8</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga470fa97800ba67aaa29ed3aa2a78bd0b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5fb5cf8ab7d2d7730009a470f586b48b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga4ca0e53549d4aa73bba12c637b7e061a</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2fc29dc1e86b51beb3b68c08c443fb51</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaf84514b5975e5686b15ac6881ebc07fe</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0776bf5a7144807c79eb4736d6ec658b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gabe2e1e2efb05a5141c87a3f3a01a7324</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockMatrix_Solver&lt; I, crow, 0 &gt;</name>
    <filename>a01799.html</filename>
    <templarg>I</templarg>
    <templarg>crow</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2bbb69d1b2576f255e7b91bc6d20ffe3</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac34b1e42ede12ccfb7c04dd8da6146cc</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga92f469dc060f385a475a819cb1bb7c4e</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga6399ccd36e1e8547e56c79d94a92904b</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockMatrix_Solver_Col</name>
    <filename>a01791.html</filename>
    <templarg>I</templarg>
    <templarg>crow</templarg>
    <templarg>ccol</templarg>
    <templarg>remain_col</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calc_rhs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5f64668baf8997b23358e55e95d764bd</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, Trhs &amp;b, const K &amp;w)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockMatrix_Solver_Col&lt; I, crow, ccol, 0 &gt;</name>
    <filename>a01795.html</filename>
    <templarg>I</templarg>
    <templarg>crow</templarg>
    <templarg>ccol</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calc_rhs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5c940f4393f039c5af3e8fce4ab8d7c5</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, Trhs &amp;, const K &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultiTypeBlockVector</name>
    <filename>a01175.html</filename>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga17d881262afa1aa861f52babf002952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiTypeBlockVector&lt; Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga80d6300e6efb43055959582f2560c122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaed0d81ed38fca79b594d0261b968aecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1d9c39ad247096d52029634f0640ddfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga4c4e7fb7c09e86d9bf60fe1e09a5a307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple_element&lt; index, TupleType &gt;::type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga32491f3ef6bfad3d6396462f3d6c320c</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable)</arglist>
    </member>
    <member kind="function">
      <type>const std::tuple_element&lt; index, TupleType &gt;::type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga41c7a9caa96f16cf811093705f216172</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0a76738883a9af45465c402036878946</anchor>
      <arglist>(const T &amp;newval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacf291ba91ab8b90ca4f95be121b81ad4</anchor>
      <arglist>(const type &amp;newv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga94ddb64e2235a1010935efc8819f397e</anchor>
      <arglist>(const type &amp;newv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga637a2f8aae6e99c7467d9824e6747c1f</anchor>
      <arglist>(const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga76fa7c23fa1d8f3cca52f004c208a22d</anchor>
      <arglist>(const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>operator*</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac696f7faa62b5358a88ccb4b130a2f25</anchor>
      <arglist>(const type &amp;newv) const</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>dot</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5a4be70edff5235eed8c62f5b1b875b7</anchor>
      <arglist>(const type &amp;newv) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>one_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga8b181fad5c9190ce7c7bad91ddc8d6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>one_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae57c5c9949da4f32508943ea455fda17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gad9dc50c3e3f8f11db0d3b8230b1bf120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae1971dca530d97c0ee8f0ffe2c6cf1dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac93eded765b13d99cb4f4380884db447</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac3cc6ad4e474e76da8bddbfde843c563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga676a3ce106b4bba806158b33411d2809</anchor>
      <arglist>(const Ta &amp;a, const type &amp;y)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga300241c93ae37f3647f400c577660c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga26543a2b5d62ec9fee4b9327723d5385</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NonoverlappingBlockPreconditioner</name>
    <filename>a01815.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; P::domain_type, P::range_type &gt;</base>
    <member kind="typedef">
      <type>P::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>aec8182e377535028725a072423811f1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>P::range_type</type>
      <name>range_type</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a530f155e2c9176cfa0bc8008b76feb23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>abf34df07a029a2daa6815366f8838bdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingBlockPreconditioner</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a1f5313b94ed8eaa717356ef56c3184b6</anchor>
      <arglist>(P &amp;p, const communication_type &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingBlockPreconditioner</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a7b8d8fc369c32b67b1dbb024df231c55</anchor>
      <arglist>(const std::shared_ptr&lt; P &gt; &amp;p, const communication_type &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ac5e2e6c191befe4abe1231191835e9c9</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a2f44b26971cf8c39773e0f8fa3da5c11</anchor>
      <arglist>(domain_type &amp;v, const range_type &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>ac99c1d24707a4fa4ff7c20f246cb13a1</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a884f451d74e93619061527b466df8505</anchor>
      <arglist>(domain_type &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a2c321962c8c5225da8d7d6001c1b485c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>Amg::ConstructionTraits&lt; NonoverlappingBlockPreconditioner&lt; C, P &gt; &gt;</name>
      <anchorfile>a01815.html</anchorfile>
      <anchor>a6dc92e3efb11397995580e62f82c3408</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NonoverlappingSchwarzOperator</name>
    <filename>a01807.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::AssembledLinearOperator</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aabd3b0c0deb7f99d7c7ccbde7984d783</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a5d7b92ba614aaef7716d0b64373f1b2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aa02eca54fe1d1bdf913f97ac0ab3efd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ae067187aa80229915ac531766e45de67</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a04fec52119ef78a9ad69dfddbba71f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::PIS</type>
      <name>PIS</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a00b75c50867554fdc7ab049aebbd709a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::RI</type>
      <name>RI</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a3a29a9fad4e9543de7a16f78836d85a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RI::RemoteIndexList</type>
      <name>RIL</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ad4a5e5f9f2838b20bc3ede2cfe56776a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RI::const_iterator</type>
      <name>RIIterator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>af617dabdbc031b35843fd9640011a7e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RIL::const_iterator</type>
      <name>RILIterator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a93ff170daa206bcd6f3d3f2a24df7fe8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::ConstColIterator</type>
      <name>ColIterator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a41164f33ad50a1246c9aad4b37a4abfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M::ConstRowIterator</type>
      <name>RowIterator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>abc69f0c520072ea8c343cf0261c268ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; int, int &gt;</type>
      <name>MM</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a941c9d5980e041048291eb0e9ab99b82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::multimap&lt; int, std::pair&lt; int, RILIterator &gt; &gt;</type>
      <name>RIMap</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a239711df43c0db3d9b0ba3152ccbd7ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RIMap::iterator</type>
      <name>RIMapit</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a7e47f818b6b3742e391bd7f265fd22ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingSchwarzOperator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>ae56b9ec7bd79e095c65527da9adecfc6</anchor>
      <arglist>(const matrix_type &amp;A, const communication_type &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingSchwarzOperator</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a3d6392393ee81bb2988d29df8ed7f738</anchor>
      <arglist>(std::shared_ptr&lt; const matrix_type &gt; A, const communication_type &amp;com)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a59294cce8ed91744122f304daf83104a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>acdcc9e3f3fd7b173fada2cc9707ffc63</anchor>
      <arglist>(field_type alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const matrix_type &amp;</type>
      <name>getmat</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>aadce5e821e2c51bf4314c2d4b579611b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>novlp_op_apply</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a3abb71f6a1a6aed2e6d6630146fab8fc</anchor>
      <arglist>(const X &amp;x, Y &amp;y, field_type alpha) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a61b13f8a59abef2df77320136a4050b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const communication_type &amp;</type>
      <name>getCommunication</name>
      <anchorfile>a01807.html</anchorfile>
      <anchor>a77c4e6f151fe1a052907d3bcd1d4ce08</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NonoverlappingSchwarzScalarProduct</name>
    <filename>a02651.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::ParallelScalarProduct</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aab9281d26ce669b92bcafd23253aef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>ada2c2aaabb031f0f39796265ab204427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a39483efdd0ac8fa85ee3b442dad8b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a58ae3ac8543f272beae4b490c043ef19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingSchwarzScalarProduct</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>a219664314019823e1d1e26c1c608ad31</anchor>
      <arglist>(std::shared_ptr&lt; const C &gt; comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonoverlappingSchwarzScalarProduct</name>
      <anchorfile>a02651.html</anchorfile>
      <anchor>aa700373c862f3ff1885761686d94adfd</anchor>
      <arglist>(const C &amp;comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual field_type</type>
      <name>dot</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a1741d4c4306e88000877fe017134324b</anchor>
      <arglist>(const X &amp;x, const X &amp;y) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real_type</type>
      <name>norm</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aed5eeba4a7fe1f00f1e9549c8afb133f</anchor>
      <arglist>(const X &amp;x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a23418f189472f19d5f62d45d5f5b6b2b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::NumericWrapper</name>
    <filename>a01539.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>operator T&amp;</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a628987f97276a33e749ec34031888ed2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>T</type>
      <name>number</name>
      <anchorfile>a01539.html</anchorfile>
      <anchor>a2a65142367ebba0df94e13eee51b8ad5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::NumericWrapper&lt; PatternDummy &gt;</name>
    <filename>a01547.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::OneStepAMGCoarseSolverPolicy</name>
    <filename>a02567.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>O</type>
      <name>Operator</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>aa27dd62b19c2767f574e7cfe3df2a4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O::range_type</type>
      <name>X</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a61e6875d9834717209e1d39d41053ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Criterion</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a6c2d839ae54c9a23c5d082f64d9fb39a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Smoother</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>ad07f026545f46332dda2fde03a15034b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::SmootherTraits&lt; S &gt;::Arguments</type>
      <name>SmootherArgs</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a760133ad10b7cc7f60ed2080c4383982</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AMG&lt; Operator, X, Smoother &gt;</type>
      <name>AMGType</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>aab20d4b93419ad56ef22517c38412e31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AMGInverseOperator</type>
      <name>CoarseLevelSolver</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a2d90ffee84899c8d1f7fdb0db577bbff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneStepAMGCoarseSolverPolicy</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a0c83c5f3f9c03126fe0db774f941c718</anchor>
      <arglist>(const SmootherArgs &amp;args, const Criterion &amp;c)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneStepAMGCoarseSolverPolicy</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>a4c3accf6d32c92924b635be8cc4d7278</anchor>
      <arglist>(const OneStepAMGCoarseSolverPolicy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>CoarseLevelSolver *</type>
      <name>createCoarseLevelSolver</name>
      <anchorfile>a02567.html</anchorfile>
      <anchor>aa8c00b12f11d91d6e9adca0c21417225</anchor>
      <arglist>(P &amp;transferPolicy)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingAssignerHelper</name>
    <filename>a01855.html</filename>
    <templarg></templarg>
    <templarg>tag</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingAssignerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</name>
    <filename>a01859.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; K, Al &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>acb9aa227ca166cd3140325007d53e821</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>acb0398fed98398821ac642854921519a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>aec455ed5ae7ddbc2cfd909d99fbe5253</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_type::block_type</type>
      <name>block_type</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>aff9ef8c872cf7ae25b558e9299e69241</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>a05c1b125ff116d09fddc896870efd83c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga3f9c740568e948c8bffcf8f420aeaba0</anchor>
      <arglist>(std::size_t maxlength, const BCRSMatrix&lt; K, Al &gt; &amp;mat_, const X &amp;b_, Y &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae347c974f0314ed345e659004b62c26c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac1c22f222bb77ed8c9a47017c2fea395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector&lt; field_type &gt; &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaa7ffec89b084a27a9601100f74347e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector&lt; field_type &gt; &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaf5ddbe6322eb27047edf9a296065f229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae316c5e7518e5bf9db8e65cfcaea7c42</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4bf365158cd6a9bb38fd6def4f70ce15</anchor>
      <arglist>(const size_type &amp;domainIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac286d23d4d9cab29a16efbec63cb5322</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01859.html</anchorfile>
      <anchor>af682ded1cafbe5fdc0c66612c4801bd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingAssignerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</name>
    <filename>a01871.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::OverlappingAssignerILUBase</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ad503b8cc0709a2ba0d97a65489c692af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::field_type</type>
      <name>field_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a3b7d16afd6729f746c05d0c9de270898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::block_type</type>
      <name>block_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a6f90e2c8bdeb34e45da12c03ce4c78c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a2481bf0db19cb556ec7388eb171d2056</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a01871.html</anchorfile>
      <anchor>a67d22f6ed5ff9966e5748a69fe4208a0</anchor>
      <arglist>(std::size_t maxlength, const M &amp;mat, const Y &amp;b, X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9a7c6fd66dd0d12e3db397ec4318ae6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4236f7c9f4d06105d1f2f2f4ded2ea95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0f21fa6a8c50e4281aac39aa06ed442c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Y &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga242dba5b5b746420469c028df5833224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad711654fd4e5f5e86f68e99795664119</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga85a5a216087e03197a0b64f7484bccb5</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae600a61fbac4cd4fc97c2dc2e0eb17f1</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingAssignerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</name>
    <filename>a01875.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::OverlappingAssignerILUBase</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ad503b8cc0709a2ba0d97a65489c692af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::field_type</type>
      <name>field_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a3b7d16afd6729f746c05d0c9de270898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::block_type</type>
      <name>block_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a6f90e2c8bdeb34e45da12c03ce4c78c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a2481bf0db19cb556ec7388eb171d2056</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a01875.html</anchorfile>
      <anchor>afdaf9080c93ba657806b1cb0bedabb38</anchor>
      <arglist>(std::size_t maxlength, const M &amp;mat, const Y &amp;b, X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9a7c6fd66dd0d12e3db397ec4318ae6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4236f7c9f4d06105d1f2f2f4ded2ea95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0f21fa6a8c50e4281aac39aa06ed442c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Y &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga242dba5b5b746420469c028df5833224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad711654fd4e5f5e86f68e99795664119</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga85a5a216087e03197a0b64f7484bccb5</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae600a61fbac4cd4fc97c2dc2e0eb17f1</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>OverlappingAssignerHelper&lt; S &gt;</name>
    <filename>a01855.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::OverlappingAssignerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</name>
    <filename>a01863.html</filename>
    <templarg>S</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; T, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>aee0e1da118b565b23c133e1b243348e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S&lt; BCRSMatrix&lt; T, A &gt; &gt;::range_type</type>
      <name>range_type</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>a69863d94fec374c0732278912b8aebd9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_type::field_type</type>
      <name>field_type</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>abd7c8bb5dd05106f2017f07c2172defb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>range_type::block_type</type>
      <name>block_type</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ab6e5fed631541c755dc02527f19d80cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ade16b85eb9a36660c947335d686ad12f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae1c644dc711b85eef93b84cd6c00836a</anchor>
      <arglist>(std::size_t maxlength, const matrix_type &amp;mat, const range_type &amp;b, range_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gab38e2e3912b42816193fcf4d24aebb14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gadfde7e2456e273ce5e4c80381bfc203d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>field_type *</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5fdf6d3c8d16e9ac866e353644c6c0ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>field_type *</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga725e9ce0b934a3040f41fcce53170f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga81a8b561789c3969f2196bac51508921</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac83c3d93e203302a07e5534ef3a1eda3</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad02f2ece4d291c61f9c958dd4d5e1831</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>ad6528107a81c7f52fa3928a5aaebf1cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>m</name>
      <anchorfile>a01863.html</anchorfile>
      <anchor>abc44ab4411dd382953f399d2333675d6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingAssignerILUBase</name>
    <filename>a01867.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>ad503b8cc0709a2ba0d97a65489c692af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::field_type</type>
      <name>field_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a3b7d16afd6729f746c05d0c9de270898</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y::block_type</type>
      <name>block_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a6f90e2c8bdeb34e45da12c03ce4c78c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01867.html</anchorfile>
      <anchor>a2481bf0db19cb556ec7388eb171d2056</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerILUBase</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7a24b7bf122f654480690478c2cc80fc</anchor>
      <arglist>(std::size_t maxlength, const M &amp;mat, const Y &amp;b, X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9a7c6fd66dd0d12e3db397ec4318ae6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4236f7c9f4d06105d1f2f2f4ded2ea95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0f21fa6a8c50e4281aac39aa06ed442c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Y &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga242dba5b5b746420469c028df5833224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad711654fd4e5f5e86f68e99795664119</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga85a5a216087e03197a0b64f7484bccb5</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae600a61fbac4cd4fc97c2dc2e0eb17f1</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingSchwarzInitializer</name>
    <filename>a01123.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>D</type>
      <name>subdomain_vector</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>ae876d38e035d6edaae28a4ff0ffd59ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I</type>
      <name>InitializerList</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>abec4859ff0228c9b8af3095b41cb8b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InitializerList::value_type</type>
      <name>AtomInitializer</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>adf716c2e685cc76758108d425b7bffac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AtomInitializer::Matrix</type>
      <name>Matrix</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>acd73f50531195a478fc3557717e60b83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::const_iterator</type>
      <name>Iter</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a7262d3824fe191c948ed60e1156eb872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type::const_iterator</type>
      <name>CIter</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a1992e4a416cb68438b2c51122f4af880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>IndexSet</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>a4720a7ee7e9cb7069df83bcb38bcbcee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet::size_type</type>
      <name>size_type</name>
      <anchorfile>a01123.html</anchorfile>
      <anchor>aa3519152398319a8c8db877d565bdd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzInitializer</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga680ecf80821212aaa8149d72eea3010e</anchor>
      <arglist>(InitializerList &amp;il, const IndexSet &amp;indices, const subdomain_vector &amp;domains)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRowNnz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga01ce789c3fd3870dee0f0df52eac92c5</anchor>
      <arglist>(const Iter &amp;row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga995ede9ec46c2990a1f249b4096a827a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>countEntries</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac5ed84777f6e2f1181aae4198ab75e12</anchor>
      <arglist>(const Iter &amp;row, const CIter &amp;col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcColstart</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0fa860d4fc5e8db80cd39b1c377d407f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyValue</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga49aa7ec764cdad87e4336c4f62598c76</anchor>
      <arglist>(const Iter &amp;row, const CIter &amp;col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createMatrix</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5052a702af185623894c97c65d41b94c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingSchwarzOperator</name>
    <filename>a02143.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::AssembledLinearOperator</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>ad93bebea5fa3e8e78adcb1a7974a76b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>ad7aff8104d7495a55ae19732a68aa55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>adc1a077ec0f64307451e89ee237dc40d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>ae1e7f3c84315220220bd995dc64d379a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>aafc9bff73a9c5544c16e94a834b1b6e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzOperator</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>ae4b3bc2a2c64c06f2df67d8b698ea7b0</anchor>
      <arglist>(const matrix_type &amp;A, const communication_type &amp;com)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzOperator</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>ae7d9e6bd7dd724ac471d7d0a12ba8eef</anchor>
      <arglist>(const std::shared_ptr&lt; matrix_type &gt; A, const communication_type &amp;com)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a4ff2f8700b94fd0ca738d34dcf2c4f27</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>applyscaleadd</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a3e7ec81da56d804452574f178e959229</anchor>
      <arglist>(field_type alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual const matrix_type &amp;</type>
      <name>getmat</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a2d28ea9f9eb9ac4d7e5172d4c68ba843</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>afebbad8bc8c5c38ce15313aed633900b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const communication_type &amp;</type>
      <name>getCommunication</name>
      <anchorfile>a02143.html</anchorfile>
      <anchor>a2c39a788a666f24193be6303472c7422</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OverlappingSchwarzScalarProduct</name>
    <filename>a02655.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::ParallelScalarProduct</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aab9281d26ce669b92bcafd23253aef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>ada2c2aaabb031f0f39796265ab204427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a39483efdd0ac8fa85ee3b442dad8b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a58ae3ac8543f272beae4b490c043ef19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzScalarProduct</name>
      <anchorfile>a02655.html</anchorfile>
      <anchor>a5f3482783153f30c0fafa0d38836f839</anchor>
      <arglist>(std::shared_ptr&lt; const C &gt; comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzScalarProduct</name>
      <anchorfile>a02655.html</anchorfile>
      <anchor>aa25c000daf92ffc42f4b84dfc2fa89ab</anchor>
      <arglist>(const C &amp;comm)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual field_type</type>
      <name>dot</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a1741d4c4306e88000877fe017134324b</anchor>
      <arglist>(const X &amp;x, const X &amp;y) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real_type</type>
      <name>norm</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aed5eeba4a7fe1f00f1e9549c8afb133f</anchor>
      <arglist>(const X &amp;x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a23418f189472f19d5f62d45d5f5b6b2b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::OverlapVertex</name>
    <filename>a02203.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga609452a9103fcecfb9ea6949b9cad23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6aee0c6bdb5527b24aa832590ff8eae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Aggregate *</type>
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa7d8bb553e8dba45ed4fb2e5a0859958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7b0edf4b5958d9f290114d9ea5e766a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OwnerOverlapCopyAttributeSet</name>
    <filename>a01955.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>AttributeSet</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>owner</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a03901dd537cba1347bc75afeb5935f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlap</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a9b41d5c9bc0fa8b7b676cbb902abf6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>copy</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a058de15a06c4fec2d09ef8899ccc3e1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>owner</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a03901dd537cba1347bc75afeb5935f1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlap</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a9b41d5c9bc0fa8b7b676cbb902abf6bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>copy</name>
      <anchorfile>a01955.html</anchorfile>
      <anchor>a7d966939fcbeee9a336da65f647a47b2a058de15a06c4fec2d09ef8899ccc3e1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OwnerOverlapCopyCommunication</name>
    <filename>a01963.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::OwnerOverlapCopyCommunication::AddGatherScatter</class>
    <class kind="struct">Dune::OwnerOverlapCopyCommunication::CopyGatherScatter</class>
    <member kind="typedef">
      <type>Dune::ParallelIndexSet&lt; GlobalIdType, LI, 512 &gt;</type>
      <name>PIS</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a18a7f7569f7def9efa3051b8ba769f69</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; PIS &gt;</type>
      <name>RI</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a3bcaee4f004a4381f755db1b03e13c25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndexListModifier&lt; PIS, typename RI::Allocator, false &gt;</type>
      <name>RILM</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>aeefa32e9ee150b0b0ba4683f11d18489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RI::RemoteIndex</type>
      <name>RX</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ad7bac230302796ef5e60d89f6f4204be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BufferedCommunicator</type>
      <name>BC</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a9241614c28dd16b625b83473d0b6832b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Interface</type>
      <name>IF</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a883dc3e5b075c99a5b52460a07a84be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EnumItem&lt; AttributeSet, OwnerOverlapCopyAttributeSet::owner &gt;</type>
      <name>OwnerSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ab9cf2015ce2bae6e01c84d1bdd712f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EnumItem&lt; AttributeSet, OwnerOverlapCopyAttributeSet::copy &gt;</type>
      <name>CopySet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a01b64bbb430bed5052151be5ade3a53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Combine&lt; EnumItem&lt; AttributeSet, OwnerOverlapCopyAttributeSet::owner &gt;, EnumItem&lt; AttributeSet, OwnerOverlapCopyAttributeSet::overlap &gt;, AttributeSet &gt;</type>
      <name>OwnerOverlapSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a7b9f5a2a3c1717007932cf75b200db9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::AllSet&lt; AttributeSet &gt;</type>
      <name>AllSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a77357b9035ef637243a2ce6dcbf24dd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EnumItem&lt; AttributeSet, OwnerOverlapCopyAttributeSet::copy &gt;</type>
      <name>CopyFlags</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a3a28c560eb7af0a8d81fbcc74c0a0569</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ParallelIndexSet&lt; GlobalIdType, LI, 512 &gt;</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>aef1f789840f45be10933a6da1b83e029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; PIS &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a6a24d4be162793dcf071e8eb47b01be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GlobalLookupIndexSet&lt; ParallelIndexSet &gt;</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a86093f2f9142a242ec2eb5639e25f020</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a29edddf19579c2b7c2043326884e66d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication&lt; MPI_Comm &gt; &amp;</type>
      <name>communicator</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a0c077c9870139f2e5a2688ca4b88473f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOwnerToAll</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ace63d31ae4a2578764249fb3c2b158f2</anchor>
      <arglist>(const T &amp;source, T &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyCopyToAll</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a7ee15d184e9e480313e2fa916497f767</anchor>
      <arglist>(const T &amp;source, T &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOwnerOverlapToAll</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a65d561eb96fc0d8554889806cf4f6d17</anchor>
      <arglist>(const T &amp;source, T &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOwnerCopyToAll</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>adeb75a084d98af47cd5ba8a7bd9914f6</anchor>
      <arglist>(const T &amp;source, T &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addOwnerCopyToOwnerCopy</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a308a62372585b04043890e88fb59856d</anchor>
      <arglist>(const T &amp;source, T &amp;dest) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>aa3898036f03adcb890161178e19083e5</anchor>
      <arglist>(const T1 &amp;x, const T1 &amp;y, T2 &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename T1::field_type &gt;::real_type</type>
      <name>norm</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a360af8f98a8920b277abb8dc2e296644</anchor>
      <arglist>(const T1 &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a0c2e20add795c659cdd8fc935549355c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RemoteIndices &amp;</type>
      <name>remoteIndices</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ac1c4afde733a08c7677360187af26b92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParallelIndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a22627a41708de0f89d33c583766d33ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RemoteIndices &amp;</type>
      <name>remoteIndices</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a154f59498d59c46b838ebc961f8c8133</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalLookup</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a91915027cb24a712dad72a2529afad7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalLookup</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a58b1a75e727e72ad6feee3df49b8b40e</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeGlobalLookup</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ae652199bd10eeea6f5bcd678893fe245</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalLookupIndexSet &amp;</type>
      <name>globalLookup</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>af8714bd15283d13c8de8afbece3a8f64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a6e2f469dad8e92b4d29958b79283e0ab</anchor>
      <arglist>(T1 &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnerOverlapCopyCommunication</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a93f446939bd4d6623bdf2e544f183f8c</anchor>
      <arglist>(MPI_Comm comm_, SolverCategory::Category cat_=SolverCategory::overlapping, bool freecomm_=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnerOverlapCopyCommunication</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ab0f16231c9d3dc2e7202ca7b92cbb745</anchor>
      <arglist>(SolverCategory::Category cat_=SolverCategory::overlapping)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnerOverlapCopyCommunication</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a290c11c391457fc2b56731b67c4e1d7d</anchor>
      <arglist>(const IndexInfoFromGrid&lt; GlobalIdType, LocalIdType &gt; &amp;indexinfo, MPI_Comm comm_, SolverCategory::Category cat_=SolverCategory::overlapping, bool freecomm_=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OwnerOverlapCopyCommunication</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a8e9acbe11fddc8e764779a6902bdc534</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildOwnerOverlapToAllInterface</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a0fa47b444a6a6ebbe52f192f480bcf3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildOwnerToAllInterface</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>af83466bb7da5edc71f213db6c154c973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildOwnerCopyToAllInterface</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a1b174c4a29321372f2f9858e04b708a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildOwnerCopyToOwnerCopyInterface</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a2855bddc40c415e6cbfaa694f54f01a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildCopyToAllInterface</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>a35aaf5e92158c7ae30c7b2a7ea9e395a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a01963.html</anchorfile>
      <anchor>ad01d6c4d803a5ee310c5be0d8332c6c2</anchor>
      <arglist>(M &amp;, const std::string &amp;, OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;, bool)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::OwnerOverlapCopyCommunicationArgs</name>
    <filename>a02135.html</filename>
    <member kind="function">
      <type></type>
      <name>OwnerOverlapCopyCommunicationArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga73761fb96818376faa60e31608e64a3e</anchor>
      <arglist>(MPI_Comm comm, SolverCategory::Category cat)</arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7a434e3d0d0b05d76c6ad9c6f3403005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SolverCategory::Category</type>
      <name>cat_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7de9ac0319a929415fe5da695c9bae10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::ParallelIndicesCoarsener</name>
    <filename>a02359.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>E</type>
      <name>ExcludedAttributes</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaccac2c87b0834201c07a5930d7554173</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d6183e4126cd6a645ea194ac1944d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d4745703c4e8e878773dafaa99f54d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d29bd3eeb184f0042b3e72de6cca32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bd142f155d0e97931e76a914f793c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga18a399553eda5531ae901932cfc42c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad52c7354eb72d033a3da2c2d594e5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3572024f811fcaf94d7f5bdfe1bbd30a</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, [[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c6f6c1bf60c3c4a4d87aeac2f270aad</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParallelIndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</name>
    <filename>a02359.html</filename>
    <member kind="typedef">
      <type>E</type>
      <name>ExcludedAttributes</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaccac2c87b0834201c07a5930d7554173</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OwnerOverlapCopyCommunication&lt; G, L &gt;</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d6183e4126cd6a645ea194ac1944d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d4745703c4e8e878773dafaa99f54d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d29bd3eeb184f0042b3e72de6cca32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bd142f155d0e97931e76a914f793c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga18a399553eda5531ae901932cfc42c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad52c7354eb72d033a3da2c2d594e5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3572024f811fcaf94d7f5bdfe1bbd30a</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo,[[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c6f6c1bf60c3c4a4d87aeac2f270aad</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::ParallelOperatorArgs</name>
    <filename>a02131.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>ParallelOperatorArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96aa6787ac4948bb3a090749ec8b4d61</anchor>
      <arglist>(std::shared_ptr&lt; M &gt; matrix, const C &amp;comm)</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; M &gt;</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9c67a673734b7eff983ba24e92b12e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const C &amp;</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83643cb8cd5051772e845b7558d23dc9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParallelScalarProduct</name>
    <filename>a02643.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::ScalarProduct</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aab9281d26ce669b92bcafd23253aef79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>ada2c2aaabb031f0f39796265ab204427</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a39483efdd0ac8fa85ee3b442dad8b6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a58ae3ac8543f272beae4b490c043ef19</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelScalarProduct</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aac6e26df79bcd6e3975b085c9da4ddb0</anchor>
      <arglist>(std::shared_ptr&lt; const communication_type &gt; com, SolverCategory::Category cat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelScalarProduct</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a8a90a4b180e0d5ee5cfb709bca6ff292</anchor>
      <arglist>(const communication_type &amp;com, SolverCategory::Category cat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual field_type</type>
      <name>dot</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a1741d4c4306e88000877fe017134324b</anchor>
      <arglist>(const X &amp;x, const X &amp;y) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real_type</type>
      <name>norm</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>aed5eeba4a7fe1f00f1e9549c8afb133f</anchor>
      <arglist>(const X &amp;x) const override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02643.html</anchorfile>
      <anchor>a23418f189472f19d5f62d45d5f5b6b2b</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Parameters</name>
    <filename>a02407.html</filename>
    <base>Dune::Amg::CoarseningParameters</base>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac5d612c50bf51b47ce0f480a48d2b6f5</anchor>
      <arglist>(int maxLevel=100, int coarsenTarget=1000, double minCoarsenRate=1.2, double prolongDamp=1.6, AccumulationMode accumulate=successiveAccu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParSSOR</name>
    <filename>a02667.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>aa520a2569391532c1bb6bea8c3d51cfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a6fe9b3290c12e9da0daa878958382dce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a81e2c62a301e23cc2e269448abeb9ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a059ec0e8a44561c2791bf29e242bf010</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>communication_type</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a14ccc9445c0de022218e2799b86a5038</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParSSOR</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a5e5b3f1f8d25f4f27be9174db67b2f3b</anchor>
      <arglist>(const matrix_type &amp;A, int n, field_type w, const communication_type &amp;c)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>aef35f3db486419588682ed9f1dff6c1d</anchor>
      <arglist>(X &amp;x, Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>abc2402f453ff66be359372f52fa76e74</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a66ce39857cfd15841a543f0a697c4b98</anchor>
      <arglist>(X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02667.html</anchorfile>
      <anchor>a41108f19bf49eb3f89e290eb2d8a95ed</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MatrixMarketImpl::PatternDummy</name>
    <filename>a01543.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::PointerCompare</name>
    <filename>a01783.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a01783.html</anchorfile>
      <anchor>a257b9755224870c8a74d7bfcf70aa443</anchor>
      <arglist>(const T *l, const T *r)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PowerIteration_Algorithms</name>
    <filename>a01291.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BlockVector::field_type</type>
      <name>Real</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>afe01daec21792b72fda320bf39349e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorSum</type>
      <name>IterationOperator</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a8d9e8521155195fb9257edcf705ad48a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerIteration_Algorithms</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7b1f74df27c09299e7c8d65666fb4ffa</anchor>
      <arglist>(const BCRSMatrix &amp;m, const unsigned int nIterationsMax=1000, const unsigned int verbosity_level=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerIteration_Algorithms</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a087c57a03e57476034430ade0b449577</anchor>
      <arglist>(const PowerIteration_Algorithms &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>PowerIteration_Algorithms &amp;</type>
      <name>operator=</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>afb75b7c2b80b77aeac6a3753bc67036c</anchor>
      <arglist>(const PowerIteration_Algorithms &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyPowerIteration</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7f4e95a396612022814c6e72148a687d</anchor>
      <arglist>(const Real &amp;epsilon, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseIteration</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a3c7200e90c3095f9a5d86e88ba5f49a4</anchor>
      <arglist>(const Real &amp;epsilon, ISTLLinearSolver &amp;solver, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyInverseIteration</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a9eab7bccc53e451c59a1f87827109bfe</anchor>
      <arglist>(const Real &amp;gamma, const Real &amp;epsilon, ISTLLinearSolver &amp;solver, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyRayleighQuotientIteration</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a9e613b4aaf1db1ccd053e4649b9162c7</anchor>
      <arglist>(const Real &amp;epsilon, ISTLLinearSolver &amp;solver, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>applyTLIMEIteration</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a3d544fc0fe4fdc58af31874256c433b7</anchor>
      <arglist>(const Real &amp;gamma, const Real &amp;eta, const Real &amp;epsilon, ISTLLinearSolver &amp;solver, const Real &amp;delta, const std::size_t &amp;m, bool &amp;extrnl, BlockVector &amp;x, Real &amp;lambda) const</arglist>
    </member>
    <member kind="function">
      <type>IterationOperator &amp;</type>
      <name>getIterationOperator</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aeb7a0a9b6f97e325b268ad4e36fe9bed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const BCRSMatrix &amp;</type>
      <name>getIterationMatrix</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aabd7c46c72c333a6b8034eab612dff6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>getIterationCount</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>acbad7b52ef9f9a0329732eb17242c1a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::MatrixAdapter&lt; BCRSMatrix, BlockVector, BlockVector &gt;</type>
      <name>MatrixOperator</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a3648a93b503ecdeb9f00acca3431c923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Impl::ScalingLinearOperator&lt; BlockVector &gt;</type>
      <name>ScalingOperator</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a19a5490f9baecb7c8f4123afbe57dfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Impl::LinearOperatorSum&lt; MatrixOperator, ScalingOperator &gt;</type>
      <name>OperatorSum</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a2e36be189e19690efebe810fb6a1f4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>updateShiftMu</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aa7dc68fd37a966d7c8931e70b4e32af2</anchor>
      <arglist>(const Real &amp;mu, ISTLLinearSolver &amp;solver) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BCRSMatrix &amp;</type>
      <name>m_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a79162dbf51a80f651499bf1d996915e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>nIterationsMax_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a7d765090aba3e5efd96b7f96a0ea6bab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const unsigned int</type>
      <name>verbosity_level_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>ade92dd48c73f8478fca9faee11e87d69</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Real</type>
      <name>mu_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aff488e21710d0c41ef09ca533a7c4d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const MatrixOperator</type>
      <name>matrixOperator_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>accb98f59eaf2926169a99812e201660b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const ScalingOperator</type>
      <name>scalingOperator_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aa5d424945ab7838e4ba2ed9862756bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>OperatorSum</type>
      <name>itOperator_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a4c274a2a5b944210ff9d9cfa726c2037</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; BCRSMatrix &gt;</type>
      <name>itMatrix_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a047f7fd075e2cb3ee3655af6e29094d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>nIterations_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>adbf309dd1490b37e04268b628be23aef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>title_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>aede475c3294d54f0e3782d99de68b16b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const std::string</type>
      <name>blank_</name>
      <anchorfile>a01291.html</anchorfile>
      <anchor>a2377d6ab02c88d1aa35a21b043f5c061</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Preconditioner</name>
    <filename>a02583.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(X &amp;v, const Y &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preconditioner&lt; AMG::Domain, AMG::Range &gt;</name>
    <filename>a02583.html</filename>
    <member kind="typedef">
      <type>AMG::Domain</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AMG::Range</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(AMG::Domain &amp;x, AMG::Range &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(AMG::Domain &amp;v, const AMG::Range &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(AMG::Domain &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preconditioner&lt; FO::domain_type, FO::range_type &gt;</name>
    <filename>a02583.html</filename>
    <member kind="typedef">
      <type>FO::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FO::range_type</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(FO::domain_type &amp;x, FO::range_type &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(FO::domain_type &amp;v, const FO::range_type &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(FO::domain_type &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preconditioner&lt; O::domain_type, O::range_type &gt;</name>
    <filename>a02583.html</filename>
    <member kind="typedef">
      <type>O::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O::range_type</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(O::domain_type &amp;x, O::range_type &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(O::domain_type &amp;v, const O::range_type &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(O::domain_type &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preconditioner&lt; P::domain_type, P::range_type &gt;</name>
    <filename>a02583.html</filename>
    <member kind="typedef">
      <type>P::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>P::range_type</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(P::domain_type &amp;x, P::range_type &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(P::domain_type &amp;v, const P::range_type &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(P::domain_type &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Preconditioner&lt; X, X &gt;</name>
    <filename>a02583.html</filename>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, X &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(X &amp;v, const X &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>aa67ce3a584313264f08af80dbec1b6bd</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Preconditioner</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a0f7351d4552bbfa54de527768f36a151</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::PropertiesGraph</name>
    <filename>a02315.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::Amg::PropertiesGraph::EdgeIteratorT</class>
    <class kind="class">Dune::Amg::PropertiesGraph::VertexIteratorT</class>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a6e83e9aa4e797967fa318b86459d0149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>acc1d8f22266e986a90c7ff0a380517d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::EdgeDescriptor</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a1e87b1382ebbf1cab6a77fc3cb3849c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VP</type>
      <name>VertexProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aa13e4d256759286236ec4ca19ff73e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VM</type>
      <name>VertexMap</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a965116a5ca037414e1c5ae6ab342b8ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EP</type>
      <name>EdgeProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aa8149c0a1d29a2b3c2d7fe2520aecaa2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EM</type>
      <name>EdgeMap</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a8179cbefa851d6c0094255659e1930a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; PropertiesGraph&lt; Graph, VertexProperties, EdgeProperties, VM, EM &gt; &gt;</type>
      <name>EdgeIterator</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a1ce0f1eaa14e3c256b2591bac899f4db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIteratorT&lt; const PropertiesGraph&lt; Graph, VertexProperties, EdgeProperties, VM, EM &gt; &gt;</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a39d89142505784b2c0b19a879307b7a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; PropertiesGraph&lt; Graph, VertexProperties, EdgeProperties, VM, EM &gt; &gt;</type>
      <name>VertexIterator</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a440ff33400310293b351b4172356d411</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; const PropertiesGraph&lt; Graph, VertexProperties, EdgeProperties, VM, EM &gt; &gt;</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a9bacf6679d481b3550c61128b716087d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a3aabed15e52736a3db43b61b37457df7</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a5d1975f07023660d6983d37e2b318121</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>ac9ce7fc2fe3749ab91490686935afe1e</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a131251b49c02297221122aba6d2cb184</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>begin</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a9b940011fec22f807ee73158a9f3be69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>end</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a15a79fe73b50a6c89aff4ad878380e2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>abf0d007a2b2d3263757077073445cef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a301c6a0d36ef6352d1757c1cf330e588</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexProperties &amp;</type>
      <name>getVertexProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>ac7254be6511972118cfcb380377e2ed5</anchor>
      <arglist>(const VertexDescriptor &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>const VertexProperties &amp;</type>
      <name>getVertexProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a099918261364f8dde37e493c66173649</anchor>
      <arglist>(const VertexDescriptor &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>EdgeDescriptor</type>
      <name>findEdge</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a48a8f8cb772902fed871a78feac25204</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>EdgeProperties &amp;</type>
      <name>getEdgeProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>ab5f77ab35caef7e63a8c4444621ea929</anchor>
      <arglist>(const EdgeDescriptor &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeProperties &amp;</type>
      <name>getEdgeProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a769f0cf77536eb374462d2d0c2451ccd</anchor>
      <arglist>(const EdgeDescriptor &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type>EdgeProperties &amp;</type>
      <name>getEdgeProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aa820797ec2e749b48f448809e818ea62</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>const EdgeProperties &amp;</type>
      <name>getEdgeProperties</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>af91a4ef2f47b6eae22edf9c3b4878bf1</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>graph</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aecaab78d83293fccbc715dc1ac923d5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a1cf3c2824cd1bcbdd2bc64692257d670</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aa1ede731be019354fafb1906953b36d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>a5d3b2c6e572751853f1353c453425403</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertiesGraph</name>
      <anchorfile>a02315.html</anchorfile>
      <anchor>aeefc7a872cf23aa05a94ef097c0b4343</anchor>
      <arglist>(Graph &amp;graph, const VertexMap &amp;vmap=VertexMap(), const EdgeMap &amp;emap=EdgeMap())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::PropertiesGraphCreator</name>
    <filename>a02335.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M::matrix_type</type>
      <name>Matrix</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac257c0ddc137b512931a5432ef850825</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::MatrixGraph&lt; const Matrix &gt;</type>
      <name>MatrixGraph</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>acc36975486a7a66b6f103fb674a9605a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::SubGraph&lt; MatrixGraph, std::vector&lt; bool &gt; &gt;</type>
      <name>SubGraph</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a3386645f13de6eb040728fd4bc8d67ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::PropertiesGraph&lt; SubGraph, VertexProperties, EdgeProperties, IdentityMap, typename SubGraph::EdgeIndexMap &gt;</type>
      <name>PropertiesGraph</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>a9d179ba3acf6ee9ff3fac0bdc9593398</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; MatrixGraph *, PropertiesGraph *, SubGraph * &gt;</type>
      <name>GraphTuple</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>afcde0398cc4c84140bea04661119e75a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GraphTuple</type>
      <name>create</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac58a70effe71ad282b7c6fe09baf7d34</anchor>
      <arglist>(const M &amp;matrix, T &amp;excluded, PI &amp;pinfo, const OF &amp;of)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a02335.html</anchorfile>
      <anchor>ac6d22d05cf867b769f228c4c83ed560b</anchor>
      <arglist>(GraphTuple &amp;graphs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::PropertiesGraphCreator&lt; M, SequentialInformation &gt;</name>
    <filename>a02339.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>M::matrix_type</type>
      <name>Matrix</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a1d36ae4b8672c5a6b7e884d04aafe843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::MatrixGraph&lt; const Matrix &gt;</type>
      <name>MatrixGraph</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a04fda7cd233e09f69cff915e6e7f88fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::PropertiesGraph&lt; MatrixGraph, VertexProperties, EdgeProperties, IdentityMap, IdentityMap &gt;</type>
      <name>PropertiesGraph</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a36d7db531f1ee392cbe299be8a809c9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; MatrixGraph *, PropertiesGraph * &gt;</type>
      <name>GraphTuple</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a650e5dfc3edd4a41fc89d32e137c6d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static GraphTuple</type>
      <name>create</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>a65469e274b285f6d0dd4ef1cadc8d0f4</anchor>
      <arglist>([[maybe_unused]] const M &amp;matrix, [[maybe_unused]] T &amp;excluded, [[maybe_unused]] const SequentialInformation &amp;pinfo, const OF &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a02339.html</anchorfile>
      <anchor>ae9e494120af2ed25d339d2c56c5f5f9f</anchor>
      <arglist>(GraphTuple &amp;graphs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::PropertyGraphVertexPropertyMap</name>
    <filename>a02179.html</filename>
    <templarg></templarg>
    <templarg>i</templarg>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga91f26d8f4e3bfa88bb2f04d7911ae91aa3969c5d2ea66a930eea263cec0d7e08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReadWritePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad8a83b539bd33cb27c705883efab8677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga74c4b7c1a6265b3b6de13322394100b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bitset&lt; VertexProperties::SIZE &gt;</type>
      <name>BitSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga07cb592df02f93c85a1557e8c5bd2725</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSet::reference</type>
      <name>Reference</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ca1d5b02168336e0c7366d663db017c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>ValueType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1b21afd4f82aadc87c3c1a66b572c947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga42735e41c3bd53cfaeabb5da0cd5334c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga91f26d8f4e3bfa88bb2f04d7911ae91aa3969c5d2ea66a930eea263cec0d7e08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyGraphVertexPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga413f22fe4fec3a48cf58acd5cc8d387d</anchor>
      <arglist>(G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyGraphVertexPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3c020a2cff554847ffc0a686acbd1530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabee7a1820b2f80cdd6e67db4042ee003</anchor>
      <arglist>(const Vertex &amp;vertex) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PropertyMapTypeSelector&lt; Amg::VertexVisitedTag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &gt;</name>
    <filename>a02183.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Amg::PropertyGraphVertexPropertyMap&lt; Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt;, Amg::VertexProperties::VISITED &gt;</type>
      <name>Type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga90028edc216210e140d4bdac8414de4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::GlobalAggregatesMap::Proxy</name>
    <filename>a02255.html</filename>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7629bd8af64c73300346e1d4e8ff405a</anchor>
      <arglist>(const GlobalLookupIndexSet&lt; ParallelIndexSet &gt; &amp;indexset, Vertex &amp;aggregate)</arglist>
    </member>
    <member kind="function">
      <type>Proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadd7d72ab1dae6fc417ed6a80913f0bfd</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::QuerySpaceChooser</name>
    <filename>a02823.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::RandomAccessBundledPropertyMap</name>
    <filename>a02419.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>i</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga5bd47444cc958afe27246479c54e1d01abac431862aa7f43e45b797931ffc9bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe8f70a7b360908afd4d45ff50ffd901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d1d05811b8c187e362eb440ded69f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae58f9bb2fd78c2e34a8fa27a9370f66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LvaluePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf4783b71903831056f874305edb3b0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga5bd47444cc958afe27246479c54e1d01abac431862aa7f43e45b797931ffc9bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3d9ee21ea703d08f5831e72170db5a34</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomAccessBundledPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5c06b28bba4d8b06a46bf85bedff135f</anchor>
      <arglist>(Container &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomAccessBundledPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4505eb9e29295d0013c666150ea8dcd9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VariableBlockVector::RealIterator</name>
    <filename>a02979.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>RealIterator</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>ac3b3334e162bb15d9207c0a41c9b06c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealIterator</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a05fef69874f45113777548bac580361c</anchor>
      <arglist>(window_type *_p, size_type _i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a9abbd392d48472df6eca2d630c372547</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a5ffd0d940654cc619ce380b456b89fa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a1304c3dba44d89c0a71c3ce06aada88b</anchor>
      <arglist>(const RealIterator &amp;it) const</arglist>
    </member>
    <member kind="function">
      <type>window_type &amp;</type>
      <name>dereference</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a11eb229af8fd07410fdaaec1f105c582</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a86f55eb1e43dd0e5b5c5cc2468c4c9bc</anchor>
      <arglist>(std::ptrdiff_t d)</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>adb22a7905c3fa66bb81fbd6a7e06cb19</anchor>
      <arglist>(const RealIterator &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>window_type &amp;</type>
      <name>elementAt</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>ac3aab21fde19f734a0ce1504c3eb7659</anchor>
      <arglist>(std::ptrdiff_t offset) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a02979.html</anchorfile>
      <anchor>a13bb6af46bbc636b802f6bceb8036231</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BCRSMatrix::RealRowIterator</name>
    <filename>a01159.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; T &gt;::type</type>
      <name>ValueType</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a27f3123a6355601c5a60b92813cacbf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealRowIterator</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a9fed5aa653a0991aea448c0bcb19dbec</anchor>
      <arglist>(row_type *_p, size_type _i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealRowIterator</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a04496f31228fb455c14cb78feb32c00f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RealRowIterator</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a57c0be6ff6a982ae69a90742a15df2a1</anchor>
      <arglist>(const RealRowIterator&lt; ValueType &gt; &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>index</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ac18a67c8c47ebb97b05e5c81f66e9344</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ad20fdde3120723c294781c8f617bd20c</anchor>
      <arglist>(const RealRowIterator&lt; ValueType &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>abe20c4c891cbea5663896a09a32b1427</anchor>
      <arglist>(const RealRowIterator&lt; const ValueType &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a14604fd1db8f4bccf63591d3242662f2</anchor>
      <arglist>(const RealRowIterator&lt; ValueType &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a80c0764b89e50c5ffc6bfd6485344a80</anchor>
      <arglist>(const RealRowIterator&lt; const ValueType &gt; &amp;other) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RandomAccessIteratorFacade&lt; RealRowIterator&lt; const ValueType &gt;, const ValueType &gt;</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>aa7256ec20377561788848d53a6aecaa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RandomAccessIteratorFacade&lt; RealRowIterator&lt; ValueType &gt;, ValueType &gt;</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a82ff46d8098a2c020a3065c398e14911</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RealRowIterator&lt; const ValueType &gt;</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>a67410136b9d93ebafe108693eb0381c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>RealRowIterator&lt; ValueType &gt;</name>
      <anchorfile>a01159.html</anchorfile>
      <anchor>ac1819737ded77c307c8e511ef359485a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RedistributeInformation</name>
    <filename>a01675.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>abb96803dae7b61de73b3eb7d49b5a45f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistribute</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>ae04473339ae7d245a18903c6959f1a1c</anchor>
      <arglist>([[maybe_unused]] const D &amp;from, [[maybe_unused]] D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeBackward</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a5534dece0a08bead08efbaa3e42cf63b</anchor>
      <arglist>([[maybe_unused]] D &amp;from, [[maybe_unused]]const D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSetup</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a9ce988b3b31a6c382be8633b30013239</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoRows</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a76cef7cceb1ace8466da482c3d0b193d</anchor>
      <arglist>([[maybe_unused]] std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoCopyRows</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a2b5f75ccdbe25d3a8343486a6daf989d</anchor>
      <arglist>([[maybe_unused]] std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoBackwardsCopyRows</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>ad97058697ecde11f33c339e5aeb39e40</anchor>
      <arglist>([[maybe_unused]] std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getRowSize</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a21e2e460194a45f1ca1ffe03215a7549</anchor>
      <arglist>([[maybe_unused]] std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCopyRowSize</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a8a18729d7b437bbe6022febb5a0d25aa</anchor>
      <arglist>([[maybe_unused]] std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBackwardsCopyRowSize</name>
      <anchorfile>a01675.html</anchorfile>
      <anchor>a1b0f3b403cbfacc1211642905726b7a3</anchor>
      <arglist>([[maybe_unused]] std::size_t index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RedistributeInformation&lt; OwnerOverlapCopyCommunication&lt; T, T1 &gt; &gt;</name>
    <filename>a01679.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>OwnerOverlapCopyCommunication&lt; T, T1 &gt;</type>
      <name>Comm</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a72bb0afa6bcf576c67be29deda1941b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RedistributeInformation</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a42f8ae410def8a4303f904571d060e2b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RedistributeInterface &amp;</type>
      <name>getInterface</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a4f0739df695f4c5ce38f10b5824ce688</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkInterface</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ad797bfe3939beae02e73561533645b1d</anchor>
      <arglist>(const IS &amp;source, const IS &amp;target, MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSetup</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a8df8a796229f55fb5cb0c6618340cca6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetSetup</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ac6d56943f6e2cdfe29f39654764f9223</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistribute</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>aae588f96d57707044e6a929fd0e66073</anchor>
      <arglist>(const D &amp;from, D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeBackward</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>accd44d093e4d5222e1e2ff83715295b7</anchor>
      <arglist>(D &amp;from, const D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistribute</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a1c2b8986374474f473aec13ccdedef7b</anchor>
      <arglist>(const D &amp;from, D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeBackward</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a8595032bc3abbeeca962ea65dfbaf364</anchor>
      <arglist>(D &amp;from, const D &amp;to) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSetup</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ae03eb8861ab2c07368b5054fca4f77db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a6e336881a6801d8a0c9d0d62543d8dd2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>getRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>af9db0c66e002e4ed54b716db6f60af1d</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a13b4dccc8b8511a7a839e653deb845b2</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>getCopyRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>ad314e1848363628653eeae96708869ce</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getCopyRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a4635a78b9ae4c2abf862619f1845b127</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>getBackwardsCopyRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a2c3a0db9d8f083ce2b140190cc345b33</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getBackwardsCopyRowSize</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>aa78f0a18ff90951bbb821a6dc62486c3</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoRows</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a4a1e0d8eb75f8229626d63224617de67</anchor>
      <arglist>(std::size_t rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoCopyRows</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a7f2c5cf10c3ec3e00a2432ea4deadefb</anchor>
      <arglist>(std::size_t rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoBackwardsCopyRows</name>
      <anchorfile>a01679.html</anchorfile>
      <anchor>a2679960ccdd612fb93af79930e1e2c2d</anchor>
      <arglist>(std::size_t rows)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RedistributeInterface</name>
    <filename>a02619.html</filename>
    <member kind="function">
      <type>void</type>
      <name>setCommunicator</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a8fed3306842bd899bc27f52a0254a818</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildSendInterface</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a9509d4dd7630b3594daba9096ac0393e</anchor>
      <arglist>(const std::vector&lt; int &gt; &amp;toPart, const IS &amp;idxset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserveSpaceForReceiveInterface</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a4edfdb75931921bfe90f2ef33aeb9c78</anchor>
      <arglist>(int proc, int size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReceiveIndex</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>acb8bc39209734b476152cb4b3702e4bb</anchor>
      <arglist>(int proc, std::size_t idx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildReceiveInterface</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a691fde40a7a22ec373cbc343f78688d3</anchor>
      <arglist>(std::vector&lt; std::pair&lt; TG, int &gt; &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RedistributeInterface</name>
      <anchorfile>a02619.html</anchorfile>
      <anchor>a6e4823cecf60aa34c55228ee051bfe63</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RestartedFCGSolver</name>
    <filename>a02767.html</filename>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedFCGSolver</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>aa2e9ab65119a0d6af0820ddf3679506f</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, int mmax=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedFCGSolver</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a058999fed5ca599bce12281233bf8583</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int maxit, int verbose, int mmax=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedFCGSolver</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>afe7bf80f8295ce5b345f691f07b80d70</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, scalar_real_type reduction, int maxit, int verbose, int mmax=10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedFCGSolver</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a699577fb5a573d0d29a47e4f1d8d278a</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedFCGSolver</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>ac4b32e44555c2281e7f60dc021f1675a</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>abebe8348b669681d556520449a5e4fa6</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a86250eae8b53d906a88116d2ce7cf75e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_mmax</name>
      <anchorfile>a02767.html</anchorfile>
      <anchor>a56b1bdfd2a70152f06ea884624099477</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RestartedFlexibleGMResSolver</name>
    <filename>a02759.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>RestartedGMResSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02759.html</anchorfile>
      <anchor>aef5933d208a19e58d05633d97e3993e0</anchor>
      <arglist>(X &amp;x, Y &amp;b, double reduction, InverseOperatorResult &amp;res) override</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ade9aa220eb9c8e1c792d95a6b828a355</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a0a08ef8032992c1170cc39724c723265</anchor>
      <arglist>(X &amp;x, X &amp;b,[[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a4e050804c81785d9d4b9d507ff96a129</anchor>
      <arglist>(X &amp;w, int i, const std::vector&lt; std::vector&lt; field_type, fAlloc &gt; &gt; &amp;H, const std::vector&lt; field_type, fAlloc &gt; &amp;s, const std::vector&lt; X &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt; std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ae0072652285c13ee5127c1689b248338</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt;!std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a7682b6c6270ec40b6a827ad798c0611d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generatePlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ab6ebfe998917523ba84e2fdbaa95d63f</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyPlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>af62d58cb364e786927c1d2d5f0cc3b7c</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_restart</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a803429f347f8c25277b8ca7d8364f29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RestartedGMResSolver</name>
    <filename>a02755.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a1b8609a40fe616347bc9430914b9b117</anchor>
      <arglist>(LinearOperator&lt; X, Y &gt; &amp;op, Preconditioner&lt; X, Y &gt; &amp;prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a38fa149b2867e4e2c87738b4dfa920a7</anchor>
      <arglist>(LinearOperator&lt; X, Y &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, Y &gt; &amp;prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a52e21cae17ab05b7838e5877fe8cb65e</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a643ee7ed2c9ebda93f13f248690b8a69</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ab7da1f5408757c1cfc34eb75cf58c1fe</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, Y &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, Y &gt;&gt; prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ade9aa220eb9c8e1c792d95a6b828a355</anchor>
      <arglist>(X &amp;x, Y &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a0a08ef8032992c1170cc39724c723265</anchor>
      <arglist>(X &amp;x, Y &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ReboundAllocatorType&lt; X, field_type &gt;</type>
      <name>fAlloc</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a6aa3784b6607021d54457d7187fe6024</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ReboundAllocatorType&lt; X, real_type &gt;</type>
      <name>rAlloc</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a87972b0ebca88e38df43ad7752d6f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>aefd945a7e08e11ddbb222bb0328a8dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a4e050804c81785d9d4b9d507ff96a129</anchor>
      <arglist>(X &amp;w, int i, const std::vector&lt; std::vector&lt; field_type, fAlloc &gt; &gt; &amp;H, const std::vector&lt; field_type, fAlloc &gt; &amp;s, const std::vector&lt; X &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt; std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ae0072652285c13ee5127c1689b248338</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt;!std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a7682b6c6270ec40b6a827ad798c0611d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generatePlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ab6ebfe998917523ba84e2fdbaa95d63f</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyPlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>af62d58cb364e786927c1d2d5f0cc3b7c</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_restart</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a803429f347f8c25277b8ca7d8364f29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RestartedGMResSolver&lt; X, X &gt;</name>
    <filename>a02755.html</filename>
    <base>IterativeSolver&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaba59848baa4879b548d96b9f77e150a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a85b7df40fa5e6a60c2a3db25a4140823</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a1b8609a40fe616347bc9430914b9b117</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a38fa149b2867e4e2c87738b4dfa920a7</anchor>
      <arglist>(LinearOperator&lt; X, X &gt; &amp;op, ScalarProduct&lt; X &gt; &amp;sp, Preconditioner&lt; X, X &gt; &amp;prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a52e21cae17ab05b7838e5877fe8cb65e</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a643ee7ed2c9ebda93f13f248690b8a69</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt; prec, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RestartedGMResSolver</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ab7da1f5408757c1cfc34eb75cf58c1fe</anchor>
      <arglist>(std::shared_ptr&lt; LinearOperator&lt; X, X &gt;&gt; op, std::shared_ptr&lt; ScalarProduct&lt; X &gt;&gt; sp, std::shared_ptr&lt; Preconditioner&lt; X, X &gt;&gt; prec, scalar_real_type reduction, int restart, int maxit, int verbose)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ade9aa220eb9c8e1c792d95a6b828a355</anchor>
      <arglist>(X &amp;x, X &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a0a08ef8032992c1170cc39724c723265</anchor>
      <arglist>(X &amp;x, X &amp;b,[[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a42273cb037e81940486a2109adf4a941</anchor>
      <arglist>(X &amp;x, X &amp;b, double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4e81a96530540ab4040226ad3346c51</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a7a15e3a8451ca039a01251e25dad47c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ReboundAllocatorType&lt; X, field_type &gt;</type>
      <name>fAlloc</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a6aa3784b6607021d54457d7187fe6024</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>ReboundAllocatorType&lt; X, real_type &gt;</type>
      <name>rAlloc</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a87972b0ebca88e38df43ad7752d6f7a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename IterativeSolver&lt; X, X &gt;::template Iteration&lt; unsigned int &gt;</type>
      <name>Iteration</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>aefd945a7e08e11ddbb222bb0328a8dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a4e050804c81785d9d4b9d507ff96a129</anchor>
      <arglist>(X &amp;w, int i, const std::vector&lt; std::vector&lt; field_type, fAlloc &gt; &gt; &amp;H, const std::vector&lt; field_type, fAlloc &gt; &amp;s, const std::vector&lt; X &gt; &amp;v)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt; std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ae0072652285c13ee5127c1689b248338</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::enable_if&lt;!std::is_same&lt; field_type, real_type &gt;::value, T &gt;::type</type>
      <name>conjugate</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a7682b6c6270ec40b6a827ad798c0611d</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generatePlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>ab6ebfe998917523ba84e2fdbaa95d63f</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>applyPlaneRotation</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>af62d58cb364e786927c1d2d5f0cc3b7c</anchor>
      <arglist>(field_type &amp;dx, field_type &amp;dy, real_type &amp;cs, field_type &amp;sn)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_restart</name>
      <anchorfile>a02755.html</anchorfile>
      <anchor>a803429f347f8c25277b8ca7d8364f29b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; LinearOperator&lt; X, X &gt; &gt;</type>
      <name>_op</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a94e87f284efd1ea398108ac23f77bda1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, X &gt; &gt;</type>
      <name>_prec</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>af4a8a49af428c01332ca8254f124de3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>_sp</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a95d46723a40e4e699102cf1dc96c7713</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>scalar_real_type</type>
      <name>_reduction</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ac9fa53fbc7b256e48620dd8acfbcac0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_maxit</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>a9b9fc491826e83b4b56e9d9354e07155</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_verbose</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>aafd5c0f9fb28cea306a95fa326f197df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>SolverCategory::Category</type>
      <name>_category</name>
      <anchorfile>a02683.html</anchorfile>
      <anchor>ae86a07e35fee34640932781b5f0b57e8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Richardson</name>
    <filename>a02607.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>ad7e0332b1996202d36d9073d8797ba17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a2f5e60b187f2372c6cc1f7100b363b4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a238e5375b894d720b668240de35bbf39</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>acf7ac3151b8f74ef44b0b20353e90ece</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>acda99e16e880aa00e324b477a390a8a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Richardson</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a619eda190172744ede545f3026071cf0</anchor>
      <arglist>(real_field_type w=1.0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Richardson</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>ad7092871af826b251714cacc736aaced</anchor>
      <arglist>(const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>adbccef312be4fa4d48373d8cd4b8993f</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>af6e4ea09bb9e83d9b8f85353ce1d1172</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a123d035a66bc54851b09ff63155608b9</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02607.html</anchorfile>
      <anchor>a26e7d06eac8bdff04c6ccdc4e42660aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ImplicitMatrixBuilder::row_object</name>
    <filename>a01151.html</filename>
    <member kind="function">
      <type>block_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01151.html</anchorfile>
      <anchor>afaa9027f51b4faeb963d726f83b1b6b6</anchor>
      <arglist>(size_type j) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::RowSum</name>
    <filename>a01999.html</filename>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga940b3c260e37bea784a0ec408dbf3ff2a56a74268c7c125ed458045d82c8e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga940b3c260e37bea784a0ec408dbf3ff2a56a74268c7c125ed458045d82c8e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabfa7c49ddd2197089d9f272107cc0e68</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ScalarProduct</name>
    <filename>a02639.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a84d88e2981586460b457ff766db16211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a7cba93c577072c40f285285441139ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>acc45df54963b461b89d04ceef3818621</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual field_type</type>
      <name>dot</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a261a4e5d403a4412cd03ea52a670e0fd</anchor>
      <arglist>(const X &amp;x, const X &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real_type</type>
      <name>norm</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae1935accd5a239a5bd274cb286cedb4a</anchor>
      <arglist>(const X &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a29cf855e6aca8d43341a820e41aefa6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ScalarProduct</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>aa342a07511a611a1b3f3555c43899a4c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ScaledIdentityMatrix</name>
    <filename>a02659.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a662cf41cfc334305241a751b44077cfbac04efe0755a0218b345170b028c5780e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a662cf41cfc334305241a751b44077cfbaf4e1899ba495f14ba9852fccfe9b176c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a37c5ea271263c8ee5eca279264a16ea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ac4070faa64369d7b13c05c0550cda657</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a1a5c1fd633670f4b4b045f39cd3f7442</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>row_type</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a2096597013f67819f78dfcc928eca15d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ac357b004e6186ec9cffb12ea6268c94a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>const_row_type</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>adbe200614fee5e69f8f816318761f585</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type</type>
      <name>const_reference</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a1bfd8da3c8785653f7bb4e4410c4ec04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, reference, reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a24a09c7707d0037f1d795e1fb98e4d75</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a426f14c5c15817123d229eebf035e8f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7be1fd1cb574c3f13b65eae6dbf24a22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a1be50f87c91351e363c09b05347964ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, const_reference, const_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a6b766d838ea4977f2b992a3375564239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7cdc1b2344b2e251081fcd6e2654f8d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a92caa0feecc2540057b94dbbc4587428</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a098e0a4304e5b037783a3e430a69decc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a662cf41cfc334305241a751b44077cfbac04efe0755a0218b345170b028c5780e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a662cf41cfc334305241a751b44077cfbaf4e1899ba495f14ba9852fccfe9b176c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaledIdentityMatrix</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7d1411fdb20065388b1874293cabe760</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ScaledIdentityMatrix</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>aa2df6ac99c36fbdfe64ac535ad2d6a62</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ae1a6308e27c07443b8a2ed324b70fe51</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ab76bbb9a9f291408b3ae3e34b0f921c3</anchor>
      <arglist>(const ScaledIdentityMatrix&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ab9a83c665a6a28a42f2b14717ef1e510</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a4126312cb950e1c6901ae65b465ecc3d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a2bb177f4afa12bf43a53c03867fd6da0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a14a92f019e26954f48e69eb73c1011ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>af2718f2a1fcb8bdd187380dab1a7a453</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a0a4805d5dbfd10152f29598bf8d8eb60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a92d03561b78daf81dced61227df9edd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a826f88ac5c2970b89aa692ad420f6a03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a2725e582a240b3025648c26febdeb5e6</anchor>
      <arglist>(const ScaledIdentityMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ac1ec418376f4a0faf92745bb54799e1d</anchor>
      <arglist>(const ScaledIdentityMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>aa4b2e3c39707b9406fc267054979bf10</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ac386fe025d4027fde82cd607b42b7f7f</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ae1bdfccf0a38adb9a1e6d5f5d757374a</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>ScaledIdentityMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a70b37d74736e5abda5d1179481b6c95a</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7eb55dac5f40c39b3e7baf217b31bd23</anchor>
      <arglist>(const ScaledIdentityMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a18577bb2c5434bd7a6a9239b6132aaff</anchor>
      <arglist>(const ScaledIdentityMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a1dcf99bd5b04631974ecd2f80d68fd8a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>adf75adc4785041cbcb0af69572bce57f</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a59a20890c7ddb18baa237a58938f2e23</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a2014ba891c75d689ef86f7bd64704240</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a2021f4202f85d7cda847791c8f1cfa6d</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a18de3bb864e7c630fc835acec34439e9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a06c7add885db73c27de63525ab74a12b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ad8a08bf4ea84aef6746efe74f49c638a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a1b64b2275abe7bc0f3043976f2161d16</anchor>
      <arglist>(const K &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a390d183cf059382e854f0447eeb8f4ed</anchor>
      <arglist>(const K &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a0039628bac3142f32ea1e4a5fee620e9</anchor>
      <arglist>(const K &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ad7805e239e8a8b884dc1967cb74a05d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>af51193f6d009a440a7797f8f2459b2b2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7fd5b9e518426dfe3a84fbcb6f769e82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a8761ee2374a3195305be586888f8d534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7920aa9318f3da43bd1586e171c0d714</anchor>
      <arglist>(V &amp;x, const V &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ab76f7c8f05eb81be8b38ab29c5ef09cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>determinant</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a3038b83fe2455cbb620bdc7e76b9d356</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>affc9b648ddce7015c512c877624fc63f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>M</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a9c599d284175ca82e6b9ff7f1e644f89</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a7aa164630b98b9d4e7783d5c2e48e029</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>ae64e0102a3a4d21e185f3bf958a3648f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a9f8142aa90e482ae80a0da841e192380</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>aeb69e1f3641875becb27b74018f21fec</anchor>
      <arglist>(size_type) const</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a198159c50e9efcd8ac934b88407ef2a0</anchor>
      <arglist>(size_type)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>scalar</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a4ef5f9fde965ef6d258b48a5ea313289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>scalar</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>abc54eccc4273e4f7dbd164e26f3a69b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>blocklevel</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>a5f713aea16fbf8acb13e8a85905cee9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02659.html</anchorfile>
      <anchor>adc60dfcff61c8b54288582c255fb59c0</anchor>
      <arglist>(std::ostream &amp;s, const ScaledIdentityMatrix&lt; K, n &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqILDL</name>
    <filename>a02611.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>std::remove_const_t&lt; M &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a66b040daaaef762e7581071062c7dfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a38c968bf76895d8454df7b847e092a5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a63103f0828ead2504cf798d9ea8c5ed5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>ae09ecbb3eb985e55e0d9cfcc65d89623</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>adc5fb39fd38c9a9b04953fbeb7272228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>aa3c44cdfcf86fdc7b093d0015cb72487</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILDL</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>aaf3bc3a1e545ae41840a3895678119b3</anchor>
      <arglist>(const std::shared_ptr&lt; const AssembledLinearOperator&lt; M, X, Y &gt;&gt; &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILDL</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a04ca3970b98f8b3684f3a4658a835361</anchor>
      <arglist>(const matrix_type &amp;A, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILDL</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a114411835d68bad5be37671da3816918</anchor>
      <arglist>(const matrix_type &amp;A, real_field_type relax=real_field_type(1))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a2337d20fbd612204355de4298e32670e</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>aa27e6c4709907cdee636dfdbaa32fea5</anchor>
      <arglist>(X &amp;v, const Y &amp;d) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>a30524a8746fc74b18a804ce12ba4099e</anchor>
      <arglist>([[maybe_unused]] X &amp;x) override</arglist>
    </member>
    <member kind="function">
      <type>SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02611.html</anchorfile>
      <anchor>af4c0abded1832259e5912149271f1f65</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqILU</name>
    <filename>a02603.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>std::remove_const&lt; M &gt;::type</type>
      <name>matrix_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a886c9956d6667cf14b9e9f548d6b1e7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type ::block_type</type>
      <name>block_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a14d1b703af7738c67bbbf31a57a4da07</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>ae2b7b144d533be7746439565848a525f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a44cb24f4963a5c3aea4eb85b6e411a73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>aaecbb58825a130f86b1435f7185e0a1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>ae54c3fe40fa4d69615da65edb48a1073</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>aa8f313cb0f449439fa64227e2c05a667</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ILU::CRS&lt; block_type, typename M::allocator_type &gt;</type>
      <name>CRS</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a386289e21289f9e02ca893eff43fabee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILU</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>ab47c50c8a4d5149bb086e5b28b48e124</anchor>
      <arglist>(const M &amp;A, real_field_type w, const bool resort=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILU</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>aee9fea7bee3247d6a921d18fa0bbaf89</anchor>
      <arglist>(const std::shared_ptr&lt; const AssembledLinearOperator&lt; M, X, Y &gt;&gt; &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILU</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a587350d7e034cd7d2e568a889cd6e45c</anchor>
      <arglist>(const M &amp;A, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqILU</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a0738617e25d9d0c515731067b6b8e7ac</anchor>
      <arglist>(const M &amp;A, int n, real_field_type w, const bool resort=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>aa995205788cab8e2bd23866ffd8943d7</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a2f3ef04d85ba6bdef38e55993413066b</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a5acb8154960a23b3592e5d57cb7d933d</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>ab3e8de3cbc8c900c86238872616217d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; matrix_type &gt;</type>
      <name>ILU_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>af2f7d755c646f56e1344e84b25b8ac54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CRS</type>
      <name>lower_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a5276e2a8fbc5eb4d014af8d895b6ab93</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>CRS</type>
      <name>upper_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>af7c0f39a1aa89a7dfc4e8ffdcb42be2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; block_type, typename matrix_type::allocator_type &gt;</type>
      <name>inv_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>ae3cdfda76bb3940b2b57002f717eeb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const real_field_type</type>
      <name>w_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>adb9656b8f8c3de4bc71edd2d798a02ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const bool</type>
      <name>wNotIdentity_</name>
      <anchorfile>a02603.html</anchorfile>
      <anchor>a56d284af2759ccbe61931ccd86adbfe7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqJac</name>
    <filename>a02599.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a35be4fb3c1cc34a64a76a3eb35e01a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>aad91bd37afbb53c8542f72b93a51148a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>aed41ed8906cd4910ff9ed6a15d44edd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a65cf060da925ea66168eb8e20156c1c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a42688396f70f5d8b2c26876e2e9196e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>ac9fdc47b31d93021e067d67a6a98966c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqJac</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>aed20397775b4b0d2a1b9f2cffdadd3a4</anchor>
      <arglist>(const M &amp;A, int n, real_field_type w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqJac</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a61659ab8821b2553a1686b7437cc8aad</anchor>
      <arglist>(const std::shared_ptr&lt; const AssembledLinearOperator&lt; M, X, Y &gt;&gt; &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqJac</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a2d277c383aa9dbab746ed1e53cfea453</anchor>
      <arglist>(const M &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>aa0bcf2407259eabfdef170001b401469</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a2e55a1752f387e30c5a10f8a026aa7cb</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>a2654fe4abd20166c9713fee00ee96c2d</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02599.html</anchorfile>
      <anchor>aeb3366e43f4657a6eb5ddaa264b08116</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqOverlappingSchwarz</name>
    <filename>a01403.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2c1e4ea9fee09a79b7aaf1b2b3c4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4902bcf720a9a2a000ceacb39486ac23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a42dd144168cffd7d1c2d4a889107f78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TM</type>
      <name>Mode</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2d4011786d2ab3eeeb24c6e1e84ff6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a00ba249b6b77136bb153c46347b389b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ab6387a55019a9d272855c893f13926bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TA</type>
      <name>allocator</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a8ff3fbfe11e269e3a881b95f411dc2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; size_type, std::less&lt; size_type &gt;, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; size_type &gt; &gt;</type>
      <name>subdomain_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4827605c7207dd2a28a54cf7acbcd399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; subdomain_type, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; subdomain_type &gt; &gt;</type>
      <name>subdomain_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a94ed586f1f44590f316c357fbc7f7fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLList&lt; size_type, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; size_type &gt; &gt;</type>
      <name>subdomain_list</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a143a9c56f2a32a499377177c83a1bf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; subdomain_list, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; subdomain_list &gt; &gt;</type>
      <name>rowtodomain_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>aa679bfde903b5a193f50e31837d22956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TD</type>
      <name>slu</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a50631a791fd5af07814343d834712e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; slu, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; slu &gt; &gt;</type>
      <name>slu_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a1f784bbbe8022c0428406ae55fa6ed64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8b6f1eb9ad0a1080f762446c800ee2ef</anchor>
      <arglist>(const matrix_type &amp;mat, const subdomain_vector &amp;subDomains, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae92d3496d89061727cbb287f66353cb5</anchor>
      <arglist>(const matrix_type &amp;mat, const rowtodomain_vector &amp;rowToDomain, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a8d1aa593fd7cd60086fdea0613e65e9d</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] X &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7165b943ac63555d9be74469dd1bdf0c</anchor>
      <arglist>(X &amp;v, const X &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a59d5039c7e70ddc66c7b469e08540898</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a0ebf920312afc78d62ca6b1975df6032</anchor>
      <arglist>(X &amp;v, const X &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a670e2db5edf079d3386e2c7a8fcc819a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, X &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt;</name>
    <filename>a01403.html</filename>
    <base>Preconditioner&lt; X, X &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2c1e4ea9fee09a79b7aaf1b2b3c4d0d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4902bcf720a9a2a000ceacb39486ac23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>range_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a42dd144168cffd7d1c2d4a889107f78e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TM</type>
      <name>Mode</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a2d4011786d2ab3eeeb24c6e1e84ff6c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a00ba249b6b77136bb153c46347b389b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>matrix_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>ab6387a55019a9d272855c893f13926bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TA</type>
      <name>allocator</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a8ff3fbfe11e269e3a881b95f411dc2a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::set&lt; size_type, std::less&lt; size_type &gt;, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; size_type &gt; &gt;</type>
      <name>subdomain_type</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a4827605c7207dd2a28a54cf7acbcd399</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; subdomain_type, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; subdomain_type &gt; &gt;</type>
      <name>subdomain_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a94ed586f1f44590f316c357fbc7f7fdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLList&lt; size_type, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; size_type &gt; &gt;</type>
      <name>subdomain_list</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a143a9c56f2a32a499377177c83a1bf59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; subdomain_list, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; subdomain_list &gt; &gt;</type>
      <name>rowtodomain_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>aa679bfde903b5a193f50e31837d22956</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TS</type>
      <name>slu</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a50631a791fd5af07814343d834712e25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; slu, typename std::allocator_traits&lt; TA &gt;::template rebind_alloc&lt; slu &gt; &gt;</type>
      <name>slu_vector</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a1f784bbbe8022c0428406ae55fa6ed64</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8b6f1eb9ad0a1080f762446c800ee2ef</anchor>
      <arglist>(const matrix_type &amp;mat, const subdomain_vector &amp;subDomains, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae92d3496d89061727cbb287f66353cb5</anchor>
      <arglist>(const matrix_type &amp;mat, const rowtodomain_vector &amp;rowToDomain, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a8d1aa593fd7cd60086fdea0613e65e9d</anchor>
      <arglist>([[maybe_unused]] X &amp;x,[[maybe_unused]] X &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7165b943ac63555d9be74469dd1bdf0c</anchor>
      <arglist>(X &amp;v, const X &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a0ebf920312afc78d62ca6b1975df6032</anchor>
      <arglist>(X &amp;v, const X &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a59d5039c7e70ddc66c7b469e08540898</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a01403.html</anchorfile>
      <anchor>a670e2db5edf079d3386e2c7a8fcc819a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, X &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzApplier</name>
    <filename>a01919.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>smoother</name>
      <anchorfile>a01919.html</anchorfile>
      <anchor>a3fb79574eded315d7e8279d2f2bce67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>smoother::range_type</type>
      <name>range_type</name>
      <anchorfile>a01919.html</anchorfile>
      <anchor>a156cceca5288b79112f0b55f41a16724</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a01919.html</anchorfile>
      <anchor>a6076729a19dd0e0099a52b0fb177228d</anchor>
      <arglist>(smoother &amp;sm, range_type &amp;v, const range_type &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzApplier&lt; SeqOverlappingSchwarz&lt; M, X, SymmetricMultiplicativeSchwarzMode, TD, TA &gt; &gt;</name>
    <filename>a01923.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SeqOverlappingSchwarz&lt; M, X, SymmetricMultiplicativeSchwarzMode, TD, TA &gt;</type>
      <name>smoother</name>
      <anchorfile>a01923.html</anchorfile>
      <anchor>ae702736435c9fed6160a11b57e8b0897</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>smoother::range_type</type>
      <name>range_type</name>
      <anchorfile>a01923.html</anchorfile>
      <anchor>af2aacfdff2df5dc3fe0dac1e346bb76d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a01923.html</anchorfile>
      <anchor>a99180b7ecea2049d7fbf0b8137f25c4e</anchor>
      <arglist>(smoother &amp;sm, range_type &amp;v, const range_type &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerHelper</name>
    <filename>a01407.html</filename>
    <templarg></templarg>
    <templarg>tag</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</name>
    <filename>a01927.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; K, Al &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a01927.html</anchorfile>
      <anchor>a17c21dbe7634ee5f72e8f8b3a0323823</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga1f5c5f46969aca8a8cfb6953bcf9d230</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, [[maybe_unused]] const matrix_type &amp;mat, [[maybe_unused]] Solvers &amp;solvers, const SubDomains &amp;subDomains, [[maybe_unused]] bool onTheFly)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a01927.html</anchorfile>
      <anchor>a3df890360376333d40e7b1e8365f86bf</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01927.html</anchorfile>
      <anchor>a5bbd9bb7d40d95533417e9c5ca9c38e6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</name>
    <filename>a01939.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::SeqOverlappingSchwarzAssemblerILUBase</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a5aee4c2388849de9ba7ef2f6afdc69f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0aa914d086d8b0320f101b2f076ac991</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;subDomains, bool onTheFly)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a8d27aa037d7607e12f8a0a7029363027</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</name>
    <filename>a01943.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::SeqOverlappingSchwarzAssemblerILUBase</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a5aee4c2388849de9ba7ef2f6afdc69f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0aa914d086d8b0320f101b2f076ac991</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;subDomains, bool onTheFly)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a8d27aa037d7607e12f8a0a7029363027</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</name>
    <filename>a01931.html</filename>
    <templarg>S</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; T, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a01931.html</anchorfile>
      <anchor>a3a126ea72725fae253352af3f991e91b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad2c38596fb38fbd904e356cea2bcd554</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01931.html</anchorfile>
      <anchor>a8db28cef27665da8976dedf6a92e3c6b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzAssemblerILUBase</name>
    <filename>a01935.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a5aee4c2388849de9ba7ef2f6afdc69f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0aa914d086d8b0320f101b2f076ac991</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;subDomains, bool onTheFly)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a01935.html</anchorfile>
      <anchor>a8d27aa037d7607e12f8a0a7029363027</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzDomainSize</name>
    <filename>a01947.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SeqOverlappingSchwarzDomainSize&lt; BCRSMatrix&lt; T, A &gt; &gt;</name>
    <filename>a01951.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>size</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>a71535882851813de6f3e4d942f2516c9</anchor>
      <arglist>(const Domain &amp;d)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>n</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>af16eeb13068117b9acf658a12edf408b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_t</type>
      <name>m</name>
      <anchorfile>a01951.html</anchorfile>
      <anchor>ac44660635d12770c581c61afdc8ed6aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SeqOverlappingSchwarzSmootherArgs</name>
    <filename>a02519.html</filename>
    <templarg></templarg>
    <base>Dune::Amg::DefaultSmootherArgs</base>
    <member kind="enumeration">
      <type></type>
      <name>Overlap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga22fb6db8e79193a001ad79f7bf55d3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a9b354c310e716b743c1c923ad4966a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a0c4644f80ab36fa5f0905fdd0983ec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pairwise</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a50d188b2155182cb3b391160cd4153b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a505e0d6253fa516d910e78dd8793b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a9b354c310e716b743c1c923ad4966a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a0c4644f80ab36fa5f0905fdd0983ec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pairwise</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a50d188b2155182cb3b391160cd4153b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a505e0d6253fa516d910e78dd8793b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>RelaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa96ee6835f5db1ddd21234ac1f272874</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarzSmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga85e8fa9aeacc941e58aaa24e97f67316</anchor>
      <arglist>(Overlap overlap_=vertex, bool onthefly_=false)</arglist>
    </member>
    <member kind="variable">
      <type>Overlap</type>
      <name>overlap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe264e153a2e6d9ee9a79fe314b341ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onthefly</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d3815b549e94d0a2569edc4e32a45b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf86eaea0d7dc0f7841c91ee60cadc3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelaxationFactor</type>
      <name>relaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad1b07aaab2acba6665e54db06cec5e4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqScalarProduct</name>
    <filename>a02647.html</filename>
    <templarg></templarg>
    <base>Dune::ScalarProduct</base>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a84d88e2981586460b457ff766db16211</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a7cba93c577072c40f285285441139ffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>acc45df54963b461b89d04ceef3818621</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual field_type</type>
      <name>dot</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a261a4e5d403a4412cd03ea52a670e0fd</anchor>
      <arglist>(const X &amp;x, const X &amp;y) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual real_type</type>
      <name>norm</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>ae1935accd5a239a5bd274cb286cedb4a</anchor>
      <arglist>(const X &amp;x) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02639.html</anchorfile>
      <anchor>a29cf855e6aca8d43341a820e41aefa6d</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqSOR</name>
    <filename>a02595.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a19c8b9476931e56f9c086e12fee9dbe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a59e703c6a6c3b5114828466edeb579ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>abe12d0acefc8e81c045c8105d943c74c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>af0936a1bb7f8855b219e31cb72b39588</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a807c518e7abd4decafc1fa70768206c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a235d5691734804acfb5827b16dd5a8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSOR</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>af4fa23f945d44595e7e97e2a1af1076f</anchor>
      <arglist>(const M &amp;A, int n, real_field_type w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSOR</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a843990929e5e2a2701c256dc3cc15f3a</anchor>
      <arglist>(const std::shared_ptr&lt; const AssembledLinearOperator&lt; M, X, Y &gt;&gt; &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSOR</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>acd82d2e5f0a633b79332e3a9a80cba0f</anchor>
      <arglist>(const M &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a9573f3179d51ee681300d41130fef526</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>aae877d1d5884ebe5d47f2f140d28b144</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a3261a46d3c625a277b928f3233aa84cb</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>afe099e73cb15c2600f04cc4ed6bae5ce</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02595.html</anchorfile>
      <anchor>a87c73e7cf465824b34f143470347e806</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SeqSSOR</name>
    <filename>a02591.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <base>Dune::Preconditioner</base>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ab9aaf438a086ec04c9a29f77f144d7b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>domain_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ab43f1555220cf61b9df1b5474d85c751</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Y</type>
      <name>range_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ae0be15bb4a594b37b802605715337c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a81831aed301d8c4069ce92ca9138c5b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; field_type &gt;</type>
      <name>scalar_field_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a8503e1874699dd6a5dd5d90c2e977f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; scalar_field_type &gt;::real_type</type>
      <name>real_field_type</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ae76ede452fe62985c04ede92c0cec5a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSSOR</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>afb5a0a8e24a3c8cc2edb9070af781f72</anchor>
      <arglist>(const M &amp;A, int n, real_field_type w)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSSOR</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a06231d3a7d9c633f3d3973b3c17b718c</anchor>
      <arglist>(const std::shared_ptr&lt; const AssembledLinearOperator&lt; M, X, Y &gt;&gt; &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqSSOR</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a2dc017a9cacd8f7e09eb863fcc8c7781</anchor>
      <arglist>(const M &amp;A, const ParameterTree &amp;configuration)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a32146b7c91378c73b3ed296cadece178</anchor>
      <arglist>([[maybe_unused]] X &amp;x, [[maybe_unused]] Y &amp;b)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ac85e34f610d11d6074648690b601e105</anchor>
      <arglist>(X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>ac285b85dfa7ea77121549e147e17e8e9</anchor>
      <arglist>([[maybe_unused]] X &amp;x)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02591.html</anchorfile>
      <anchor>a451bd8573ba751de02d9c25dd48028a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(X &amp;x, Y &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(X &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SequentialCommunicationArgs</name>
    <filename>a02139.html</filename>
    <member kind="function">
      <type></type>
      <name>SequentialCommunicationArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf68ac8d5bd8b060c0f2385d1fd54054c</anchor>
      <arglist>(CollectiveCommunication&lt; void * &gt; comm, [[maybe_unused]] int cat)</arglist>
    </member>
    <member kind="variable">
      <type>CollectiveCommunication&lt; void * &gt;</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga02d37918b5fb883f9c57d89f28f45019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SequentialInformation</name>
    <filename>a02411.html</filename>
    <member kind="typedef">
      <type>CollectiveCommunication&lt; void * &gt;</type>
      <name>MPICommunicator</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a38cc64b9b0c6a2b27ee6c5bd59f84bc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EmptySet&lt; int &gt;</type>
      <name>CopyFlags</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a6821ff5f42a9299c8a6d7b65458c5e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AllSet&lt; int &gt;</type>
      <name>OwnerSet</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a7c09b216be914412786aa3acc33d4913</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>ac4efb6eb0660bef61c283ff38bb56b09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>aca8859169b0d01fdbc22eae11cdd91b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPICommunicator</type>
      <name>communicator</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a839c22211ba9b6e99bf75b7ab97c4cda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>procs</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>acbced7ac3019ceb0b0e65dab421a3b60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>globalSum</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a21ad4f71b3f402d51d50d8ea66c3d353</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildGlobalLookup</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a84745a1db9dcee837b626916df9055ab</anchor>
      <arglist>(std::size_t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeGlobalLookup</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>ac2d59bd2fdfc0690f0bf5e1cb1b1d485</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalLookupIndexSet &amp;</type>
      <name>globalLookup</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a9a321efd890d9f827c544e0eebb7a5de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyOwnerToAll</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>adc6b2823324c4dcab7dbe8dea7c74245</anchor>
      <arglist>([[maybe_unused]] V &amp;v, [[maybe_unused]] V &amp;v1) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>project</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a3ba887f0ae3bd8fe406507b305015d23</anchor>
      <arglist>([[maybe_unused]] V &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dot</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a45ae97ea986110a05cd3b092728e30e1</anchor>
      <arglist>(const T1 &amp;, const T1 &amp;, T2 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename T1::field_type &gt;::real_type</type>
      <name>norm</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>ad8fa37847459acc607d567dab3792003</anchor>
      <arglist>(const T1 &amp;) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequentialInformation</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a28170814a630f80e4237e16154e51745</anchor>
      <arglist>(const CollectiveCommunication&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequentialInformation</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>a0c8e51f9c3033b70446848f716a1cf6e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequentialInformation</name>
      <anchorfile>a02411.html</anchorfile>
      <anchor>ac0bdf6f370e666a9509f25381d22c689</anchor>
      <arglist>(const SequentialInformation &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherApplier</name>
    <filename>a02499.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga70013fc79e744c92cb652a859bdea5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabc5c514f2c28e676fee83c382a03dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaabfbaf030c71c3733beecd689567079b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb9809e8ad5d1467042fd1f633cbc1bb</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa5289973434af337b81c8b7119efe832</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherApplier&lt; BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</name>
    <filename>a02507.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga75f8cd10d36efd9060d7cb723a133caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf2545d0586fe41e2055b58612eb95b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafed382e27f0ca8095df897e3a814b3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga691d13f78b7f4e1570a92feca86612ef</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaecc26d44bce448c5dacdda88b9d71cca</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherApplier&lt; NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</name>
    <filename>a02511.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1f8a3902613f2ff0202781be8ea9c23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3da40a137914075554408ff7c9ba6d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaa0e2c3a0091cdc60bec043afe8a0228</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga372dc8c9f9eebb2fec4868371af22f95</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga056794b1cdc123405b6f6ff093df554b</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherApplier&lt; SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt; &gt;</name>
    <filename>a02515.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab5854369002cf510c2c4b06e93e506e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f5737e52e5a72172596c76494ee1959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fad1352c0333fa3d6c713fcae46c2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a2eceb1b037653dc2dfea1386ebec60</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad05c96dbbad1e06f8d313692a950de13</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherApplier&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</name>
    <filename>a02503.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>l</templarg>
    <member kind="typedef">
      <type>SeqSOR&lt; M, X, Y, l &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ff8b61ca20e1641187c5ef7384c6f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae694b870752c56965e09c018003931ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadcd5dec4b85d722a21d03bb6289e27d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga723060d6ce458282bb359492bc7f576e</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga20714653f70eb0d14b36ea9ecb3188ab</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherTraits</name>
    <filename>a02431.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</name>
    <filename>a02439.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::SmootherTraits</base>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</name>
    <filename>a02443.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::SmootherTraits</base>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherTraits&lt; Richardson&lt; X, Y &gt; &gt;</name>
    <filename>a02435.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename X::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0169e32972c29640daa5129fe2ef9c46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmootherTraits&lt; S &gt;</name>
    <filename>a02431.html</filename>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::SmootherTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</name>
    <filename>a02523.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SeqOverlappingSchwarzSmootherArgs&lt; typename M::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga33e074c40770eb06dfc3aa2befe72c99</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SmootherTraits&lt; Smoother &gt;</name>
    <filename>a02431.html</filename>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DirectSolverSelector::Solver</name>
    <filename>a02095.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>InverseOperator&lt; Vector, Vector &gt;</type>
      <name>type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga893f8e9289ba8f3173b9f49b52b174a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae086efdf4e380c8da95941e13cccb429</anchor>
      <arglist>(const M &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga61b5facc05aabcb4873ae1bf154d0aa2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::DirectSolverSelector::Solver&lt; M, superlu &gt;</name>
    <filename>a02099.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>SuperLU&lt; M &gt;</type>
      <name>type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6ff9353166a5cd58addc1acb4659e400</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf92561d82f1faddac07316e102369d01</anchor>
      <arglist>(const M &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga243e2cff76517614a39929872c20b505</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SolverAbort</name>
    <filename>a01395.html</filename>
    <base>Dune::ISTLError</base>
  </compound>
  <compound kind="struct">
    <name>Dune::SolverCategory</name>
    <filename>a02703.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Category</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sequential</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733add8be425650b870002d9381aea1203b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonoverlapping</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733af68b4bea0af23042d9597ca634782187</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlapping</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733afa10e78074c8114bcbcd6dfae4dc0888</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>sequential</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733add8be425650b870002d9381aea1203b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonoverlapping</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733af68b4bea0af23042d9597ca634782187</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overlapping</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae061380ac961490be6ee353cf0dc1733afa10e78074c8114bcbcd6dfae4dc0888</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Category</type>
      <name>category</name>
      <anchorfile>a02703.html</anchorfile>
      <anchor>ae4e4556d105b5ee100a3f57921845cc4</anchor>
      <arglist>(const OP &amp;op, decltype(op.category()) *=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SolverFactory</name>
    <filename>a02711.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Solver &gt;</type>
      <name>get</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>a2a932516bd2ef16f0c30001a72e45c0e</anchor>
      <arglist>(std::shared_ptr&lt; Operator &gt; op, const ParameterTree &amp;config, std::shared_ptr&lt; Preconditioner &gt; prec=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>getPreconditioner</name>
      <anchorfile>a02711.html</anchorfile>
      <anchor>aca9f5a7bb0ad966b38ccaa46a4c1499d</anchor>
      <arglist>(std::shared_ptr&lt; Operator &gt; op, const ParameterTree &amp;config)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SolverHelper</name>
    <filename>a02691.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::SolverHelper::Implementation</class>
    <class kind="struct">Dune::SolverHelper::Implementation&lt; true, Dummy &gt;</class>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setMatrix</name>
      <anchorfile>a02691.html</anchorfile>
      <anchor>ad262bc942bd8e5d74bd581eab94fe03f</anchor>
      <arglist>(ISTLLinearSolver &amp;solver, const BCRSMatrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SparsityBuilder</name>
    <filename>a02207.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SparsityBuilder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga61cba58ac46ad49637851ce60ba8b5b8</anchor>
      <arglist>(M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2086b35723d77a9d2250803442609df1</anchor>
      <arglist>(const typename M::size_type &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga169b6aa05bc110e2a9882771443f1fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabc4adf712bede8e132262041d2b2c2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafeec70ea616b6517ae670978d60c3cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>sumRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf9eb995529959729510dfd62e5bac04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ff7bf1e248290ed6d32bc0c04c7c91f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SPQR</name>
    <filename>a02783.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::SPQR&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</name>
    <filename>a02787.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <base>InverseOperator&lt; BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5cff5d5b4933a1d1652e5877c31547c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga092a5f68cdb7e090971eed16a2283db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrix&lt; T, int &gt;</type>
      <name>SPQRMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7dc83a7110f714f8b5f337f8cc774b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;, int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga59d41c0cfd544e49265336f04572bf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, m &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae50842ca64424731e5303fb3c1cf5b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, n &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt;</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac75cd7a5d3646f85730f745d24f6eea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>adce5c3d7c39415d90326ccc06b94b9dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>ae08de8ceccc057d0785cfda953796a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Simd::Scalar&lt; real_type &gt;</type>
      <name>scalar_real_type</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a7ef8454657f69b2e69fcd9a2779cee4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga32a5179ee78f88b18339efe81b244f1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf080b2a0f8f47ff73a90424f2b1f8e07</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga24f75cbb35430672b9789be6266c59e2</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gab9bfdd551347ec60dd22eda535293e63</anchor>
      <arglist>(const Matrix &amp;matrix, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5ee766cfa3feafe0a0bd65bc13b1a475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0c934bcb35576886a3f7714d10b30841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae9cfd092f0ea9eca11e781081bf1b66f</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac9d25f7292ebc4c47baef1dc050bfb03</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1af8cd2c780b52c6f2f6cbf465425aee</anchor>
      <arglist>([[maybe_unused]] unsigned int option, [[maybe_unused]] double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga40ec2b3ea16b1e214d38b566f4d07cf0</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad508264b96a682fb12c2f6cb713a10b6</anchor>
      <arglist>(const Matrix &amp;matrix, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga74ce7b219647c76880a615371c57c173</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>SuiteSparseQR_factorization&lt; T &gt; *</type>
      <name>getFactorization</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga460031c417fd3d5ff7cfb076944b140c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPQRMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0d22d4beef518731972e2fb501f053a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga9279ff319501416c8aef04beeeb3b3f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga114f5d3865c29cca6546ed3eb7f171f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aaef4f0b84f4a983421f15b6eea8c69ab</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a57a25fc54525ae58726ec0f274d5cc29</anchor>
      <arglist>(BlockVector&lt; FieldVector&lt; T, m &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt; &amp;x, BlockVector&lt; FieldVector&lt; T, n &gt;, std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt; &amp;b, double reduction, InverseOperatorResult &amp;res)=0</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>iterationSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa9fce7d3cb1a28247f8d0f8fe2d3863a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>normSpacing</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>aa1dfd25631ab66c43480f464a732afcaa3e7887a2fbc4f073d7c6dde204557d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a07986680755603e2cc783f8be1994d1f</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a45229eb4007296995264f4277a89b51c</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm, const DataType &amp;norm_old) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>printOutput</name>
      <anchorfile>a02679.html</anchorfile>
      <anchor>a1c5876dba1ae3409f017e30cbd0a7838</anchor>
      <arglist>(std::ostream &amp;s, const CountType &amp;iter, const DataType &amp;norm) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; SPQR&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf6c75277347dc579096dad4b00f4d18a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SPQRCreator</name>
    <filename>a02799.html</filename>
    <class kind="struct">Dune::SPQRCreator::isValidBlock</class>
    <class kind="struct">Dune::SPQRCreator::isValidBlock&lt; FieldVector&lt; double, 1 &gt; &gt;</class>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafd9004782bd927d6648d0717e161566c</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5c1b29274127bb78620df09136a9dd7e</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt;!isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StoresColumnCompressed</name>
    <filename>a02779.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>aaa072256b6800bc00cbc1e465b961cafacb724e18cd89e6cf797ee3208c3bc00c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02779.html</anchorfile>
      <anchor>aaa072256b6800bc00cbc1e465b961cafacb724e18cd89e6cf797ee3208c3bc00c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StoresColumnCompressed&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</name>
    <filename>a01423.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>m</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga5b2f66ea42c241eada1d0555351c66e8a63e2861b4157098fd1d9cc43e26f3399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga5b2f66ea42c241eada1d0555351c66e8a63e2861b4157098fd1d9cc43e26f3399</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StoresColumnCompressed&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</name>
    <filename>a02795.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggaa3aa85a2578dfcb40ca192d66d30bcfda33337696b5e0fc5b5671a19bf5df3ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggaa3aa85a2578dfcb40ca192d66d30bcfda33337696b5e0fc5b5671a19bf5df3ac8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StoresColumnCompressed&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</name>
    <filename>a02847.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02847.html</anchorfile>
      <anchor>a5803871605235ba862e5b3f387e710dea9caeae1c8d923befbdc975c084b6dbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a02847.html</anchorfile>
      <anchor>a5803871605235ba862e5b3f387e710dea9caeae1c8d923befbdc975c084b6dbe9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StoresColumnCompressed&lt; UMFPack&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</name>
    <filename>a02955.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga88afeca9a86007ff972718ebf44982c5afbf509559c932f8002608ecdfc25ad8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga88afeca9a86007ff972718ebf44982c5afbf509559c932f8002608ecdfc25ad8b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SubGraph</name>
    <filename>a02291.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::Amg::SubGraph::EdgeIndexMap</class>
    <class kind="class">Dune::Amg::SubGraph::EdgeIterator</class>
    <class kind="class">Dune::Amg::SubGraph::VertexIterator</class>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aafca1374f2584990399c44a7977ba6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Excluded</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a74aba3454ad4cdd7e919cfe5c9ad98f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>ae935b74e150a8a496b56457eb5372c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexDescriptor *</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aed3a017a3478c478ec701ef331afeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIterator</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a93694e4002a19af280165897a4198c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIterator</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>ab3b94b5e9a372f39695e3fb98370a742</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeIndexMap</type>
      <name>getEdgeIndexMap</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a42d17bd2abc268b1d8d943a0ef3fdab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>acec5149115bb0a26c310cd8dddba0eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a4e4c83aa6e0f682fd8980ba41e291f20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a5496129c75ef425dcaabaf1fe75e8265</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a4d5611fde849f9a5ae2b596510664aed</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a6b68cfefb48a109714f11335371173b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a27da00309985f4f869ffb31d0df03127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a47bbf2810675aaec3f0fe54c751147e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeDescriptor</type>
      <name>findEdge</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a1dc167d99ef9f65d850d77734b3dd98c</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubGraph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aca352a31b817cd349df10182a2cd6adb</anchor>
      <arglist>(const Graph &amp;graph, const T &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubGraph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a908aeca1dce7cc3c3a5380b688de81de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SubGraph&lt; Graph, T &gt;</name>
    <filename>a02291.html</filename>
    <member kind="typedef">
      <type>Graph</type>
      <name>Graph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aafca1374f2584990399c44a7977ba6d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Excluded</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a74aba3454ad4cdd7e919cfe5c9ad98f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>ae935b74e150a8a496b56457eb5372c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexDescriptor *</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aed3a017a3478c478ec701ef331afeff5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EdgeIterator</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a93694e4002a19af280165897a4198c31</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIterator</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>ab3b94b5e9a372f39695e3fb98370a742</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeIndexMap</type>
      <name>getEdgeIndexMap</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a42d17bd2abc268b1d8d943a0ef3fdab0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>acec5149115bb0a26c310cd8dddba0eb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a4e4c83aa6e0f682fd8980ba41e291f20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a5496129c75ef425dcaabaf1fe75e8265</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a4d5611fde849f9a5ae2b596510664aed</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a6b68cfefb48a109714f11335371173b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a27da00309985f4f869ffb31d0df03127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a47bbf2810675aaec3f0fe54c751147e0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeDescriptor</type>
      <name>findEdge</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a1dc167d99ef9f65d850d77734b3dd98c</anchor>
      <arglist>(const VertexDescriptor &amp;source, const VertexDescriptor &amp;target) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubGraph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>aca352a31b817cd349df10182a2cd6adb</anchor>
      <arglist>(const Graph &amp;graph, const T &amp;excluded)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SubGraph</name>
      <anchorfile>a02291.html</anchorfile>
      <anchor>a908aeca1dce7cc3c3a5380b688de81de</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SuperLU</name>
    <filename>a02839.html</filename>
    <templarg></templarg>
    <base>InverseOperator&lt; Impl::SuperLUVectorChooser&lt; M &gt;::domain_type, Impl::SuperLUVectorChooser&lt; M &gt;::range_type &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a5aef94dd308304ec45ddd56e7df41a2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a4b783015b168c2a1198241e0d9718793</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::SuperLUMatrix&lt; Matrix &gt;</type>
      <name>SuperLUMatrix</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>ac9860c01391314266646c4b0334bb236</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SuperMatrixInitializer&lt; Matrix &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a4f67b6859fef4caeccc6b9403772d58d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::SuperLUVectorChooser&lt; M &gt;::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a892bb1cac32b9c5c1d8901256aaa6697</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::SuperLUVectorChooser&lt; M &gt;::range_type</type>
      <name>range_type</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a31a5e1c0e9e5809efe745407e92ef500</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>ac00d9853c56ed71387480c7aa2e10279</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4c8de46c1ca69781a94bea29ac1522cc</anchor>
      <arglist>(const Matrix &amp;mat, bool verbose=false, bool reusevector=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLU</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>acd6318f93d496919b77b93f1f39e0fba</anchor>
      <arglist>(const Matrix &amp;mat, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaddd436aef0059fbf9f0f3ec606dbf944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa118b7d2e5bb4d3c0dea91d0b0ba4c62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3ed50b203695f205ce598fe118eee670</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a101786fa1de20759cd6d5d6d4c4e5482</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga62b6c1546957132d8d7f0f2811a415dc</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae6c3893092ac19b99c10377c8933ae63</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>SuperLUMatrix::size_type</type>
      <name>nnz</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a1808623796ef5bac50935652dbd18a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2d3f36d559bc6611c3c12608a9a249c1</anchor>
      <arglist>(const Matrix &amp;mat, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga756d4cdf5301c9107b009a91a7d839dc</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8aa8dd7abddc925828a3816bbad613d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>afa6341c753f377acf91d77d41bae6076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; SuperLU&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a02839.html</anchorfile>
      <anchor>a424cc6b63c2de52dc31f826a5441bbd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUCreator</name>
    <filename>a02851.html</filename>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; double &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; double, k &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; Dune::FieldVector&lt; std::complex&lt; double &gt;, k &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator::isValidBlock&lt; std::complex&lt; double &gt; &gt;</class>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a02851.html</anchorfile>
      <anchor>a090c785402984c2b6e54b22338bb81e2</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a02851.html</anchorfile>
      <anchor>aa8b209717aee54a14260205b72d8f0bf</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt;!isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUDenseMatChooser</name>
    <filename>a02815.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUMatrix</name>
    <filename>a02907.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt;</name>
    <filename>a02915.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; B, TA &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a96b9d8634831bdb8e7e9731fd31f3b9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a836515f8e45d64629628fe2bc0c3449b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLUMatrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a512eb9cd658925a81ae2f7075d223f11</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLUMatrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a782fffd0cffc61c1fcad1c230785e0e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SuperLUMatrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ad88e0370dcebc3e24e082d78f6b9b141</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator SuperMatrix &amp;</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a741d674e963ff8acf6213ca9eeda4d29</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator const SuperMatrix &amp;</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a4ad13b42fb7ac3d72c966e4a6434cb61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a531b46e4e89bc12e2c11fb0c28b33a91</anchor>
      <arglist>(const BCRSMatrix&lt; B, TA &gt; &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>af3fc486ae9ade4415d7dcc99315fd424</anchor>
      <arglist>(const SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt; &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>ac680e4279292db4e6593b7787340d5a0</anchor>
      <arglist>(const Matrix &amp;mat, const std::set&lt; std::size_t &gt; &amp;mrs)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a6c65f127a84d53b86e219d4f72a512c7</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>free</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a1484fe5eab76486e9bb8fcbc2ab7857c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SuperMatrixInitializer&lt; BCRSMatrix&lt; B, TA &gt; &gt;</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a62bdb9764a4f1098d46e99eb0418d3bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; SuperLU&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a02915.html</anchorfile>
      <anchor>a424cc6b63c2de52dc31f826a5441bbd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SuperLUMatrix&lt; Matrix &gt;</name>
    <filename>a02907.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUQueryChooser</name>
    <filename>a02819.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperLUSolveChooser</name>
    <filename>a02811.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperMatrixCreateSparseChooser</name>
    <filename>a02875.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperMatrixInitializer</name>
    <filename>a02911.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::SuperMatrixInitializer&lt; BCRSMatrix&lt; B, A &gt; &gt;</name>
    <filename>a02919.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; B, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>a2d2111b2cf49a6545bbae2862d0195e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::SuperLUMatrix&lt; Matrix &gt;</type>
      <name>SuperLUMatrix</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>a2aa9edf71a2975c8ebf132cb6c4a5094</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperMatrixInitializer</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>afb2ecb4144a73d7c9ee91d75cf86261e</anchor>
      <arglist>(SuperLUMatrix &amp;lum)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperMatrixInitializer</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>a3a160a8fd30c5e0835a8c9f5ef3898a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>createMatrix</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>a887002f83771145608068441f668667f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OverlappingSchwarzInitializer</name>
      <anchorfile>a02919.html</anchorfile>
      <anchor>af61bc1ba93843a48a5107821ad3e2646</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SuperMatrixPrinter</name>
    <filename>a02879.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SymmetricCriterion</name>
    <filename>a02011.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>AggregationCriterion&lt; SymmetricDependency&lt; M, Norm &gt; &gt;</base>
    <member kind="typedef">
      <type>SymmetricDependency&lt; M, Norm &gt;</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30338139b017b5a898350c3c5e368a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga65efb2e151489eb39de0b953bc205a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c9089eed18a881ea305ab6eb3a464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5354f976f8656a31fb61761f3cfc594b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga741c8e2d0a32adef62624dbad7cec1f3</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28c39e4cfeb485ee20dfb936a14d773f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabb7b7362105cccadd41c912142061234</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaca3638072863982d108fd6081ac4eb62</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fee6a17a971fce9fa8696cdba418b28</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga50ecac18351ec35ce29e1aed68238b7f</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaea541c8df65d3ce1d00dbac64f1096c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa6e92a58d04a032499f92d7266c3e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c61e4b54daeccbc59b7fb2dccc49e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11737c528bb8a66108c28e5430b6d79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga758ae8319a1b2815cbe9d5ed7a658c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga24be101071dea7448b30e71c1ba325a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9544d0f92497c059c356c4af967fd313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7744864a59f4dd34ff15daba4b95e5aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SymmetricDependency</name>
    <filename>a01987.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::Parameters</base>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30338139b017b5a898350c3c5e368a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga65efb2e151489eb39de0b953bc205a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c9089eed18a881ea305ab6eb3a464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5354f976f8656a31fb61761f3cfc594b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabb7b7362105cccadd41c912142061234</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaca3638072863982d108fd6081ac4eb62</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fee6a17a971fce9fa8696cdba418b28</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga50ecac18351ec35ce29e1aed68238b7f</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaea541c8df65d3ce1d00dbac64f1096c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga79f3316eaebdc1be2f60e87e7c43b2a3</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaed9dda0eef852310de336c721d277fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa6e92a58d04a032499f92d7266c3e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c61e4b54daeccbc59b7fb2dccc49e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11737c528bb8a66108c28e5430b6d79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga758ae8319a1b2815cbe9d5ed7a658c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga24be101071dea7448b30e71c1ba325a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9544d0f92497c059c356c4af967fd313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7744864a59f4dd34ff15daba4b95e5aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SymmetricMatrixDependency</name>
    <filename>a01979.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Amg::Parameters</base>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd77efe714fb158d01297d84dc83b605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadf1bdaa23c2e47e4018b12fe0261aee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9c83dc0f58bfdfeadec924aaffb054c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga057146198ca8eb64f54896e348a17bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga767994b142a00d1f9fe180561fad752f</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35b7cfe585823cad8dcc2844f1c9d8ef</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3d16776c6097046b7837579352ebe313</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga70b5c6d276ef88417782c3be13ac3b5a</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade54c59c177076c9d4902ae8fc9fc419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrixDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga15132a70498eab5c21d76577dbfd97cb</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrixDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga99d6bb6845753caab76aec7848a3bef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5604308bb10f8670e47e676417de39b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac86fa92e4aabb0cb547ebd2d253a10a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf7e51905d114d37191922a05fa2828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6f06881ca147d52e5415c45213f02dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6f49776f37c2b2c6fcedbdc30acad6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ea4812f77ebb779e8f1f802e53ab90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga312a20bd5c99c709b08c01ee30c54408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; real_type &gt;</type>
      <name>vals_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63ed137a432c6f7c0dcdc7005f1dae94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; real_type &gt;::iterator</type>
      <name>valIter_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0286a238b808e43685d44f6855e7b909</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SymmetricMultiplicativeSchwarzMode</name>
    <filename>a01843.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Transfer</name>
    <filename>a02547.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>V1</type>
      <name>Vertex</name>
      <anchorfile>a02547.html</anchorfile>
      <anchor>ae20c9f795e3f9b85c9f754efc1d09f34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V2</type>
      <name>Vector</name>
      <anchorfile>a02547.html</anchorfile>
      <anchor>ae7a9e0b08a854368a9835f96e13fb9d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a02547.html</anchorfile>
      <anchor>ac34819fc1245284ef606a4af77adfe0f</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, Vector &amp;fineRedist, T1 damp, R &amp;redistributor=R())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a02547.html</anchorfile>
      <anchor>a47baa9837c68ceec99e76d5338aacc90</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T1 damp)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restrictVector</name>
      <anchorfile>a02547.html</anchorfile>
      <anchor>a1d01049784803fa71d34798df8338fd5</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, const Vector &amp;fine, T &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Transfer&lt; V, V1, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</name>
    <filename>a02555.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>V</type>
      <name>Vertex</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a49631530aa554edf35c9e69d6d457880</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V1</type>
      <name>Vector</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a9a799cd8535b51cc7ce661a2bd0f106e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RedistributeInformation&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</type>
      <name>Redist</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a560f538cf3810cf55c237a4e4b60e154</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad20090156f407bb668ff938d44b02781</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T3 damp, [[maybe_unused]] OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeab72ebbef8da0ec759d810d83318041</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, Vector &amp;fineRedist, T3 damp, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm, const Redist &amp;redist)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a02555.html</anchorfile>
      <anchor>a85ef4477b6a700772a792be0bbdfccb1</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T3 damp, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restrictVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3caefd07cbc084a828c0784888fe4d49</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, const Vector &amp;fine, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::Transfer&lt; V, V1, SequentialInformation &gt;</name>
    <filename>a02551.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>V</type>
      <name>Vertex</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a913bc0f978b80cce92f39da159f850d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V1</type>
      <name>Vector</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a94441a83080ee5e809e360aaa8e1c0ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RedistributeInformation&lt; SequentialInformation &gt;</type>
      <name>Redist</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>a59712c0d5cf47ef412fa050bc82f3130</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7e7558ae35bb30097fa9206cea8a4fb</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, [[maybe_unused]] Vector &amp;fineRedist, T damp, [[maybe_unused]] const SequentialInformation &amp;comm, [[maybe_unused]] const Redist &amp;redist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251e2fb94cbed34fe38a00da51470afe</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T damp, [[maybe_unused]] const SequentialInformation &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>ab55752e8d89645b355f1cfa721475ac6</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, Vector &amp;fineRedist, T1 damp, const SequentialInformation &amp;comm=SequentialInformation(), const Redist &amp;redist=Redist())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a02551.html</anchorfile>
      <anchor>af3a7851102d9b05d4ade04f357ea56cc</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T1 damp, const SequentialInformation &amp;comm=SequentialInformation())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restrictVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6215538432f75100a856ab8a7ea3d0b0</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, const Vector &amp;fine, const SequentialInformation &amp;comm)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TransposedMatMultMatResult</name>
    <filename>a01663.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::TransposedMatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</name>
    <filename>a01671.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>k</templarg>
    <templarg>m</templarg>
    <member kind="typedef">
      <type>BCRSMatrix&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type, std::allocator&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type &gt; &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae1303da5347abfc8c4a2866fe10b77ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TransposedMatMultMatResult&lt; FieldMatrix&lt; T, k, n &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</name>
    <filename>a01667.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg>k</templarg>
    <templarg>m</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; T, n, m &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaa01338622c2e1f2a2be03427e2493fc7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::TwoLevelMethod</name>
    <filename>a02575.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Preconditioner&lt; FO::domain_type, FO::range_type &gt;</base>
    <member kind="typedef">
      <type>CSP</type>
      <name>CoarseLevelSolverPolicy</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a980f41e84c060a7d78c721d8241718f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseLevelSolverPolicy::CoarseLevelSolver</type>
      <name>CoarseLevelSolver</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a53e293fd2e2de5376cdfb94d7db09cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FO</type>
      <name>FineOperatorType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a52ba41947d0462d1c56db18e8bca1970</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::range_type</type>
      <name>FineRangeType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ace37b830285c593c50974293e8203978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FineOperatorType::domain_type</type>
      <name>FineDomainType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a104793659f1a3e7fea33dcb6f5030e32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CSP::Operator</type>
      <name>CoarseOperatorType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ada59fb72d3600a62165acfd72b02dcfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::range_type</type>
      <name>CoarseRangeType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a06db680ef31e1ea531ddc187aaa81e43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CoarseOperatorType::domain_type</type>
      <name>CoarseDomainType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a9dc006f0e69edda7fa31610e6e68f7e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>SmootherType</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>aef2902976074ab888555ef611cba87e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FO::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5b532d75c242b8d5989472b9c9215571</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FO::range_type</type>
      <name>range_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a5a46bb9abdeb1f4bb775e0ad059e84a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X::field_type</type>
      <name>field_type</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ab0b3774d7f930f012ae0d9aa8431e565</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoLevelMethod</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ab45f38afe7b97643b6cb68883cf4a9ad</anchor>
      <arglist>(const FineOperatorType &amp;op, std::shared_ptr&lt; SmootherType &gt; smoother, const LevelTransferPolicy&lt; FineOperatorType, CoarseOperatorType &gt; &amp;policy, CoarseLevelSolverPolicy &amp;coarsePolicy, std::size_t preSteps=1, std::size_t postSteps=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TwoLevelMethod</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a1202037444195d8e8ee401a4bdf8111b</anchor>
      <arglist>(const TwoLevelMethod &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~TwoLevelMethod</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ad1422c0542475bc912432d18498c7280</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a4ecbb403bfd993380d6f346fbd0852bb</anchor>
      <arglist>(FineDomainType &amp;x, FineRangeType &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ae27d6c63bd48bc33af24d728e2a62961</anchor>
      <arglist>([[maybe_unused]] FineDomainType &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>a674b52125352284eabdd9c318f3748c7</anchor>
      <arglist>(FineDomainType &amp;v, const FineRangeType &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a02575.html</anchorfile>
      <anchor>ab6d427cd877ef9cbb1857ccd2804bb0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>pre</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>ad524e05b6c42f49fbe8b29577ae67265</anchor>
      <arglist>(FO::domain_type &amp;x, FO::range_type &amp;b)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a05b45208eec670e82b65bbc8e2601af0</anchor>
      <arglist>(FO::domain_type &amp;v, const FO::range_type &amp;d)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>post</name>
      <anchorfile>a02583.html</anchorfile>
      <anchor>a02d7633248cb4c68af7e0e787ec4029d</anchor>
      <arglist>(FO::domain_type &amp;x)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::UMFPack</name>
    <filename>a02947.html</filename>
    <templarg></templarg>
    <base>InverseOperator&lt; Impl::UMFPackVectorChooser&lt; M &gt;::domain_type, Impl::UMFPackVectorChooser&lt; M &gt;::range_type &gt;</base>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae24ca9c9757b55456f3d2376403faaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga129a9162c047f72e174ff7b9de308098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrix&lt; typename Matrix::field_type, long int &gt;</type>
      <name>UMFPackMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2ba42ccd94e2206d685bac6f093e9f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; M, long int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga73e5d285c074f519d51632e28383ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UMFPackVectorChooser&lt; M &gt;::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac762772e2c5dd7489b3eacc216f67356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UMFPackVectorChooser&lt; M &gt;::range_type</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3edbe6cd25d3d19ac07509852a6c4590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0fc32091fc97bd1bade894b4cb429905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac976eb937c60410302e0a6e0a458ffee</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf8f5d625278b2be0a961f0ccdf31c6fb</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga22490d4f8dd9ed74ea323cd325bbc17e</anchor>
      <arglist>(const Matrix &amp;mat_, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4c3a996e138d4225fe1ecf16d0a29eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3754d885c3ebada738e2aa602ff9f3c6</anchor>
      <arglist>(const Matrix &amp;mat_, const char *file, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga887bc3b95d9c409854a503e2aac35e07</anchor>
      <arglist>(const char *file, int verbose=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa036fbd9362380f2a84325edf46c0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0a524513f6251b657b0734a0b91660d8</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga07c9581a375a282831ba35d13e191d77</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga79bd07aba5057517005addb023297866</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad9035897bd242ce325cee859e5de8048</anchor>
      <arglist>(unsigned int option, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveDecomposition</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaaf25628932177632b9fffa17e9696ddc</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1f76a7e44ce7cad0a7c3372a6aff3653</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6fea34a5fd3237bb0ee14e51d0d1a9f4</anchor>
      <arglist>(const Matrix &amp;_mat, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga82d9329ff50cbc08273e1f670f7af266</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getFactorization</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0b96c3791758152ecce7bff7c94509c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UMFPackMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6e673edc354111efac0f1101393cc0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga064d11b7fb9631dbc1b45ffcff17473b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gab7b3736e41dd13f53468f3acedb8c597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; UMFPack&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ecff589688a016e228f4ea4c5f9fef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackCreator</name>
    <filename>a02959.html</filename>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock</class>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock&lt; B, std::enable_if_t&lt; std::is_same&lt; typename FieldTraits&lt; B &gt;::real_type, double &gt;::value &gt; &gt;</class>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaead2e303a149fc649ec60e40bd150934</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gada8ce265dfbe9c38d6264a0c8e4bfa8d</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt; !isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackMethodChooser</name>
    <filename>a02923.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga983c57a96fb59d028bb1950cd20dc400</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackMethodChooser&lt; double &gt;</name>
    <filename>a02927.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaults</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaeefb180cb00447618edcc84e3926c066</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga82097ad3862254b5b24a235dc4617021</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5f8574c0cd9edf1b914dabb1554b8bc8</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>load_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2a795468b8dae4e8eb3d4c53ad400d3d</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga889fcc448a461dbd3dfc66f62f855cb6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_info</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga527fe91d69d313ce963d1f9a34ccc9f6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_status</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga314771c3a7476e5b8221e3588caa51bb</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>save_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga705b88e473dc776dc1cbc3bd55d81b9f</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf3a1566341317abc5375303423914362</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4e73561f05723e1d5d77673f21e8b1cc</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8e44dbf7e19e58423e840ec792efa5ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::UMFPackMethodChooser&lt; std::complex&lt; double &gt; &gt;</name>
    <filename>a02931.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaults</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7cfc9808e18c3a7048372798392477e5</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga64d1739aba894e4ced76af94d527016e</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae13d3545eb7219b6613d510469a92851</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>load_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2733debd45a51c99d536a864970d2baf</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae2cfb3869ec0aab87a4d455c50caf82f</anchor>
      <arglist>(const long int *cs, const long int *ri, const double *val, A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_info</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2009f30d05ccbb8eec6443b3a0ec5638</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_status</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7265bc4d283f2f843c8fb5c1bb2771d6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>save_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga60565b3291200a2702fa6b54d540e573</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga12c16ff720da9a983068dbdb915bd6ad</anchor>
      <arglist>(long int m, const long int *cs, const long int *ri, std::complex&lt; double &gt; *val, double *x, const double *b, A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5f11ef25ee2bc9fc0c4a4538105e9a65</anchor>
      <arglist>(long int m, long int n, const long int *cs, const long int *ri, const double *val, A... args)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf456989373d56d5ae79efb17ea873621</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::UnsupportedType</name>
    <filename>a02727.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::UnSymmetricCriterion</name>
    <filename>a02015.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>AggregationCriterion&lt; Dependency&lt; M, Norm &gt; &gt;</base>
    <member kind="typedef">
      <type>Dependency&lt; M, Norm &gt;</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1baaec66f4b574b2cef650c8faa3320f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga321acf98b939f0b93a7410b189e4a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62b0d02ee5cbaa9714dd453aa0db5567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga00c973edf4b506a16aea1fc25a14b897</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnSymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3474e60471ca8ab12d8305474f82f95c</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnSymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabc1820a6e70c30dd11108addce03d47f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c251ce75374647a53f53f17ffe5ccc1</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga14e65ff5e7d99c39b38aa55c7e80b0a8</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83757595a4c63000d5ca728bf72320a8</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d817e43d5427d7d01ef0f8d9723de81</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga37eef1b68f03154eacfc3324ecdc638c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad90b5c6a78351664999222c0e5ccc495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf72f67c861cccdfbc79b297a380e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d18731e26edb51c8dcf567f169fab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7898ad122d26cfaeb622d152318b782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0849baf99502da25d7aab61433702189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4092bf0b04b38b0bea723bf99dfe1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa06549181446abcb1d1c1899e5cd780e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VariableBlockVector</name>
    <filename>a02971.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::VariableBlockVector::CreateIterator</class>
    <class kind="class">Dune::VariableBlockVector::RealIterator</class>
    <member kind="typedef">
      <type>typename Imp::BlockTraits&lt; B &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a1adea439f41a70588cbb2cab7a108fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>allocator_type</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a2465273d5b847928f17197a88e12357b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>window_type &amp;</type>
      <name>reference</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>aec4685fd26b2ab23a42b708e75079222</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const window_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a95df76d34e107317cdbec564808ea522</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a7d0da360256deee2b8b474f63374a588</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; B, A &gt;</type>
      <name>value_type</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>ac1bdddc9ef759f4b61e003045c59c1b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockVector&lt; B, A &gt;</type>
      <name>block_type</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>ae71095bed0b5e1cf3f36ff460f35d512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealIterator&lt; value_type, window_type &amp; &gt;</type>
      <name>Iterator</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a03671ec0e8e143c2968f2ecb2dd16b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a0dcf8bde9f5cab42a35d67fff607df1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RealIterator&lt; const value_type, const window_type &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>aa640b51758e5e2159bb7e6c9ac8fb76f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a70fac25cd6ba3504aace7a3186c348a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableBlockVector</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a06ee57cf0869597160b8b0e7f00f6fcd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableBlockVector</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a3c66b4bb5b73875cfc11f1624064b6d2</anchor>
      <arglist>(size_type _nblocks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableBlockVector</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a256a3ff7e8ad4656c4132460b56a4b88</anchor>
      <arglist>(size_type _nblocks, size_type m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableBlockVector</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a3130519036e42a3e2c8ea6d395bc6f26</anchor>
      <arglist>(const VariableBlockVector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariableBlockVector</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a3e67c058f38e3db94962a4aab69fbeaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>aef4381dfaccd3f14cd463b7205cf58c4</anchor>
      <arglist>(size_type _nblocks)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>aea0fd4cbcb01396d0cb708a7faf00fc9</anchor>
      <arglist>(size_type _nblocks, size_type m)</arglist>
    </member>
    <member kind="function">
      <type>VariableBlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a6726332d9e2d4d3815b5d91eddee2a30</anchor>
      <arglist>(const VariableBlockVector &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>VariableBlockVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a2c3791e5a5be2169a02b6d32a88b039c</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createbegin</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a620f23af5073742f495e8edde0273bc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CreateIterator</type>
      <name>createend</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a537083e53d35dc75ee3b584f3db6d46e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>window_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>ac5bdc16772b158e2103d27f928fcdab6</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const window_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a9a657b77fa105124bc19304777bee0b8</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>afe12d1958b8639f021f68ab56d6c7385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>aacaa8992a2dae371fb2f392dd3f0cd69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>afaae71068594b595285444a3da3a42ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a610d7ec4c984d392290448c3d8a69b0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>ab969881c368b6551376c4ab59fcf4d7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>ae13716e7e4e7c04aa20e0eabbe5a2916</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a7fcc292723fba6a476a0f6e00898d766</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>rend</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a77c3088418422ac23c8020aea9410319</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a8160875f2d720b056d2377a85afe0dbe</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a7f81bb880908458c7ee752999c9a76fc</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a2e28e7b5a853a59b3dfe47b69bd93ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a2a81d5176146d362af8b910e18c2b963</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>blocklevel</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a6d2f7c365ad20900030f29da4ba3799d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>CreateIterator</name>
      <anchorfile>a02971.html</anchorfile>
      <anchor>a0e3d1a15a1c40f30085bd50393372d7b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::SubGraph::VertexIterator</name>
    <filename>a02303.html</filename>
    <member kind="function">
      <type></type>
      <name>VertexIterator</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a92ba1680cf48fa40dc3d1ca5f411f1d8</anchor>
      <arglist>(const SubGraph&lt; G, T &gt; *graph, const VertexDescriptor &amp;current, const VertexDescriptor &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIterator</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a12cafb57c10c7811dc2b0b7cdbf16f7b</anchor>
      <arglist>(const VertexDescriptor &amp;current)</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator &amp;</type>
      <name>increment</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a0c08c581339fb3fb6ce0459104cb7ded</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a8df44f1a6bd458d1f38352f149a1f128</anchor>
      <arglist>(const VertexIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const VertexDescriptor &amp;</type>
      <name>dereference</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a228411965dafecdeeee36494ff2a5a2b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>begin</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>a441cd2416924a771ba4235f57481e231</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>end</name>
      <anchorfile>a02303.html</anchorfile>
      <anchor>ad30ec3b1cab61d92a995100766422826</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::MatrixGraph::VertexIteratorT</name>
    <filename>a02287.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>isMutable</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a884437d7b5ad51b6397aa11b6c2ee175a2cdcc686416c26a8bc198ba898f65505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; C &gt;::type</type>
      <name>MutableContainer</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a4aa8a7d1dc57bd0638e9d0d07aef0f22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const std::remove_const&lt; C &gt;::type</type>
      <name>ConstContainer</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a98f9cbf8c1375fa67885166ccf8f47b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; C, typename std::remove_const&lt; C &gt;::type &gt;::value &amp;&amp;C::mutableMatrix, typename M::block_type, const typename M::block_type &gt;::type</type>
      <name>WeightType</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a5f49501c1b4f8f2c3379f1efe826fd32</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isMutable</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a884437d7b5ad51b6397aa11b6c2ee175a2cdcc686416c26a8bc198ba898f65505</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a146dbe671efc5a73ddcfb532a99d31f2</anchor>
      <arglist>(C *graph, const VertexDescriptor &amp;current)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>af1197531cc84fa49ba85b6db19be4820</anchor>
      <arglist>(const VertexDescriptor &amp;current)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a41f4a8b9e5e4ec0f3485cfb184d537f7</anchor>
      <arglist>(const VertexIteratorT&lt; MutableContainer &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VertexIteratorT&lt; C &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>adc831a10c878f24bc98a6bbb530dc22d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>addf59591f92479de80454fa2028c2955</anchor>
      <arglist>(const VertexIteratorT&lt; ConstContainer &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>ad794d75cfd00e87c635440400fac933b</anchor>
      <arglist>(const VertexIteratorT&lt; ConstContainer &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a78fc3b114239479964d919c11815b0b6</anchor>
      <arglist>(const VertexIteratorT&lt; MutableContainer &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a89a5697b1badd68364feb6c8e2bd87ac</anchor>
      <arglist>(const VertexIteratorT&lt; MutableContainer &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>WeightType &amp;</type>
      <name>weight</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a508cc6ee51e327924f8f8da4b390cb75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VertexDescriptor &amp;</type>
      <name>operator*</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a59555723763ee5559bd60d40432da820</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIteratorT&lt; C &gt;</type>
      <name>begin</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>ab073a77c6ae314743ffaf24a34d8444e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIteratorT&lt; C &gt;</type>
      <name>end</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a6b0217927f3a9d88b45bab6da97e25b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; MutableContainer &gt;</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>a9795c42756c97111a7c616e3c0338ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; ConstContainer &gt;</name>
      <anchorfile>a02287.html</anchorfile>
      <anchor>ab16526805b4284627a8ac8a5b44b1139</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::PropertiesGraph::VertexIteratorT</name>
    <filename>a02323.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; typename std::remove_const&lt; C &gt;::type, C &gt;::value, typename Graph::VertexIterator, typename Graph::ConstVertexIterator &gt;::type</type>
      <name>Father</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>a0de118fdcc8e49e3b8c6920aadb80296</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>afe404a210b26989ec0758c800f9e1610</anchor>
      <arglist>(const Father &amp;iter, C *graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>ab6123a5cbac1a9a6eae6c0f9f81a3c20</anchor>
      <arglist>(const Father &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>a14eb32a1bdb6d6229b9646f6ad12fd41</anchor>
      <arglist>(const VertexIteratorT&lt; C1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; C, typename std::remove_const&lt; C &gt;::type &gt;::value, VertexProperties &amp;, const VertexProperties &amp; &gt;::type</type>
      <name>properties</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>ab0b3b4df03ded60236d403911c794931</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIteratorT&lt; C &gt;</type>
      <name>begin</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>a06e181180df0d742ce5dabfd74ba8b74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIteratorT&lt; C &gt;</type>
      <name>end</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>abe656796f1e1d9c363506aaf7e84117a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; const typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>a1d85cae8422d672f8ae30a285ab3ead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02323.html</anchorfile>
      <anchor>a802727ea2c3492cc4d94010161b9b409</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::VertexPropertiesGraph::VertexIteratorT</name>
    <filename>a02311.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; typename std::remove_const&lt; C &gt;::type, C &gt;::value, typename Graph::VertexIterator, typename Graph::ConstVertexIterator &gt;::type</type>
      <name>Father</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a258122839ecd825f5fd7d83f6d37e444</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_same&lt; typename std::remove_const&lt; C &gt;::type, C &gt;::value, typename Graph::EdgeIterator, typename Graph::ConstEdgeIterator &gt;::type</type>
      <name>EdgeIterator</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>aa24fdf19a8adeda9abd7d634f8db125f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a6efd55444aad56deb11a9bbed5c3f598</anchor>
      <arglist>(const Father &amp;iter, C *graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>aaa8c0d9c4387ebe5a75f2e74ff9d88cf</anchor>
      <arglist>(const Father &amp;iter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexIteratorT</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>aa49f460e0c873473951365b28f51d2f5</anchor>
      <arglist>(const VertexIteratorT&lt; C1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::conditional&lt; std::is_same&lt; C, typename std::remove_const&lt; C &gt;::type &gt;::value, VertexProperties &amp;, const VertexProperties &amp; &gt;::type</type>
      <name>properties</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a36348a4ececde0d233fd0933006fbda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>begin</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>af3fe30cdb26ad1d21c9e0c3238881dd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>end</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a9d547780ff47779dc293625415c66603</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; const typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a1d85cae8422d672f8ae30a285ab3ead3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>VertexIteratorT&lt; typename std::remove_const&lt; C &gt;::type &gt;</name>
      <anchorfile>a02311.html</anchorfile>
      <anchor>a802727ea2c3492cc4d94010161b9b409</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::VertexProperties</name>
    <filename>a02175.html</filename>
    <member kind="enumvalue">
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da601511c62869741ba9f4fa1d59ac9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISITED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da3b91960c297fce34a3c69bee71c55bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRONT</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daeddb5cde689f5e256ac5e9b1d5a7b608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daba45a149d80b1f89d6fd85aa265119ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da8ef3326e321c8bcb672f0588ada08fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da601511c62869741ba9f4fa1d59ac9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISITED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da3b91960c297fce34a3c69bee71c55bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRONT</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daeddb5cde689f5e256ac5e9b1d5a7b608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daba45a149d80b1f89d6fd85aa265119ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da8ef3326e321c8bcb672f0588ada08fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexProperties</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35339428fc8aa369d2c59b02d5f328e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; SIZE &gt;::reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga85dc242d0fa9a3752c41c26cd7288542</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bfbde3e736115fef9edeb8576bbe103</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa21f58805bd7454756362314fa33ddc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08338ac1ac7df17147134dee599d66c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gada265503294533b4705b6c80a57cbd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga571cc94a95df4b731bfcdc283341357d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>visited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaba26fe4020b4024de2b00ace576c70af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetVisited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab1aae2e817a91d7c9a2a211a22451ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFront</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4fcd4940c0a464c170eb6c9cd62f4c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>front</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaec920d1ca710395041184e43c2a039d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFront</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0683e6971b0867bf93e027c911d51fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExcludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafac626aebe416d38f0c0e7d7ab7dae4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>excludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf258c4666ca11c8d041fb599333b2b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetExcludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e8649c6ddc3757ceb1424010310bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga549b5bfb77d6415560898fe54fbeedb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga89e337eb2f5f924bb3e2abac435a0bb1</anchor>
      <arglist>(std::ostream &amp;os, const VertexProperties &amp;props)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Amg::VertexPropertiesGraph</name>
    <filename>a02307.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::Amg::VertexPropertiesGraph::VertexIteratorT</class>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a8303ceadc9d95572dbb3300be69a6409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a79f61a7abf2ffba549f7ca3573c294b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::EdgeDescriptor</type>
      <name>EdgeDescriptor</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a731b026c3e833d9228ca5b93f9f3dec6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VP</type>
      <name>VertexProperties</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>aafd893986bee11602e5550792a8bcf22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VM</type>
      <name>VertexMap</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a88642539b218faf3c732d6e6ded01498</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::EdgeIterator</type>
      <name>EdgeIterator</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>af5ffad405cd897b4b250146a3ce8f0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ConstEdgeIterator</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a4141ceb0dda83cace60bc5a272ebe5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; VertexPropertiesGraph&lt; Graph, VertexProperties, VM &gt; &gt;</type>
      <name>VertexIterator</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>ad671f133075e6a2b372d303b8c6aabd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexIteratorT&lt; const VertexPropertiesGraph&lt; Graph, VertexProperties, VM &gt; &gt;</type>
      <name>ConstVertexIterator</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a6efbdf8cb306b1f61b17b21c1409686b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a95f65195ef622e21e9d2b70e14327d2b</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>EdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a9445aa930dac93b8b566cb5d9c766a7b</anchor>
      <arglist>(const VertexDescriptor &amp;source)</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>beginEdges</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>ac6ca087a6c175dcbc819f2bae0367446</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>ConstEdgeIterator</type>
      <name>endEdges</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a736507eae438c410633fa1f4edfe00ed</anchor>
      <arglist>(const VertexDescriptor &amp;source) const</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>begin</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>ae3d4dfa76da7899857b871227402677f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexIterator</type>
      <name>end</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a2296aa9c93ea9a66308fd7b4a1555b21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>begin</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a4e0828bdc968decef4e24815b0828753</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstVertexIterator</type>
      <name>end</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a9ebc7212647791f29453af22f5ebb35e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexProperties &amp;</type>
      <name>getVertexProperties</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>acb9e05f0fcff35cd4ae6f540f92ee23a</anchor>
      <arglist>(const VertexDescriptor &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>const VertexProperties &amp;</type>
      <name>getVertexProperties</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>aedbbd6952fa6176b571e63576b7af0d2</anchor>
      <arglist>(const VertexDescriptor &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>const Graph &amp;</type>
      <name>graph</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a3484b734206618172641dc22679ebe25</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>ab1bdd20e2384f9cd67d4de4c37015097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noEdges</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a5d2c3c60d4acc25520a9d7b138694c76</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>VertexDescriptor</type>
      <name>maxVertex</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>acbcf0908bf9718db024bca68707ac936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexPropertiesGraph</name>
      <anchorfile>a02307.html</anchorfile>
      <anchor>a346f28c2d54788ebfb3907226fa24b9e</anchor>
      <arglist>(Graph &amp;graph, const VertexMap vmap=VertexMap())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Amg::VertexVisitedTag</name>
    <filename>a02415.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dune</name>
    <filename>a00252.html</filename>
    <namespace>Dune::Amg</namespace>
    <namespace>Dune::CounterImpl</namespace>
    <namespace>Dune::ForEach</namespace>
    <namespace>Dune::ILU</namespace>
    <namespace>Dune::ISTL</namespace>
    <namespace>Dune::MatrixImp</namespace>
    <namespace>Dune::MatrixMarketImpl</namespace>
    <namespace>Dune::Metis</namespace>
    <class kind="struct">Dune::exists</class>
    <class kind="struct">Dune::DefaultAllocatorTraits</class>
    <class kind="struct">Dune::DefaultAllocatorTraits&lt; T, std::void_t&lt; typename T::allocator_type &gt; &gt;</class>
    <class kind="struct">Dune::AllocatorTraits</class>
    <class kind="class">Dune::OverlappingSchwarzInitializer</class>
    <class kind="struct">Dune::MatrixDimension</class>
    <class kind="struct">Dune::CompressionStatistics</class>
    <class kind="class">Dune::ImplicitMatrixBuilder</class>
    <class kind="class">Dune::BCRSMatrix</class>
    <class kind="class">Dune::BDMatrix</class>
    <class kind="class">Dune::MultiTypeBlockVector</class>
    <class kind="class">Dune::MultiTypeBlockMatrix</class>
    <class kind="class">Dune::BTDMatrix</class>
    <class kind="class">Dune::BlockVector</class>
    <class kind="struct">Dune::FieldTraits&lt; BlockVector&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::ColCompMatrix</class>
    <class kind="class">Dune::ArPackPlusPlus_Algorithms</class>
    <class kind="class">Dune::PowerIteration_Algorithms</class>
    <class kind="struct">Dune::BL</class>
    <class kind="struct">Dune::algmeta_btsolve</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; 0, M &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; I, MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &gt;</class>
    <class kind="class">Dune::ILUSubdomainSolver</class>
    <class kind="class">Dune::ILU0SubdomainSolver</class>
    <class kind="class">Dune::ILUNSubdomainSolver</class>
    <class kind="class">Dune::ISTLError</class>
    <class kind="class">Dune::BCRSMatrixError</class>
    <class kind="class">Dune::ImplicitModeCompressionBufferExhausted</class>
    <class kind="class">Dune::SolverAbort</class>
    <class kind="class">Dune::MatrixBlockError</class>
    <class kind="class">Dune::SeqOverlappingSchwarz</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper</class>
    <class kind="class">Dune::LDL</class>
    <class kind="class">Dune::LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::LDLCreator</class>
    <class kind="class">Dune::Matrix</class>
    <class kind="class">Dune::MatrixIndexSet</class>
    <class kind="class">Dune::MatrixMarketFormatError</class>
    <class kind="struct">Dune::MatMultMatResult</class>
    <class kind="struct">Dune::MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::MatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; FieldMatrix&lt; T, k, n &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <class kind="struct">Dune::RedistributeInformation</class>
    <class kind="class">Dune::RedistributeInformation&lt; OwnerOverlapCopyCommunication&lt; T, T1 &gt; &gt;</class>
    <class kind="struct">Dune::CommMatrixRowSize</class>
    <class kind="struct">Dune::CommMatrixSparsityPattern</class>
    <class kind="struct">Dune::CommPolicy&lt; CommMatrixSparsityPattern&lt; M, I &gt; &gt;</class>
    <class kind="struct">Dune::CommMatrixRow</class>
    <class kind="struct">Dune::CommPolicy&lt; CommMatrixRow&lt; M, I &gt; &gt;</class>
    <class kind="struct">Dune::MatrixRowSizeGatherScatter</class>
    <class kind="struct">Dune::MatrixCopyRowSizeGatherScatter</class>
    <class kind="struct">Dune::MatrixSparsityPatternGatherScatter</class>
    <class kind="struct">Dune::MatrixRowGatherScatter</class>
    <class kind="class">Dune::FieldMatrix</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; Matrix, 0, l &gt;</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; MultiTypeBlockMatrix&lt; T1, Args... &gt;, blocklevel, l &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; Matrix&lt; B, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; BCRSMatrix&lt; B, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; FieldMatrix&lt; K, n, m &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; Dune::DynamicMatrix&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; Matrix&lt; FieldMatrix&lt; K, n, m &gt;, TA &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; DiagonalMatrix&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::MatrixDimension&lt; ScaledIdentityMatrix&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::IsMatrix</class>
    <class kind="struct">Dune::IsMatrix&lt; DenseMatrix&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::IsMatrix&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::PointerCompare</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col&lt; I, crow, ccol, 0 &gt;</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver&lt; I, crow, 0 &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; MultiTypeBlockVector&lt; Arg0, Args... &gt; &gt;</class>
    <class kind="class">Dune::NonoverlappingSchwarzOperator</class>
    <class kind="class">Dune::NonoverlappingBlockPreconditioner</class>
    <class kind="class">Dune::LinearOperator</class>
    <class kind="class">Dune::AssembledLinearOperator</class>
    <class kind="class">Dune::MatrixAdapter</class>
    <class kind="struct">Dune::AdditiveSchwarzMode</class>
    <class kind="struct">Dune::MultiplicativeSchwarzMode</class>
    <class kind="struct">Dune::SymmetricMultiplicativeSchwarzMode</class>
    <class kind="class">Dune::DynamicMatrixSubdomainSolver</class>
    <class kind="class">Dune::DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::OverlappingAssignerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="class">Dune::OverlappingAssignerILUBase</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::AdditiveAdder</class>
    <class kind="struct">Dune::AdditiveAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MultiplicativeAdder</class>
    <class kind="struct">Dune::MultiplicativeAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::AdderSelector</class>
    <class kind="struct">Dune::AdderSelector&lt; AdditiveSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; MultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; SymmetricMultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::IteratorDirectionSelector</class>
    <class kind="struct">Dune::IteratorDirectionSelector&lt; T1, T2, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier&lt; SeqOverlappingSchwarz&lt; M, X, SymmetricMultiplicativeSchwarzMode, TD, TA &gt; &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerILUBase</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::OwnerOverlapCopyAttributeSet</class>
    <class kind="class">Dune::IndexInfoFromGrid</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
    <class kind="struct">Dune::AMGCreator</class>
    <class kind="class">Dune::OverlappingSchwarzOperator</class>
    <class kind="struct">Dune::PropertyMapTypeSelector&lt; Amg::VertexVisitedTag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &gt;</class>
    <class kind="struct">Dune::CommPolicy&lt; Amg::GlobalAggregatesMap&lt; T, TI &gt; &gt;</class>
    <class kind="class">Dune::Preconditioner</class>
    <class kind="class">Dune::InverseOperator2Preconditioner</class>
    <class kind="class">Dune::SeqSSOR</class>
    <class kind="class">Dune::SeqSOR</class>
    <class kind="class">Dune::SeqJac</class>
    <class kind="class">Dune::SeqILU</class>
    <class kind="class">Dune::Richardson</class>
    <class kind="class">Dune::SeqILDL</class>
    <class kind="struct">Dune::RedistributeInterface</class>
    <class kind="class">Dune::ScalarProduct</class>
    <class kind="class">Dune::ParallelScalarProduct</class>
    <class kind="class">Dune::SeqScalarProduct</class>
    <class kind="class">Dune::NonoverlappingSchwarzScalarProduct</class>
    <class kind="class">Dune::OverlappingSchwarzScalarProduct</class>
    <class kind="class">Dune::ScaledIdentityMatrix</class>
    <class kind="struct">Dune::DenseMatrixAssigner&lt; DenseMatrix, ScaledIdentityMatrix&lt; field, N &gt; &gt;</class>
    <class kind="class">Dune::ParSSOR</class>
    <class kind="class">Dune::BlockPreconditioner</class>
    <class kind="struct">Dune::InverseOperatorResult</class>
    <class kind="class">Dune::InverseOperator</class>
    <class kind="class">Dune::IterativeSolver</class>
    <class kind="class">Dune::SolverHelper</class>
    <class kind="struct">Dune::SolverCategory</class>
    <class kind="class">Dune::InvalidSolverCategory</class>
    <class kind="class">Dune::SolverFactory</class>
    <class kind="class">Dune::UnsupportedType</class>
    <class kind="class">Dune::InvalidSolverFactoryConfiguration</class>
    <class kind="class">Dune::LoopSolver</class>
    <class kind="class">Dune::GradientSolver</class>
    <class kind="class">Dune::CGSolver</class>
    <class kind="class">Dune::BiCGSTABSolver</class>
    <class kind="class">Dune::MINRESSolver</class>
    <class kind="class">Dune::RestartedGMResSolver</class>
    <class kind="class">Dune::RestartedFlexibleGMResSolver</class>
    <class kind="class">Dune::GeneralizedPCGSolver</class>
    <class kind="class">Dune::RestartedFCGSolver</class>
    <class kind="class">Dune::CompleteFCGSolver</class>
    <class kind="struct">Dune::IsDirectSolver</class>
    <class kind="struct">Dune::StoresColumnCompressed</class>
    <class kind="class">Dune::SPQR</class>
    <class kind="class">Dune::SPQR&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::SPQRCreator</class>
    <class kind="struct">Dune::SuperLUSolveChooser</class>
    <class kind="struct">Dune::SuperLUDenseMatChooser</class>
    <class kind="struct">Dune::SuperLUQueryChooser</class>
    <class kind="struct">Dune::QuerySpaceChooser</class>
    <class kind="class">Dune::SuperLU</class>
    <class kind="struct">Dune::IsDirectSolver&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; SuperLU&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUCreator</class>
    <class kind="struct">Dune::SuperMatrixCreateSparseChooser</class>
    <class kind="struct">Dune::SuperMatrixPrinter</class>
    <class kind="struct">Dune::BaseGetSuperLUType</class>
    <class kind="struct">Dune::GetSuperLUType</class>
    <class kind="struct">Dune::GetSuperLUType&lt; double &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; float &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">Dune::GetSuperLUType&lt; std::complex&lt; float &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUMatrix</class>
    <class kind="struct">Dune::SuperMatrixInitializer</class>
    <class kind="class">Dune::SuperLUMatrix&lt; BCRSMatrix&lt; B, TA &gt; &gt;</class>
    <class kind="class">Dune::SuperMatrixInitializer&lt; BCRSMatrix&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::UMFPackMethodChooser</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; double &gt;</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="class">Dune::UMFPack</class>
    <class kind="struct">Dune::IsDirectSolver&lt; UMFPack&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; UMFPack&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::UMFPackCreator</class>
    <class kind="class">Dune::VariableBlockVector</class>
    <member kind="typedef">
      <type>typename AllocatorTraits&lt; T &gt;::type</type>
      <name>AllocatorType</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9ab4e8c72359591b27aede17f5ec6615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; typename AllocatorTraits&lt; T &gt;::type &gt;::template rebind_alloc&lt; X &gt;</type>
      <name>ReboundAllocatorType</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9020314eeb58ec32f6fab5ef0c196674</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplicitModeCompressionBufferExhausted</type>
      <name>ImplicitModeOverflowExhausted</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga31a901b8fb8394865710949d0b466149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OverlappingAssignerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>OverlappingAssigner</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga57430ed63b8d6900976df9950af0a0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarzAssemblerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>SeqOverlappingSchwarzAssembler</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5a5d6fa4ec6f65757b49ed7fe09e15e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqSOR&lt; M, X, Y, l &gt;</type>
      <name>SeqGS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaf04e8521e43d7b1c8fdb3a412210b36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const M &amp;, const ParameterTree &amp;)</type>
      <name>DirectSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga91168438e4b9a921333311a3a08798dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; DirectSolverSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>DirectSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4ed393ca70204435e43fe1d993d94146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; M &gt; &amp;, const ParameterTree &amp;)</type>
      <name>PreconditionerSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae55f25267d1fd33e3ca7d1626e0c2309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; PreconditionerSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>PreconditionerFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga3331f94d4529c3668c246bb292d8616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; &amp;, const std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; &amp;, const std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;, const ParameterTree &amp;)</type>
      <name>IterativeSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4f1eb86d7953f95ba7cbc5e7364533fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; IterativeSolverSignature&lt; X, Y &gt; &gt;&gt;</type>
      <name>IterativeSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab390de02beef7edaa843bf24ffbe10b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WithDiagType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1d016a8baf2c49b7cf2f4381ac26dae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withdiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8aeee05f0dca4c1c766073efa5a0ce1864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8a2797146c0f86bb2e64d5dcdd09af49fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WithRelaxType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8d35e02d27a4916c1ba6435f0c2d6ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withrelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a6275e2591067a32a12c32074ae56a4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>norelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a4fcdb30f993f475659d8e031aff47b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>maxBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a33fa4c0298cf146aa9589b519344907f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>minBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a93a728a69e20c62c789c9e4b616208d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>hasUniqueBlockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2d487fafa117ba8beb053d1c3417dee1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>blockLevel</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a477c671e3966936ca929dee4be2dcf95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a2d6c22497a84e2ec8803ba78a7e2e988</anchor>
      <arglist>(std::ostream &amp;s, const BlockVector&lt; K, A &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>flatVectorForEach</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a7a87108c26ee37e7e43de1e8b15e4e67</anchor>
      <arglist>(Vector &amp;&amp;vector, F &amp;&amp;f, std::size_t offset=0)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::size_t &gt;</type>
      <name>flatMatrixForEach</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af2f3b70931de2f8f81b08a30865a17c2</anchor>
      <arglist>(Matrix &amp;&amp;matrix, F &amp;&amp;f, std::size_t rowOffset=0, std::size_t colOffset=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga0f053fd0407ed1cc4bddd149fb6fb8ca</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf814921e91eff2665f6faf02f5f2077f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga44f4aa6e2cf4928911a3f5d1de3044d5</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaccddb305f448a410d5092fc19e65fde7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gae258e10601de666271f1fc70365acaaf</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga83b10b12a29ea2971cf8176d641b830f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaff15f888a81d558e39b36ac74fea2e42</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6559fd0a70f600ab376dd2083d8cb0dd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8c2d3410df660b6891f6a1eedafd49f6</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga9d84c99a51fe0795b06b825a13538852</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga112a6621ef260e4b265a0df07fede1be</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga29094b87e08482d955ab1b4f731678fd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1ab5372aabac8f03a77f50227b611fd8</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaaed21180843947bd0efef18d54038998</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga00c2e6cbce34cf6d04e94567a48bb13c</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga89e9f76f178486c9ded34ed26f367bc4</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab20f25b7927dae733827e729fc3c25f7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab158b39f3ee085609cbae90a0cf6a5fb</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga7d7f687712467b7651d62ea0712aa5a3</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gac245a72ffeecc409c7d242c6841738a9</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga5bec8914ff3d25fb86ddffef6e38677d</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga70ff88e446d2bb3927e2ae963292d02b</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf2caef773a37fd65ee1fa76ee0a95c47</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga65105d18c5a743d1739179e696f5c022</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga3a70747a68e23231ab6cb72b396942ec</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gabdb801f4a4aea1201bc09d32b202042a</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga51ae0ff4aea09b29d3f31ae2f6dfacc5</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6642a19372a5ec5f405ce8cc56515596</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>af8de6b1951fa7f95a3e9f89973579115</anchor>
      <arglist>(const FieldMatrix&lt; K, m, n &gt; &amp;B, const FieldMatrix&lt; K, m, n &gt; &amp;CT, FieldMatrix&lt; K, m, n &gt; &amp;A)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad3f5c61e1bb13aaae63f8229ca8fcf17</anchor>
      <arglist>(const K &amp;B, const K &amp;CT, K &amp;A, typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bildl_subtractBCT</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab8a3af34e2b0e78906f8ac136b8a77b9</anchor>
      <arglist>(const Matrix &amp;B, const Matrix &amp;CT, Matrix &amp;A, typename std::enable_if_t&lt;!Dune::IsNumber&lt; Matrix &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bildl_decompose</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a07a0ae9d92f1458eceb71778d88b9429</anchor>
      <arglist>(Matrix &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bildl_backsolve</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae801cb0f5df40c48568bc703f8c802b6</anchor>
      <arglist>(const Matrix &amp;A, X &amp;v, const Y &amp;d, bool isLowerTriangular=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu0_decomposition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ae67699f4a1392779203441b91402a834</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_backsolve</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9a874f8e0ab8b1bd84d6e615f7cde9ee</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>firstmatrixelement</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3410aebbe1151eaaf477a6229321bbdb</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_decomposition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>acfbd5513917454e0e1423e5be13cda74</anchor>
      <arglist>(const M &amp;A, int n, M &amp;ilu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recursive_printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gacfa35a4c02a1d2802460eb62ecbf3689</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string rowtext, int &amp;counter, int columns, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8674c142d6b29e12bcb94075f952d1e1</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string title, std::string rowtext, int columns=1, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga16a8aa6ba46f5e6afed17b49f25ccaf5</anchor>
      <arglist>(std::ostream &amp;s, int m, int width, [[maybe_unused]] int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga5416e87c493938d5c9c670428aa29c0b</anchor>
      <arglist>(std::ostream &amp;s, const K &amp;value, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type I, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type J, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type therow, int width, [[maybe_unused]] int precision, typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga6637eaf1e8d0c72f46f9edec7747c4d7</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, typename M::size_type I, typename M::size_type J, typename M::size_type therow, int width, int precision, typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printmatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga81eff30b8e58a169e319b49f62e4ea7b</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, std::string title, std::string rowtext, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSparseMatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaef563e4586001e657d48f01fae628846</anchor>
      <arglist>(std::ostream &amp;s, const BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, A &gt; &amp;mat, std::string title, std::string rowtext, int width=3, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga93b011f0c65384ec08aa12d56464daf9</anchor>
      <arglist>(const FieldType &amp;value, int rowOffset, int colOffset, std::ostream &amp;s, typename std::enable_if_t&lt; Dune::IsNumber&lt; FieldType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1b083f3c81128b09bbfc7665a07b4b57</anchor>
      <arglist>(const MatrixType &amp;matrix, int externalRowOffset, int externalColOffset, std::ostream &amp;s, typename std::enable_if_t&lt;!Dune::IsNumber&lt; MatrixType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga19c64bcf9cfcba21151f54c6cee16bba</anchor>
      <arglist>(const MatrixType &amp;matrix, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga95cc09d9210e3e99d3f3151e41b43536</anchor>
      <arglist>(const V &amp;v, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaab0213399acb112e901dc043b338ac00</anchor>
      <arglist>(const VectorType &amp;vector, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4ab4a1f419552328d594727627e696cb</anchor>
      <arglist>(&quot;ldl&quot;, Dune::LDLCreator())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_header</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf5669d944b34a0042d13688aaae6cd41</anchor>
      <arglist>(std::size_t &amp;rows, std::size_t &amp;cols, MatrixMarketImpl::MMHeader &amp;header, std::istream &amp;istr, bool isVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaed3a11d2d57007d599549bdaac2dfb83</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gae0ec9d52cd4eab5d7c10b7ac15032026</anchor>
      <arglist>(Dune::BlockVector&lt; Dune::FieldVector&lt; T, entries &gt;, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga050fdeb74ac186e9a2d3481230b64e54</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga3d1901dfd6a884df0a1295856c203df9</anchor>
      <arglist>(Dune::BCRSMatrix&lt; T, A &gt; &amp;matrix, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gafb63c87901fc6242102349fb245581f6</anchor>
      <arglist>(const B &amp;entry, std::size_t rowidx, std::size_t colidx, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaa308293be3836cb24c981bcd2d270bf5</anchor>
      <arglist>(const V &amp;entry, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf0233e0c56e727d0e3fa63a79ffcdeb3</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga26b91d6c608f5dc37407dfdbb84eb7d1</anchor>
      <arglist>(const BlockVector&lt; T, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga4ffd3c490badd2df43eb4a6d0e0119c4</anchor>
      <arglist>(const BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga2e94fcf7e81237a8f132a0f6a3ddaf21</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf37b15dbfaeb5fa5639d38b560407c4b</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8da01d126c9f37e57fa4f719e1d05487</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1064c670426a98617b9e048a40f50a8c</anchor>
      <arglist>(const M &amp;matrix, std::string filename, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac0c687a6e0c2feb4351f3364e4cbbce6</anchor>
      <arglist>(const M &amp;matrix, std::string filename, const OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool storeIndices=true, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1bc5b5677a5be24d72a7d95214fd0d30</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename, OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool readIndices=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac23bb6abb2a5b397781ea75c0ba134d8</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matMultTransposeMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga74b699cb2d43dc8d89a507df207ff832</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1829a6141ae2cae5a1ecab7e0207123d</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMatMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac55861f0d592348e259984077e14960e</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeSparsityPattern</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a63e2af44500c49cc412112bcc645c7bd</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrixEntries</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a3f63ab17e9c1235103a0512bda341ca2</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ab59fe4d0a58ea0575b42993d7563d34b</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, C &amp;origComm, C &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrixEntries</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a706b106c6123e900b004a90d4dcf42c7</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, Dune::Amg::SequentialInformation &amp;origComm, Dune::Amg::SequentialInformation &amp;newComm, RedistributeInformation&lt; Dune::Amg::SequentialInformation &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>redistributeMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a345908acc30a0bf6affab15d04fcd0a8</anchor>
      <arglist>(M &amp;origMatrix, M &amp;newMatrix, Dune::Amg::SequentialInformation &amp;origComm, Dune::Amg::SequentialInformation &amp;newComm, RedistributeInformation&lt; Dune::Amg::SequentialInformation &gt; &amp;ri)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3dc83143ecd9d259d220a655d7a850bd</anchor>
      <arglist>(const M &amp;, [[maybe_unused]] typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab71a994a1885eda6a663e8fa22535ce6</anchor>
      <arglist>(const M &amp;matrix, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGlobalSparseMatrix</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a131e13bda7cee7fa0c8e4a96e8d46801</anchor>
      <arglist>(const M &amp;mat, C &amp;ooc, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5681a3ce128d5db798ddb4c6dcdfb1c6</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockMatrix&lt; T1, Args... &gt; &amp;m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaa4de74df39eaede5eddcd10b898e380a</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockVector&lt; Args... &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a9f1d7465bf71a0549ed5596e9b142f7f</anchor>
      <arglist>(&quot;amg&quot;, AMGCreator())</arglist>
    </member>
    <member kind="function">
      <type>PropertyMapTypeSelector&lt; Amg::VertexVisitedTag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &gt;::Type</type>
      <name>get</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a405d30f54803def97082030c715c8791</anchor>
      <arglist>([[maybe_unused]] const Amg::VertexVisitedTag &amp;tag, Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt; &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga31161bee90db194d09f233f00ab4de9c</anchor>
      <arglist>(&quot;ssor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga84e1da868870a635c00649be4e1d101b</anchor>
      <arglist>(&quot;sor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga08abf358156090136c1433291819a194</anchor>
      <arglist>(&quot;gs&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqGS &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8e0768493ba56650387ef7f1171d2620</anchor>
      <arglist>(&quot;jac&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqJac &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gabdfc9bd7597c826fa723af53d0cb0e2d</anchor>
      <arglist>(&quot;ilu&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqILU &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga6c0383c6a267d2dd7bdf0425463c95dc</anchor>
      <arglist>(&quot;richardson&quot;, [](auto tl, const auto &amp;, const ParameterTree &amp;config){ using D=typename Dune::TypeListElement&lt; 1, decltype(tl)&gt;::type;using R=typename Dune::TypeListElement&lt; 2, decltype(tl)&gt;::type;return std::make_shared&lt; Richardson&lt; D, R &gt;&gt;(config);})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gada61707dc136db5a195bef80037d5246</anchor>
      <arglist>(&quot;ildl&quot;, defaultPreconditionerCreator&lt; Dune::SeqILDL &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillIndexSetHoles</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a62bc57d5768b1bc98357bac259795327</anchor>
      <arglist>(const G &amp;graph, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>buildCommunication</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aecfad52fbb6f783a2ce3c01aefa7838c</anchor>
      <arglist>(const G &amp;graph, std::vector&lt; int &gt; &amp;realparts, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_carray</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8fd07ea3f22cb47275859d39d7bdffef</anchor>
      <arglist>(S &amp;os, T *array, std::size_t l)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValidGraph</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aa754fe56e078eb1b50db4ace1e7fc1b1</anchor>
      <arglist>(std::size_t noVtx, std::size_t gnoVtx, S noEdges, T *xadj, T *adjncy, bool checkSymmetry)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>commGraphRepartition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>aba345909b93e7811c7b937e3de3bf381</anchor>
      <arglist>(const M &amp;mat, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, Metis::idx_t nparts, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>graphRepartition</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a8217b8a1761fe09e89c8cfd8a84f21ff</anchor>
      <arglist>(const G &amp;graph, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm, Metis::idx_t nparts, std::shared_ptr&lt; Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt;&gt; &amp;outcomm, RedistributeInterface &amp;redistInf, bool verbose=false)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>makeScalarProduct</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>a13f43ac2f62e510522f7cdb07828a41f</anchor>
      <arglist>(std::shared_ptr&lt; const Comm &gt; comm, SolverCategory::Category category)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>afaf47e66b019fa82bce1ea1abfba6080</anchor>
      <arglist>(const Comm &amp;comm, SolverCategory::Category category)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga8cd87704fdf718eb91e0438ece40dc90</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const O &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gacaa45f8d22a9e430403dc0a933c40718</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae3ab5a656b6ac5e2f52304689e535597</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaffc9f5f8d427f2d98dbef49624117634</anchor>
      <arglist>(const std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga569512130000aa1e72d00b1427407201</anchor>
      <arglist>(const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab48d6cf38494913a86506075ee00388d</anchor>
      <arglist>(const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; InverseOperator&lt; typename Operator::domain_type, typename Operator::range_type &gt; &gt;</type>
      <name>getSolverFromFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga1ce543e29164b14be8dcfdf63197f3dd</anchor>
      <arglist>(std::shared_ptr&lt; Operator &gt; op, const ParameterTree &amp;config, std::shared_ptr&lt; Preconditioner&lt; typename Operator::domain_type, typename Operator::range_type &gt;&gt; prec=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerBlockLevelCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga335dd7b0d29e9493a7f193c9f07767bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaaf82ab9baa6ac2e24bb927e953ffb4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultIterativeSolverCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga2a5d86e17fb4ce0299537c0704264996</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gabd2045a9be5c024d2c92e3f4cdfa3eb2</anchor>
      <arglist>(&quot;loopsolver&quot;, defaultIterativeSolverCreator&lt; Dune::LoopSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga3c66a86b003ab534cdd42cad22508ef6</anchor>
      <arglist>(&quot;gradientsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GradientSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gab43f1b948010bb468503c277c15f8eb5</anchor>
      <arglist>(&quot;cgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac041cf0b9a9364c1844ef5b3d2528d30</anchor>
      <arglist>(&quot;bicgstabsolver&quot;, defaultIterativeSolverCreator&lt; Dune::BiCGSTABSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaa120eff85c543a03ef1772f13de8684f</anchor>
      <arglist>(&quot;minressolver&quot;, defaultIterativeSolverCreator&lt; Dune::MINRESSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga7cc4a9320ba7c35fae50b4360d80ecf4</anchor>
      <arglist>(&quot;restartedgmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga8845c190b12bb823c017a8dfe514706b</anchor>
      <arglist>(&quot;restartedflexiblegmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFlexibleGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga311f32233cd4c7b3458590c6e12a4317</anchor>
      <arglist>(&quot;generalizedpcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GeneralizedPCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaaa79e6ce5a91a1bec65fff22b187143b</anchor>
      <arglist>(&quot;restartedfcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaf6cceb219c9cb222a7be9729f616e09b</anchor>
      <arglist>(&quot;completefcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CompleteFCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaee2b8c91109cd15b0ee757e98eac25f3</anchor>
      <arglist>(&quot;spqr&quot;, Dune::SPQRCreator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00252.html</anchorfile>
      <anchor>ad6ff6f6d268c3f382e470135e978eabf</anchor>
      <arglist>(&quot;superlu&quot;, SuperLUCreator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0960774f62ee399c3f9c2b57781e4fde</anchor>
      <arglist>(&quot;umfpack&quot;, Dune::UMFPackCreator())</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>default_precision</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gab36dc22122e5b7f555b64ef9f418d329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Amg</name>
    <filename>a00267.html</filename>
    <class kind="struct">Dune::Amg::ConstructionTraits</class>
    <class kind="class">Dune::Amg::AggregationCriterion</class>
    <class kind="class">Dune::Amg::SymmetricMatrixDependency</class>
    <class kind="class">Dune::Amg::Dependency</class>
    <class kind="class">Dune::Amg::SymmetricDependency</class>
    <class kind="class">Dune::Amg::Diagonal</class>
    <class kind="class">Dune::Amg::FirstDiagonal</class>
    <class kind="struct">Dune::Amg::RowSum</class>
    <class kind="struct">Dune::Amg::FrobeniusNorm</class>
    <class kind="struct">Dune::Amg::AlwaysOneNorm</class>
    <class kind="class">Dune::Amg::SymmetricCriterion</class>
    <class kind="class">Dune::Amg::UnSymmetricCriterion</class>
    <class kind="class">Dune::Amg::Aggregator</class>
    <class kind="class">Dune::Amg::AggregatesMap</class>
    <class kind="class">Dune::Amg::Aggregate</class>
    <class kind="class">Dune::Amg::KAMG</class>
    <class kind="class">Dune::Amg::KAmgTwoGrid</class>
    <class kind="class">Dune::Amg::AMG</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector</class>
    <class kind="struct">Dune::Amg::ApplyHelper</class>
    <class kind="struct">Dune::Amg::ApplyHelper&lt; 0 &gt;</class>
    <class kind="class">Dune::Amg::CombinedFunctor</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ParallelOperatorArgs</class>
    <class kind="struct">Dune::Amg::OwnerOverlapCopyCommunicationArgs</class>
    <class kind="struct">Dune::Amg::SequentialCommunicationArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::MatrixAdapterArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; MatrixAdapter&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="class">Dune::Amg::EdgeProperties</class>
    <class kind="class">Dune::Amg::VertexProperties</class>
    <class kind="class">Dune::Amg::PropertyGraphVertexPropertyMap</class>
    <class kind="class">Dune::Amg::FastAMG</class>
    <class kind="struct">Dune::Amg::GaussSeidelPresmoothDefect</class>
    <class kind="struct">Dune::Amg::GaussSeidelPostsmoothDefect</class>
    <class kind="struct">Dune::Amg::OverlapVertex</class>
    <class kind="class">Dune::Amg::SparsityBuilder</class>
    <class kind="class">Dune::Amg::BaseGalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::BaseConnectivityConstructor</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor&lt; G, SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::GlobalAggregatesMap</class>
    <class kind="struct">Dune::Amg::AggregatesGatherScatter</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, SequentialInformation &gt;</class>
    <class kind="class">Dune::Amg::MatrixGraph</class>
    <class kind="class">Dune::Amg::SubGraph</class>
    <class kind="class">Dune::Amg::VertexPropertiesGraph</class>
    <class kind="class">Dune::Amg::PropertiesGraph</class>
    <class kind="class">Dune::Amg::GraphVertexPropertiesSelector</class>
    <class kind="class">Dune::Amg::GraphEdgePropertiesSelector</class>
    <class kind="struct">Dune::Amg::PropertiesGraphCreator</class>
    <class kind="struct">Dune::Amg::PropertiesGraphCreator&lt; M, SequentialInformation &gt;</class>
    <class kind="class">Dune::Amg::Hierarchy</class>
    <class kind="class">Dune::Amg::IndicesCoarsener</class>
    <class kind="class">Dune::Amg::ParallelIndicesCoarsener</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; SequentialInformation, E &gt;</class>
    <class kind="class">Dune::Amg::MatrixHierarchy</class>
    <class kind="class">Dune::Amg::CoarsenCriterion</class>
    <class kind="class">Dune::Amg::DependencyParameters</class>
    <class kind="class">Dune::Amg::AggregationParameters</class>
    <class kind="class">Dune::Amg::CoarseningParameters</class>
    <class kind="class">Dune::Amg::Parameters</class>
    <class kind="class">Dune::Amg::SequentialInformation</class>
    <class kind="struct">Dune::Amg::VertexVisitedTag</class>
    <class kind="class">Dune::Amg::RandomAccessBundledPropertyMap</class>
    <class kind="class">Dune::Amg::AggregateRenumberer</class>
    <class kind="struct">Dune::Amg::DefaultSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs</class>
    <class kind="struct">Dune::Amg::ConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultParallelConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SeqOverlappingSchwarzSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="class">Dune::Amg::Transfer</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, SequentialInformation &gt;</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="class">Dune::Amg::LevelTransferPolicy</class>
    <class kind="class">Dune::Amg::AggregationLevelTransferPolicy</class>
    <class kind="class">Dune::Amg::OneStepAMGCoarseSolverPolicy</class>
    <class kind="class">Dune::Amg::TwoLevelMethod</class>
    <member kind="enumvalue">
      <name>MAX_PROCESSES</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga2ff22a293069aebfba3194cb909ce2e2ad6b62d6d5abdcb2557c2a3a69feccdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccumulationMode</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf6f2fe996122d7c9d139e86a84957f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a5c5f5e0aa08de3ed0d0fe8cec4838260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>atOnceAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a4fe2fe3869543e6e15fc480bea94909a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>successiveAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a69257c9fc3443058ecc8d3d542fe0b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3b1322dc105dc48e2cfbb19bdc157416</anchor>
      <arglist>(std::ostream &amp;os, const AggregationCriterion&lt; T &gt; &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf619ca4d1318ace19831096270fb506c</anchor>
      <arglist>(G &amp;graph, const typename C::Matrix &amp;matrix, C criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAggregates2d</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67437d2f75e7e1216ee57306825332be</anchor>
      <arglist>(const AggregatesMap&lt; V &gt; &amp;aggregates, int n, int m, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabfdb505d54f97595d5b559f9493978b1</anchor>
      <arglist>(std::ostream &amp;os, const EdgeProperties &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab001191f50333ad683c2faeb8de5e4d2</anchor>
      <arglist>(std::ostream &amp;os, const VertexProperties &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>visitNeighbours</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c84915dd8eafb315ce76b1f689f1cf3</anchor>
      <arglist>(const G &amp;graph, const typename G::VertexDescriptor &amp;vertex, V &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2f21163b67b8b6b6558543829d3fbb66</anchor>
      <arglist>([[maybe_unused]] const M &amp;origMatrix, [[maybe_unused]] std::shared_ptr&lt; M &gt; newMatrix, [[maybe_unused]] SequentialInformation &amp;origComm, [[maybe_unused]] std::shared_ptr&lt; SequentialInformation &gt; &amp;newComm, [[maybe_unused]] RedistributeInformation&lt; SequentialInformation &gt; &amp;ri, [[maybe_unused]] int nparts, [[maybe_unused]] C1 &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga992041e5fe1798be7fd728be5578b525</anchor>
      <arglist>(const M &amp;origMatrix, std::shared_ptr&lt; M &gt; newMatrix, C &amp;origComm, std::shared_ptr&lt; C &gt; &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri, int nparts, C1 &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renumberAggregates</name>
      <anchorfile>a00267.html</anchorfile>
      <anchor>a577d044e1622cb386cd4f6821ac63169</anchor>
      <arglist>(const G &amp;graph, I index, I endIndex, V &amp;visitedMap, AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c53f44b3b6ff7f8ccf90503bc995e11</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac8448b6118691fd94bc14d2126496c40</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::CounterImpl</name>
    <filename>a00258.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dune::ForEach</name>
    <filename>a00260.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>rows</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>a4ae853c93f3cb1318493dc4086e1dea7</anchor>
      <arglist>(Matrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cols</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>ab478e5d632f7718fc4434d7dcf29b23f</anchor>
      <arglist>(Matrix const &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a00260.html</anchorfile>
      <anchor>afde43496a87705b3b5687ce18072553c</anchor>
      <arglist>(Vector const &amp;vector)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::ILU</name>
    <filename>a00261.html</filename>
    <class kind="struct">Dune::ILU::CRS</class>
    <member kind="function">
      <type>void</type>
      <name>blockILU0Decomposition</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>aba8693db4336d6eca66538c71b7570aa</anchor>
      <arglist>(M &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUBacksolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a42563bed9371413feba968bec7522b74</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>M::field_type &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a82c4742837894aa12e113be97d60b88d</anchor>
      <arglist>(M &amp;A, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a7f314ebe46a79c8433ee54926042382d</anchor>
      <arglist>(K &amp;A, [[maybe_unused]] typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>firstMatrixElement</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>aeba6c573e710f37b1bfa57cba4f843af</anchor>
      <arglist>(FieldMatrix&lt; K, n, m &gt; &amp;A)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUDecomposition</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>ae1d57c22d90aef3f76a8818fc36cc38b</anchor>
      <arglist>(const M &amp;A, int n, M &amp;ILU)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>convertToCRS</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a243d4f4b5829efb30039b4a36e0f0cd5</anchor>
      <arglist>(const M &amp;A, CRS &amp;lower, CRS &amp;upper, InvVector &amp;inv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bilu_backsolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>ad753bb8cde1ea3aae5ca889d6cc5a68f</anchor>
      <arglist>(const CRS &amp;lower, const CRS &amp;upper, const InvVector &amp;inv, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>blockILUBacksolve</name>
      <anchorfile>a00261.html</anchorfile>
      <anchor>a57f371097dec97a09d4bdc3b99077b7c</anchor>
      <arglist>(const CRS &amp;lower, const CRS &amp;upper, const InvVector &amp;inv, X &amp;v, const Y &amp;d)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::ISTL</name>
    <filename>a00254.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dune::MatrixImp</name>
    <filename>a00263.html</filename>
    <class kind="class">Dune::MatrixImp::DenseMatrixBase</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::MatrixMarketImpl</name>
    <filename>a00264.html</filename>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; int &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; double &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; float &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_numeric_type&lt; std::complex&lt; float &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; BlockVector&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; FieldVector&lt; T, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_header_printer&lt; FieldMatrix&lt; T, i, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; BCRSMatrix&lt; FieldMatrix&lt; T, i, j &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldMatrix&lt; T, i, j &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_block_structure_header&lt; FieldVector&lt; T, i &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::MMHeader</class>
    <class kind="struct">Dune::MatrixMarketImpl::IndexData</class>
    <class kind="struct">Dune::MatrixMarketImpl::NumericWrapper</class>
    <class kind="struct">Dune::MatrixMarketImpl::PatternDummy</class>
    <class kind="struct">Dune::MatrixMarketImpl::NumericWrapper&lt; PatternDummy &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::MatrixValuesSetter</class>
    <class kind="struct">Dune::MatrixMarketImpl::MatrixValuesSetter&lt; PatternDummy, brows, bcols &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::is_complex</class>
    <class kind="struct">Dune::MatrixMarketImpl::is_complex&lt; std::complex&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::MatrixMarketImpl::mm_multipliers&lt; BCRSMatrix&lt; FieldMatrix&lt; B, i, j &gt;, A &gt; &gt;</class>
    <member kind="enumeration">
      <type></type>
      <name>LineType</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_HEADER</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cda12fe49ca30d8d5a52c1dc70ace8d18ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_ISTLSTRUCT</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cdad77d19ed994d35e12407037e045921ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DATA</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a24df94789b090f34c77f2131c54434cda0fbdf01a4ab8bfeab99055a1b0616e8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MM_MAX_LINE_LENGTH</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ac5fd06f7cc4e72f733bbc3160e1796fea4945d19de19850deef23453940d61d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_TYPE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coordinate_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a6f558b994af91ee41c0714a44c5b6677</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>array_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a6bb37eeb823be6a79d40b9df1c181f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a9129f10756839e7d1d41242c28d05559a7e892bb34cab22b30cc56e6dcd047c89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_CTYPE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>integer_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceade6720960c684d9d11d20020631471ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>double_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995cead2703fd95f1bb4993e77a4174157aab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>complex_type</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceac1aa771c3462961c9eca0189436779ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pattern</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceab957ad3ef8783e5f30348f7c937ece68</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_ctype</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ad3799cdbc32101e678b19b8723b995ceaa4964758c3e93b0f7fa12485464ace04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>MM_STRUCTURE</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>general</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051a2e4b623fd05b60b25f93d1a56b857db2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>symmetric</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051acae227482a2f9f85340759688143533e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>skew_symmetric</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051a0568e0cba4f7ad110d2257caac3a72b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hermitian</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051aa90eba109717e70ef416ecfc671f9567</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unknown_structure</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>acddb68037700ba8f7d59592b55b1e051ab158d28f5455f1fcdce4ba36cb83412a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lineFeed</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ab51f7249b025353a6a44ac2e7cd3946b</anchor>
      <arglist>(std::istream &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>skipComments</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>ab061c3ade067c3b4a06d2e9d945a04d9</anchor>
      <arglist>(std::istream &amp;file)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readMatrixMarketBanner</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a265f42be073f67deb7b2176c4ca31b4b</anchor>
      <arglist>(std::istream &amp;file, MMHeader &amp;mmHeader)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; std::size_t, std::size_t, std::size_t &gt;</type>
      <name>calculateNNZ</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a40ad9e100d2d30ca61d10e0154ac6787</anchor>
      <arglist>(std::size_t rows, std::size_t cols, std::size_t entries, const MMHeader &amp;header)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a1d66d28b4075ae8d2d6ea452d0503c8c</anchor>
      <arglist>(std::istream &amp;is, NumericWrapper&lt; T &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a523bea9e0ff6a5de0e5b611d01bf7e43</anchor>
      <arglist>(std::istream &amp;is, [[maybe_unused]] NumericWrapper&lt; PatternDummy &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a2115104055c40a0fddb0715a028d6f4c</anchor>
      <arglist>(const IndexData&lt; T &gt; &amp;i1, const IndexData&lt; T &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a6a19637b68b072783f458cf499a3aff8</anchor>
      <arglist>(std::istream &amp;is, IndexData&lt; T &gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a8c1b163aa30feb773a8035911fa92e08</anchor>
      <arglist>(std::istream &amp;is, IndexData&lt; NumericWrapper&lt; std::complex&lt; T &gt;&gt;&gt; &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt;!is_complex&lt; T &gt;::value, T &gt;</type>
      <name>conj</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>aa92d8d65d8bfbade4149325b31739f3f</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; is_complex&lt; T &gt;::value, T &gt;</type>
      <name>conj</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a4074ae78d70be63459665268d9f7a2aa</anchor>
      <arglist>(const T &amp;r)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readSparseEntries</name>
      <anchorfile>a00264.html</anchorfile>
      <anchor>a5d91731ac5a7348c81521d45091599df</anchor>
      <arglist>(Dune::BCRSMatrix&lt; T, A &gt; &amp;matrix, std::istream &amp;file, std::size_t entries, const MMHeader &amp;mmHeader, const D &amp;)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Metis</name>
    <filename>a00268.html</filename>
    <member kind="typedef">
      <type>float</type>
      <name>real_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>a89fb21eb1009297a64db2503e4cda21e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>idx_t</name>
      <anchorfile>a00268.html</anchorfile>
      <anchor>ab1b879eebd5d32701c7b5879bbe64a17</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL</name>
    <title>Iterative Solvers Template Library (ISTL)</title>
    <filename>a00236.html</filename>
    <subgroup>ISTL_Solvers</subgroup>
    <subgroup>ISTL_Comm</subgroup>
    <subgroup>ISTL_SPMV</subgroup>
    <file>ldl.hh</file>
    <file>spqr.hh</file>
    <file>superlu.hh</file>
    <file>umfpack.hh</file>
    <class kind="class">Dune::ILUSubdomainSolver</class>
    <class kind="class">Dune::ILU0SubdomainSolver</class>
    <class kind="class">Dune::ILUNSubdomainSolver</class>
    <class kind="class">Dune::ISTLError</class>
    <class kind="class">Dune::BCRSMatrixError</class>
    <class kind="class">Dune::ImplicitModeCompressionBufferExhausted</class>
    <class kind="class">Dune::SolverAbort</class>
    <class kind="class">Dune::MatrixBlockError</class>
    <class kind="class">Dune::SeqOverlappingSchwarz</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper</class>
    <class kind="class">Dune::LDL</class>
    <class kind="class">Dune::LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; LDL&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::LDLCreator</class>
    <class kind="struct">Dune::LDLCreator::isValidBlock</class>
    <class kind="struct">Dune::LDLCreator::isValidBlock&lt; FieldVector&lt; double, k &gt; &gt;</class>
    <class kind="class">Dune::SPQR</class>
    <class kind="class">Dune::SPQR&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt;</class>
    <class kind="struct">Dune::IsDirectSolver&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; SPQR&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::SPQRCreator</class>
    <class kind="struct">Dune::SPQRCreator::isValidBlock</class>
    <class kind="struct">Dune::SPQRCreator::isValidBlock&lt; FieldVector&lt; double, 1 &gt; &gt;</class>
    <class kind="struct">Dune::SuperLUSolveChooser</class>
    <class kind="struct">Dune::SuperLUDenseMatChooser</class>
    <class kind="struct">Dune::SuperLUQueryChooser</class>
    <class kind="struct">Dune::QuerySpaceChooser</class>
    <class kind="class">Dune::SuperLU</class>
    <class kind="struct">Dune::UMFPackMethodChooser</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; double &gt;</class>
    <class kind="struct">Dune::UMFPackMethodChooser&lt; std::complex&lt; double &gt; &gt;</class>
    <class kind="class">Dune::UMFPack</class>
    <class kind="struct">Dune::IsDirectSolver&lt; UMFPack&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::StoresColumnCompressed&lt; UMFPack&lt; BCRSMatrix&lt; T, A &gt; &gt; &gt;</class>
    <class kind="struct">Dune::UMFPackCreator</class>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock</class>
    <class kind="struct">Dune::UMFPackCreator::isValidBlock&lt; B, std::enable_if_t&lt; std::is_same&lt; typename FieldTraits&lt; B &gt;::real_type, double &gt;::value &gt; &gt;</class>
    <member kind="typedef">
      <type>ImplicitModeCompressionBufferExhausted</type>
      <name>ImplicitModeOverflowExhausted</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga31a901b8fb8394865710949d0b466149</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2719d5ed0b691ca5d935941ffa9c9b29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga963d590342d5796cfcfd46141bba51be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ISTL::Impl::BCCSMatrix&lt; T, int &gt;</type>
      <name>LDLMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga494f7182544eafc91bf8a057153968b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;, int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad9efb6140ed353a70807f39c8bd4bffb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, m &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1317746d0f20fa11101b3e6855eafb1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, n &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt;</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7048c2fdcc5475f9d529ff58940b9447</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5cff5d5b4933a1d1652e5877c31547c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga092a5f68cdb7e090971eed16a2283db6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrix&lt; T, int &gt;</type>
      <name>SPQRMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7dc83a7110f714f8b5f337f8cc774b62</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;, int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga59d41c0cfd544e49265336f04572bf09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, m &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, m &gt; &gt; &gt;</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae50842ca64424731e5303fb3c1cf5b59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BlockVector&lt; FieldVector&lt; T, n &gt;, typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; FieldVector&lt; T, n &gt; &gt; &gt;</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac75cd7a5d3646f85730f745d24f6eea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae24ca9c9757b55456f3d2376403faaae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>matrix_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga129a9162c047f72e174ff7b9de308098</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrix&lt; typename Matrix::field_type, long int &gt;</type>
      <name>UMFPackMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2ba42ccd94e2206d685bac6f093e9f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ISTL::Impl::BCCSMatrixInitializer&lt; M, long int &gt;</type>
      <name>MatrixInitializer</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga73e5d285c074f519d51632e28383ebd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UMFPackVectorChooser&lt; M &gt;::domain_type</type>
      <name>domain_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac762772e2c5dd7489b3eacc216f67356</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UMFPackVectorChooser&lt; M &gt;::range_type</type>
      <name>range_type</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3edbe6cd25d3d19ac07509852a6c4590</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggabb5f552bd9a885c086cce920f62ea8d9aa150aa34259598f045447b7aeff7d416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga5b2f66ea42c241eada1d0555351c66e8a63e2861b4157098fd1d9cc43e26f3399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga7fd4b2bf093c8cd46bfc80aa43fedacda96a22f52e7b811d728794ff4b8dfce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggaa3aa85a2578dfcb40ca192d66d30bcfda33337696b5e0fc5b5671a19bf5df3ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggad22adf97acc384035c3db9c9f6d00ea1ab518b6581cac3aac90a0b02a398909f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga88afeca9a86007ff972718ebf44982c5afbf509559c932f8002608ecdfc25ad8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggabb5f552bd9a885c086cce920f62ea8d9aa150aa34259598f045447b7aeff7d416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga5b2f66ea42c241eada1d0555351c66e8a63e2861b4157098fd1d9cc43e26f3399</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga7fd4b2bf093c8cd46bfc80aa43fedacda96a22f52e7b811d728794ff4b8dfce6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggaa3aa85a2578dfcb40ca192d66d30bcfda33337696b5e0fc5b5671a19bf5df3ac8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ggad22adf97acc384035c3db9c9f6d00ea1ab518b6581cac3aac90a0b02a398909f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gga88afeca9a86007ff972718ebf44982c5afbf509559c932f8002608ecdfc25ad8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gacb0ebf206ada98ad819720b00e7e274a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaffc39102eb3c20ba057c2897b43bda6f</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaabbd074c605597b4ad1740b031d6e112</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac05deb83f4eab6cec6769b3d8fc4f27b</anchor>
      <arglist>(const Matrix &amp;matrix, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf749c72a0b4b75ee87bee81323c1a39b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~LDL</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga768fb5ff9bd370ec420bb94895dc05c7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8eb4225e81fdffb094a8eab2f4a539c8</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5a4e3c79c54667da91b7c3832d933a24</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga552c9e270da5aa2393f0d71619544504</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga34be730e19ff703d99ae4322653424a0</anchor>
      <arglist>([[maybe_unused]] unsigned int option, [[maybe_unused]] double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga9b64b0d9778ef7fd278d556736129783</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf61b186de4c25626bab68067f255b988</anchor>
      <arglist>(const Matrix &amp;matrix, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga532266bc4c00a98388d7d6d142dbcd36</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>LDLMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafb4c600f28bb8ffd037db149508efe59</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga85b3bcd7a92809668ed66dbc030862e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa703c6646e9d0015ecd371b7065316d4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getD</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf8c67b99e44a46b329d598b897382018</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getLp</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac3d21613d05a84b171b07a264f7d3837</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int *</type>
      <name>getLi</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa9e629da7a999d2898a87c945bf7bd79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double *</type>
      <name>getLx</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5d7f4b106809353aaf28a64f2f29e2bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga41591e300621eb2cc91edb5237ecc4fe</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gada8afc6ab8bdf8b4df97708ca2d45381</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt; !isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4ab4a1f419552328d594727627e696cb</anchor>
      <arglist>(&quot;ldl&quot;, Dune::LDLCreator())</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga32a5179ee78f88b18339efe81b244f1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf080b2a0f8f47ff73a90424f2b1f8e07</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga24f75cbb35430672b9789be6266c59e2</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gab9bfdd551347ec60dd22eda535293e63</anchor>
      <arglist>(const Matrix &amp;matrix, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5ee766cfa3feafe0a0bd65bc13b1a475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~SPQR</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0c934bcb35576886a3f7714d10b30841</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae9cfd092f0ea9eca11e781081bf1b66f</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac9d25f7292ebc4c47baef1dc050bfb03</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1af8cd2c780b52c6f2f6cbf465425aee</anchor>
      <arglist>([[maybe_unused]] unsigned int option, [[maybe_unused]] double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga40ec2b3ea16b1e214d38b566f4d07cf0</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad508264b96a682fb12c2f6cb713a10b6</anchor>
      <arglist>(const Matrix &amp;matrix, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga74ce7b219647c76880a615371c57c173</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>SuiteSparseQR_factorization&lt; T &gt; *</type>
      <name>getFactorization</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga460031c417fd3d5ff7cfb076944b140c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SPQRMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0d22d4beef518731972e2fb501f053a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga9279ff319501416c8aef04beeeb3b3f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga114f5d3865c29cca6546ed3eb7f171f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafd9004782bd927d6648d0717e161566c</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5c1b29274127bb78620df09136a9dd7e</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt;!isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaee2b8c91109cd15b0ee757e98eac25f3</anchor>
      <arglist>(&quot;spqr&quot;, Dune::SPQRCreator())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaults</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaeefb180cb00447618edcc84e3926c066</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga82097ad3862254b5b24a235dc4617021</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5f8574c0cd9edf1b914dabb1554b8bc8</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>load_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2a795468b8dae4e8eb3d4c53ad400d3d</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga889fcc448a461dbd3dfc66f62f855cb6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_info</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga527fe91d69d313ce963d1f9a34ccc9f6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_status</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga314771c3a7476e5b8221e3588caa51bb</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>save_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga705b88e473dc776dc1cbc3bd55d81b9f</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf3a1566341317abc5375303423914362</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4e73561f05723e1d5d77673f21e8b1cc</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaults</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7cfc9808e18c3a7048372798392477e5</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga64d1739aba894e4ced76af94d527016e</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free_symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae13d3545eb7219b6613d510469a92851</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>load_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2733debd45a51c99d536a864970d2baf</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae2cfb3869ec0aab87a4d455c50caf82f</anchor>
      <arglist>(const long int *cs, const long int *ri, const double *val, A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_info</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2009f30d05ccbb8eec6443b3a0ec5638</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>report_status</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga7265bc4d283f2f843c8fb5c1bb2771d6</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>save_numeric</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga60565b3291200a2702fa6b54d540e573</anchor>
      <arglist>(A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>solve</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga12c16ff720da9a983068dbdb915bd6ad</anchor>
      <arglist>(long int m, const long int *cs, const long int *ri, std::complex&lt; double &gt; *val, double *x, const double *b, A... args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>symbolic</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga5f11ef25ee2bc9fc0c4a4538105e9a65</anchor>
      <arglist>(long int m, long int n, const long int *cs, const long int *ri, const double *val, A... args)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0fc32091fc97bd1bade894b4cb429905</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gac976eb937c60410302e0a6e0a458ffee</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf8f5d625278b2be0a961f0ccdf31c6fb</anchor>
      <arglist>(const Matrix &amp;matrix, int verbose, bool)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga22490d4f8dd9ed74ea323cd325bbc17e</anchor>
      <arglist>(const Matrix &amp;mat_, const ParameterTree &amp;config)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4c3a996e138d4225fe1ecf16d0a29eca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3754d885c3ebada738e2aa602ff9f3c6</anchor>
      <arglist>(const Matrix &amp;mat_, const char *file, int verbose=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga887bc3b95d9c409854a503e2aac35e07</anchor>
      <arglist>(const char *file, int verbose=0)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~UMFPack</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa036fbd9362380f2a84325edf46c0edf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0a524513f6251b657b0734a0b91660d8</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga07c9581a375a282831ba35d13e191d77</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, [[maybe_unused]] double reduction, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga79bd07aba5057517005addb023297866</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOption</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gad9035897bd242ce325cee859e5de8048</anchor>
      <arglist>(unsigned int option, double value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveDecomposition</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaaf25628932177632b9fffa17e9696ddc</anchor>
      <arglist>(const char *file)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga1f76a7e44ce7cad0a7c3372a6aff3653</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6fea34a5fd3237bb0ee14e51d0d1a9f4</anchor>
      <arglist>(const Matrix &amp;_mat, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga82d9329ff50cbc08273e1f670f7af266</anchor>
      <arglist>(int v)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>getFactorization</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0b96c3791758152ecce7bff7c94509c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>UMFPackMatrix &amp;</type>
      <name>getInternalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6e673edc354111efac0f1101393cc0c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga064d11b7fb9631dbc1b45ffcff17473b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>name</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gab7b3736e41dd13f53468f3acedb8c597</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaead2e303a149fc649ec60e40bd150934</anchor>
      <arglist>(TL, const M &amp;mat, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::InverseOperator&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gada8ce265dfbe9c38d6264a0c8e4bfa8d</anchor>
      <arglist>(TL, const M &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt; !isValidBlock&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_DIRECT_SOLVER</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga0960774f62ee399c3f9c2b57781e4fde</anchor>
      <arglist>(&quot;umfpack&quot;, Dune::UMFPackCreator())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::size_t</type>
      <name>copyToLocalMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ffa7104c573c6b114387fef2f155541</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gafa21731f06b876f98d9431bb7bd20759</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga73c6843e677895d542ad0453c6097d3e</anchor>
      <arglist>(const M &amp;A, S &amp;rowset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaa118b7d2e5bb4d3c0dea91d0b0ba4c62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8aa8dd7abddc925828a3816bbad613d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga4c8de46c1ca69781a94bea29ac1522cc</anchor>
      <arglist>(const Matrix &amp;mat, bool verbose=false, bool reusevector=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SuperLU</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaddd436aef0059fbf9f0f3ec606dbf944</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVerbosity</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga756d4cdf5301c9107b009a91a7d839dc</anchor>
      <arglist>(bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gae6c3893092ac19b99c10377c8933ae63</anchor>
      <arglist>(const Matrix &amp;mat)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSubMatrix</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga2d3f36d559bc6611c3c12608a9a249c1</anchor>
      <arglist>(const Matrix &amp;mat, const S &amp;rowIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga3ed50b203695f205ce598fe118eee670</anchor>
      <arglist>(domain_type &amp;x, range_type &amp;b, InverseOperatorResult &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga62b6c1546957132d8d7f0f2811a415dc</anchor>
      <arglist>(T *x, T *b)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga983c57a96fb59d028bb1950cd20dc400</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga8e44dbf7e19e58423e840ec792efa5ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>valid</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf456989373d56d5ae79efb17ea873621</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; LDL&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6d92182384e6669d5bd612fb2d290293</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; SPQR&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>gaf6c75277347dc579096dad4b00f4d18a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga095954d4e5495b6950620fd081c3247a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>SeqOverlappingSchwarzAssemblerHelper&lt; UMFPack&lt; Matrix &gt;, true &gt;</name>
      <anchorfile>a00236.html</anchorfile>
      <anchor>ga6ecff589688a016e228f4ea4c5f9fef6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_Solvers</name>
    <title>Iterative Solvers</title>
    <filename>a00237.html</filename>
    <subgroup>ISTL_Eigenvalue</subgroup>
    <subgroup>ISTL_Parallel</subgroup>
    <subgroup>ISTL_Operators</subgroup>
    <subgroup>ISTL_Prec</subgroup>
    <subgroup>ISTL_SP</subgroup>
    <file>solver.hh</file>
    <file>solvers.hh</file>
    <class kind="struct">Dune::InverseOperatorResult</class>
    <class kind="class">Dune::InverseOperator</class>
    <class kind="class">Dune::IterativeSolver</class>
    <class kind="class">Dune::SolverHelper</class>
    <class kind="struct">Dune::SolverCategory</class>
    <class kind="class">Dune::InvalidSolverCategory</class>
    <class kind="class">Dune::LoopSolver</class>
    <class kind="class">Dune::GradientSolver</class>
    <class kind="class">Dune::CGSolver</class>
    <class kind="class">Dune::BiCGSTABSolver</class>
    <class kind="class">Dune::MINRESSolver</class>
    <class kind="class">Dune::RestartedGMResSolver</class>
    <class kind="class">Dune::RestartedFlexibleGMResSolver</class>
    <class kind="class">Dune::GeneralizedPCGSolver</class>
    <class kind="class">Dune::RestartedFCGSolver</class>
    <class kind="class">Dune::CompleteFCGSolver</class>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gabd2045a9be5c024d2c92e3f4cdfa3eb2</anchor>
      <arglist>(&quot;loopsolver&quot;, defaultIterativeSolverCreator&lt; Dune::LoopSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga3c66a86b003ab534cdd42cad22508ef6</anchor>
      <arglist>(&quot;gradientsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GradientSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gab43f1b948010bb468503c277c15f8eb5</anchor>
      <arglist>(&quot;cgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gac041cf0b9a9364c1844ef5b3d2528d30</anchor>
      <arglist>(&quot;bicgstabsolver&quot;, defaultIterativeSolverCreator&lt; Dune::BiCGSTABSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaa120eff85c543a03ef1772f13de8684f</anchor>
      <arglist>(&quot;minressolver&quot;, defaultIterativeSolverCreator&lt; Dune::MINRESSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga7cc4a9320ba7c35fae50b4360d80ecf4</anchor>
      <arglist>(&quot;restartedgmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga8845c190b12bb823c017a8dfe514706b</anchor>
      <arglist>(&quot;restartedflexiblegmressolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFlexibleGMResSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>ga311f32233cd4c7b3458590c6e12a4317</anchor>
      <arglist>(&quot;generalizedpcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::GeneralizedPCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaaa79e6ce5a91a1bec65fff22b187143b</anchor>
      <arglist>(&quot;restartedfcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::RestartedFCGSolver &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_ITERATIVE_SOLVER</name>
      <anchorfile>a00237.html</anchorfile>
      <anchor>gaf6cceb219c9cb222a7be9729f616e09b</anchor>
      <arglist>(&quot;completefcgsolver&quot;, defaultIterativeSolverCreator&lt; Dune::CompleteFCGSolver &gt;())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_Eigenvalue</name>
    <title>Eigenvalue Solvers</title>
    <filename>a00238.html</filename>
    <class kind="class">Dune::ArPackPlusPlus_Algorithms</class>
    <class kind="class">Dune::PowerIteration_Algorithms</class>
  </compound>
  <compound kind="group">
    <name>ISTL_Comm</name>
    <title>Communication Interface</title>
    <filename>a00239.html</filename>
    <file>owneroverlapcopy.hh</file>
    <class kind="struct">Dune::OwnerOverlapCopyAttributeSet</class>
    <class kind="class">Dune::IndexInfoFromGrid</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
  </compound>
  <compound kind="group">
    <name>ISTL_SPMV</name>
    <title>Sparse Matrix and Vector classes</title>
    <filename>a00240.html</filename>
    <subgroup>ISTL_Kernel</subgroup>
    <subgroup>ISTL_IO</subgroup>
    <subgroup>DenseMatVec</subgroup>
    <file>matrixmatrix.hh</file>
    <file>matrixutils.hh</file>
    <class kind="struct">Dune::MatrixDimension</class>
    <class kind="struct">Dune::CompressionStatistics</class>
    <class kind="class">Dune::ImplicitMatrixBuilder</class>
    <class kind="class">Dune::BCRSMatrix</class>
    <class kind="class">Dune::BDMatrix</class>
    <class kind="class">Dune::BTDMatrix</class>
    <class kind="class">Dune::BlockVector</class>
    <class kind="class">Dune::Matrix</class>
    <class kind="struct">Dune::MatMultMatResult</class>
    <class kind="struct">Dune::MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::MatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; FieldMatrix&lt; T, k, n &gt;, FieldMatrix&lt; T, k, m &gt; &gt;</class>
    <class kind="struct">Dune::TransposedMatMultMatResult&lt; BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A &gt;, BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A1 &gt; &gt;</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; Matrix, 0, l &gt;</class>
    <class kind="class">Dune::MultiTypeBlockMatrix</class>
    <class kind="struct">Dune::CheckIfDiagonalPresent&lt; MultiTypeBlockMatrix&lt; T1, Args... &gt;, blocklevel, l &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver_Col&lt; I, crow, ccol, 0 &gt;</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver</class>
    <class kind="class">Dune::MultiTypeBlockMatrix_Solver&lt; I, crow, 0 &gt;</class>
    <class kind="class">Dune::MultiTypeBlockVector</class>
    <class kind="class">Dune::VariableBlockVector</class>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;::CreateIterator</type>
      <name>CreateIterator</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab8bd1188ffbae61229b4960972e07016</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gafefc39f3a7aa61064db760a1ea2f51d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, TA &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gabb5bb80b2c56e3df4133198938012d5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::CreateIterator</type>
      <name>CreateIterator</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gade295cb0d8d2d5ed6cdd96e2c4806f76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga6efea9bcb0a2d5daebcb7a7b75d5933f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BCRSMatrix&lt; Dune::FieldMatrix&lt; T, n, m &gt;, TA &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga4c512ac3a53ee8558c2f3b24dfae5b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::CreateIterator</type>
      <name>CreateIterator</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac909d429d3fc78207e20d40a66dfe6f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga988f222c176b4018c07ca57a5b718638</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gad74fb3c4950a29ff7e5fae5d48870d1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::RowIterator</type>
      <name>Row</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga26d3654acc12a3dd0a62133ea2e2a1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ColIterator</type>
      <name>Col</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga689403341fc502fcb694e474ad449066</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1ca5643a4a292950496e86c430eb034e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga583355e6300f1b946aef813f5a4f54f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0c2e36ffde3efe4dba945700572cabbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga66cb9d19880e9ce197dc11c58d2c411c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab8f809e1d336ef559b593e228109848d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaddf08098ad7b769ee64b3bf4fe65a4a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt;</type>
      <name>Matrix</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga492ec7c2e9542b57fbab645943fb5037</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::size_type</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gafaf74f40b69e7c6edf20b38a37e0eb7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; T, n, m &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0f9c86740af13d095856c4dad92dd1d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type, std::allocator&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type &gt; &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gabcfbc6e1235402605c661d22c2daa52e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; T, n, m &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaa01338622c2e1f2a2be03427e2493fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BCRSMatrix&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type, std::allocator&lt; typename MatMultMatResult&lt; FieldMatrix&lt; T, n, k &gt;, FieldMatrix&lt; T, k, m &gt; &gt;::type &gt; &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae1303da5347abfc8c4a2866fe10b77ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiTypeBlockMatrix&lt; FirstRow, Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga061870c6667e40c8cd61bdfa0eb42d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga734a19380699255094cb759a76c4d154</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FirstRow::field_type</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3696f7d6dd97ca70665d91e7bd18ae9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; Arg0 &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0216b070b9664056e84876c9c582d170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; Arg0 &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga09b6cdbf9503cea3d74c8ea5c9edc2b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga17d881262afa1aa861f52babf002952a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MultiTypeBlockVector&lt; Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga80d6300e6efb43055959582f2560c122</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>double</type>
      <name>field_type</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaed0d81ed38fca79b594d0261b968aecf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga3bf92eda1ace69be5ab981888a252976a5f8f344e9747482791bab7e2fb2ddeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga6170c97f5723b27d18b5852bfcbf980ca260b6f0b4531b8b749913cc92a9ce3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga07f3dc5b99219b3c8c8fc57078f69194a28e083bf978ecbbd0736a22acbe42b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ggaeb818771cfb4fbf11ce0a2d026ac2464a00c9cc073b83af4dfc30dd370eb297a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga3bf92eda1ace69be5ab981888a252976a5f8f344e9747482791bab7e2fb2ddeae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga6170c97f5723b27d18b5852bfcbf980ca260b6f0b4531b8b749913cc92a9ce3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gga07f3dc5b99219b3c8c8fc57078f69194a28e083bf978ecbbd0736a22acbe42b3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>do_break</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ggaeb818771cfb4fbf11ce0a2d026ac2464a00c9cc073b83af4dfc30dd370eb297a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matMultTransposeMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga74b699cb2d43dc8d89a507df207ff832</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>matMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1829a6141ae2cae5a1ecab7e0207123d</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, n, k &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>transposeMatMultMat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac55861f0d592348e259984077e14960e</anchor>
      <arglist>(BCRSMatrix&lt; FieldMatrix&lt; T, n, m &gt;, A &gt; &amp;res, const BCRSMatrix&lt; FieldMatrix&lt; T, k, n &gt;, A1 &gt; &amp;mat, const BCRSMatrix&lt; FieldMatrix&lt; T, k, m &gt;, A2 &gt; &amp;matt, [[maybe_unused]] bool tryHard=false)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3dc83143ecd9d259d220a655d7a850bd</anchor>
      <arglist>(const M &amp;, [[maybe_unused]] typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>countNonZeros</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab71a994a1885eda6a663e8fa22535ce6</anchor>
      <arglist>(const M &amp;matrix, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga53053612d0cb59515ac8cbb14f2bb0c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga6155c377f16a99ad9cc6c10161176f64</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>M</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacb8f9cf369fe8eaefe2edb0a9d096261</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga76778529bea4352a6735da16227f2cb5</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) -&gt; decltype(std::get&lt; index &gt;(*this))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab63e3a3be738e8657af5aa9888777cd3</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) const -&gt; decltype(std::get&lt; index &gt;(*this))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga57e763009679e92fe30d9b705f9cb1f7</anchor>
      <arglist>(const T &amp;newval)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae204c0dd2644e91550032cc5521e784a</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3025f35607860f0e9054ae9784d398f1</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab75332b58bae9c16e6585c0e60a4492d</anchor>
      <arglist>(const MultiTypeBlockMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>MultiTypeBlockMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaed94aa63e6b78b173a4eb6efed3ce82a</anchor>
      <arglist>(const MultiTypeBlockMatrix &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1141a836363e468737c6321921fe866b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5e7eb2f99f0cd50335612b5c71c03159</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacd6ff951febb986470dd0af0d59d16e8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga3d892f49ac37d9e916c939c8564abc5a</anchor>
      <arglist>(const AlphaType &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac4f5a5d99d6f1c194fb134740584e9ad</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gade1d9d36d0e1f33ffc5d067ce5e56719</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga150b6952b0afedf640e7d7379ce3afb3</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga534c68afbe8acf5d5bea6cf5509b7241</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5012e91122151f271780bcbaa0ff98d8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1d88bc608cb53be44c54017cd5fcc1e8</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga31e609be6d1b59557dbdd6acc8bc5aab</anchor>
      <arglist>(const field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>frobenius_norm2</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga651662a248765e5fbd1e02dd3dab854a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gab31e222acd8039c0765e2a0a0a8c19b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>infinity_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga7774260b221076aa34b8166c23819e2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga63d0f62a0e54db2fb43b56bc5d156f05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5681a3ce128d5db798ddb4c6dcdfb1c6</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockMatrix&lt; T1, Args... &gt; &amp;m)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calc_rhs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5f64668baf8997b23358e55e95d764bd</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, Trhs &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>calc_rhs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5c940f4393f039c5af3e8fce4ab8d7c5</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, Trhs &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2e08545781ce5121abb0a30507ccc9e8</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga470fa97800ba67aaa29ed3aa2a78bd0b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5fb5cf8ab7d2d7730009a470f586b48b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga4ca0e53549d4aa73bba12c637b7e061a</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2fc29dc1e86b51beb3b68c08c443fb51</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaf84514b5975e5686b15ac6881ebc07fe</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0776bf5a7144807c79eb4736d6ec658b</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gabe2e1e2efb05a5141c87a3f3a01a7324</anchor>
      <arglist>(const TMatrix &amp;A, TVector &amp;x, TVector &amp;v, const TVector &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbgs</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga2bbb69d1b2576f255e7b91bc6d20ffe3</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorf</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac34b1e42ede12ccfb7c04dd8da6146cc</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>bsorb</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga92f469dc060f385a475a819cb1bb7c4e</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>dbjac</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga6399ccd36e1e8547e56c79d94a92904b</anchor>
      <arglist>(const TMatrix &amp;, TVector &amp;, TVector &amp;, const TVector &amp;, const K &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga300241c93ae37f3647f400c577660c9e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga26543a2b5d62ec9fee4b9327723d5385</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga1d9c39ad247096d52029634f0640ddfe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga4c4e7fb7c09e86d9bf60fe1e09a5a307</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::tuple_element&lt; index, TupleType &gt;::type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga32491f3ef6bfad3d6396462f3d6c320c</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable)</arglist>
    </member>
    <member kind="function">
      <type>const std::tuple_element&lt; index, TupleType &gt;::type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga41c7a9caa96f16cf811093705f216172</anchor>
      <arglist>([[maybe_unused]] const std::integral_constant&lt; size_type, index &gt; indexVariable) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga0a76738883a9af45465c402036878946</anchor>
      <arglist>(const T &amp;newval)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator+=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gacf291ba91ab8b90ca4f95be121b81ad4</anchor>
      <arglist>(const type &amp;newv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator-=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga94ddb64e2235a1010935efc8819f397e</anchor>
      <arglist>(const type &amp;newv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator*=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga637a2f8aae6e99c7467d9824e6747c1f</anchor>
      <arglist>(const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator/=</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga76fa7c23fa1d8f3cca52f004c208a22d</anchor>
      <arglist>(const T &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>operator*</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac696f7faa62b5358a88ccb4b130a2f25</anchor>
      <arglist>(const type &amp;newv) const</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>dot</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga5a4be70edff5235eed8c62f5b1b875b7</anchor>
      <arglist>(const type &amp;newv) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>one_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga8b181fad5c9190ce7c7bad91ddc8d6df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>one_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae57c5c9949da4f32508943ea455fda17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gad9dc50c3e3f8f11db0d3b8230b1bf120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gae1971dca530d97c0ee8f0ffe2c6cf1dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac93eded765b13d99cb4f4380884db447</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gac3cc6ad4e474e76da8bddbfde843c563</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga676a3ce106b4bba806158b33411d2809</anchor>
      <arglist>(const Ta &amp;a, const type &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>gaa4de74df39eaede5eddcd10b898e380a</anchor>
      <arglist>(std::ostream &amp;s, const MultiTypeBlockVector&lt; Args... &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix &amp;</type>
      <name>mat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga7051f2cf6a74fbd2d74ef52b1389cb0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Matrix &amp;</type>
      <name>mat</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga7de1eb535668ff59896dddeb825408ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Col</type>
      <name>col</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga67ae04c7e7c030370f82da49ab2b98d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Col</type>
      <name>col</name>
      <anchorfile>a00240.html</anchorfile>
      <anchor>ga70044c0795e5d42740e3861703bfaded</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_Parallel</name>
    <title>Parallel Solvers</title>
    <filename>a00241.html</filename>
  </compound>
  <compound kind="group">
    <name>ISTL_Operators</name>
    <title>Operator concept</title>
    <filename>a00242.html</filename>
    <file>operators.hh</file>
    <class kind="class">Dune::NonoverlappingSchwarzOperator</class>
    <class kind="class">Dune::LinearOperator</class>
    <class kind="class">Dune::AssembledLinearOperator</class>
    <class kind="class">Dune::MatrixAdapter</class>
    <class kind="class">Dune::OverlappingSchwarzOperator</class>
  </compound>
  <compound kind="group">
    <name>ISTL_PAAMG</name>
    <title>Parallel Algebraic Multigrid</title>
    <filename>a00243.html</filename>
    <file>aggregates.hh</file>
    <file>amg.hh</file>
    <file>construction.hh</file>
    <file>dependency.hh</file>
    <file>galerkin.hh</file>
    <file>globalaggregates.hh</file>
    <file>graph.hh</file>
    <file>hierarchy.hh</file>
    <file>indicescoarsener.hh</file>
    <file>kamg.hh</file>
    <file>matrixhierarchy.hh</file>
    <file>parameters.hh</file>
    <file>properties.hh</file>
    <file>smoother.hh</file>
    <file>transfer.hh</file>
    <file>twolevelmethod.hh</file>
    <class kind="class">Dune::Amg::AggregationCriterion</class>
    <class kind="class">Dune::Amg::SymmetricMatrixDependency</class>
    <class kind="class">Dune::Amg::Dependency</class>
    <class kind="class">Dune::Amg::SymmetricDependency</class>
    <class kind="class">Dune::Amg::Diagonal</class>
    <class kind="class">Dune::Amg::FirstDiagonal</class>
    <class kind="struct">Dune::Amg::RowSum</class>
    <class kind="struct">Dune::Amg::FrobeniusNorm</class>
    <class kind="struct">Dune::Amg::AlwaysOneNorm</class>
    <class kind="class">Dune::Amg::SymmetricCriterion</class>
    <class kind="class">Dune::Amg::UnSymmetricCriterion</class>
    <class kind="class">Dune::Amg::Aggregator</class>
    <class kind="class">Dune::Amg::AggregatesMap</class>
    <class kind="class">Dune::Amg::AggregatesMap::DummyEdgeVisitor</class>
    <class kind="class">Dune::Amg::Aggregate</class>
    <class kind="class">Dune::Amg::KAMG</class>
    <class kind="class">Dune::Amg::KAmgTwoGrid</class>
    <class kind="class">Dune::Amg::AMG</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver</class>
    <class kind="struct">Dune::Amg::DirectSolverSelector::Solver&lt; M, superlu &gt;</class>
    <class kind="struct">Dune::AMGCreator::isValidBlockType</class>
    <class kind="struct">Dune::AMGCreator::isValidBlockType&lt; FieldMatrix&lt; T, n, m &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ParallelOperatorArgs</class>
    <class kind="struct">Dune::Amg::OwnerOverlapCopyCommunicationArgs</class>
    <class kind="struct">Dune::Amg::SequentialCommunicationArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::MatrixAdapterArgs</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; MatrixAdapter&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="class">Dune::Amg::EdgeProperties</class>
    <class kind="class">Dune::Amg::VertexProperties</class>
    <class kind="class">Dune::Amg::PropertyGraphVertexPropertyMap</class>
    <class kind="struct">Dune::Amg::OverlapVertex</class>
    <class kind="class">Dune::Amg::SparsityBuilder</class>
    <class kind="class">Dune::Amg::BaseGalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct</class>
    <class kind="class">Dune::Amg::GalerkinProduct&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::BaseConnectivityConstructor</class>
    <class kind="class">Dune::Amg::BaseConnectivityConstructor::ConnectedBuilder</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor</class>
    <class kind="struct">Dune::Amg::ConnectivityConstructor&lt; G, SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter</class>
    <class kind="struct">Dune::Amg::DirichletBoundarySetter&lt; SequentialInformation &gt;</class>
    <class kind="struct">Dune::Amg::GlobalAggregatesMap</class>
    <class kind="class">Dune::Amg::GlobalAggregatesMap::Proxy</class>
    <class kind="struct">Dune::Amg::AggregatesGatherScatter</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <class kind="struct">Dune::Amg::AggregatesPublisher&lt; T, O, SequentialInformation &gt;</class>
    <class kind="struct">Dune::CommPolicy&lt; Amg::GlobalAggregatesMap&lt; T, TI &gt; &gt;</class>
    <class kind="class">Dune::Amg::MatrixGraph</class>
    <class kind="class">Dune::Amg::SubGraph</class>
    <class kind="class">Dune::Amg::VertexPropertiesGraph</class>
    <class kind="class">Dune::Amg::PropertiesGraph</class>
    <class kind="class">Dune::Amg::GraphVertexPropertiesSelector</class>
    <class kind="class">Dune::Amg::GraphEdgePropertiesSelector</class>
    <class kind="class">Dune::Amg::Hierarchy</class>
    <class kind="class">Dune::Amg::IndicesCoarsener</class>
    <class kind="class">Dune::Amg::ParallelIndicesCoarsener</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; OwnerOverlapCopyCommunication&lt; G, L &gt;, E &gt;</class>
    <class kind="class">Dune::Amg::IndicesCoarsener&lt; SequentialInformation, E &gt;</class>
    <class kind="class">Dune::Amg::MatrixHierarchy</class>
    <class kind="class">Dune::Amg::CoarsenCriterion</class>
    <class kind="class">Dune::Amg::DependencyParameters</class>
    <class kind="class">Dune::Amg::AggregationParameters</class>
    <class kind="class">Dune::Amg::CoarseningParameters</class>
    <class kind="class">Dune::Amg::Parameters</class>
    <class kind="struct">Dune::Amg::VertexVisitedTag</class>
    <class kind="class">Dune::Amg::RandomAccessBundledPropertyMap</class>
    <class kind="struct">Dune::Amg::DefaultSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs</class>
    <class kind="struct">Dune::Amg::ConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultParallelConstructionArgs</class>
    <class kind="class">Dune::Amg::DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; Richardson&lt; X, Y &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqILU&lt; M, X, Y &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SmootherApplier&lt; SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::SeqOverlappingSchwarzSmootherArgs</class>
    <class kind="struct">Dune::Amg::SmootherTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="class">Dune::Amg::ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="struct">Dune::Amg::ConstructionTraits&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</class>
    <class kind="class">Dune::Amg::Transfer</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, SequentialInformation &gt;</class>
    <class kind="class">Dune::Amg::Transfer&lt; V, V1, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &gt;</class>
    <member kind="typedef">
      <type>T</type>
      <name>DependencyPolicy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8110dd99b4f2ee974f3022b5cba4f5ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd77efe714fb158d01297d84dc83b605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadf1bdaa23c2e47e4018b12fe0261aee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9c83dc0f58bfdfeadec924aaffb054c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga057146198ca8eb64f54896e348a17bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5604308bb10f8670e47e676417de39b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac86fa92e4aabb0cb547ebd2d253a10a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1baaec66f4b574b2cef650c8faa3320f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga321acf98b939f0b93a7410b189e4a2a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62b0d02ee5cbaa9714dd453aa0db5567</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga00c973edf4b506a16aea1fc25a14b897</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad90b5c6a78351664999222c0e5ccc495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf72f67c861cccdfbc79b297a380e061</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30338139b017b5a898350c3c5e368a80</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>N</type>
      <name>Norm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga65efb2e151489eb39de0b953bc205a81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::row_type</type>
      <name>Row</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c9089eed18a881ea305ab6eb3a464c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix::ConstColIterator</type>
      <name>ColIter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5354f976f8656a31fb61761f3cfc594b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Matrix::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa6e92a58d04a032499f92d7266c3e550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldTraits&lt; field_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c61e4b54daeccbc59b7fb2dccc49e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>VertexDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf657e8e9f35ddf9811f6ab7ea72ab9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9258a3f0e9738c7c77d348cbb28b4b8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; VertexDescriptor, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05d2193d449d4f9fe9e562a25e4fcf87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLList&lt; VertexDescriptor, Allocator &gt;</type>
      <name>VertexList</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab0e20fc899e8046c7a5eb565cd8025f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const AggregateDescriptor *</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac23d88ffee9cbe209afdeaf84e707162</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AggregateDescriptor *</type>
      <name>iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga78fc91f2de6682f06b414f12fedfaea5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G</type>
      <name>MatrixGraph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe66c315b121adc1696ec5c01a153dbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae74c2b19f544e906513cd9ac0afc7130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PoolAllocator&lt; Vertex, 100 &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc7873758f2bdaf7248ff38de7b068e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>VertexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad2746016c83dd969424be92239a9ff10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VertexSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga71f30f28df2df99cc6972b1950c8ef9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t *</type>
      <name>SphereMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5cfc9c3bf9c4511fb9f24e72883c5947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G</type>
      <name>MatrixGraph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga239664e57c4c996c7fbd3976267a26d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f4859e7d55855bace8c873cfdafa678</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph::VertexDescriptor</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga753ac555d3d946b7cf76e5ab9b5824c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Visitor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5ac65387912b622133afd1a175b23064</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>M</type>
      <name>Operator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga66dc78b3214f4ebfc19c8ba3d467d25b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PI</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafc3d32c625bd4cabd2481107019b2fb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; M, ParallelInformation, A &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef37f955d0f91544f873eb26177a9978</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe146a3971a12af39b849c10e71e26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2baddcf013a5166a162950672bd21a03</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c0496b0f7de49193c227a8c93c045d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab775b7ff79213774ad098fdf1c4c65cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60efd923eab7d4f2e8e66755c1d86843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SmootherTraits&lt; Smoother &gt;::Arguments</type>
      <name>SmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b093095df84e9990eff5581cfe4bfa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother</type>
      <name>SmootherType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaebab8abda23286bd891ae6436a396ab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Matrix ::field_type</type>
      <name>field_type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga25bae091b8d36cb2647c216e6a28ed6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; Vector, Vector &gt;</type>
      <name>type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga893f8e9289ba8f3173b9f49b52b174a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SuperLU&lt; M &gt;</type>
      <name>type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6ff9353166a5cd58addc1acb4659e400</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Solver&lt; Matrix, solver &gt;</type>
      <name>SelectedSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e79399c827a5a200d1f01b736bef952</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SelectedSolver ::type</type>
      <name>DirectSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6d12435b4f1ef65049600b4f0069b6c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void *</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9dafe554e419097e37bcb2fe0a511119</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const int</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3150e8ae9f22ae238cfdabce81cb98a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReadWritePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad8a83b539bd33cb27c705883efab8677</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga74c4b7c1a6265b3b6de13322394100b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bitset&lt; VertexProperties::SIZE &gt;</type>
      <name>BitSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga07cb592df02f93c85a1557e8c5bd2725</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSet::reference</type>
      <name>Reference</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ca1d5b02168336e0c7366d663db017c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bool</type>
      <name>ValueType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1b21afd4f82aadc87c3c1a66b572c947</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga42735e41c3bd53cfaeabb5da0cd5334c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::PropertyGraphVertexPropertyMap&lt; Amg::PropertiesGraph&lt; G, Amg::VertexProperties, EP, VM, EM &gt;, Amg::VertexProperties::VISITED &gt;</type>
      <name>Type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga90028edc216210e140d4bdac8414de4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga609452a9103fcecfb9ea6949b9cad23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6aee0c6bdb5527b24aa832590ff8eae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b30f298e7c103aab602c32cbfdd387c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G</type>
      <name>Graph</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1101b3d4651097cd30faa0db028fb128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::ConstEdgeIterator</type>
      <name>ConstEdgeIterator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6669e30805fb10ce64bbc532330dd6bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>S</type>
      <name>Set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9ef43daa726f0e5682019b382d98fad5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>VisitedMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga846f7449dd71228f1242008abccd25dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Graph::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadeb2a026f87fd62cfe7cfac493a6f465</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5d832f5fc6d0e71c5f217285a7500165</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>G::VertexDescriptor</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6dfc439e074993b646a8cfac48b76dfe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TI</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47e94618e246ab2f8b314acd23d0cde5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga384b43f09dddb88d52f9ca6f7fe52c51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>IndexedType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf418d902d39fe4747756d3b8e08fe996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac3cfde1e3caadee9fb2f3dfb88197459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga41fc04e75e89f64daf55cdea8916b86f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TI</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac723d5f24036501c52f9d7d63bf4ffeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab33381645d3ff14e82e380f198b72893</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2f2d6e4a87f6949ac2cbd56c741f56ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>O</type>
      <name>OverlapFlags</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1778928ffd507ec84443bd2ef5ce5095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OwnerOverlapCopyCommunication&lt; T1, T2 &gt;</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5c3a58df4704bbf80f037c6a833ae9b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::GlobalLookupIndexSet</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga01794bf23ba2a4a54b272612f1c0f0ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38c4bbf31867370a5377250a72171605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac90a03d9af06304c8278fb4da96fb327</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SequentialInformation</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga384a8e2259887830e213879973ae8579</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::GlobalLookupIndexSet</type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad35968a39532e7b8464292f7f3e4717a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::AggregatesMap&lt; T &gt;</type>
      <name>Type</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga489f324c3ca8964bf6151baf7dab3bff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Amg::GlobalAggregatesMap&lt; T, TI &gt;::IndexedType</type>
      <name>IndexedType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2737b811580b46f7b4de14164532a360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeOne</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6e32f38d16d5f74d2b61c922a62751f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>E</type>
      <name>ExcludedAttributes</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaccac2c87b0834201c07a5930d7554173</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d6183e4126cd6a645ea194ac1944d7e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelInformation::ParallelIndexSet</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d4745703c4e8e878773dafaa99f54d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d29bd3eeb184f0042b3e72de6cca32</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bd142f155d0e97931e76a914f793c30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga18a399553eda5531ae901932cfc42c2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad52c7354eb72d033a3da2c2d594e5e55</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe8f70a7b360908afd4d45ff50ffd901</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d1d05811b8c187e362eb440ded69f7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>Key</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae58f9bb2fd78c2e34a8fa27a9370f66a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LvaluePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf4783b71903831056f874305edb3b0d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>RelaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa96ee6835f5db1ddd21234ac1f272874</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename T::matrix_type::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga100458eca2b5ec41a0f09fd454bd8967</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultSmootherArgs&lt; typename X::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0169e32972c29640daa5129fe2ef9c46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5707c0b06d10567d269371f278dd2432</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4ed41f2a1d9bbcc6be62ec58e876e847</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56b0a238774737e21a41ef6c1ec07818</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultConstructionArgs&lt; Richardson&lt; X, Y &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fdf6128357be622cfdb69a6e6c1f81a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionArgs&lt; SeqILU&lt; M, X, Y &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0ccd5ee94f4d71588a461cbe0da40555</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; M, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad187f67abafc5958151f1d6840b251d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; T, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga883bbb73f522febb3c1217d1b61abba8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; T &gt;</type>
      <name>SeqConstructionTraits</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaed03ebfb74f04227af1be8a10326d8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultParallelConstructionArgs&lt; T, C &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8ae93c9b498fc5e166f2572297700872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionTraits&lt; T &gt;</type>
      <name>SeqConstructionTraits</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga146c0e8832aa864667c30802d875a999</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga70013fc79e744c92cb652a859bdea5a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabc5c514f2c28e676fee83c382a03dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaabfbaf030c71c3733beecd689567079b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqSOR&lt; M, X, Y, l &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ff8b61ca20e1641187c5ef7384c6f20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae694b870752c56965e09c018003931ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadcd5dec4b85d722a21d03bb6289e27d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BlockPreconditioner&lt; X, Y, C, SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga75f8cd10d36efd9060d7cb723a133caf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf2545d0586fe41e2055b58612eb95b43</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafed382e27f0ca8095df897e3a814b3b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonoverlappingBlockPreconditioner&lt; C, SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1f8a3902613f2ff0202781be8ea9c23e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3da40a137914075554408ff7c9ba6d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaa0e2c3a0091cdc60bec043afe8a0228</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarz&lt; M, X, MultiplicativeSchwarzMode, MS, TA &gt;</type>
      <name>Smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab5854369002cf510c2c4b06e93e506e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::range_type</type>
      <name>Range</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f5737e52e5a72172596c76494ee1959</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Smoother::domain_type</type>
      <name>Domain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fad1352c0333fa3d6c713fcae46c2e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarzSmootherArgs&lt; typename M::field_type &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga33e074c40770eb06dfc3aa2befe72c99</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixGraph&lt; M &gt;::VertexDescriptor</type>
      <name>VertexDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab6997643f6953fd3d41268aeeb12b5bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Amg::AggregatesMap&lt; VertexDescriptor &gt;</type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac89ab2f20d72217b2a5900a30c47264e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AggregatesMap::AggregateDescriptor</type>
      <name>AggregateDescriptor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a812deb529b1ef988c74a08f559c3c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt;::subdomain_vector</type>
      <name>Vector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5d9d057ff84fbc04951225d76f031c5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::value_type</type>
      <name>Subdomain</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35c985e477ba05ef528c8982585f0c1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstructionArgs&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</type>
      <name>Arguments</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1deed6ab0d6323bf867fd7b2eec4cb19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga940b3c260e37bea784a0ec408dbf3ff2a56a74268c7c125ed458045d82c8e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga184b7d4b77d190a08a1c8423c67e934aa85ec4f8e5182c346089980a998e06a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga807b20876f3459df903b1cf6deb085e8a27353347880706829b87fd0014fdd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>SolverType</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga431257c31350ceea0bc805b09ac09e3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umfpack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fab3e5e80a6fbb1726ac67e0469f131c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>superlu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fae4cf54eeb9c47e4dd9aeb04ff6c1abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fa07a2aee6da89fa5bcaccc6e52a1eb980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFLUENCE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a73394a1d1915825ad7932398be5df291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPEND</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a0e3794e09dc21cc14c6847a606de62ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a1f95ac17686d8e2b836256707603dbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da601511c62869741ba9f4fa1d59ac9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISITED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da3b91960c297fce34a3c69bee71c55bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRONT</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daeddb5cde689f5e256ac5e9b1d5a7b608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daba45a149d80b1f89d6fd85aa265119ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da8ef3326e321c8bcb672f0588ada08fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga91f26d8f4e3bfa88bb2f04d7911ae91aa3969c5d2ea66a930eea263cec0d7e08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX_PROCESSES</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga2ff22a293069aebfba3194cb909ce2e2ad6b62d6d5abdcb2557c2a3a69feccdb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>AccumulationMode</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf6f2fe996122d7c9d139e86a84957f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a5c5f5e0aa08de3ed0d0fe8cec4838260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>atOnceAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a4fe2fe3869543e6e15fc480bea94909a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>successiveAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a69257c9fc3443058ecc8d3d542fe0b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga5bd47444cc958afe27246479c54e1d01abac431862aa7f43e45b797931ffc9bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Overlap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga22fb6db8e79193a001ad79f7bf55d3e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a9b354c310e716b743c1c923ad4966a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a0c4644f80ab36fa5f0905fdd0983ec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pairwise</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a50d188b2155182cb3b391160cd4153b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a505e0d6253fa516d910e78dd8793b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga80584afc05ba2816ecd9fea421a39e5eac4a6dbe5e10d6f98b6767b9d9e1e0662</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga940b3c260e37bea784a0ec408dbf3ff2a56a74268c7c125ed458045d82c8e8a2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga184b7d4b77d190a08a1c8423c67e934aa85ec4f8e5182c346089980a998e06a0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>is_sign_preserving</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga807b20876f3459df903b1cf6deb085e8a27353347880706829b87fd0014fdd759</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>umfpack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fab3e5e80a6fbb1726ac67e0469f131c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>superlu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fae4cf54eeb9c47e4dd9aeb04ff6c1abca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga431257c31350ceea0bc805b09ac09e3fa07a2aee6da89fa5bcaccc6e52a1eb980</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>INFLUENCE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a73394a1d1915825ad7932398be5df291</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEPEND</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a0e3794e09dc21cc14c6847a606de62ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggab6b3342c3c10706db9766a271d578ee6a1f95ac17686d8e2b836256707603dbeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da601511c62869741ba9f4fa1d59ac9cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VISITED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da3b91960c297fce34a3c69bee71c55bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FRONT</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daeddb5cde689f5e256ac5e9b1d5a7b608</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BORDER</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5daba45a149d80b1f89d6fd85aa265119ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SIZE</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggaaf747413e7dcec1e7f3a8dda1d244e5da8ef3326e321c8bcb672f0588ada08fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga91f26d8f4e3bfa88bb2f04d7911ae91aa3969c5d2ea66a930eea263cec0d7e08b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>noAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a5c5f5e0aa08de3ed0d0fe8cec4838260</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>atOnceAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a4fe2fe3869543e6e15fc480bea94909a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>successiveAccu</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ggacf6f2fe996122d7c9d139e86a84957f7a69257c9fc3443058ecc8d3d542fe0b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga5bd47444cc958afe27246479c54e1d01abac431862aa7f43e45b797931ffc9bbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a9b354c310e716b743c1c923ad4966a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a0c4644f80ab36fa5f0905fdd0983ec57</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pairwise</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a50d188b2155182cb3b391160cd4153b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>none</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gga22fb6db8e79193a001ad79f7bf55d3e1a505e0d6253fa516d910e78dd8793b242</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f63d04bf01bab42917249ec824b9319</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5fbd5400b54866d891945852874ee80e</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8cdfafe3084aa08d60478a515ac608ba</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4419a7f4131bd4abe1ca21d92177f6a</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3b1322dc105dc48e2cfbb19bdc157416</anchor>
      <arglist>(std::ostream &amp;os, const AggregationCriterion&lt; T &gt; &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga767994b142a00d1f9fe180561fad752f</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35b7cfe585823cad8dcc2844f1c9d8ef</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3d16776c6097046b7837579352ebe313</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga70b5c6d276ef88417782c3be13ac3b5a</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade54c59c177076c9d4902ae8fc9fc419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrixDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga15132a70498eab5c21d76577dbfd97cb</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricMatrixDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga99d6bb6845753caab76aec7848a3bef7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c251ce75374647a53f53f17ffe5ccc1</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga14e65ff5e7d99c39b38aa55c7e80b0a8</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83757595a4c63000d5ca728bf72320a8</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d817e43d5427d7d01ef0f8d9723de81</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga37eef1b68f03154eacfc3324ecdc638c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3db167bce46d1efa5dc002bdd1c2c847</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Dependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d02122ea3c03849278efdd3c9f32ea6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>init</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabb7b7362105cccadd41c912142061234</anchor>
      <arglist>(const Matrix *matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initRow</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaca3638072863982d108fd6081ac4eb62</anchor>
      <arglist>(const Row &amp;row, int index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2fee6a17a971fce9fa8696cdba418b28</anchor>
      <arglist>(const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga50ecac18351ec35ce29e1aed68238b7f</anchor>
      <arglist>(G &amp;graph, const typename G::EdgeIterator &amp;edge, const ColIter &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaea541c8df65d3ce1d00dbac64f1096c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga79f3316eaebdc1be2f60e87e7c43b2a3</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaed9dda0eef852310de336c721d277fe8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d0978f5441546c44070e0a50dc39564</anchor>
      <arglist>(const M &amp;m, [[maybe_unused]] typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11d2d6bf546f0de546908e8710ae9450</anchor>
      <arglist>(const M &amp;m, typename std::enable_if_t&lt; Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabfa7c49ddd2197089d9f272107cc0e68</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2428da305402970c2c9c352798f0b5ce</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; typename M::field_type &gt;::real_type</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga64a3301831363af2e004ab378e3d22d7</anchor>
      <arglist>(const M &amp;m) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga741c8e2d0a32adef62624dbad7cec1f3</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28c39e4cfeb485ee20dfb936a14d773f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnSymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3474e60471ca8ab12d8305474f82f95c</anchor>
      <arglist>(const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UnSymmetricCriterion</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabc1820a6e70c30dd11108addce03d47f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a3d2f48ac19c8fa9dd53dd09a5eac51</anchor>
      <arglist>([[maybe_unused]] const EdgeIterator &amp;edge) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaa86514f266a48b07787ab5c8440c9a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa57de3c523ca120b4deec855f5e4c124</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga556e4f96555dae9b025dc74b5c16467d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int, int, int &gt;</type>
      <name>buildAggregates</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaafe8eb7ed39badbee958a77aa979651e</anchor>
      <arglist>(const M &amp;matrix, G &amp;graph, const C &amp;criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad36222f801a92959560f83953273816a</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, F &amp;aggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>breadthFirstSearch</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05b088ec8c1ab2a6bfc1c7956ea86539</anchor>
      <arglist>(const VertexDescriptor &amp;start, const AggregateDescriptor &amp;aggregate, const G &amp;graph, L &amp;visited, F1 &amp;aggregateVisitor, F2 &amp;nonAggregateVisitor, VM &amp;visitedMap) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadf10f6b77f88384bcbcd59cfe29a2002</anchor>
      <arglist>(std::size_t noVertices)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>noVertices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa283871dbcdc8e2bafba6c19ec92d5db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf34f175c3ba3e120b84ca16c8c5df2b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e35f8054f9e50c2aa272ba7b6511cbd</anchor>
      <arglist>(const VertexDescriptor &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const AggregateDescriptor &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2453135552fed7c60ae928709d93a6e5</anchor>
      <arglist>(const VertexDescriptor &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga69bdbd39fe106067a963795665b0cf11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8d1bf17809a11fce96f43027612f2547</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0780437816e61ec5488bd3a6ab2cc658</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga332ed1c7459860df1638d47c2bad3c4c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildDependency</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf619ca4d1318ace19831096270fb506c</anchor>
      <arglist>(G &amp;graph, const typename C::Matrix &amp;matrix, C criterion, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga58668f00140e1b2118beae599010bc6c</anchor>
      <arglist>(MatrixGraph &amp;graph, AggregatesMap&lt; Vertex &gt; &amp;aggregates, VertexSet &amp;connectivity, std::vector&lt; Vertex &gt; &amp;front_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68468b49499667f3d4d64cc318376a48</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reconstruct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae59a0f089b579d9419f64457777870ca</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seed</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae9025a3acbb466318746dd8b22105e41</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7e8832b256d1b9b30cb9d1ee33716e64</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga81d71bc901ff945e0a1e3ef730a6084b</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeda6226aba2ee1830624ec55a9bdbd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>size</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8b28f6821f82421d8516637fead0d10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VertexSet::size_type</type>
      <name>connectSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga62ea047be5b3f11ef8a844bdc9ce7bf2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga081f05180b52ea1016c1b07b04812e93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae5ab79d4e08e1005cd88acf3e730ab4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaba7091ab843734f091d3fce748e6da94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Aggregator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga841366f64cc179802c21d4fd5a5ac684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Aggregator</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7d14d8929ca6f47b57706e35c6f83c8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; int, int, int, int &gt;</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga39137177d63670ba72fe053c3b10d49b</anchor>
      <arglist>(const M &amp;m, G &amp;graph, AggregatesMap&lt; Vertex &gt; &amp;aggregates, const C &amp;c, bool finestLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Stack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac64b7461aae3906f32e253c23ce9fbbf</anchor>
      <arglist>(const MatrixGraph &amp;graph, const Aggregator&lt; G &gt; &amp;aggregatesBuilder, const AggregatesMap&lt; Vertex &gt; &amp;aggregates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Stack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab19124fb0986fcbbc48ecd2b0780dea2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Vertex</type>
      <name>pop</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9d1cac8f054b0f4ab57824d5031e5335</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregateVisitor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga510b6c998062391f238820837f7dfe1d</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, const AggregateDescriptor &amp;aggregate, Visitor &amp;visitor)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga857f6862a78c5497ae0e8f79d6ab61cf</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Counter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga223f156eaaaf96a8f6840f2177ccc4fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>value</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaad63a76e83d64c9dafbaf87ac32d0fab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf50b19a16af32bb05655d7139413b6b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5852e16c0431720161d91dcd90be6fa5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrontNeighbourCounter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a9c2f3b9ca3ad3ddb48388156b88703</anchor>
      <arglist>(const MatrixGraph &amp;front)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabea185abf39a2c4607a47e4c6e2032e1</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga352bec04a9e7fe0b0adef4a290cd85a5</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadb9949de1a1e0e7f831eb94b2e327d9c</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectivityCounter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab2f81e0c007990646ae2d1a2cba03ee9</anchor>
      <arglist>(const VertexSet &amp;connected, const AggregatesMap&lt; Vertex &gt; &amp;aggregates)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga46ddbd336ef759156bfb20add491c0ba</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyCounter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9a756b97f9143e5125497679c82c2e09</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe88416957d41634efc2226373c7450d</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FrontMarker</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga86e22766fbcc38c2a19dddc094259d24</anchor>
      <arglist>(std::vector&lt; Vertex &gt; &amp;front, MatrixGraph &amp;graph)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga71da58007f44478c4fd871b84bd04531</anchor>
      <arglist>(const typename MatrixGraph::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printAggregates2d</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67437d2f75e7e1216ee57306825332be</anchor>
      <arglist>(const AggregatesMap&lt; V &gt; &amp;aggregates, int n, int m, std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a89a4e31e658d858016f5a6ef3ecc69</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae4c4447a1c2a32c4a67fe5a8ee60da4e</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3e29ade2ae24a0f782fe3ac677f979e8</anchor>
      <arglist>(std::shared_ptr&lt; const Operator &gt; fineOperator, const ParameterTree &amp;configuration, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga03586c2dfb592d1ae71d30461812fbcc</anchor>
      <arglist>(const AMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a5e6da5989b1a67b0a63766c48b568e</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae719bd458f78ab3a6cd6a9ad884ac0c9</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf332edc0dc7fcd54a1238811e67f2f29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d12cab3e3493cb0af7b4592fb47943</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7ebdc127c9754fe1221a201d359d208d</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga88e6fc3d3184da7443285d613295e750</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7d6c5102cef19c8349ccf94a1f68ccd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa92d8726e030c57c72e4a82bf054f464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2ac877650209f65534f4858f0514214b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5887eb32794cf464f9c7516ef2ced4fe</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae086efdf4e380c8da95941e13cccb429</anchor>
      <arglist>(const M &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga61b5facc05aabcb4873ae1bf154d0aa2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf92561d82f1faddac07316e102369d01</anchor>
      <arglist>(const M &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga243e2cff76517614a39929872c20b505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>name</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0dc727b9d2360b991b6e721072baeddf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DirectSolver *</type>
      <name>create</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2d9a7731544e037e9214fefd7f260b83</anchor>
      <arglist>(const Matrix &amp;mat, bool verbose, bool reusevector)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename OP::element_type::domain_type, typename OP::element_type::range_type &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga19457c01f5935d262f1c25f1115db304</anchor>
      <arglist>(const OP &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8a5b154380721a2f5e9e3849081ab871</anchor>
      <arglist>(const std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa8cfafaad592965eda163fdf17e25df6</anchor>
      <arglist>(const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; X, Y &gt; &gt;</type>
      <name>makeAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9af18eb2097ad9f50ab6299eb550baa3</anchor>
      <arglist>(const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt;&gt; &amp;op, const std::string &amp;smoother, const Dune::ParameterTree &amp;config) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4b4657eb5de46e7330178fbb67f635e</anchor>
      <arglist>(TL tl, const std::shared_ptr&lt; OP &gt; &amp;op, const Dune::ParameterTree &amp;config, std::enable_if_t&lt; isValidBlockType&lt; typename OP::matrix_type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Dune::Preconditioner&lt; typename Dune::TypeListElement&lt; 1, TL &gt;::type, typename Dune::TypeListElement&lt; 2, TL &gt;::type &gt; &gt;</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga55ee29a116465de88ad13cee464be8f1</anchor>
      <arglist>(TL, const std::shared_ptr&lt; OP &gt; &amp;, const Dune::ParameterTree &amp;, std::enable_if_t&lt;!isValidBlockType&lt; typename OP::matrix_type::block_type &gt;::value, int &gt;=0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; T &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa4e5c6ca92bf6dc83b96a4c5fb6d4540</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; BlockVector&lt; T, A &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9ca1aad5ae6c5ee34d9b6d6269a91deb</anchor>
      <arglist>(Arguments &amp;n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelOperatorArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96aa6787ac4948bb3a090749ec8b4d61</anchor>
      <arglist>(std::shared_ptr&lt; M &gt; matrix, const C &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OwnerOverlapCopyCommunicationArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga73761fb96818376faa60e31608e64a3e</anchor>
      <arglist>(MPI_Comm comm, SolverCategory::Category cat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SequentialCommunicationArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf68ac8d5bd8b060c0f2385d1fd54054c</anchor>
      <arglist>(CollectiveCommunication&lt; void * &gt; comm, [[maybe_unused]] int cat)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EdgeProperties</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6b225fc437b7776aad0fdc95294b969d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; SIZE &gt;::reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9ed70e8c29de119849997fa9c5ee715</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga42aeff7aca6ab8d9d6c94719b70223b3</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>depends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga066384d9359ac65a1ee8eabfd2becb94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDepends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38d49bd7fc239574c852219b40534aa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetDepends</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad07409861535f9d530094eff12395e4f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>influences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga995cf44d6e5cc09e3fb2046eebe85729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setInfluences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga32b969d0ec7555e95bf78097257189cc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetInfluences</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6e28aac9c19a543070f372f05da1c2db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOneWay</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaff2c435a0e9500533b0d443a896645f2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isTwoWay</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30d66468b50e6f9eaf5401314d03075d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isStrong</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae257fc0cb9246fafae25edb91e7f5ad0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac915d9cb2f218d94b60f53c275b2fccb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printFlags</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga87531848f7f096279a48fc16d241c771</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexProperties</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga35339428fc8aa369d2c59b02d5f328e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; SIZE &gt;::reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga85dc242d0fa9a3752c41c26cd7288542</anchor>
      <arglist>(std::size_t v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bfbde3e736115fef9edeb8576bbe103</anchor>
      <arglist>(std::size_t v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa21f58805bd7454756362314fa33ddc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08338ac1ac7df17147134dee599d66c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gada265503294533b4705b6c80a57cbd03</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setVisited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga571cc94a95df4b731bfcdc283341357d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>visited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaba26fe4020b4024de2b00ace576c70af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetVisited</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab1aae2e817a91d7c9a2a211a22451ddb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setFront</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4fcd4940c0a464c170eb6c9cd62f4c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>front</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaec920d1ca710395041184e43c2a039d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetFront</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0683e6971b0867bf93e027c911d51fda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setExcludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafac626aebe416d38f0c0e7d7ab7dae4b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>excludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf258c4666ca11c8d041fb599333b2b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetExcludedBorder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e8649c6ddc3757ceb1424010310bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga549b5bfb77d6415560898fe54fbeedb5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyGraphVertexPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga413f22fe4fec3a48cf58acd5cc8d387d</anchor>
      <arglist>(G &amp;g)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PropertyGraphVertexPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3c020a2cff554847ffc0a686acbd1530</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabee7a1820b2f80cdd6e67db4042ee003</anchor>
      <arglist>(const Vertex &amp;vertex) const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabfdb505d54f97595d5b559f9493978b1</anchor>
      <arglist>(std::ostream &amp;os, const EdgeProperties &amp;props)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab001191f50333ad683c2faeb8de5e4d2</anchor>
      <arglist>(std::ostream &amp;os, const VertexProperties &amp;props)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SparsityBuilder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga61cba58ac46ad49637851ce60ba8b5b8</anchor>
      <arglist>(M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2086b35723d77a9d2250803442609df1</anchor>
      <arglist>(const typename M::size_type &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga169b6aa05bc110e2a9882771443f1fba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabc4adf712bede8e132262041d2b2c2a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafeec70ea616b6517ae670978d60c3cca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>sumRowSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf9eb995529959729510dfd62e5bac04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>index</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ff7bf1e248290ed6d32bc0c04c7c91f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf9fbf22e8c85b9465f4c721f1a1740b6</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const I &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3f5a35e2bcf913af2009562aab059e4c</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const ParallelInformation &amp;pinfo, AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, const Set &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0550eb387f6cec961f49ccf52efa7564</anchor>
      <arglist>(const OverlapVertex&lt; A &gt; &amp;o1, const OverlapVertex&lt; A &gt; &amp;o2)</arglist>
    </member>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7cac7bc4bcfbc1466aa2db4b6ba740b9</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, const Set &amp;copy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2b1ed929c55403e6bb9e46d2ab52c850</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *&amp;seed, const OverlapVertex&lt; typename G::VertexDescriptor &gt; *overlapEnd)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>constructNonOverlapConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0bd93dcb846c1e048d2c218bd266260e</anchor>
      <arglist>(R &amp;row, G &amp;graph, V &amp;visitedMap, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::VertexDescriptor &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConnectedBuilder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga653f898b20814d3e5023a295b88e4f3e</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Graph &amp;graph, VisitedMap &amp;visitedMap, Set &amp;connected)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c76c672594522d2d0d95be0bb5ecc1d</anchor>
      <arglist>(const ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga76045741d4a5941ca4ee9ff35ff27d9c</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, const T &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, const O &amp;overlap, const OverlapVertex&lt; Vertex &gt; *overlapVertices, const OverlapVertex&lt; Vertex &gt; *overlapEnd, R &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf751555f3474c939d193c4a33063d777</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, R &amp;row)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacfc483e810541dab4d37c7afce86eba5</anchor>
      <arglist>(M &amp;coarse, const T &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56815c2eb449b9ae59d52bf202aa20f9</anchor>
      <arglist>(M &amp;coarse, const SequentialInformation &amp;pinfo, const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalAggregatesMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga45b708f095bb0d5649b01676f401d46c</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates, const GlobalLookupIndexSet&lt; ParallelIndexSet &gt; &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIndex &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad1a8d1f86c52d64800b67c38d4065a9a</anchor>
      <arglist>(std::size_t index) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalIndex &amp;</type>
      <name>get</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga21446c3eb792fbd917df0c8df063a91f</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7629bd8af64c73300346e1d4e8ff405a</anchor>
      <arglist>(const GlobalLookupIndexSet&lt; ParallelIndexSet &gt; &amp;indexset, Vertex &amp;aggregate)</arglist>
    </member>
    <member kind="function">
      <type>Proxy &amp;</type>
      <name>operator=</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadd7d72ab1dae6fc417ed6a80913f0bfd</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>Proxy</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafebb4d4376401c71363c7c0a0c23167c</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3b8725df6cef3327d0aab38f0f3b48e5</anchor>
      <arglist>(const GlobalIndex &amp;global, size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const GlobalIndex &amp;</type>
      <name>gather</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga01360f36f3a5e27f0806308050573432</anchor>
      <arglist>(const GlobalAggregatesMap&lt; T, TI &gt; &amp;ga, size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4ee5b5319fc712669aaf92d29fbaf506</anchor>
      <arglist>(GlobalAggregatesMap&lt; T, TI &gt; &amp;ga, GlobalIndex global, size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>publish</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa2b7874ce116744313484deb7586f967</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates, ParallelInformation &amp;pinfo, const GlobalLookupIndexSet &amp;globalLookup)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>publish</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08f9f6de6164f3f781d53be46f13d2a4</anchor>
      <arglist>([[maybe_unused]] AggregatesMap&lt; Vertex &gt; &amp;aggregates, [[maybe_unused]] ParallelInformation &amp;pinfo, [[maybe_unused]] const GlobalLookupIndexSet &amp;globalLookup)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c126bf59cb49114e2d707410c82e231</anchor>
      <arglist>(const Type &amp;, int)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>visitNeighbours</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c84915dd8eafb315ce76b1f689f1cf3</anchor>
      <arglist>(const G &amp;graph, const typename G::VertexDescriptor &amp;vertex, V &amp;visitor)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c6f6c1bf60c3c4a4d87aeac2f270aad</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelAggregateRenumberer</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf40d7133ebfcb8a946939e338af88975</anchor>
      <arglist>(AggregatesMap&lt; Vertex &gt; &amp;aggregates, const I &amp;lookup)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1f18935391d6a08556b9c08b0a392c85</anchor>
      <arglist>(const typename G::ConstEdgeIterator &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>Vertex</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad7f7fd22e42bf91c9557179f51eb1213</anchor>
      <arglist>([[maybe_unused]] const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPublic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3794639a69ca19453e45dd6a389e9953</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>isPublic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2a93430657bf76a93e22c04adee26329</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0bee8672b9a370c20f3eac2ef50a2a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac38407f89b541289bff356746bf8854a</anchor>
      <arglist>(const Attribute &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>Attribute</type>
      <name>attribute</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga748c37e0fc46884a965e7534ce057648</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIndex &amp;</type>
      <name>globalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38841f5f79f16309d195994b0fd8a62b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalIndex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad033e1f7ca34a7cb2d28e4138eef0c15</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga10e45d29562e3e0bdb64b7ff9d1f2827</anchor>
      <arglist>(const SequentialInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, SequentialInformation &amp;coarseInfo, typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2f21163b67b8b6b6558543829d3fbb66</anchor>
      <arglist>([[maybe_unused]] const M &amp;origMatrix, [[maybe_unused]] std::shared_ptr&lt; M &gt; newMatrix, [[maybe_unused]] SequentialInformation &amp;origComm, [[maybe_unused]] std::shared_ptr&lt; SequentialInformation &gt; &amp;newComm, [[maybe_unused]] RedistributeInformation&lt; SequentialInformation &gt; &amp;ri, [[maybe_unused]] int nparts, [[maybe_unused]] C1 &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>repartitionAndDistributeMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga992041e5fe1798be7fd728be5578b525</anchor>
      <arglist>(const M &amp;origMatrix, std::shared_ptr&lt; M &gt; newMatrix, C &amp;origComm, std::shared_ptr&lt; C &gt; &amp;newComm, RedistributeInformation&lt; C &gt; &amp;ri, int nparts, C1 &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DependencyParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaf07527f9c494debc36abbca053b2fc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBeta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad4cda39a27265d7281d0a24e7fd77cc2</anchor>
      <arglist>(double b)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>beta</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4c084254838c583d3fe84d431696716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAlpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a1e3ffba75a11bce0dca3054da77534</anchor>
      <arglist>(double a)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>alpha</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2267e9a812fb462a842a6066d450a96b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregationParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab9dd338bbafbb5dad03d9aa733370ff9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesIsotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96a341ddfdc5ad3ea2fc333ce8373da</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDefaultValuesAnisotropic</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0b59d3afbec722497d2dc6263ec907a2</anchor>
      <arglist>(std::size_t dim, std::size_t diameter=2)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gade9983305154c0f0313c181138018a64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxDistance</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf623897410ee31a8ef6442cfd036d4b2</anchor>
      <arglist>(std::size_t distance)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>skipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gabd418d4fe63e9ba8548a07d3fa040177</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setSkipIsolated</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga13737da29fa7b667bb345220fbf9f7db</anchor>
      <arglist>(bool skip)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>minAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7fc61bdec970eb059a37f6decfedff8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab46f903a58b72281a0853a2b3c289ed2</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga47abf385ddf0f20a390f7c65541c5f71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxAggregateSize</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga28e7f062401da1a973a282a876265164</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga577a7ffa966fad422c7701a47f501664</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxConnectivity</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799de37a51b757bec4d0aa837e440b69</anchor>
      <arglist>(std::size_t connectivity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga871cfa946ea088fb4b4ec2b0ef2fbaf9</anchor>
      <arglist>(int l)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8d7d802c87bf3cba5512f7e620c7f6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setCoarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacaeff7c12c4ca6dbb7810ae544475654</anchor>
      <arglist>(int nodes)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coarsenTarget</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63db55c2027881f4cd38b560eb6b9455</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMinCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2c939b31af9c11b9e95313ea4efeb226</anchor>
      <arglist>(double rate)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minCoarsenRate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4694f6bfaaf3d1d5bdd538ef87244cd8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AccumulationMode</type>
      <name>accumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga68bdfbe73a93bff336f5eac21e0b5873</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga67e4e640e8cf41bf7f067b146f7b20f2</anchor>
      <arglist>(AccumulationMode accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAccumulate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf61324f9fa982b6d42a3a0118f24365d</anchor>
      <arglist>(bool accu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1420c8a8149f12b6a086245499bf554c</anchor>
      <arglist>(double d)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>getProlongationDampingFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga681bfa9e9b26b3687e5359e06e1cd4eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoarseningParameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae675df9c62a6ddf93fa98e82c1718814</anchor>
      <arglist>(int maxLevel=100, int coarsenTarget=1000, double minCoarsenRate=1.2, double prolongDamp=1.6, AccumulationMode accumulate=successiveAccu)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setDebugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8904c01d31b6ea53a72c2a26ea382967</anchor>
      <arglist>(int level)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>debugLevel</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafabd22526a7ed1e6920fde36a7efc932</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacd8b12da31b3be5391a205592d9dddaf</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPreSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga96c846a82930ac994963b71cad5c8c17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c86778e88b673726820f1a522b00a21</anchor>
      <arglist>(std::size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getNoPostSmoothSteps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafd07b4697cafd7a6f5b1c5dc2f12bef2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf505d3cfad3d04fbd16227f58de23972</anchor>
      <arglist>(std::size_t gamma)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>getGamma</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8959c2d74518eef8921b25c6c165b130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0eb73d8a872be82b75206cacbc15bbca</anchor>
      <arglist>(bool additive)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getAdditive</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga82444d5f2b9b880dd19a412b99048249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Parameters</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac5d612c50bf51b47ce0f480a48d2b6f5</anchor>
      <arglist>(int maxLevel=100, int coarsenTarget=1000, double minCoarsenRate=1.2, double prolongDamp=1.6, AccumulationMode accumulate=successiveAccu)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3d9ee21ea703d08f5831e72170db5a34</anchor>
      <arglist>(const Key &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomAccessBundledPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5c06b28bba4d8b06a46bf85bedff135f</anchor>
      <arglist>(Container &amp;container)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RandomAccessBundledPropertyMap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4505eb9e29295d0013c666150ea8dcd9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultSmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga95bfa81d687ce27c29ce918234d26423</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb7c9a4a5b2844599b0a4d8333518992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6bdf663b591336e971abe7f663a3645d</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaab333975d38e964ea852dcaf06b96f67</anchor>
      <arglist>(const Matrix &amp;matrix, [[maybe_unused]] const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>const Matrix &amp;</type>
      <name>getMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga015ea341c56a1e7c44a253e98fedb6e5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1c16a444614d7e7b05150d2e02fb08e8</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf55524271f76859febec9b490f034b17</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga949bf4bfb3cc54b53093c57288fde8d5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga588598c821ab1f74e5ff1dcf13995553</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultParallelConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad46da99493f46fec52a4067a8bea4676</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga2cec2ac1f2785322cd2c8185d6a6ab2e</anchor>
      <arglist>(const C &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const C &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac09de9760012fee67d9b912ce682f130</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DefaultConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga30207b407b57a30909e6e1d84848f26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5622694604694327167d95a683909cad</anchor>
      <arglist>(const Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf63be6f20ce6ced40cfad47f8702afcd</anchor>
      <arglist>(const SmootherArgs &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9aaa269c13668790df9b461d00650908</anchor>
      <arglist>([[maybe_unused]] T1 &amp;comm)</arglist>
    </member>
    <member kind="function">
      <type>const SequentialInformation &amp;</type>
      <name>getComm</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga08e396a2fbbdaea04d90fbdc3fda5842</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const SmootherArgs</type>
      <name>getArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac94dccbb52c46d0c264df03b197c3cd1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqSSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490a58f6e66712cfd5d1eada6d2ccb44</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqSOR&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5a2f8ca9fa5c4cee0b6c8d06b46ac949</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqJac&lt; M, X, Y, l &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga56a333b5e206f51ac6ac7b5636098ba4</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; Richardson&lt; X, Y &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4b7fc0bd4513bc95d67a366c5b4a0b0b</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstructionArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeff35e5b7a88e85ff4b829e9d6ec4cc9</anchor>
      <arglist>(int n=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setN</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaac248f894d4b1bbc8f77f2626c3fb114</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getN</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3a37c53e60a58cc618bb375d7cb68e46</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqILU&lt; M, X, Y &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga022a8b69f516f9d3e4391e862e9d5cc2</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; ParSSOR&lt; M, X, Y, C &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaac2c8f959318ae264ef68222710c643</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; BlockPreconditioner&lt; X, Y, C, T &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7619affcda7b50d4827f254c95462022</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; NonoverlappingBlockPreconditioner&lt; C, T &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5742b972aece00a759279adeedfb23ab</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeb9809e8ad5d1467042fd1f633cbc1bb</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa5289973434af337b81c8b7119efe832</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>presmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7c53f44b3b6ff7f8ccf90503bc995e11</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postsmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac8448b6118691fd94bc14d2126496c40</anchor>
      <arglist>(LevelContext &amp;levelContext, size_t steps)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga723060d6ce458282bb359492bc7f576e</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga20714653f70eb0d14b36ea9ecb3188ab</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga691d13f78b7f4e1570a92feca86612ef</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaecc26d44bce448c5dacdda88b9d71cca</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga372dc8c9f9eebb2fec4868371af22f95</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga056794b1cdc123405b6f6ff093df554b</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>preSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0a2eceb1b037653dc2dfea1386ebec60</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>postSmooth</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad05c96dbbad1e06f8d313692a950de13</anchor>
      <arglist>(Smoother &amp;smoother, Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarzSmootherArgs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga85e8fa9aeacc941e58aaa24e97f67316</anchor>
      <arglist>(Overlap overlap_=vertex, bool onthefly_=false)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4fe83b9d13cb80f98f0b5c892cd43d68</anchor>
      <arglist>(const M &amp;matrix, const AggregatesMap &amp;amap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMatrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga977d4d33b6ef69ea3fc73ca3684d677f</anchor>
      <arglist>(const M &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>const Vector &amp;</type>
      <name>getSubDomains</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab8eec5fd2cb58427c78f947b9e8f2c3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VertexAdder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga58d4349eb37c4bc4d6493a2e5d3cb297</anchor>
      <arglist>(Vector &amp;subdomains_, const AggregatesMap &amp;aggregates_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa41e4834bcd5b2e181458bcc57815731</anchor>
      <arglist>(const T &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setAggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga1364bbb520145f1f6e0b01c2f8d434f0</anchor>
      <arglist>(const AggregateDescriptor &amp;aggregate_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>noSubdomains</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7851f8a1dbe3dd75f5420cf713fde0e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga05be63e54858c76da92c83c6a23d89f7</anchor>
      <arglist>(const T &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setAggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0f953e5862202ff510e0d3f990493a06</anchor>
      <arglist>(const AggregateDescriptor &amp;aggregate_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>noSubdomains</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac789cfafa99f35f35725edbe5336ea30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AggregateAdder</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga229306751676f928a732247a08baaa1b</anchor>
      <arglist>(Vector &amp;subdomains_, const AggregatesMap &amp;aggregates_, const MatrixGraph&lt; const M &gt; &amp;graph_, VM &amp;visitedMap_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga42496f841bf4f8d5e4890fc2b1ac0649</anchor>
      <arglist>(const T &amp;edge)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>setAggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae51d13ff4b2601f8937957a9e2988bfe</anchor>
      <arglist>(const AggregateDescriptor &amp;aggregate_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>noSubdomains</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab736c509abaf10a8ab9732d891ffaf58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; SeqOverlappingSchwarz&lt; M, X, TM, TS, TA &gt; &gt;</type>
      <name>construct</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gada2208cd207aa5945e90c2fa6a756f65</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>examine</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae42053968cdc6a582d262e2360f44139</anchor>
      <arglist>(G &amp;graph, V &amp;visitedMap, [[maybe_unused]] const SequentialInformation &amp;pinfo, const AggregatesMap&lt; Vertex &gt; &amp;aggregates, R &amp;row)</arglist>
    </member>
    <member kind="function">
      <type>G::MutableMatrix *</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga52b3257266939d09215dc1354f6f3a55</anchor>
      <arglist>(G &amp;fineGraph, V &amp;visitedMap, const SequentialInformation &amp;pinfo, const AggregatesMap&lt; typename G::VertexDescriptor &gt; &amp;aggregates, const typename G::Matrix::size_type &amp;size, [[maybe_unused]] const Set &amp;overlap)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251ccd3ae014270cf5e9c77fbd0644b7</anchor>
      <arglist>(const M &amp;fine, const AggregatesMap&lt; V &gt; &amp;aggregates, M &amp;coarse, const P &amp;pinfo, [[maybe_unused]] const O &amp;copy)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga646c14c5c92c67ccd34ae8e37058e5a9</anchor>
      <arglist>(const std::shared_ptr&lt; MemberType &gt; &amp;first)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Hierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0d89bd2eda41505a91e85ee6148c5cd0</anchor>
      <arglist>(const Hierarchy &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga38faa22d1d6d64fef4fa30ca0244317f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRedistributedOnCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3525ed9c69114abef734a024397e455d</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCoarser</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga49ca742763a3bd74b299a52cf9c1c1ac</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addFiner</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5e61b589324ce4af08433a96892b067e</anchor>
      <arglist>(Arguments &amp;args)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gadfe51fd5682dd55cbc4b15fd4ac890d2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaaacf35c23a00d0e9aa93309ff7cfab16</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>finest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab96337e4d4da5591b2b6e7b93908d567</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>coarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga490c77c18752c9b6fcf38f68f1c47e6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3572024f811fcaf94d7f5bdfe1bbd30a</anchor>
      <arglist>(ParallelInformation &amp;fineInfo, Graph &amp;fineGraph, VM &amp;visitedMap, AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, ParallelInformation &amp;coarseInfo, [[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function">
      <type>Graph::VertexDescriptor</type>
      <name>coarsen</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga77c312b890773e46e79a74b3bb381e94</anchor>
      <arglist>([[maybe_unused]] const SequentialInformation &amp;fineInfo, [[maybe_unused]] Graph &amp;fineGraph, [[maybe_unused]] VM &amp;visitedMap, [[maybe_unused]] AggregatesMap&lt; typename Graph::VertexDescriptor &gt; &amp;aggregates, [[maybe_unused]] SequentialInformation &amp;coarseInfo, [[maybe_unused]] typename Graph::VertexDescriptor noAggregates)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3923d2f4d4d9b8fda692da71210ddb0a</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const SmootherArgs &amp;smootherArgs, const Parameters &amp;parms, std::size_t maxLevelKrylovSteps=3, double minDefectReduction=1e-1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad6407508988b509f32cab6cb6f85fed1</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const SmootherArgs &amp;smootherArgs=SmootherArgs(), std::size_t maxLevelKrylovSteps=3, double minDefectReduction=1e-1, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaef3e58cdeac191a467f4a8c9cc39ebf4</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6dfeef8a854c652e39412a24679055bd</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga15d0a529de8f78321953fef8dd88d4f6</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4a070cc7bc87f8600931736042a42fe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MatrixHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacc847ee00d14ceea29b0ab06c3f47cbe</anchor>
      <arglist>(std::shared_ptr&lt; MatrixOperator &gt; fineMatrix, std::shared_ptr&lt; ParallelInformation &gt; pinfo=std::make_shared&lt; ParallelInformation &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae078119494cbaef8bc37e2f01f83841a</anchor>
      <arglist>(const T &amp;criterion)</arglist>
    </member>
    <member kind="function">
      <type>const ParallelMatrixHierarchy &amp;</type>
      <name>matrices</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga702880c61ac502bf364fa17edf8e5aa0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelInformationHierarchy &amp;</type>
      <name>parallelInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga5696a76fd896e8d4abf163dc0e5d5e7a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregatesOnFinest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafec7921eab9b62ed89be01893af9ee74</anchor>
      <arglist>(std::vector&lt; std::size_t &gt; &amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>const AggregatesMapList &amp;</type>
      <name>aggregatesMaps</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga003ecca2da8744ae1fe9a2b4bf00b08e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RedistributeInfoList &amp;</type>
      <name>redistributeInformation</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4e6ac7d088228cb323fb3edbcf5fa7cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MatrixHierarchy</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaffc3a56a8c826be4a7a8e600d079850c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac145eb0ee4712d7d47ddad2acd2e60cf</anchor>
      <arglist>(Hierarchy&lt; BlockVector&lt; V, BA &gt;, TA &gt; &amp;hierarchy) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coarsenSmoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf5023ede2f8395dad11ca7180a3166f1</anchor>
      <arglist>(Hierarchy&lt; S, TA &gt; &amp;smoothers, const typename SmootherTraits&lt; S &gt;::Arguments &amp;args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateGalerkin</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga98f19e8c83876884bcc81b0b62e84124</anchor>
      <arglist>(const F &amp;copyFlags)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3bc239f239436e80b59aa5083010f0db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga799b63cd9479c3f2cee23c97099790da</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCoarsest</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga22f9ba50af24bac6ac1373e8df08b9e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBuilt</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0aaad1d1d0c64f7c2e9ee2c2afb93c6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7e7558ae35bb30097fa9206cea8a4fb</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, [[maybe_unused]] Vector &amp;fineRedist, T damp, [[maybe_unused]] const SequentialInformation &amp;comm, [[maybe_unused]] const Redist &amp;redist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga251e2fb94cbed34fe38a00da51470afe</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T damp, [[maybe_unused]] const SequentialInformation &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restrictVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6215538432f75100a856ab8a7ea3d0b0</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, const Vector &amp;fine, const SequentialInformation &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaeab72ebbef8da0ec759d810d83318041</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, Vector &amp;fineRedist, T3 damp, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm, const Redist &amp;redist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongateVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad20090156f407bb668ff938d44b02781</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, Vector &amp;fine, T3 damp, [[maybe_unused]] OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>restrictVector</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3caefd07cbc084a828c0784888fe4d49</anchor>
      <arglist>(const AggregatesMap&lt; Vertex &gt; &amp;aggregates, Vector &amp;coarse, const Vector &amp;fine, OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;comm)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gacf7e51905d114d37191922a05fa2828d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6f06881ca147d52e5415c45213f02dbd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6f49776f37c2b2c6fcedbdc30acad6ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3ea4812f77ebb779e8f1f802e53ab90c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga312a20bd5c99c709b08c01ee30c54408</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; real_type &gt;</type>
      <name>vals_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63ed137a432c6f7c0dcdc7005f1dae94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; real_type &gt;::iterator</type>
      <name>valIter_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0286a238b808e43685d44f6855e7b909</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d18731e26edb51c8dcf567f169fab19</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf7898ad122d26cfaeb622d152318b782</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga0849baf99502da25d7aab61433702189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gac4092bf0b04b38b0bea723bf99dfe1a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa06549181446abcb1d1c1899e5cd780e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga11737c528bb8a66108c28e5430b6d79c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>maxValue_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga758ae8319a1b2815cbe9d5ed7a658c70</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Norm</type>
      <name>norm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga24be101071dea7448b30e71c1ba325a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>row_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9544d0f92497c059c356c4af967fd313</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>real_type</type>
      <name>diagonal_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7744864a59f4dd34ff15daba4b95e5aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const V</type>
      <name>UNAGGREGATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad35c6c9e3aa1ec18c07a97279f8d3f77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const V</type>
      <name>ISOLATED</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9431f7b35947083f3d2a270a4b3b8bb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Vertex</type>
      <name>NullEntry</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga388b68a43934e0773c0ef9016e7443a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Smoother, A &gt;::Iterator</type>
      <name>smoother</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga63e3d105090e892cdbd2aa2bfe1cb8f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::ParallelMatrixHierarchy::ConstIterator</type>
      <name>matrix</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga6b3d0bd9189544d0516dace233173206</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParallelInformationHierarchy::Iterator</type>
      <name>pinfo</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga3faabdb132f30d77f91c344884924e05</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::RedistributeInfoList::const_iterator</type>
      <name>redist</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga79af29feba81c447ca26d925a3ea8813</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::AggregatesMapList::const_iterator</type>
      <name>aggregates</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga479041cd5cd3dfbf996ec56a10affcc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Domain, A &gt;::Iterator</type>
      <name>lhs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga986ecbc279f997760a9bdd218a41b529</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Domain, A &gt;::Iterator</type>
      <name>update</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga12444cb3e5465f0beedaf5224c1753df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Range, A &gt;::Iterator</type>
      <name>rhs</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga18d2735ec4bd10f230e3abc1f6887e9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>level</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gae3682d6589ac2e3a78148651c3d4a26a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr SolverType</type>
      <name>solver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9f2b660f07c84309add90546dccba884</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>isDirectSolver</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa8ddd5fc5245d18239cd1215b33487fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; M &gt;</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga9c67a673734b7eff983ba24e92b12e35</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const C &amp;</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga83643cb8cd5051772e845b7558d23dc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MPI_Comm</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7a434e3d0d0b05d76c6ad9c6f3403005</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>SolverCategory::Category</type>
      <name>cat_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga7de9ac0319a929415fe5da695c9bae10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>CollectiveCommunication&lt; void * &gt;</type>
      <name>comm_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga02d37918b5fb883f9c57d89f28f45019</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Aggregate *</type>
      <name>aggregate</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaa7d8bb553e8dba45ed4fb2e5a0859958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Vertex</type>
      <name>vertex</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gab7b0edf4b5958d9f290114d9ea5e766a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>iterations</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf86eaea0d7dc0f7841c91ee60cadc3f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>RelaxationFactor</type>
      <name>relaxationFactor</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gad1b07aaab2acba6665e54db06cec5e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Matrix *</type>
      <name>matrix_</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c90a08eddc2adf06a080fd4c37427c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Overlap</type>
      <name>overlap</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gafe264e153a2e6d9ee9a79fe314b341ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>onthefly</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4d3815b549e94d0a2569edc4e32a45b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Stack</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga4641b458711966e157e765a8aef3476c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>KAMG</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>gaf91f5307055ee7eb3a392902ab41943d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>KAmgTwoGrid&lt; AMG &gt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga8c812e1d63c310c6b28713b196382d86</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga60bee2ca3491dda86fc93ca442eafccc</anchor>
      <arglist>(std::ostream &amp;os, const EdgeProperties &amp;props)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00243.html</anchorfile>
      <anchor>ga89e337eb2f5f924bb3e2abac435a0bb1</anchor>
      <arglist>(std::ostream &amp;os, const VertexProperties &amp;props)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_FSAMG</name>
    <title>Fast (sequential) Algebraic Multigrid</title>
    <filename>a00244.html</filename>
    <class kind="class">Dune::Amg::FastAMG</class>
    <member kind="typedef">
      <type>M</type>
      <name>Operator</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga75aeb145a05ee3e5323b6e7f7de1bcb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PI</type>
      <name>ParallelInformation</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga5d3d612da81bdddf2fc3582b17eefbdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MatrixHierarchy&lt; M, ParallelInformation, A &gt;</type>
      <name>OperatorHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga416225297edd0377d1fc9aa43eb56d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OperatorHierarchy::ParallelInformationHierarchy</type>
      <name>ParallelInformationHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gae662ab0809413cd9430009b83d3d3b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Domain</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga34042ac957d2236eba20c04a8c844330</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>X</type>
      <name>Range</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga5d367c7ae6350e248bdb65d7fcf020f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>InverseOperator&lt; X, X &gt;</type>
      <name>CoarseSolver</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gab6ea07c81c60f3fdd0e92aae879bdb92</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gaf93549915ddcbebd39d480dbd8aac5f8</anchor>
      <arglist>(OperatorHierarchy &amp;matrices, CoarseSolver &amp;coarseSolver, const Parameters &amp;parms, bool symmetric=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gab06b781cacc2d8ac3e0e4d8c64d4231d</anchor>
      <arglist>(const Operator &amp;fineOperator, const C &amp;criterion, const Parameters &amp;parms=Parameters(), bool symmetric=true, const ParallelInformation &amp;pinfo=ParallelInformation())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FastAMG</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga26470f1f9f639f42db7b60658088d59e</anchor>
      <arglist>(const FastAMG &amp;amg)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pre</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gaf1ed183e717b6e62f5a239509dd63007</anchor>
      <arglist>(Domain &amp;x, Range &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gadbfd6eb1972a3bc237bfef5194433a72</anchor>
      <arglist>(Domain &amp;v, const Range &amp;d)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual SolverCategory::Category</type>
      <name>category</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga40d9993df13a2229ce1c783bbcd75c4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>post</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga17c451f6558a1f1c52f6532d9b377df1</anchor>
      <arglist>(Domain &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getCoarsestAggregateNumbers</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0970da862f38d0c8e7eef9b8d89dfe4b</anchor>
      <arglist>(std::vector&lt; std::size_t, A1 &gt; &amp;cont)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>levels</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga99b7e9d174ef8577ec1ffab01287179e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>maxlevels</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga3109b7a9881c5627ae36ae324a2d3d04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recalculateHierarchy</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0e381b6c7ce83ab6dcb7a8b5b1cb8f56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>usesDirectCoarseLevelSolver</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gabc02fd4688d2a3a2e04b19de7861a118</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::ParallelMatrixHierarchy::ConstIterator</type>
      <name>matrix</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0605d4729368b7abf96c3f4f7af1d07c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ParallelInformationHierarchy::Iterator</type>
      <name>pinfo</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga0d14f5462264cc75077cd8ec0ec99da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::RedistributeInfoList::const_iterator</type>
      <name>redist</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga5baf13e89f1264720ab7362a6232c49f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>OperatorHierarchy::AggregatesMapList::const_iterator</type>
      <name>aggregates</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gafaf339ed91264d85c4d3ab8e66099c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Domain, A &gt;::Iterator</type>
      <name>lhs</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gac95b70f03a561cf35f8a9b0ab161e83f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Domain, A &gt;::Iterator</type>
      <name>residual</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>ga36e3d005e5b0dd6aafd525e570c64309</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Hierarchy&lt; Range, A &gt;::Iterator</type>
      <name>rhs</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gad34dfeb4a53ad665d14f8e30e0160739</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>level</name>
      <anchorfile>a00244.html</anchorfile>
      <anchor>gad6021b3f9f200285aeaedb19333e06f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_Prec</name>
    <title>Preconditioners</title>
    <filename>a00245.html</filename>
    <subgroup>ISTL_PAAMG</subgroup>
    <subgroup>ISTL_FSAMG</subgroup>
    <file>overlappingschwarz.hh</file>
    <file>preconditioners.hh</file>
    <class kind="class">Dune::NonoverlappingBlockPreconditioner</class>
    <class kind="class">Dune::SeqOverlappingSchwarz</class>
    <class kind="class">Dune::OverlappingSchwarzInitializer</class>
    <class kind="struct">Dune::AdditiveSchwarzMode</class>
    <class kind="struct">Dune::MultiplicativeSchwarzMode</class>
    <class kind="struct">Dune::SymmetricMultiplicativeSchwarzMode</class>
    <class kind="class">Dune::DynamicMatrixSubdomainSolver</class>
    <class kind="class">Dune::DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::OverlappingAssignerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="class">Dune::OverlappingAssignerILUBase</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="class">Dune::OverlappingAssignerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::AdditiveAdder</class>
    <class kind="struct">Dune::AdditiveAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::MultiplicativeAdder</class>
    <class kind="struct">Dune::MultiplicativeAdder&lt; S, BlockVector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::AdderSelector</class>
    <class kind="struct">Dune::AdderSelector&lt; AdditiveSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; MultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::AdderSelector&lt; SymmetricMultiplicativeSchwarzMode, X, S &gt;</class>
    <class kind="struct">Dune::IteratorDirectionSelector</class>
    <class kind="struct">Dune::IteratorDirectionSelector&lt; T1, T2, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzApplier&lt; SeqOverlappingSchwarz&lt; M, X, SymmetricMultiplicativeSchwarzMode, TD, TA &gt; &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; DynamicMatrixSubdomainSolver&lt; BCRSMatrix&lt; K, Al &gt;, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; S&lt; BCRSMatrix&lt; T, A &gt; &gt;, true &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerILUBase</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILU0SubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzAssemblerHelper&lt; ILUNSubdomainSolver&lt; M, X, Y &gt;, false &gt;</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize</class>
    <class kind="struct">Dune::SeqOverlappingSchwarzDomainSize&lt; BCRSMatrix&lt; T, A &gt; &gt;</class>
    <class kind="class">Dune::Preconditioner</class>
    <class kind="class">Dune::InverseOperator2Preconditioner</class>
    <class kind="class">Dune::SeqSSOR</class>
    <class kind="class">Dune::SeqSOR</class>
    <class kind="class">Dune::SeqJac</class>
    <class kind="class">Dune::SeqILU</class>
    <class kind="class">Dune::Richardson</class>
    <class kind="class">Dune::SeqILDL</class>
    <member kind="typedef">
      <type>OverlappingAssignerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>OverlappingAssigner</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga57430ed63b8d6900976df9950af0a0bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqOverlappingSchwarzAssemblerHelper&lt; T, Dune::StoresColumnCompressed&lt; T &gt;::value &gt;</type>
      <name>SeqOverlappingSchwarzAssembler</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5a5d6fa4ec6f65757b49ed7fe09e15e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SeqSOR&lt; M, X, Y, l &gt;</type>
      <name>SeqGS</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaf04e8521e43d7b1c8fdb3a412210b36d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga31161bee90db194d09f233f00ab4de9c</anchor>
      <arglist>(&quot;ssor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga84e1da868870a635c00649be4e1d101b</anchor>
      <arglist>(&quot;sor&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqSOR &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga08abf358156090136c1433291819a194</anchor>
      <arglist>(&quot;gs&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqGS &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8e0768493ba56650387ef7f1171d2620</anchor>
      <arglist>(&quot;jac&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqJac &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gabdfc9bd7597c826fa723af53d0cb0e2d</anchor>
      <arglist>(&quot;ilu&quot;, defaultPreconditionerBlockLevelCreator&lt; Dune::SeqILU &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga6c0383c6a267d2dd7bdf0425463c95dc</anchor>
      <arglist>(&quot;richardson&quot;, [](auto tl, const auto &amp;, const ParameterTree &amp;config){ using D=typename Dune::TypeListElement&lt; 1, decltype(tl)&gt;::type;using R=typename Dune::TypeListElement&lt; 2, decltype(tl)&gt;::type;return std::make_shared&lt; Richardson&lt; D, R &gt;&gt;(config);})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_REGISTER_PRECONDITIONER</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gada61707dc136db5a195bef80037d5246</anchor>
      <arglist>(&quot;ildl&quot;, defaultPreconditionerCreator&lt; Dune::SeqILDL &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingSchwarzInitializer</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga680ecf80821212aaa8149d72eea3010e</anchor>
      <arglist>(InitializerList &amp;il, const IndexSet &amp;indices, const subdomain_vector &amp;domains)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addRowNnz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga01ce789c3fd3870dee0f0df52eac92c5</anchor>
      <arglist>(const Iter &amp;row)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>allocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga995ede9ec46c2990a1f249b4096a827a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>countEntries</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac5ed84777f6e2f1181aae4198ab75e12</anchor>
      <arglist>(const Iter &amp;row, const CIter &amp;col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calcColstart</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0fa860d4fc5e8db80cd39b1c377d407f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copyValue</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga49aa7ec764cdad87e4336c4f62598c76</anchor>
      <arglist>(const Iter &amp;row, const CIter &amp;col) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>createMatrix</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5052a702af185623894c97c65d41b94c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexMap</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga6a680e2548b56a7dadc9f0269fd2bb7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac38c2a9d650c270b58a6572b8d54292f</anchor>
      <arglist>(size_type grow)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7f7b78dea6bde8fd42a9f33519dbe8e5</anchor>
      <arglist>(size_type grow) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4914e60d4ae3251d332a27b367b16280</anchor>
      <arglist>(size_type grow)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga2553a87370e6225f413fb43a609b13de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga32f49a7bed697ba20cdad682abf7831b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4709e82416cc84c95bacc7f50fbf0426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga609c6c8a5bb36b65278f3107963f67a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae92d3496d89061727cbb287f66353cb5</anchor>
      <arglist>(const matrix_type &amp;mat, const rowtodomain_vector &amp;rowToDomain, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SeqOverlappingSchwarz</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga8b6f1eb9ad0a1080f762446c800ee2ef</anchor>
      <arglist>(const matrix_type &amp;mat, const subdomain_vector &amp;subDomains, field_type relaxationFactor=1, bool onTheFly_=true)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga1f5c5f46969aca8a8cfb6953bcf9d230</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, [[maybe_unused]] const matrix_type &amp;mat, [[maybe_unused]] Solvers &amp;solvers, const SubDomains &amp;subDomains, [[maybe_unused]] bool onTheFly)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad2c38596fb38fbd904e356cea2bcd554</anchor>
      <arglist>(const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;domains, bool onTheFly)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>assembleLocalProblems</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0aa914d086d8b0320f101b2f076ac991</anchor>
      <arglist>([[maybe_unused]] const RowToDomain &amp;rowToDomain, const matrix_type &amp;mat, Solvers &amp;solvers, const SubDomains &amp;subDomains, bool onTheFly)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>apply</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7165b943ac63555d9be74469dd1bdf0c</anchor>
      <arglist>(X &amp;v, const X &amp;d)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga3f9c740568e948c8bffcf8f420aeaba0</anchor>
      <arglist>(std::size_t maxlength, const BCRSMatrix&lt; K, Al &gt; &amp;mat_, const X &amp;b_, Y &amp;x_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae347c974f0314ed345e659004b62c26c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac1c22f222bb77ed8c9a47017c2fea395</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector&lt; field_type &gt; &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaa7ffec89b084a27a9601100f74347e96</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector&lt; field_type &gt; &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaf5ddbe6322eb27047edf9a296065f229</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae316c5e7518e5bf9db8e65cfcaea7c42</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4bf365158cd6a9bb38fd6def4f70ce15</anchor>
      <arglist>(const size_type &amp;domainIndex)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac286d23d4d9cab29a16efbec63cb5322</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerHelper</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae1c644dc711b85eef93b84cd6c00836a</anchor>
      <arglist>(std::size_t maxlength, const matrix_type &amp;mat, const range_type &amp;b, range_type &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gab38e2e3912b42816193fcf4d24aebb14</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gac83c3d93e203302a07e5534ef3a1eda3</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga81a8b561789c3969f2196bac51508921</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad02f2ece4d291c61f9c958dd4d5e1831</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gadfde7e2456e273ce5e4c80381bfc203d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>field_type *</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga5fdf6d3c8d16e9ac866e353644c6c0ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>field_type *</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga725e9ce0b934a3040f41fcce53170f93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OverlappingAssignerILUBase</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga7a24b7bf122f654480690478c2cc80fc</anchor>
      <arglist>(std::size_t maxlength, const M &amp;mat, const Y &amp;b, X &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9a7c6fd66dd0d12e3db397ec4318ae6a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga85a5a216087e03197a0b64f7484bccb5</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>relaxResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gad711654fd4e5f5e86f68e99795664119</anchor>
      <arglist>(field_type relax)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assignResult</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gae600a61fbac4cd4fc97c2dc2e0eb17f1</anchor>
      <arglist>(block_type &amp;res)</arglist>
    </member>
    <member kind="function">
      <type>X &amp;</type>
      <name>lhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga0f21fa6a8c50e4281aac39aa06ed442c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Y &amp;</type>
      <name>rhs</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga242dba5b5b746420469c028df5833224</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resetIndexForNextDomain</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4236f7c9f4d06105d1f2f2f4ded2ea95</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AdditiveAdder</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga4426d91edd8cc9b0b3334067843955ab</anchor>
      <arglist>(BlockVector&lt; T, A &gt; &amp;v, BlockVector&lt; T, A &gt; &amp;x, OverlappingAssigner&lt; S &gt; &amp;assigner, const field_type &amp;relax_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga76542a5eff5f5f0fd32c73b17ba2eaf1</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga9b4e23858765034998eae99df253ce73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultiplicativeAdder</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga168a62b5b202ef08f67cb016096571d5</anchor>
      <arglist>(BlockVector&lt; T, A &gt; &amp;v, BlockVector&lt; T, A &gt; &amp;x, OverlappingAssigner&lt; S &gt; &amp;assigner_, const field_type &amp;relax_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>ga385efdb7af8bcdcd9afe46e6297d82fa</anchor>
      <arglist>(const size_type &amp;domain)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>axpy</name>
      <anchorfile>a00245.html</anchorfile>
      <anchor>gaacf07a33120284d3626dc8853373235f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_SP</name>
    <title>Scalar products</title>
    <filename>a00246.html</filename>
    <file>scalarproducts.hh</file>
    <class kind="class">Dune::ScalarProduct</class>
    <class kind="class">Dune::ParallelScalarProduct</class>
    <class kind="class">Dune::SeqScalarProduct</class>
    <class kind="class">Dune::NonoverlappingSchwarzScalarProduct</class>
    <class kind="class">Dune::OverlappingSchwarzScalarProduct</class>
  </compound>
  <compound kind="group">
    <name>DenseMatVec</name>
    <title>DenseMatVec</title>
    <filename>a00247.html</filename>
    <class kind="struct">Dune::FieldTraits&lt; BlockVector&lt; B, A &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; MultiTypeBlockVector&lt; Arg0, Args... &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>ISTL_Kernel</name>
    <title>Block Recursive Iterative Kernels</title>
    <filename>a00248.html</filename>
    <class kind="struct">Dune::BL</class>
    <class kind="struct">Dune::algmeta_btsolve</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, withdiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_btsolve&lt; 0, nodiag, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, withrelax &gt;</class>
    <class kind="struct">Dune::algmeta_bdsolve&lt; 0, norelax &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; 0, M &gt;</class>
    <class kind="struct">Dune::algmeta_itsteps&lt; I, MultiTypeBlockMatrix&lt; T1, MultiTypeMatrixArgs... &gt; &gt;</class>
    <member kind="enumeration">
      <type></type>
      <name>WithDiagType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1d016a8baf2c49b7cf2f4381ac26dae8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withdiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8aeee05f0dca4c1c766073efa5a0ce1864</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nodiag</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga1d016a8baf2c49b7cf2f4381ac26dae8a2797146c0f86bb2e64d5dcdd09af49fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>WithRelaxType</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8d35e02d27a4916c1ba6435f0c2d6ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>withrelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a6275e2591067a32a12c32074ae56a4ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>norelax</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gga8d35e02d27a4916c1ba6435f0c2d6ea8a4fcdb30f993f475659d8e031aff47b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga0f053fd0407ed1cc4bddd149fb6fb8ca</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf814921e91eff2665f6faf02f5f2077f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga44f4aa6e2cf4928911a3f5d1de3044d5</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaccddb305f448a410d5092fc19e65fde7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gae258e10601de666271f1fc70365acaaf</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga83b10b12a29ea2971cf8176d641b830f</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaff15f888a81d558e39b36ac74fea2e42</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6559fd0a70f600ab376dd2083d8cb0dd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga8c2d3410df660b6891f6a1eedafd49f6</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga9d84c99a51fe0795b06b825a13538852</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga112a6621ef260e4b265a0df07fede1be</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubltsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga29094b87e08482d955ab1b4f731678fd</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga1ab5372aabac8f03a77f50227b611fd8</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>butsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaaed21180843947bd0efef18d54038998</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga00c2e6cbce34cf6d04e94567a48bb13c</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ubutsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga89e9f76f178486c9ded34ed26f367bc4</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt; bl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab20f25b7927dae733827e729fc3c25f7</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gab158b39f3ee085609cbae90a0cf6a5fb</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga7d7f687712467b7651d62ea0712aa5a3</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bdsolve</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gac245a72ffeecc409c7d242c6841738a9</anchor>
      <arglist>(const M &amp;A, X &amp;v, const Y &amp;d, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga5bec8914ff3d25fb86ddffef6e38677d</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbgs</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga70ff88e446d2bb3927e2ae963292d02b</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gaf2caef773a37fd65ee1fa76ee0a95c47</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorf</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga65105d18c5a743d1739179e696f5c022</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga3a70747a68e23231ab6cb72b396942ec</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bsorb</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>gabdb801f4a4aea1201bc09d32b202042a</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga51ae0ff4aea09b29d3f31ae2f6dfacc5</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>dbjac</name>
      <anchorfile>a00248.html</anchorfile>
      <anchor>ga6642a19372a5ec5f405ce8cc56515596</anchor>
      <arglist>(const M &amp;A, X &amp;x, const Y &amp;b, const K &amp;w, BL&lt; l &gt;)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_IO</name>
    <title>IO for matrices and vectors.</title>
    <filename>a00249.html</filename>
    <file>io.hh</file>
    <file>matrixmarket.hh</file>
    <class kind="class">Dune::MatrixMarketFormatError</class>
    <member kind="function">
      <type>void</type>
      <name>recursive_printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gacfa35a4c02a1d2802460eb62ecbf3689</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string rowtext, int &amp;counter, int columns, int width)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printvector</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8674c142d6b29e12bcb94075f952d1e1</anchor>
      <arglist>(std::ostream &amp;s, const V &amp;v, std::string title, std::string rowtext, int columns=1, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga16a8aa6ba46f5e6afed17b49f25ccaf5</anchor>
      <arglist>(std::ostream &amp;s, int m, int width, [[maybe_unused]] int precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga5416e87c493938d5c9c670428aa29c0b</anchor>
      <arglist>(std::ostream &amp;s, const K &amp;value, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type I, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type J, [[maybe_unused]] typename FieldMatrix&lt; K, 1, 1 &gt;::size_type therow, int width, [[maybe_unused]] int precision, typename std::enable_if_t&lt; Dune::IsNumber&lt; K &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print_row</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga6637eaf1e8d0c72f46f9edec7747c4d7</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, typename M::size_type I, typename M::size_type J, typename M::size_type therow, int width, int precision, typename std::enable_if_t&lt;!Dune::IsNumber&lt; M &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printmatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga81eff30b8e58a169e319b49f62e4ea7b</anchor>
      <arglist>(std::ostream &amp;s, const M &amp;A, std::string title, std::string rowtext, int width=10, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printSparseMatrix</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaef563e4586001e657d48f01fae628846</anchor>
      <arglist>(std::ostream &amp;s, const BCRSMatrix&lt; FieldMatrix&lt; B, n, m &gt;, A &gt; &amp;mat, std::string title, std::string rowtext, int width=3, int precision=2)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga93b011f0c65384ec08aa12d56464daf9</anchor>
      <arglist>(const FieldType &amp;value, int rowOffset, int colOffset, std::ostream &amp;s, typename std::enable_if_t&lt; Dune::IsNumber&lt; FieldType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1b083f3c81128b09bbfc7665a07b4b57</anchor>
      <arglist>(const MatrixType &amp;matrix, int externalRowOffset, int externalColOffset, std::ostream &amp;s, typename std::enable_if_t&lt;!Dune::IsNumber&lt; MatrixType &gt;::value &gt; *sfinae=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga19c64bcf9cfcba21151f54c6cee16bba</anchor>
      <arglist>(const MatrixType &amp;matrix, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlabHelper</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga95cc09d9210e3e99d3f3151e41b43536</anchor>
      <arglist>(const V &amp;v, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeVectorToMatlab</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaab0213399acb112e901dc043b338ac00</anchor>
      <arglist>(const VectorType &amp;vector, const std::string &amp;filename, int outputPrecision=18)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_header</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf5669d944b34a0042d13688aaae6cd41</anchor>
      <arglist>(std::size_t &amp;rows, std::size_t &amp;cols, MatrixMarketImpl::MMHeader &amp;header, std::istream &amp;istr, bool isVector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaed3a11d2d57007d599549bdaac2dfb83</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_read_vector_entries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gae0ec9d52cd4eab5d7c10b7ac15032026</anchor>
      <arglist>(Dune::BlockVector&lt; Dune::FieldVector&lt; T, entries &gt;, A &gt; &amp;vector, std::size_t size, std::istream &amp;istr, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga050fdeb74ac186e9a2d3481230b64e54</anchor>
      <arglist>(Dune::BlockVector&lt; T, A &gt; &amp;vector, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga3d1901dfd6a884df0a1295856c203df9</anchor>
      <arglist>(Dune::BCRSMatrix&lt; T, A &gt; &amp;matrix, std::istream &amp;istr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gafb63c87901fc6242102349fb245581f6</anchor>
      <arglist>(const B &amp;entry, std::size_t rowidx, std::size_t colidx, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaa308293be3836cb24c981bcd2d270bf5</anchor>
      <arglist>(const V &amp;entry, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mm_print_vector_entry</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf0233e0c56e727d0e3fa63a79ffcdeb3</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;, size_t lane)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga26b91d6c608f5dc37407dfdbb84eb7d1</anchor>
      <arglist>(const BlockVector&lt; T, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>countEntries</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga4ffd3c490badd2df43eb4a6d0e0119c4</anchor>
      <arglist>(const BlockVector&lt; FieldVector&lt; T, i &gt;, A &gt; &amp;vector)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga2e94fcf7e81237a8f132a0f6a3ddaf21</anchor>
      <arglist>(const V &amp;vector, std::ostream &amp;ostr, const std::integral_constant&lt; int, 0 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gaf37b15dbfaeb5fa5639d38b560407c4b</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr, const std::integral_constant&lt; int, 1 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga8da01d126c9f37e57fa4f719e1d05487</anchor>
      <arglist>(const M &amp;matrix, std::ostream &amp;ostr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1064c670426a98617b9e048a40f50a8c</anchor>
      <arglist>(const M &amp;matrix, std::string filename, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac0c687a6e0c2feb4351f3364e4cbbce6</anchor>
      <arglist>(const M &amp;matrix, std::string filename, const OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool storeIndices=true, int prec=default_precision)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>ga1bc5b5677a5be24d72a7d95214fd0d30</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename, OwnerOverlapCopyCommunication&lt; G, L &gt; &amp;comm, bool readIndices=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadMatrixMarket</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gac23bb6abb2a5b397781ea75c0ba134d8</anchor>
      <arglist>(M &amp;matrix, const std::string &amp;filename)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>default_precision</name>
      <anchorfile>a00249.html</anchorfile>
      <anchor>gab36dc22122e5b7f555b64ef9f418d329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ISTL_Factory</name>
    <title>ISTL_Factory</title>
    <filename>a00250.html</filename>
    <class kind="class">Dune::SolverFactory</class>
    <class kind="class">Dune::UnsupportedType</class>
    <class kind="class">Dune::InvalidSolverFactoryConfiguration</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const M &amp;, const ParameterTree &amp;)</type>
      <name>DirectSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga91168438e4b9a921333311a3a08798dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; DirectSolverSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>DirectSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4ed393ca70204435e43fe1d993d94146</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; M &gt; &amp;, const ParameterTree &amp;)</type>
      <name>PreconditionerSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae55f25267d1fd33e3ca7d1626e0c2309</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; PreconditionerSignature&lt; M, X, Y &gt; &gt;&gt;</type>
      <name>PreconditionerFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga3331f94d4529c3668c246bb292d8616c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; InverseOperator&lt; X, Y &gt; &gt;(const std::shared_ptr&lt; LinearOperator&lt; X, Y &gt; &gt; &amp;, const std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt; &amp;, const std::shared_ptr&lt; Preconditioner&lt; X, Y &gt; &gt;, const ParameterTree &amp;)</type>
      <name>IterativeSolverSignature</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga4f1eb86d7953f95ba7cbc5e7364533fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Singleton&lt; ParameterizedObjectFactory&lt; IterativeSolverSignature&lt; X, Y &gt; &gt;&gt;</type>
      <name>IterativeSolverFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab390de02beef7edaa843bf24ffbe10b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga8cd87704fdf718eb91e0438ece40dc90</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const O &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gacaa45f8d22a9e430403dc0a933c40718</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; Preconditioner &gt;</type>
      <name>wrapPreconditioner4Parallel</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gae3ab5a656b6ac5e2f52304689e535597</anchor>
      <arglist>(const std::shared_ptr&lt; Preconditioner &gt; &amp;prec, const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaffc9f5f8d427f2d98dbef49624117634</anchor>
      <arglist>(const std::shared_ptr&lt; MatrixAdapter&lt; M, X, Y &gt; &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga569512130000aa1e72d00b1427407201</anchor>
      <arglist>(const std::shared_ptr&lt; OverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; ScalarProduct&lt; X &gt; &gt;</type>
      <name>createScalarProduct</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gab48d6cf38494913a86506075ee00388d</anchor>
      <arglist>(const std::shared_ptr&lt; NonoverlappingSchwarzOperator&lt; M, X, Y, C &gt; &gt; &amp;op)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; InverseOperator&lt; typename Operator::domain_type, typename Operator::range_type &gt; &gt;</type>
      <name>getSolverFromFactory</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga1ce543e29164b14be8dcfdf63197f3dd</anchor>
      <arglist>(std::shared_ptr&lt; Operator &gt; op, const ParameterTree &amp;config, std::shared_ptr&lt; Preconditioner&lt; typename Operator::domain_type, typename Operator::range_type &gt;&gt; prec=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerBlockLevelCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga335dd7b0d29e9493a7f193c9f07767bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultPreconditionerCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>gaaf82ab9baa6ac2e24bb927e953ffb4fb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>defaultIterativeSolverCreator</name>
      <anchorfile>a00250.html</anchorfile>
      <anchor>ga2a5d86e17fb4ce0299537c0704264996</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>modules</name>
    <title>Modules</title>
    <filename>a04353.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>dune-istl Automatic Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="Modules">mods</docanchor>
  </compound>
</tagfile>
