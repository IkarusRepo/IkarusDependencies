<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1" doxygen_gitid="ef9b20ac7f8a8621fcfc299f8bd0b80422390f4b">
  <compound kind="file">
    <name>alignedallocator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00008.html</filename>
    <includes id="a00161" name="mallocallocator.hh" local="yes" imported="no">mallocallocator.hh</includes>
    <class kind="class">Dune::AlignedAllocator</class>
    <class kind="struct">Dune::AlignedAllocator::rebind</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>apply.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00326.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
  </compound>
  <compound kind="file">
    <name>arraylist.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00011.html</filename>
    <includes id="a00146" name="iteratorfacades.hh" local="yes" imported="no">iteratorfacades.hh</includes>
    <class kind="class">Dune::ArrayList</class>
    <class kind="class">Dune::ArrayListIterator</class>
    <class kind="class">Dune::ConstArrayListIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>assertandreturn.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00014.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSERT_AND_RETURN</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga902aaece2c20a75cbf6daad4957ba069</anchor>
      <arglist>(C, X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bartonnackmanifcheck.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00017.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_INTERFACE_IMPLEMENTATION</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>acd7d9df83980a2517813af61e0eb22e1</anchor>
      <arglist>(dummy)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CHECK_AND_CALL_INTERFACE_IMPLEMENTATION</name>
      <anchorfile>a00017.html</anchorfile>
      <anchor>a3ae5cb4f2a5339eb07e94108e67bcca7</anchor>
      <arglist>(__interface_method_to_call__)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>base.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00293.html</filename>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; i &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; 0 &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
  </compound>
  <compound kind="file">
    <name>bigunsignedint.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00020.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00125" name="hash.hh" local="no" imported="no">dune/common/hash.hh</includes>
    <class kind="class">Dune::bigunsignedint</class>
    <class kind="struct">std::numeric_limits&lt; Dune::bigunsignedint&lt; k &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_BINOP</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf87f343423f6514fb0bea86e67539446</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga354fc36a88498193df8a295e678de95a</anchor>
      <arglist>(std::ostream &amp;s, const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga4733af4e0faa3a06ea6cd1e030cadfe0</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf1e188eaa5ea83115d8b7137ce9252a5</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga6e7bfd8374b58f7895cb9f7d67fd0ead</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf235b6dd71516eafdd566d673d076339</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga8e48a8a50b777236555abd9ca13528c3</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga621131a6364d2636e0c66707f8b3d8df</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf42863ce01d98553d1ceb962b447cec0</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae09acd40217cc791030af3a38f18a66a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga0d5daa1e3e2d36c2b186ead3b1152d0a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gadf2313e3cdc41ab5d6051818637b6e3a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>binaryfunctions.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00023.html</filename>
    <class kind="struct">Dune::Min</class>
    <class kind="struct">Dune::Max</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>bitsetvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00026.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00119" name="genericiterator.hh" local="no" imported="no">dune/common/genericiterator.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="class">Dune::BitSetVectorConstReference</class>
    <class kind="class">Dune::BitSetVectorReference</class>
    <class kind="struct">Dune::const_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="class">Dune::BitSetVector</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>boundschecking.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00029.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSERT_BOUNDS</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga75d4ba5883cb39e7ec7927891a12615e</anchor>
      <arglist>(cond)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>classname.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00032.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a33ac30656648b528235c913852c28ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1d7665500285ebc74f89523cb8cf4fae</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>collectivecommunication.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00176.html</filename>
    <includes id="a00179" name="communication.hh" local="no" imported="no">dune/common/parallel/communication.hh</includes>
  </compound>
  <compound kind="file">
    <name>communication.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00179.html</filename>
    <includes id="a00023" name="binaryfunctions.hh" local="no" imported="no">dune/common/binaryfunctions.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00185" name="future.hh" local="no" imported="no">dune/common/parallel/future.hh</includes>
    <class kind="struct">Dune::No_Comm</class>
    <class kind="class">Dune::Communication</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>Communication&lt; T &gt;</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a51c6057d41509cc616fb60f483d7d6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aee0776cda12fa2fc183e2796bcc23743</anchor>
      <arglist>(const No_Comm &amp;, const No_Comm &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a02c039e6b551a3771cc8c60e84e9bcdc</anchor>
      <arglist>(const No_Comm &amp;, const No_Comm &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>communicator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00182.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a04325" name="parallel/interface.hh" local="no" imported="no">dune/common/parallel/interface.hh</includes>
    <includes id="a00227" name="remoteindices.hh" local="no" imported="no">dune/common/parallel/remoteindices.hh</includes>
    <includes id="a00350" name="stdstreams.hh" local="no" imported="no">dune/common/stdstreams.hh</includes>
    <class kind="struct">Dune::SizeOne</class>
    <class kind="struct">Dune::VariableSize</class>
    <class kind="struct">Dune::CommPolicy</class>
    <class kind="struct">Dune::CommPolicy::CommPolicy&lt; VariableBlockVector&lt; FieldVector&lt; K, n &gt;, A &gt; &gt;</class>
    <class kind="class">Dune::CommPolicy::CommunicationError</class>
    <class kind="struct">Dune::CommPolicy::CopyGatherScatter</class>
    <class kind="class">Dune::BufferedCommunicator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>concept.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00035.html</filename>
    <includes id="a00386" name="typeutilities.hh" local="no" imported="no">dune/common/typeutilities.hh</includes>
    <includes id="a00380" name="typelist.hh" local="no" imported="no">dune/common/typelist.hh</includes>
    <includes id="a00374" name="tupleutility.hh" local="no" imported="no">dune/common/tupleutility.hh</includes>
    <includes id="a00338" name="type_traits.hh" local="no" imported="no">dune/common/std/type_traits.hh</includes>
    <class kind="struct">Dune::Concept::Refines</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Concept</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>models</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ga91a4108f1ea3f3644e343659a4e25904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>tupleEntriesModel</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a505975b777b113e7a170bf0b92f18cc4</anchor>
      <arglist>() -&gt; typename Impl::TupleEntriesModelHelper&lt; C, Tuple &gt;::Result</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireTrue</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a0c5244fc0c1f77eb234e0bab79bb5240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConcept</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a06e79a0db6608ca4c073c4c8f0dd824d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConcept</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a2dbe5630e5ddb8c2f2a23f48cce6013b</anchor>
      <arglist>(T &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConceptForTupleEntries</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a59645477bd6b09962ab62f4e2afe6c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConvertible</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a8b5ee9cb9837e082ac1da60fe2a1ca81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConvertible</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a9a36856034f3033ad8c3fb905b6b2018</anchor>
      <arglist>(const From &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireType</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>ad96e1a5fe36cebbed3c85d0e24b49bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireBaseOf</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a7d39e8ecc39ad89d9b47c1ccf9873a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireBaseOf</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a25819f337507625582babfb5ee0b1798</anchor>
      <arglist>(const Derived &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireSameType</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a0cdb8b8ed4fc7d006516dc22697edcc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>conditional.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00038.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>const T1</type>
      <name>cond</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa7df1a64bf1697e91502bce842535577</anchor>
      <arglist>(bool b, const T1 &amp;v1, const T2 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debugalign.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00041.html</filename>
    <includes id="a00044" name="debugalign.hh" local="no" imported="no">dune/common/debugalign.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultViolatedAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9f0c3f5a28263a8dd6cb81d9cfd8c929</anchor>
      <arglist>(const char *className, std::size_t expectedAlignment, const void *address)</arglist>
    </member>
    <member kind="function">
      <type>ViolatedAlignmentHandler &amp;</type>
      <name>violatedAlignmentHandler</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abeb716c21bff1ff9559bb62074d90e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violatedAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0e6c32c539889f324d46417dca3dfebe</anchor>
      <arglist>(const char *className, std::size_t expectedAlignment, const void *address)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debugalign.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00044.html</filename>
    <includes id="a00032" name="classname.hh" local="no" imported="no">dune/common/classname.hh</includes>
    <includes id="a00134" name="indices.hh" local="no" imported="no">dune/common/indices.hh</includes>
    <includes id="a00293" name="base.hh" local="no" imported="no">dune/common/simd/base.hh</includes>
    <includes id="a00296" name="defaults.hh" local="no" imported="no">dune/common/simd/defaults.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::AlignedBase</class>
    <class kind="class">Dune::AlignedNumberImpl::AlignedNumber</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; U, AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::AlignedNumberImpl</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>ac631559314e81560b9e4d2949a9c6f9e</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a29d7d4052b3f82e3ac4809355498a1a0</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00044.html</anchorfile>
      <anchor>a9b2955907ac5ff3c53a5e1dc45e10532</anchor>
      <arglist>(name)</arglist>
    </member>
    <member kind="typedef">
      <type>std::function&lt; void(const char *, std::size_t, const void *)&gt;</type>
      <name>ViolatedAlignmentHandler</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aeeddbd17746ee9ac74ce286741916e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ViolatedAlignmentHandler &amp;</type>
      <name>violatedAlignmentHandler</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abeb716c21bff1ff9559bb62074d90e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violatedAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0e6c32c539889f324d46417dca3dfebe</anchor>
      <arglist>(const char *className, std::size_t expectedAlignment, const void *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAligned</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abf9e4364af213c448afdf072eea1b913</anchor>
      <arglist>(const void *p, std::size_t align)</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber&lt; T, align &gt;</type>
      <name>aligned</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a154ffbe53dd8b81b0937ec08481e6b09</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a369805c961075a51b0298fbff650155f</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af9ad98aaa0d1920b38f0769ebb275bed</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP *</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a5df4e23ee85004987be0dee2b60e0695</anchor>
      <arglist>(/);DUNE_BINARY_OP(%</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP^</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ae6fc20617f688d76333e634bace7592c</anchor>
      <arglist>(&amp;);DUNE_BINARY_OP(|</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a438743c199b67aeaf239115b8ba8a9ff</anchor>
      <arglist>(&lt;&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a451ebcb71a523296e6d5e0cab6697491</anchor>
      <arglist>(&gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afe118c63f3b7cbc716481981479f7c9a</anchor>
      <arglist>(==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a8c7e5ab7757d7dc4759523b3b26db767</anchor>
      <arglist>(!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a75884149cef4b2c7f41a1abcc87326d4</anchor>
      <arglist>(&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a42befb28573540774f668c9ba1b7218b</anchor>
      <arglist>(&gt;=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP &amp;&amp;</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a7aa4346426caa250dbdfa8b9eb458378</anchor>
      <arglist>(||);#define DUNE_UNARY_FUNC(name) DUNE_UNARY_FUNC(abs</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a1da1a09be9ff64ea82a49df01150531e</anchor>
      <arglist>(acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9b65f15a860640a778c81158faf7b9dd</anchor>
      <arglist>(acosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a65f3b35ee461a2870128fce21644c843</anchor>
      <arglist>(asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a64efa6ef3f5b0ca99d2713c820828a19</anchor>
      <arglist>(asinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac239abd3f67dd027a9aa5d0b5ab9b504</anchor>
      <arglist>(atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ad756216412d0c460f4fbb97007774f12</anchor>
      <arglist>(atanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aa3e24758cdab3d0e22c008fe0266c46a</anchor>
      <arglist>(cbrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aaa830b4f4ddc9f6aeef73b2da5af9ea3</anchor>
      <arglist>(ceil)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6bd011b16d560ad67151615213e40f42</anchor>
      <arglist>(cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a78a73863744ce088860eb0468ecb1f35</anchor>
      <arglist>(cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>acb8846b7a8f37003560323643a86ee9a</anchor>
      <arglist>(erf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a177e638f500c324cd3bbff3f4e47ba56</anchor>
      <arglist>(erfc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6bf158e4f02c6072c4a1fff65a0909b9</anchor>
      <arglist>(exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a968f1fe780d60b24027490136bf4693b</anchor>
      <arglist>(exp2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afe2c96ecc7520f39be8a5a127130d618</anchor>
      <arglist>(expm1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aac4645a74a429726f37d145c1ce04317</anchor>
      <arglist>(fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>abe15ce11a76f0587d4fad75b6c20e856</anchor>
      <arglist>(floor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a7326b43be9d90c15632bfed71991e6bd</anchor>
      <arglist>(ilogb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aef8d40e2048a19503fd1963493d65f52</anchor>
      <arglist>(lgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a2747a77d801bde7a286aca367e179885</anchor>
      <arglist>(llrint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a2177eaf73e463d62ae28e089ab2dbf0c</anchor>
      <arglist>(llround)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac8ad46a782c1d0d61a35aaaa760b93e4</anchor>
      <arglist>(log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a45627df0086e0935eb55a8a71f9c7b53</anchor>
      <arglist>(log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ab1166c7e0e48252490e143a01f66b9f0</anchor>
      <arglist>(log1p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac484afd7cc106e83335d221f8550a728</anchor>
      <arglist>(log2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a0211d4cdbc91c5ead836cbe016201b69</anchor>
      <arglist>(logb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afbf91830816db942689be29b598bc831</anchor>
      <arglist>(lrint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a11784b1d00eb403de0bc0f1d8e4a2641</anchor>
      <arglist>(lround)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a263563632b1eadb36538534debe77cff</anchor>
      <arglist>(nearbyint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a20736e64d41fe10fddfdc73e6afb7e90</anchor>
      <arglist>(rint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a91236c05dc4596eb2e8a0c22eeb6ea38</anchor>
      <arglist>(round)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a917f492a75149b6f644fa4044785ab07</anchor>
      <arglist>(sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a4887317b830e9d47dae969958ecf84c1</anchor>
      <arglist>(sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aa590ed125d67b3296c40ec5e1cf7c9c3</anchor>
      <arglist>(sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af886641eb2068f6f890440728a1eedd3</anchor>
      <arglist>(tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9cf72cf5fe1887cf2ddda3267cb94f65</anchor>
      <arglist>(tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6ae9b816b587daebb49f4be30d443d2b</anchor>
      <arglist>(tgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>abe4fcac7d6e51e6989036e92e341b518</anchor>
      <arglist>(trunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a52695be60038e954feadf8a3b4b719ac</anchor>
      <arglist>(isfinite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a1877ee33e451d469a821af25ea294459</anchor>
      <arglist>(isinf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac8e0684810b836eab1c0a962139b0631</anchor>
      <arglist>(isnan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a5953980a5d9c915ac77175dd8823b2e7</anchor>
      <arglist>(isnormal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aead27a6a7fa9e12b3e4f9477fa87760c</anchor>
      <arglist>(signbit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a3d31f84473d04d0a66d43e0d73a3da68</anchor>
      <arglist>(real)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a63c18a33653d80d902d11126c4547e0d</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9fc132a0731c1b050016eaaccc02d0e0</anchor>
      <arglist>(const T &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a0fab1d925cf727704c04adfec150a2a2</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a10f66b4d8465c253379031564e8ba250</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6b1ccae3593fec2e37bf859b9c9eb886</anchor>
      <arglist>(const T &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>adffe14ab05b2df419ae75093f8449529</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber&lt; T, align &gt;</type>
      <name>cond</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7e7b894879f459e9da9bfa1d8af0663a</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;b, const AlignedNumber&lt; T, align &gt; &amp;v1, const AlignedNumber&lt; T, align &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae23cfd2094b38ad5889b56de92d1f019</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af97af7156507b5bbb3433e3f7e5a15a7</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1ed24891986fbb8fea5cfee4c23a7173</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a231fdc968bf4b24f6c52031edd1fca96</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a296f66754aaa4414985e2a8c6ded7527</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, AlignedNumber&lt; T, align &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2bd0478568a047692ca4cc795a2c9c50</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, const AlignedNumber&lt; T, align &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const AlignedNumber&lt; T, align &gt; &amp;</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a29d26ea99826519efddbd223d5b5da59</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, AlignedNumber&lt; bool, align &gt; mask, const AlignedNumber&lt; T, align &gt; &amp;ifTrue, const AlignedNumber&lt; T, align &gt; &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a19296f860eb9fda0a58ab8c43747370d</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, const AlignedNumber&lt; bool, align &gt; &amp;mask)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>debugAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a6560bc030b518cf2da62724367f6ccdc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>debugallocator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00047.html</filename>
  </compound>
  <compound kind="file">
    <name>debugstream.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00050.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="struct">Dune::greater_or_equal</class>
    <class kind="struct">Dune::common_bits</class>
    <class kind="class">Dune::DebugStreamError</class>
    <class kind="class">Dune::StreamWrap</class>
    <class kind="class">Dune::DebugStreamState</class>
    <class kind="class">Dune::DebugStream</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>DebugLevel</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga7b78ef57d1b77933ab277ebe66c79d94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>defaults.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00296.html</filename>
    <includes id="a00278" name="rangeutilities.hh" local="no" imported="no">dune/common/rangeutilities.hh</includes>
    <includes id="a00293" name="base.hh" local="no" imported="no">dune/common/simd/base.hh</includes>
    <includes id="a04328" name="simd/interface.hh" local="no" imported="no">dune/common/simd/interface.hh</includes>
    <includes id="a00380" name="typelist.hh" local="no" imported="no">dune/common/typelist.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga172c6bee6a07fdaf412ca0771084d117</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, std::size_t l, V v)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga2d92cc23bb0b95ca627fa2560c2f9006</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const V &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaacc1dbc07ddc0fd6b237ca18e213c3be</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const U &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>broadcast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac82cb295f767f7aece888fd9216db1b3</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gacd3b3b8cae27c30aa73e855afbe904d7</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gafb35651a7a1777d932462357552bb90c</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gab9dde84db30133b70a28c0b89399bc71</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gae87036ad8322cb0064cdd3bfad16ca69</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6850149b7bbe8eff67835ecfd8471f7d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaa272813526339482ae077b1a0e52a01e</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga537e92d4cfd4637707852c7f93c73c74</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6be36412c4ee50b1e5023f43e85a53ec</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga45f575aad94606a1a2afa3698abcee72</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mask&lt; V &gt;</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga739860dc7b3d5e5bffd0af618aa07f20</anchor>
      <arglist>(ADLTag&lt; 0, std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac968f40d2358486033fdc31464a2df7f</anchor>
      <arglist>(ADLTag&lt; 0, !std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga8ae87f60e149f0ab44b71fc6624da25d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga77595bdf5b1cfe2377baa16cc52b1cee</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga172c6bee6a07fdaf412ca0771084d117</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, std::size_t l, V v)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga2d92cc23bb0b95ca627fa2560c2f9006</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const V &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaacc1dbc07ddc0fd6b237ca18e213c3be</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const U &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>broadcast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac82cb295f767f7aece888fd9216db1b3</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gacd3b3b8cae27c30aa73e855afbe904d7</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gafb35651a7a1777d932462357552bb90c</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gab9dde84db30133b70a28c0b89399bc71</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gae87036ad8322cb0064cdd3bfad16ca69</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6850149b7bbe8eff67835ecfd8471f7d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaa272813526339482ae077b1a0e52a01e</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga537e92d4cfd4637707852c7f93c73c74</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6be36412c4ee50b1e5023f43e85a53ec</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga45f575aad94606a1a2afa3698abcee72</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mask&lt; V &gt;</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga739860dc7b3d5e5bffd0af618aa07f20</anchor>
      <arglist>(ADLTag&lt; 0, std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac968f40d2358486033fdc31464a2df7f</anchor>
      <arglist>(ADLTag&lt; 0, !std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga8ae87f60e149f0ab44b71fc6624da25d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga77595bdf5b1cfe2377baa16cc52b1cee</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>densematrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00053.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00032" name="classname.hh" local="no" imported="no">dune/common/classname.hh</includes>
    <includes id="a00059" name="deprecated.hh" local="no" imported="no">dune/common/deprecated.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00164" name="math.hh" local="no" imported="no">dune/common/math.hh</includes>
    <includes id="a00263" name="precision.hh" local="no" imported="no">dune/common/precision.hh</includes>
    <includes id="a04337" name="simd/simd.hh" local="no" imported="no">dune/common/simd/simd.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00287" name="scalarvectorview.hh" local="no" imported="no">dune/common/scalarvectorview.hh</includes>
    <class kind="struct">Dune::FieldTraits&lt; DenseMatrix&lt; M &gt; &gt;</class>
    <class kind="class">Dune::FMatrixError</class>
    <class kind="class">Dune::DenseMatrix</class>
    <namespace>Dune</namespace>
    <namespace>Dune::DenseMatrixHelp</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multAssign</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a4b9cee31bcd8d5a2d4caaa6073c7f7cb</anchor>
      <arglist>(const DenseMatrix&lt; MAT &gt; &amp;matrix, const DenseVector&lt; V1 &gt; &amp;x, DenseVector&lt; V2 &gt; &amp;ret)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga46978987490dbf404514b63b984be43d</anchor>
      <arglist>(std::ostream &amp;s, const DenseMatrix&lt; MAT &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>densevector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00056.html</filename>
    <includes id="a00119" name="genericiterator.hh" local="yes" imported="no">genericiterator.hh</includes>
    <includes id="a00107" name="ftraits.hh" local="yes" imported="no">ftraits.hh</includes>
    <includes id="a00167" name="matvectraits.hh" local="yes" imported="no">matvectraits.hh</includes>
    <includes id="a00266" name="promotiontraits.hh" local="yes" imported="no">promotiontraits.hh</includes>
    <includes id="a00068" name="dotproduct.hh" local="yes" imported="no">dotproduct.hh</includes>
    <includes id="a00029" name="boundschecking.hh" local="yes" imported="no">boundschecking.hh</includes>
    <class kind="struct">Dune::FieldTraits&lt; DenseVector&lt; V &gt; &gt;</class>
    <class kind="class">Dune::DenseIterator</class>
    <class kind="class">Dune::DenseVector</class>
    <namespace>Dune</namespace>
    <namespace>Dune::fvmeta</namespace>
  </compound>
  <compound kind="file">
    <name>deprecated.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00059.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_DEPRECATED</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab56b68b6f47fe5b4f2bbd28d2227ca4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_DEPRECATED_MSG</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga98dcbe0cf30aec44df67e481fd82414c</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_NO_DEPRECATED_BEGIN</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga74d440d098178dc5a4adea8f7c160e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_NO_DEPRECATED_END</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga664ae9266c2a074c71746e68aaa8eb6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>diagonalmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00062.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00053" name="densematrix.hh" local="no" imported="no">dune/common/densematrix.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00098" name="fmatrix.hh" local="no" imported="no">dune/common/fmatrix.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00119" name="genericiterator.hh" local="no" imported="no">dune/common/genericiterator.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::DiagonalMatrix</class>
    <class kind="struct">Dune::FieldTraits&lt; DiagonalMatrix&lt; K, n &gt; &gt;</class>
    <class kind="class">Dune::DiagonalMatrixWrapper</class>
    <class kind="class">Dune::DiagonalRowVectorConst</class>
    <class kind="class">Dune::DiagonalRowVector</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="class">Dune::ContainerWrapperIterator</class>
    <class kind="struct">Dune::DenseMatrixAssigner&lt; DenseMatrix, DiagonalMatrix&lt; field, N &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>documentation.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00065.html</filename>
    <class kind="struct">Dune::ImplementationDefined</class>
    <namespace>Dune</namespace>
    <member kind="enumvalue">
      <name>implementationDefined</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga587081ae4568cb94ed43b5dbaba7870ea7de84f476fd1d9f55ac5e2c25f252c3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dotproduct.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00068.html</filename>
    <includes id="a00107" name="ftraits.hh" local="yes" imported="no">ftraits.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="yes" imported="no">typetraits.hh</includes>
    <class kind="struct">Dune::IsVector</class>
    <class kind="struct">Dune::IsVector&lt; T, std::void_t&lt; typename T::field_type &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>dot</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga06a55ef13638a2a56a42473b812498dd</anchor>
      <arglist>(const A &amp;a, const B &amp;b) -&gt; typename std::enable_if&lt;!IsVector&lt; A &gt;::value &amp;&amp;!std::is_same&lt; typename FieldTraits&lt; A &gt;::field_type, typename FieldTraits&lt; A &gt;::real_type &gt; ::value, decltype(conj(a) *b)&gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dotT</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa2d28f67ec2d74f14ec3ce3f9c27c221</anchor>
      <arglist>(const A &amp;a, const B &amp;b) -&gt; decltype(a *b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dynmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00071.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00077" name="dynvector.hh" local="no" imported="no">dune/common/dynvector.hh</includes>
    <includes id="a00053" name="densematrix.hh" local="no" imported="no">dune/common/densematrix.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="class">Dune::DynamicMatrix</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dynmatrixev.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00074.html</filename>
    <includes id="a00071" name="dynmatrix.hh" local="yes" imported="no">dynmatrix.hh</includes>
    <includes id="a00104" name="fmatrixev.hh" local="yes" imported="no">fmatrixev.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::DynamicMatrixHelp</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesNonSym</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>abe8e51282658775085e3959963e2187a</anchor>
      <arglist>(const DynamicMatrix&lt; K &gt; &amp;matrix, DynamicVector&lt; C &gt; &amp;eigenValues, std::vector&lt; DynamicVector&lt; K &gt;&gt; *eigenVectors=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dynvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00077.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="yes" imported="no">boundschecking.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="yes" imported="no">exceptions.hh</includes>
    <includes id="a00119" name="genericiterator.hh" local="yes" imported="no">genericiterator.hh</includes>
    <includes id="a00056" name="densevector.hh" local="yes" imported="no">densevector.hh</includes>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="class">Dune::DynamicVector</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>enumset.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00080.html</filename>
    <class kind="class">Dune::EmptySet</class>
    <class kind="class">Dune::AllSet</class>
    <class kind="class">Dune::EnumItem</class>
    <class kind="class">Dune::EnumRange</class>
    <class kind="class">Dune::NegateSet</class>
    <class kind="class">Dune::Combine</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga853a8a6088e8bc36612e0d1a14f1d0b4</anchor>
      <arglist>(std::ostream &amp;os, const EnumItem&lt; TA, i &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1e9ea5bea2c22bdd2808a54ec71458a1</anchor>
      <arglist>(std::ostream &amp;os, const EnumRange&lt; TA, from, to &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Combine&lt; TI1, TI2, typename TI1::Type &gt;</type>
      <name>combine</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga698bedb0f72197e6d28d9c77068d7e05</anchor>
      <arglist>([[maybe_unused]] const TI1 &amp;set1, [[maybe_unused]] const TI2 &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga63adbddbe290df558538dc462fd43711</anchor>
      <arglist>(std::ostream &amp;os, const Combine&lt; TI1, TI2, T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>exceptions.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00083.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>exceptions.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00086.html</filename>
    <class kind="class">Dune::Exception</class>
    <class kind="struct">Dune::ExceptionHook</class>
    <class kind="class">Dune::IOError</class>
    <class kind="class">Dune::MathError</class>
    <class kind="class">Dune::RangeError</class>
    <class kind="class">Dune::NotImplemented</class>
    <class kind="class">Dune::SystemError</class>
    <class kind="class">Dune::OutOfMemoryError</class>
    <class kind="class">Dune::InvalidStateException</class>
    <class kind="class">Dune::ParallelError</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_THROW</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad7fce127d6eaabe773adbc409514f21e</anchor>
      <arglist>(E, m)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gae09dcfbbe07912030b1413ad5ee706c6</anchor>
      <arglist>(std::ostream &amp;stream, const Exception &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filledarray.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00089.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>constexpr std::array&lt; T, n &gt;</type>
      <name>filledArray</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf3b0a934939d7a49b8ec4e3e28c21bc5</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>float_cmp.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00092.html</filename>
    <includes id="a00095" name="float_cmp.hh" local="yes" imported="no">float_cmp.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <class kind="struct">Dune::FloatCmp::EpsilonType</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; std::vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; FieldVector&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, relativeWeak &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, relativeStrong &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, absolute &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::FloatCmp</namespace>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga50c93e693f102298c61ecb14758f8d5b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga1d1eabc465f54e3c3dc8dc38189d0ddd</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae7ebcba7fc2fdf4497eacc57f4971eda</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gacca725b16b35b04c4eea0c4ee21757de</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae8eb5c5d458b2556d5d685bb65161aef</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae9bad71c0f79d8f287fa419dd8bd565b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a20989b2c0619b31d8a15c85aae184d32</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>af10cd25d78f35677c8d588e924792cff</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a15ac4ddae1d906c2ea6c6aa0e16c0e41</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ac752c032096de736aa97b2c6cbcd5190</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a9c439fbc2fe166ff75f97f69fb5aee9d</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a28bc28618b41c234fb9c83284c6a9d52</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga510d97be4644ccab5db0b674d79633c6</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>aa1c6178f9e297570109a68b93e95a3ef</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a1014d75e7683b011cabd18f3ab8d2499</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga78eaf86b21236f5c55336724e911da08</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>aa47496c22fdda340c3f4d0d1ac0b56a1</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a07975dfac981cd91b7a159e57a3c1d5d</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>float_cmp.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00095.html</filename>
    <includes id="a00092" name="float_cmp.cc" local="yes" imported="no">float_cmp.cc</includes>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon</class>
    <class kind="class">Dune::FloatCmpOps</class>
    <namespace>Dune</namespace>
    <namespace>Dune::FloatCmp</namespace>
    <member kind="enumeration">
      <type></type>
      <name>CmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga4aeb759ed9de8b477a155492aeb2789b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeWeak</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789bacfb0348876cc64404ec31a6ca4b889ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeStrong</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba244e679dffd35be3f0b6cdacd4cd53b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>absolute</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789badaf8946c7ffe8f697b16515f9d880d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultCmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba07502cff1e6a0857c51bec553f241697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga8507e971c45243aed2c4de1b3736ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardZero</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a01b681db891f7b67fa52a4c2193eea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardInf</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0ba1a9b8cce0034f6b0a6bef4b1eb670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>downward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a6074c993d9019e8a31f30649602e21b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0e10271b704ebf42395156318e3442bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultRoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a9d0bc0cf3b15252ab74e9cbeddc805c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga50c93e693f102298c61ecb14758f8d5b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga1d1eabc465f54e3c3dc8dc38189d0ddd</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae7ebcba7fc2fdf4497eacc57f4971eda</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gacca725b16b35b04c4eea0c4ee21757de</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae8eb5c5d458b2556d5d685bb65161aef</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae9bad71c0f79d8f287fa419dd8bd565b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga510d97be4644ccab5db0b674d79633c6</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga78eaf86b21236f5c55336724e911da08</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fmatrix.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00098.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00053" name="densematrix.hh" local="no" imported="no">dune/common/densematrix.hh</includes>
    <includes id="a00263" name="precision.hh" local="no" imported="no">dune/common/precision.hh</includes>
    <includes id="a00266" name="promotiontraits.hh" local="no" imported="no">dune/common/promotiontraits.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00104" name="fmatrixev.hh" local="yes" imported="no">fmatrixev.hh</includes>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="class">Dune::FieldMatrix</class>
    <namespace>Dune</namespace>
    <namespace>Dune::FMatrixHelp</namespace>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a9f70ac3f14f482a99d4e01ada277d5c1</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a67155815b034773129d21bfe3992f0b6</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a27757ac69a505e206e82b5b184333f15</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a4944da58b2dcefc979ea0fccf87971c4</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a8569be33ba4985b1ceda0e3bc05aadd8</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a6ae34a44709f5ad6bae281284d08bc8a</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a95f823a566af9fca2f8f4add5bea7bc0</anchor>
      <arglist>(const FieldMatrix&lt; K, m, n &gt; &amp;A, const FieldMatrix&lt; K, n, p &gt; &amp;B, FieldMatrix&lt; K, m, p &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multTransposedMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aed0b39ddfc6a99aed9241609b0bbfbc0</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, FieldMatrix&lt; K, cols, cols &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multAssignTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aef7fb29fd8ec4371bbca42d7aaa15ddc</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, rows &gt; &amp;x, FieldVector&lt; K, cols &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, rows &gt;</type>
      <name>mult</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a6b35fcd36fc7c4586e6045d0d22929b8</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, cols &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, cols &gt;</type>
      <name>multTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aa58360e4f8dda8d4dd9406f867b208a0</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, rows &gt; &amp;x)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fmatrixev.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00101.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_FMATRIXEIGENVALUES_CC</name>
      <anchorfile>a00101.html</anchorfile>
      <anchor>afa3d4fc0f9c478d5f00cc7586b9dad48</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fmatrixev.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00104.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00098" name="fmatrix.hh" local="no" imported="no">dune/common/fmatrix.hh</includes>
    <includes id="a00164" name="math.hh" local="no" imported="no">dune/common/math.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::FMatrixHelp</namespace>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValues</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a86eafff72a6c52bec8aa92e191f08887</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesVectors</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ae35eb55b361af2d69d419f3b6ecf4d2c</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues, FieldMatrix&lt; K, dim, dim &gt; &amp;eigenVectors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesLapack</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a96fe2783815b8f97773279ed069cf1d8</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesVectorsLapack</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afe77be4b948169fdcebb318248023920</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues, FieldMatrix&lt; K, dim, dim &gt; &amp;eigenVectors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesNonSym</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a72135a64a9d7252dbcf26664c5810cce</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; C, dim &gt; &amp;eigenValues)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ftraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00107.html</filename>
    <class kind="struct">Dune::FieldTraits</class>
    <class kind="struct">Dune::FieldTraits&lt; const T &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; std::complex&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; T[N] &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; std::vector&lt; T &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>function.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00110.html</filename>
    <includes id="a00059" name="deprecated.hh" local="no" imported="no">dune/common/deprecated.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="yes" imported="no">typetraits.hh</includes>
    <class kind="class">Dune::Function</class>
    <class kind="struct">Dune::Function::Traits</class>
    <class kind="class">Dune::VirtualFunction</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_FUNCTION_HH</name>
      <anchorfile>a00110.html</anchorfile>
      <anchor>aeca4539848c4c95eebbb2389446432c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Impl::LambdaVirtualFunction&lt; Domain, Range, std::decay_t&lt; F &gt; &gt;</type>
      <name>makeVirtualFunction</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d326289f3fb37ecc5f30dd0cab45bb6</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>functional.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00329.html</filename>
    <class kind="struct">Dune::Std::identity</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
  </compound>
  <compound kind="file">
    <name>future.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00185.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="class">Dune::InvalidFutureException</class>
    <class kind="class">Dune::Future</class>
    <class kind="class">Dune::PseudoFuture</class>
    <class kind="class">Dune::PseudoFuture&lt; void &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>fvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00113.html</filename>
    <includes id="a00383" name="typetraits.hh" local="yes" imported="no">typetraits.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="yes" imported="no">exceptions.hh</includes>
    <includes id="a00107" name="ftraits.hh" local="yes" imported="no">ftraits.hh</includes>
    <includes id="a00056" name="densevector.hh" local="yes" imported="no">densevector.hh</includes>
    <includes id="a00029" name="boundschecking.hh" local="yes" imported="no">boundschecking.hh</includes>
    <includes id="a00164" name="math.hh" local="no" imported="no">dune/common/math.hh</includes>
    <includes id="a00266" name="promotiontraits.hh" local="no" imported="no">dune/common/promotiontraits.hh</includes>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE &gt;, SIZE &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE1 &gt;, SIZE &gt;</class>
    <class kind="class">Dune::FieldVector</class>
    <namespace>Dune</namespace>
    <namespace>Dune::MathOverloads</namespace>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ab33f61f8962056b6619b0d5b7edceefd</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a5312822f8a17821bbd4fdd8671528d88</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a4daa32207a54271c8d4496a7fe7ef610</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>abe1edb9dee17e22e019dcc99fda44e7f</anchor>
      <arglist>(const FieldVector&lt; K, 1 &gt; &amp;b, const FieldVector&lt; K, 1 &gt; &amp;c, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gcd.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00116.html</filename>
    <class kind="struct">Dune::Gcd</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>genericiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00119.html</filename>
    <includes id="a00146" name="iteratorfacades.hh" local="no" imported="no">dune/common/iteratorfacades.hh</includes>
    <class kind="struct">Dune::const_reference</class>
    <class kind="struct">Dune::const_reference&lt; const R &gt;</class>
    <class kind="struct">Dune::const_reference&lt; R &amp; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; const R &amp; &gt;</class>
    <class kind="struct">Dune::mutable_reference</class>
    <class kind="struct">Dune::mutable_reference&lt; const R &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; R &amp; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; const R &amp; &gt;</class>
    <class kind="class">Dune::GenericIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gmpfield.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00122.html</filename>
    <includes id="a00266" name="promotiontraits.hh" local="no" imported="no">dune/common/promotiontraits.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::GMPField</class>
    <class kind="struct">Dune::IsNumber&lt; GMPField&lt; precision &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision1 &gt;, GMPField&lt; precision2 &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, GMPField&lt; precision &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, T &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; T, GMPField&lt; precision &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hash.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00125.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="struct">Dune::hash</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_DEFINE_HASH</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a19447db8894b6d86b6b7ef0218694820</anchor>
      <arglist>(template_args, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_HASH_TEMPLATE_ARGS</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>ad88c05071e8aafc3796b6d6238900697</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_HASH_TYPE</name>
      <anchorfile>a00125.html</anchorfile>
      <anchor>a48ea57ba3831fb7e8bbea1d8e1d27f4f</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_combine</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa4f0199c109bde1698fb5279a414d01a</anchor>
      <arglist>(std::size_t &amp;seed, const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>hash_range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a6e45658b7c63f546c3c0897608d9d23d</anchor>
      <arglist>(It first, It last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab09a051cb1381c71f6c91032cd2ba754</anchor>
      <arglist>(std::size_t &amp;seed, It first, It last)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>hybridutilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00128.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00386" name="typeutilities.hh" local="no" imported="no">dune/common/typeutilities.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00134" name="indices.hh" local="no" imported="no">dune/common/indices.hh</includes>
    <includes id="a00014" name="assertandreturn.hh" local="no" imported="no">dune/common/assertandreturn.hh</includes>
    <includes id="a00278" name="rangeutilities.hh" local="no" imported="no">dune/common/rangeutilities.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Hybrid</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga0df72c8cdbb69ecf6da9483d5cdac1de</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>elementAt</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gac85f9d601905a3d0001edd94bd67b2d7</anchor>
      <arglist>(Container &amp;&amp;c, Index &amp;&amp;i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaacd5d1927ffa1d96adf1db1fdbaba28c</anchor>
      <arglist>(const Begin &amp;begin, const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1a44b7c50255662ec8d3553925ce9b46</anchor>
      <arglist>(const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>forEach</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga2df9e60e21091ed59c4a636b99abbedc</anchor>
      <arglist>(Range &amp;&amp;range, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>accumulate</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaf41421cb94c1a0a3d334eeb409701620</anchor>
      <arglist>(Range &amp;&amp;range, T value, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaac1691e6004f0428bdacab6407152807</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc, ElseFunc &amp;&amp;elseFunc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga044cfa54089ac3509d0a3a24b85ef42b</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>equals</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1f6da8119c5af45fe0413b9f75ef9861</anchor>
      <arglist>(T1 &amp;&amp;t1, T2 &amp;&amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga57705e4850c91cd0a92b452384bdc0a0</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches, ElseBranch &amp;&amp;elseBranch)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaa3c378c2ae090a6b608ec667486ede4b</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indent.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00131.html</filename>
    <class kind="class">Dune::Indent</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac282bd5d47ea4d2daf9523fb5de848a9</anchor>
      <arglist>(std::ostream &amp;s, const Indent &amp;indent)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indexset.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00188.html</filename>
    <includes id="a00011" name="arraylist.hh" local="no" imported="no">dune/common/arraylist.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00197" name="localindex.hh" local="yes" imported="no">localindex.hh</includes>
    <class kind="class">Dune::IndexPair</class>
    <class kind="class">Dune::InvalidIndexSetState</class>
    <class kind="class">Dune::ParallelIndexSet</class>
    <class kind="class">Dune::ParallelIndexSet::iterator</class>
    <class kind="class">Dune::GlobalLookupIndexSet</class>
    <class kind="struct">Dune::LocalIndexComparator</class>
    <class kind="struct">Dune::IndexSetSortFunctor</class>
    <namespace>Dune</namespace>
    <member kind="enumeration">
      <type></type>
      <name>ParallelIndexSetState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1b1dd66b80964351e68f44bddb32593e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUND</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea30f779eddf23499c322b692257ae7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESIZE</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea2fbc0ce9b92442e69a405a452f2ef416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7fcd5b444a9e60cfdc21f7d0cfd22250</anchor>
      <arglist>(std::ostream &amp;os, const IndexPair&lt; TG, TL &gt; &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7795b290702a59497007270c46e2b8c6</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3a50aa86c8ff96eee7ef68200531326d</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0d9a1c3873a538aa66c22b03b406db87</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0bc63043e58d66643b64cbd6b08dfb82</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6cdf9614911aa5cd70ed58663de013c2</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5c5245f4fd0352faad94ca8e9c1f6c6f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga239e646b27f7f35ac944aebb59380913</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadf0b39a244a69d9e7f71811f960a5728</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga912a9eba5f4d34e7e50ef4335b7ba108</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab4b337bd4e613e88381306db889e811f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad6d5923b72e3214d9f20349b722ea874</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7d670d228f6635f587d21ef117951fd9</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac377e14b5944471054bdb0012008393b</anchor>
      <arglist>(std::ostream &amp;os, const ParallelIndexSet&lt; TG, TL, N &gt; &amp;indexSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indices.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00134.html</filename>
    <includes id="a00152" name="keywords.hh" local="no" imported="no">dune/common/keywords.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Indices</namespace>
    <member kind="typedef">
      <type>std::integral_constant&lt; std::size_t, i &gt;</type>
      <name>index_constant</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gacf764509e6dae37477f5ad09b5ca3467</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>unpackIntegerSequence</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0959a949c8385a1b41669380e439d5d8</anchor>
      <arglist>(F &amp;&amp;f, std::integer_sequence&lt; I, i... &gt; sequence)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 0 &gt;</type>
      <name>_0</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2f3de78a2872dfc7652b48b42c537eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 1 &gt;</type>
      <name>_1</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga50d06c69be6f5a74e319d34064d8bc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 2 &gt;</type>
      <name>_2</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac405682eeaf6a8a64648dd85af7e84fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 3 &gt;</type>
      <name>_3</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6b1d6527c4b8dcf500d6c7c34d5eeb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 4 &gt;</type>
      <name>_4</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf50cd5ff4b29a43100a00a6e7cc9b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 5 &gt;</type>
      <name>_5</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab875313e016428e2498da7fd90f1949d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 6 &gt;</type>
      <name>_6</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf220e1bb42d603f557cbc9a9331830b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 7 &gt;</type>
      <name>_7</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2ca75d1d25482664a74ee83e8ce0b5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 8 &gt;</type>
      <name>_8</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1c19945beef1b5f54065de84e7a8641f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 9 &gt;</type>
      <name>_9</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga3419af1bbd8440b0e54d041f2a8c2b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 10 &gt;</type>
      <name>_10</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac31c1f8aded673ba67174158bd5fa33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 11 &gt;</type>
      <name>_11</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac852bc693ac4fbdebac5196bcdc9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 12 &gt;</type>
      <name>_12</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga70c227071a19ea12597ebde7abc8d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 13 &gt;</type>
      <name>_13</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab861b496b29bb9d1f32b4010434e003d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 14 &gt;</type>
      <name>_14</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga46aedfe3d5090a00cffcb7a652013a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 15 &gt;</type>
      <name>_15</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a8ff2bb0e356684b14a2c5e3c4d60bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 16 &gt;</type>
      <name>_16</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga16898b601989e869b270c43c173de953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 17 &gt;</type>
      <name>_17</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1f450218a4ab129a04ae59bac7c57a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 18 &gt;</type>
      <name>_18</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab50e00b1160125118d3a3f36f0d82654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 19 &gt;</type>
      <name>_19</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae846500876d7d06fe7f53c03b5c23fbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>indicessyncer.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00191.html</filename>
    <includes id="a00188" name="indexset.hh" local="yes" imported="no">indexset.hh</includes>
    <includes id="a00227" name="remoteindices.hh" local="yes" imported="no">remoteindices.hh</includes>
    <includes id="a00350" name="stdstreams.hh" local="no" imported="no">dune/common/stdstreams.hh</includes>
    <includes id="a00323" name="sllist.hh" local="no" imported="no">dune/common/sllist.hh</includes>
    <class kind="class">Dune::IndicesSyncer</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf61fa30bf15e87a0f910b9068f775067</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae5b7bd4e69ee01360e666f12913c1459</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i1, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga058ac87cbdd5c6c4bf3166e8f55efa30</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga94296b1fafb04cd392611a43968df582</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga300a4a465d5bb251de3953c682d314cb</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga114537d071365593e8ec0ac11de6ac31</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeGlobalIndicesOfRemoteIndices</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac603bb313a217401041e4afc6fe4fa3a</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, const RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33d784101a8baf32ce462c484a90674c</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices, const T &amp;indexSet)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parallel/interface.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a04325.html</filename>
    <includes id="a00227" name="remoteindices.hh" local="yes" imported="no">remoteindices.hh</includes>
    <includes id="a00080" name="enumset.hh" local="no" imported="no">dune/common/enumset.hh</includes>
    <class kind="class">Dune::InterfaceBuilder</class>
    <class kind="class">Dune::InterfaceBuilder::RemoteIndicesStateError</class>
    <class kind="class">Dune::InterfaceInformation</class>
    <class kind="class">Dune::Interface</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae1640f7fd69aac13c49a1750bdfa8ac5</anchor>
      <arglist>(std::ostream &amp;os, const Interface &amp;interface)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simd/interface.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a04328.html</filename>
    <includes id="a00293" name="base.hh" local="no" imported="no">dune/common/simd/base.hh</includes>
    <includes id="a00380" name="typelist.hh" local="no" imported="no">dune/common/typelist.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <member kind="typedef">
      <type>typename Overloads::ScalarType&lt; std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Scalar</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf7f6f3418836afcdb2c033509fd2eb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Overloads::RebindType&lt; std::decay_t&lt; S &gt;, std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Rebind</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga8d4752fe47def6075b211544a932c709</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gac6a0cf43eb7664581bd8a6954d7ff305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaca5433c99a350b973623f94491e43a86</anchor>
      <arglist>(std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gab5615170452d6ad3d87596cafef62f7c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>broadcast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa0d1652bc61cae3351079ca5510e8d4f</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1a04d18cec7c2f206e9de49926bfe5a8</anchor>
      <arglist>(M &amp;&amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaed055bc5f93bbb34cee35cdcba278b3d</anchor>
      <arglist>(bool mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa6c890aa2ed0432984358e6e0b487b3f</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gafa18ecd1517a0f3c3ae83c6a6b5e1559</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17639369fac8b6c516ebf2125849d0f4</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga54577fa7b2752b55d6efd05878ca1e24</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaaee5c9c3caa23996397af767ca52845e</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf404687904c5a04c3ab453b9b19c1562</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga88727c2f832123b04cd014d1d6c5f746</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17a41b619cc1d658d70bc4b643ac778d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga3e3f45a22ca7244829e9adf246ac4a9d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga19a63bc3591ee6c8fd5706c9be4380bf</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf74d4b9a4722c8de326046b89e2acef7</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="typedef">
      <type>Rebind&lt; bool, V &gt;</type>
      <name>Mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gad41c8f8908cdade89370a34de31ace54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1cb6eae7fc34d3c9258a35eb318f6e18</anchor>
      <arglist>(const V &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interfaces.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00137.html</filename>
    <class kind="struct">Dune::Cloneable</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>io.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00299.html</filename>
    <includes id="a00278" name="rangeutilities.hh" local="no" imported="no">dune/common/rangeutilities.hh</includes>
    <includes id="a04337" name="simd/simd.hh" local="no" imported="no">dune/common/simd/simd.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::SimdImpl::Inserter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::SimdImpl</namespace>
    <namespace>Dune::Simd</namespace>
    <member kind="function">
      <type>Inserter&lt; V &gt;</type>
      <name>io</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a0b30c1f0e354e3151c4a3ae4e139aeb9</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Simd::Scalar&lt; V &gt;</type>
      <name>io</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ab6194cae09c86c497696459836e08628</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vio</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga5f024733517533308b22bd0b9a5e0820</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>io</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga47000d8c79bf7ab0548867bc01a56cac</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vio</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga5f024733517533308b22bd0b9a5e0820</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>io</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga47000d8c79bf7ab0548867bc01a56cac</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ios_state.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00140.html</filename>
    <includes id="a00143" name="ios_state.hh" local="no" imported="no">dune/common/ios_state.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>ios_state.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00143.html</filename>
    <class kind="class">Dune::ios_base_all_saver</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>iteratorfacades.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00146.html</filename>
    <includes id="a00383" name="typetraits.hh" local="yes" imported="no">typetraits.hh</includes>
    <class kind="class">Dune::ForwardIteratorFacade</class>
    <class kind="class">Dune::BidirectionalIteratorFacade</class>
    <class kind="class">Dune::RandomAccessIteratorFacade</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gad89f7fc265d9bd63c5b5a8da6748d8af</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga1369bc3ae1876892c6567eff7987620f</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; T2, T1 &gt;::value, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga0a147b2ec114b90e57366216029b40bc</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; T1, T2 &gt;::value &amp;&amp;!std::is_convertible&lt; T2, T1 &gt;::value, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ga0a147b2ec114b90e57366216029b40bc</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gace8cd0fee28b999a64ce7a75ca582cae</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga639a6e346454c1d6635f21ea15af4032</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga78d64b70022a4945cb797908fb3f6d65</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gaa5760aff14000ebe9042e042b31db949</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadf0c29cb2d498e30122d48b15db41f7f</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga4cd2214e489cbe140c0394a24f7d77fa</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadd0f438316b237180be4c98e915da261</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, D &gt;::type</type>
      <name>operator-</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga567e9701961fedd3a613c9f6d3b68b5d</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iteratorrange.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00149.html</filename>
    <class kind="class">Dune::IteratorRange</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>keywords.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00152.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_INLINE_VARIABLE</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>afd8117b5ac0497a09e3bdecafbf518a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_GENERALIZED_CONSTEXPR</name>
      <anchorfile>a00152.html</anchorfile>
      <anchor>a97b632609f7c06170ec5e2be5729c4f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lcm.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00155.html</filename>
    <class kind="struct">Dune::Lcm</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>localindex.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00197.html</filename>
    <class kind="class">Dune::LocalIndex</class>
    <namespace>Dune</namespace>
    <member kind="enumeration">
      <type></type>
      <name>LocalIndexState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4f24bf6f596bf963429e084ecf3a0835</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALID</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835a10e7469c306a6a1cc9c8c89ce65b09f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETED</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835ab8c498280a429843d8eaa93ddfb8fb02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>loop.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00302.html</filename>
    <includes id="a00164" name="math.hh" local="no" imported="no">dune/common/math.hh</includes>
    <includes id="a04337" name="simd/simd.hh" local="no" imported="no">dune/common/simd/simd.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::LoopSIMD</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; U, LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::IsNumber&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
    <namespace>Dune::MathOverloads</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_PREFIX_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ab2eb0e852e28f54bf511377690ba664a</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_UNARY_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ad0a3db4ac4d313e5df2f650176a7f47a</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_POSTFIX_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a5d85dc28387ccfb44c53064ad236c22c</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ad721241fb510adc8e57604f6b9d6db18</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a0302b46e03078ba45bebdde05a538fa1</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_BITSHIFT_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>aa267e22530058c5e240294d1fe9b72c5</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a8b0fe90d07a9419c0c5fa7edf441cc98</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_BOOLEAN_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a4edb401d8c39ee4047c4157062238926</anchor>
      <arglist>(SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>ab733fd44275677e226938c6366d0e1dc</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>acd61d806a793ead4a570ab5edf47857a</anchor>
      <arglist>(expr, returnType)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_STD_UNARY_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a811ee59270233c3c40d1e4c52d3ee310</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_LOOP_STD_BINARY_OP</name>
      <anchorfile>a00302.html</anchorfile>
      <anchor>a7f745d4f9480ed07bfe69af914816b22</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a87b977cae5e0e694b4b108bc1cab9434</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa97415d63ec08e63ea87832efe86ddb4</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BINARY_OP *</type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abed8fafa25b2552e5a1b73ab0b48c87d</anchor>
      <arglist>(/);DUNE_SIMD_LOOP_BINARY_OP(%</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BINARY_OP &amp;</type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad9fb3b7e66eca6930e91efcbee98b201</anchor>
      <arglist>(|);DUNE_SIMD_LOOP_BINARY_OP(^</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BITSHIFT_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab1786e12e4c3efe8a6117ddd99a8724a</anchor>
      <arglist>(&lt;&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BITSHIFT_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a250563e257d03a8336c3370f5caeaf84</anchor>
      <arglist>(&gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aae72f618cfe280b17a988b83395f8927</anchor>
      <arglist>(&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a86b3da3ac3b884cf28ba5dc3dfee5652</anchor>
      <arglist>(&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a16bec43001a47bb4b3d6a78aec88476b</anchor>
      <arglist>(&gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aafcd80f1669dd6eee03a6ff6bbf85150</anchor>
      <arglist>(!=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BOOLEAN_OP &amp;&amp;</type>
      <name>DUNE_SIMD_LOOP_BOOLEAN_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a36c74f8a0a2706073686260f2dc63012</anchor>
      <arglist>(||);template&lt; class T, std::size_t S, std::size_t A &gt; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const LoopSIMD&lt; T, S, A &gt; &amp;v</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a452fad355c3eacb7c067f28043d0752f</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, LoopSIMD&lt; T, S, A &gt; &amp;&amp;v) -&gt; decltype(std::move(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()])))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2177e01a1aeeea549723fd79450b0feb</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, const LoopSIMD&lt; T, S, A &gt; &amp;v) -&gt; decltype(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()]))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a106fb2169a224cf0c3c1d49b5fd00e7b</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, LoopSIMD&lt; T, S, A &gt; &amp;v) -&gt; decltype(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()]))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac50147955144b79ec9a88b225e2e4e8a</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, Simd::Mask&lt; LoopSIMD&lt; T, S, AM &gt;&gt; mask, LoopSIMD&lt; T, S, AD &gt; ifTrue, LoopSIMD&lt; T, S, AD &gt; ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7969a915566d89d2c44b15048ba30042</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; bool, Simd::Scalar&lt; M &gt; &gt;::value &amp;&amp;Simd::lanes&lt; M &gt;()==Simd::lanes&lt; LoopSIMD&lt; T, S, A &gt; &gt;()&gt;, M mask, LoopSIMD&lt; T, S, A &gt; ifTrue, LoopSIMD&lt; T, S, A &gt; ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac08bce3140146a37b6aad7176fa9c210</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aaca8a2c3303140cff486e9c8df5cc884</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0b596e579ef4073d562c67696fb8f7b8</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aca164af00221ebcbd6c683845d3f4829</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa6e5e1c5f79b6254d378e95cfd322a65</anchor>
      <arglist>(cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a79ab0dba2a12a0bc0a7944f9ae9f1f29</anchor>
      <arglist>(sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae84860183d3c2955e5faa0d0cc32fb4c</anchor>
      <arglist>(tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa360ad475ef9a72d1d29c5dabcc3bf73</anchor>
      <arglist>(acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a09f392d978d7b88cf99fb06019e7bd40</anchor>
      <arglist>(asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2d537b66b859eb038d3820337c18fce9</anchor>
      <arglist>(atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a680c29e54698d49501b3b2de4ce2ef47</anchor>
      <arglist>(cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a395094c113cdd8c2121111872085a735</anchor>
      <arglist>(sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a98e1c8435b5fa7a7b196806e25a1425f</anchor>
      <arglist>(tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa08b81d847b50e9c9c4cee7c7d1f29cf</anchor>
      <arglist>(acosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>acbb4e14d3112e1de6b78b1210a991865</anchor>
      <arglist>(asinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>adfbdf70bffe090b2531d64749b2c91c4</anchor>
      <arglist>(atanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abe0541c3cddfa4781331ac0d05887d48</anchor>
      <arglist>(exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0ab0990a076434714f940464ebce3fe9</anchor>
      <arglist>(log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af920243bd9e1e124679ead131489016e</anchor>
      <arglist>(log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a4544c2a970c27e9ebb3cd7e2ea5ddc7b</anchor>
      <arglist>(exp2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7634e73ae107cad38d3c1c30d2be80bd</anchor>
      <arglist>(expm1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a17d65fea3f35e081fc433ef3366cba7b</anchor>
      <arglist>(ilogb, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a5a67dfa432cacbe104d169f89ea161f8</anchor>
      <arglist>(log1p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a5ca741e8dd2d8cefaf43410eff2f1e28</anchor>
      <arglist>(log2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a83810e6d9502d807c8bd6500e398df7c</anchor>
      <arglist>(logb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a160d3e17ed369ef66e6a5616b9d0f0ed</anchor>
      <arglist>(sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ade26d1af9df16776724aa09f347d8856</anchor>
      <arglist>(cbrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad5569c638beb6711c21a041ef6441bc7</anchor>
      <arglist>(erf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a01ef7058640643efbe18ac57cc6eaf48</anchor>
      <arglist>(erfc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac9e21698991978ed28373a29ebaa7676</anchor>
      <arglist>(tgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a185f315ad3d194156672fdd4f299197d</anchor>
      <arglist>(lgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a26dcbb76cee8f0300798c309959d86ee</anchor>
      <arglist>(ceil)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a762a6b51f18dadfb4eda6047cf754c64</anchor>
      <arglist>(floor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2109020367318862d81752b29c3af75d</anchor>
      <arglist>(trunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a38807b16fbd42153aea86c4ccdd6bb91</anchor>
      <arglist>(round)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a33060ecf7417568c97b04111620a1e28</anchor>
      <arglist>(lround, long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1749c45138975ab7d1e9a8f426b8811c</anchor>
      <arglist>(llround, long long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abc68537e003af1c6cc7bf154566008b0</anchor>
      <arglist>(rint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a4a50ac60761fb189996f0c6455c9deab</anchor>
      <arglist>(lrint, long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>adfa38b41506a8e473669feddb7d1db8c</anchor>
      <arglist>(llrint, long long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a10471153b4d96fc5e79f3b771b314ce2</anchor>
      <arglist>(nearbyint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a577485241fdec0624801d8463b5987ca</anchor>
      <arglist>(fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>acf083bd80799339ad4b7bc26009d1760</anchor>
      <arglist>(abs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac5157b5aa1692d5a700cde7d8285ea99</anchor>
      <arglist>(real)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a97b017f376d4eb1da79440f824f7ee55</anchor>
      <arglist>(imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1853753d5f04e6743b59ef878437e2e1</anchor>
      <arglist>(max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8461f4eb3f7d2309ba49e96ad8df6305</anchor>
      <arglist>(min)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ab008d5003f6c9044b8b7f14fed1122b2</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ad7dd6e7c744f4313ab479354e10dd3f6</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aa76b9631cea947492ba9c255f01df865</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lru.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00158.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="class">Dune::lru</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/doc/doxygen/</path>
    <filename>a00002.html</filename>
  </compound>
  <compound kind="file">
    <name>make_array.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00332.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
    <member kind="function">
      <type>std::array&lt; typename std::common_type&lt; Args... &gt;::type, sizeof...(Args)&gt;</type>
      <name>make_array</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga4bc9a120a411bddf93f2c58977befa63</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mallocallocator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00161.html</filename>
    <class kind="class">Dune::MallocAllocator</class>
    <class kind="struct">Dune::MallocAllocator::rebind</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0b225faa806a6ba0744fd93ce17b447a</anchor>
      <arglist>(const MallocAllocator&lt; T &gt; &amp;, const MallocAllocator&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a336418ea10c30e25ece655d63bdf3d84</anchor>
      <arglist>(const MallocAllocator&lt; T &gt; &amp;, const MallocAllocator&lt; T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>math.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00164.html</filename>
    <includes id="a00386" name="typeutilities.hh" local="no" imported="no">dune/common/typeutilities.hh</includes>
    <class kind="struct">Dune::StandardMathematicalConstants</class>
    <class kind="struct">Dune::MathematicalConstants</class>
    <class kind="struct">Dune::Factorial</class>
    <class kind="struct">Dune::Factorial&lt; 0 &gt;</class>
    <class kind="struct">Dune::MathOverloads::ADLTag</class>
    <class kind="struct">Dune::MathImpl::isUnorderedImpl</class>
    <namespace>Dune</namespace>
    <namespace>Dune::MathOverloads</namespace>
    <namespace>Dune::MathImpl</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>ad9142ad3167567a3fdc4e29c7996ec95</anchor>
      <arglist>(function, stdfunction)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00164.html</anchorfile>
      <anchor>a8a492f8cc06481d5f3b0d514e344dcfa</anchor>
      <arglist>(function)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mantissa</type>
      <name>power</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a43fb9e50cbb18051ddf5497465ccf734</anchor>
      <arglist>(Mantissa m, Exponent p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static T</type>
      <name>factorial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa4eb5cbca2609d132ac6866b4960247b</anchor>
      <arglist>(const T &amp;n) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>factorial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad4be70f69e2f8bbda33075a643a23d6e</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static T</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae548cdfab3c07fd32610c7b4da8f0eb9</anchor>
      <arglist>(const T &amp;n, const T &amp;k) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a03852ec1241ecb93d746dc64bc0e41cc</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;, std::integral_constant&lt; T, k &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1169603932af226513ef054667a1657d</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;, std::integral_constant&lt; T, n &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>conjugateComplex</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae6ef69fa70938d4aa93d8e30d3813c13</anchor>
      <arglist>(const K &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac1712a3bb38c829a2c339355cdb28133</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a52c04e77b813dd109ca59f9ded3a3515</anchor>
      <arglist>(isNaN, isnan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a132229e4e1f87c4ea645b92e5ce316e2</anchor>
      <arglist>(isInf, isinf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a826fe50216822399903f37a0b901a9d4</anchor>
      <arglist>(isFinite, isfinite)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aab4ad4b002d6757a35d82f9d7954e604</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, PriorityTag&lt; 1 &gt;, ADLTag) -&gt; decltype(isUnordered(t1, t2))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a5fe96f40a2f7d525f8828086e306bc6a</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, PriorityTag&lt; 0 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a3ae62f6f2833a56f9c4d5c9fe10e1116</anchor>
      <arglist>(isNaN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>ab3d3f80e8ca72d2c4ff96b488c940d28</anchor>
      <arglist>(isInf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a1434c3257e1930c54618527637803b47</anchor>
      <arglist>(isFinite)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a33bee19ed499c8354c0616209d1d0602</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aa6e7f9378ae85cd77da2651ad6e4124c</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ae285615ca57483eca8f45c6368811e36</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>matvectraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00167.html</filename>
    <class kind="struct">Dune::DenseMatVecTraits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>doc/doxygen/modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/doc/doxygen/</path>
    <filename>a04331.html</filename>
  </compound>
  <compound kind="file">
    <name>dune/common/modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a04334.html</filename>
  </compound>
  <compound kind="file">
    <name>mpi_collective_benchmark.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/benchmark/</path>
    <filename>a00173.html</filename>
    <includes id="a00215" name="mpihelper.hh" local="no" imported="no">dune/common/parallel/mpihelper.hh</includes>
    <includes id="a00365" name="timer.hh" local="no" imported="no">dune/common/timer.hh</includes>
    <includes id="a00242" name="parametertree.hh" local="no" imported="no">dune/common/parametertree.hh</includes>
    <includes id="a00248" name="parametertreeparser.hh" local="no" imported="no">dune/common/parametertreeparser.hh</includes>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>afb912825e02284a6c9ff4f616d528d86</anchor>
      <arglist>(CC &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>Dune::Future&lt; void &gt;</type>
      <name>startCommunication</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>ae54df330063f8bff6dc9f02a28301909</anchor>
      <arglist>(CC &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>runBlocking</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a2346f2e9a9ad80d88d9bcec29ff6dd00</anchor>
      <arglist>(CC &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>runNonblockingWait</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>abc473f2a6a96ee4a7a3c297d40a04bde</anchor>
      <arglist>(CC &amp;cc)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double &gt;</type>
      <name>runNonblockingSleep</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a4ca41d63c6616ce71a11bfb8a94c24fb</anchor>
      <arglist>(decltype(Dune::MPIHelper::getCommunication())&amp;cc, std::chrono::duration&lt; double &gt; wait_time)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double &gt;</type>
      <name>runNonblockingActive</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a5a9db255ad861239c51bf19b2a1b5317</anchor>
      <arglist>(decltype(Dune::MPIHelper::getCommunication())&amp;cc, std::chrono::duration&lt; double &gt; wait_time)</arglist>
    </member>
    <member kind="function">
      <type>std::tuple&lt; double, double &gt;</type>
      <name>determineOverlap</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a53a6cbf349be1a52cf9eae296d5a845e</anchor>
      <arglist>(std::function&lt; std::tuple&lt; double, double &gt;(std::chrono::duration&lt; double &gt;)&gt; fun)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printHeader</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a463abe7d682b6ef6fc100e18d872d4e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>run</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a32c829093c6e6df595cdee323470d482</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
    <member kind="variable">
      <type>Dune::ParameterTree</type>
      <name>options</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a27e2a51c9830747b1c6fd2825389fbae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>all_methods</name>
      <anchorfile>a00173.html</anchorfile>
      <anchor>a041dd892dba6b2c051d9ab750ef9f3c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpicollectivecommunication.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00200.html</filename>
    <includes id="a00203" name="mpicommunication.hh" local="no" imported="no">dune/common/parallel/mpicommunication.hh</includes>
  </compound>
  <compound kind="file">
    <name>mpicommunication.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00203.html</filename>
    <includes id="a00023" name="binaryfunctions.hh" local="no" imported="no">dune/common/binaryfunctions.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00179" name="communication.hh" local="no" imported="no">dune/common/parallel/communication.hh</includes>
    <includes id="a00221" name="mpitraits.hh" local="no" imported="no">dune/common/parallel/mpitraits.hh</includes>
    <includes id="a00209" name="mpifuture.hh" local="no" imported="no">dune/common/parallel/mpifuture.hh</includes>
    <includes id="a00206" name="mpidata.hh" local="no" imported="no">dune/common/parallel/mpidata.hh</includes>
    <class kind="class">Dune::Generic_MPI_Op</class>
    <class kind="class">Dune::Communication&lt; MPI_Comm &gt;</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00203.html</anchorfile>
      <anchor>abf4b9767826441f78c43351f92490b89</anchor>
      <arglist>(func, op)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a59a2fa61f1387001cea29f6934ff2316</anchor>
      <arglist>(std::plus, MPI_SUM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8b1b0f5e50429120ba7fc972b022c620</anchor>
      <arglist>(std::multiplies, MPI_PROD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a428c0ab2a3d2fd8f57aaf06a51bcc558</anchor>
      <arglist>(Min, MPI_MIN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac6814315ac90b4c03e394688a30c63d9</anchor>
      <arglist>(Max, MPI_MAX)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpidata.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00206.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00338" name="type_traits.hh" local="no" imported="no">dune/common/std/type_traits.hh</includes>
    <includes id="a00221" name="mpitraits.hh" local="no" imported="no">dune/common/parallel/mpitraits.hh</includes>
    <class kind="struct">Dune::MPIData</class>
    <class kind="struct">Dune::MPIData&lt; void &gt;</class>
    <class kind="struct">Dune::MPIData&lt; T, std::void_t&lt; std::tuple&lt; decltype(std::declval&lt; T &gt;().data()), decltype(std::declval&lt; T &gt;().size()), typename std::decay_t&lt; T &gt;::value_type &gt; &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>getMPIData</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a60e5c2863bb763524cbc65eaea515adb</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>mpifuture.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00209.html</filename>
    <includes id="a00179" name="communication.hh" local="no" imported="no">dune/common/parallel/communication.hh</includes>
    <includes id="a00185" name="future.hh" local="no" imported="no">dune/common/parallel/future.hh</includes>
    <includes id="a00206" name="mpidata.hh" local="no" imported="no">dune/common/parallel/mpidata.hh</includes>
    <class kind="struct">Dune::impl::Buffer</class>
    <class kind="struct">Dune::impl::Buffer&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::impl::Buffer&lt; void &gt;</class>
    <class kind="class">Dune::MPIFuture</class>
    <namespace>Dune</namespace>
    <namespace>Dune::impl</namespace>
  </compound>
  <compound kind="file">
    <name>mpiguard.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00212.html</filename>
    <includes id="a00215" name="mpihelper.hh" local="yes" imported="no">mpihelper.hh</includes>
    <includes id="a00179" name="communication.hh" local="yes" imported="no">communication.hh</includes>
    <includes id="a00203" name="mpicommunication.hh" local="yes" imported="no">mpicommunication.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="class">Dune::MPIGuardError</class>
    <class kind="class">Dune::MPIGuard</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mpihelper.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00215.html</filename>
    <includes id="a00179" name="communication.hh" local="no" imported="no">dune/common/parallel/communication.hh</includes>
    <includes id="a00203" name="mpicommunication.hh" local="no" imported="no">dune/common/parallel/mpicommunication.hh</includes>
    <includes id="a00350" name="stdstreams.hh" local="no" imported="no">dune/common/stdstreams.hh</includes>
    <includes id="a00395" name="visibility.hh" local="no" imported="no">dune/common/visibility.hh</includes>
    <class kind="class">Dune::FakeMPIHelper</class>
    <class kind="class">Dune::MPIHelper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mpipack.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00218.html</filename>
    <includes id="a00203" name="mpicommunication.hh" local="no" imported="no">dune/common/parallel/mpicommunication.hh</includes>
    <includes id="a00206" name="mpidata.hh" local="no" imported="no">dune/common/parallel/mpidata.hh</includes>
    <class kind="class">Dune::MPIPack</class>
    <class kind="struct">Dune::MPIData&lt; P, std::enable_if_t&lt; std::is_same&lt; std::remove_const_t&lt; P &gt;, MPIPack &gt;::value &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mpitraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00221.html</filename>
    <class kind="struct">Dune::MPITraits</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>optional.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00335.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67e10f06e4e27a5a4ad29b045de3ce65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::nullopt_t</type>
      <name>nullopt_t</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2f55f129145db5843048d81bafa78f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::in_place_t</type>
      <name>in_place_t</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f874821d9d7e1e7e1850182297f70d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bad_optional_access</type>
      <name>bad_optional_access</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4fd3f32fb44e4e46c1af7c676e1d9edf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>overloadset.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00170.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>overload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gae007ebc02578de3fe994b28e4378fd80</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>orderedOverload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga85390a9ae268b1ed2be79b8637e8becd</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parameterizedobject.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00236.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00386" name="typeutilities.hh" local="no" imported="no">dune/common/typeutilities.hh</includes>
    <class kind="class">Dune::ParameterizedObjectFactory&lt; TypeT(Args...), KeyT &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>parametertree.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00239.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00242" name="parametertree.hh" local="no" imported="no">dune/common/parametertree.hh</includes>
  </compound>
  <compound kind="file">
    <name>parametertree.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00242.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00032" name="classname.hh" local="no" imported="no">dune/common/classname.hh</includes>
    <class kind="class">Dune::ParameterTree</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::basic_string&lt; char, traits, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; bool &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; bool &gt;::ToLower</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; FieldVector&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::array&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::bitset&lt; n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::vector&lt; T, A &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>parametertreeparser.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00245.html</filename>
    <includes id="a00248" name="parametertreeparser.hh" local="yes" imported="no">parametertreeparser.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
  </compound>
  <compound kind="file">
    <name>parametertreeparser.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00248.html</filename>
    <includes id="a00242" name="parametertree.hh" local="no" imported="no">dune/common/parametertree.hh</includes>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <class kind="class">Dune::ParameterTreeParserError</class>
    <class kind="class">Dune::HelpRequest</class>
    <class kind="class">Dune::ParameterTreeParser</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>path.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00251.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00362" name="stringutility.hh" local="no" imported="no">dune/common/stringutility.hh</includes>
    <includes id="a00254" name="path.hh" local="no" imported="no">dune/common/path.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>concatPaths</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaf35055b90526b3266f36956a4e361f50</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>processPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1b4c87bd874abdd0db9f6dc51d9588b0</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathIndicatesDirectory</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1d1669ed8677a07b152b1de21640b3f9</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaa9908e9eb153f3d37d7c7063ffc9b6a2</anchor>
      <arglist>(const std::string &amp;p, bool isDirectory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gae07624c824232706454d5d6d1d1cb5c8</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>relativePath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gab2ce1b1de5e4a5c74802d615b4027a7b</anchor>
      <arglist>(const std::string &amp;newbase, const std::string &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>path.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00254.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::string</type>
      <name>concatPaths</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaf35055b90526b3266f36956a4e361f50</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>processPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1b4c87bd874abdd0db9f6dc51d9588b0</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathIndicatesDirectory</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1d1669ed8677a07b152b1de21640b3f9</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaa9908e9eb153f3d37d7c7063ffc9b6a2</anchor>
      <arglist>(const std::string &amp;p, bool isDirectory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gae07624c824232706454d5d6d1d1cb5c8</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>relativePath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gab2ce1b1de5e4a5c74802d615b4027a7b</anchor>
      <arglist>(const std::string &amp;newbase, const std::string &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>plocalindex.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00224.html</filename>
    <includes id="a00197" name="localindex.hh" local="yes" imported="no">localindex.hh</includes>
    <includes id="a00188" name="indexset.hh" local="yes" imported="no">indexset.hh</includes>
    <includes id="a00221" name="mpitraits.hh" local="yes" imported="no">mpitraits.hh</includes>
    <class kind="class">Dune::ParallelLocalIndex</class>
    <class kind="struct">Dune::LocalIndexComparator&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <class kind="class">Dune::MPITraits&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6f6a56e79b01b4bd4385c81502559be3</anchor>
      <arglist>(std::ostream &amp;os, const ParallelLocalIndex&lt; T &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3f656ae09bca24998c26b42304a9d1b2</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga773d38fd187016eb6fef134776f7d761</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>poolallocator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00257.html</filename>
    <class kind="class">Dune::Pool</class>
    <class kind="class">Dune::PoolAllocator</class>
    <class kind="struct">Dune::PoolAllocator::rebind</class>
    <class kind="class">Dune::PoolAllocator&lt; void, s &gt;</class>
    <class kind="struct">Dune::PoolAllocator&lt; void, s &gt;::rebind</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga67f486062c5bfb92aa3365373d491836</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gaf0e4942c0493dceaf371ba9f0ec29ab6</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab6358d63f2012e81c5066d6c6d9cb94a</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga2c515ca850107e6807b75f4d90ca4dcc</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab00b326f648ee860460ddeec2f4b6d3b</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gace25a69f0bcd5ba1fffd567af1d9a9cf</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga5bc475e78eb7d029ee0782eab49d5938</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6795aefd733bd618db889c6f15f1552f</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>power.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00260.html</filename>
    <includes id="a00164" name="math.hh" local="no" imported="no">dune/common/math.hh</includes>
    <class kind="struct">Dune::StaticPower</class>
    <class kind="struct">Dune::Power</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>precision.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00263.html</filename>
    <class kind="class">Dune::FMatrixPrecision</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>promotiontraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00266.html</filename>
    <class kind="struct">Dune::PromotionTraits</class>
    <class kind="struct">Dune::PromotionTraits&lt; T1, T1 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>propertymap.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00269.html</filename>
    <class kind="struct">Dune::PropertyMapTraits</class>
    <class kind="struct">Dune::ReadablePropertyMapTag</class>
    <class kind="struct">Dune::WritablePropertyMapTag</class>
    <class kind="struct">Dune::ReadWritePropertyMapTag</class>
    <class kind="struct">Dune::LvaluePropertyMapTag</class>
    <class kind="struct">Dune::PropertyMapTraits&lt; T * &gt;</class>
    <class kind="struct">Dune::PropertyMapTraits&lt; const T * &gt;</class>
    <class kind="struct">Dune::RAPropertyMapHelper</class>
    <class kind="class">Dune::IteratorPropertyMap</class>
    <class kind="class">Dune::AssociativePropertyMap</class>
    <class kind="class">Dune::ConstAssociativePropertyMap</class>
    <class kind="struct">Dune::IdentityMap</class>
    <class kind="struct">Dune::PropertyMapTypeSelector</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>Reference</type>
      <name>get</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a422c8e50ed4f40b534187b8fb83fbf3d</anchor>
      <arglist>(const RAPropertyMapHelper&lt; Reference, PropertyMap &gt; &amp;pmap, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2dc4d3a226776723750b848ae303a11a</anchor>
      <arglist>(const RAPropertyMapHelper&lt; Reference, PropertyMap &gt; &amp;pmap, const Key &amp;key, const Value &amp;value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>proxymemberaccess.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00272.html</filename>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>pointer_or_proxy_holder</type>
      <name>handle_proxy_member_access</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab204e4c1df410966214b242af99406a1</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quadmath.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00275.html</filename>
  </compound>
  <compound kind="file">
    <name>rangeutilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00278.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="class">Dune::IntegralRange</class>
    <class kind="class">Dune::StaticIntegralRange</class>
    <class kind="struct">Dune::ValueTransformationTag</class>
    <class kind="struct">Dune::IteratorTransformationTag</class>
    <class kind="class">Dune::TransformedRangeView</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>T::value_type</type>
      <name>max_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaf05bafe739a71f1e7f30780dbae4fa05</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>max_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gaf05bafe739a71f1e7f30780dbae4fa05</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T::value_type</type>
      <name>min_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa56de4535eff55ba6d5e418fd26b686c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>min_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gaa56de4535eff55ba6d5e418fd26b686c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga19dd21ff930466597df962ae58d58c57</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaaca8a2450469eb41c338d8f51231fc34</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga3f11c34177907a5c592990a5f4840e92</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga1782fbfe7b40a75fecb933f720357e54</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga20c2d5d24fba2015d933669de38606f9</anchor>
      <arglist>(T &amp;&amp;from, U &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gab64fac9d63a7009ccfa29af11ec5fc1c</anchor>
      <arglist>(T &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::underlying_type_t&lt; std::decay_t&lt; T &gt; &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gab64fac9d63a7009ccfa29af11ec5fc1c</anchor>
      <arglist>(T &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticIntegralRange&lt; T, to &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gadd0ae414ee372842796c06cee030a78b</anchor>
      <arglist>(std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gae2dd8cb1fce8767381e33a5b834cf55d</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>iteratorTransformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaccf70716194b093e0d21e6da93c108f8</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparseRange</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa75d4e74da1410405a33a5a62b5710e7</anchor>
      <arglist>(Range &amp;&amp;range)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StaticIntegralRange&lt; T, to, from &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga9749b12765838700df3504bcae783e35</anchor>
      <arglist>(std::integral_constant&lt; T, from &gt;, std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>remoteindices.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00227.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <includes id="a00188" name="indexset.hh" local="no" imported="no">dune/common/parallel/indexset.hh</includes>
    <includes id="a00221" name="mpitraits.hh" local="no" imported="no">dune/common/parallel/mpitraits.hh</includes>
    <includes id="a00224" name="plocalindex.hh" local="no" imported="no">dune/common/parallel/plocalindex.hh</includes>
    <includes id="a00323" name="sllist.hh" local="no" imported="no">dune/common/sllist.hh</includes>
    <includes id="a00350" name="stdstreams.hh" local="no" imported="no">dune/common/stdstreams.hh</includes>
    <class kind="class">Dune::MPITraits&lt; IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &gt;</class>
    <class kind="class">Dune::RemoteIndex</class>
    <class kind="class">Dune::RemoteIndices</class>
    <class kind="class">Dune::RemoteIndexListModifier</class>
    <class kind="class">Dune::RemoteIndexListModifier::InvalidPosition</class>
    <class kind="class">Dune::CollectiveIterator</class>
    <class kind="class">Dune::CollectiveIterator::iterator</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadff1176482f8b02fb98cc4e08695a2ce</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndex&lt; T1, T2 &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4298476f0be2dd2f85d9fb856ff228a1</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndices&lt; T, A &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad5fcca471c1f5c5909f0b8fe316e6dcf</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndex&lt; TG, TA &gt; &amp;index)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reservedvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00281.html</filename>
    <includes id="a00119" name="genericiterator.hh" local="no" imported="no">dune/common/genericiterator.hh</includes>
    <includes id="a00125" name="hash.hh" local="no" imported="no">dune/common/hash.hh</includes>
    <class kind="class">Dune::ReservedVector</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CHECKSIZE</name>
      <anchorfile>a00281.html</anchorfile>
      <anchor>a65543e75bc949ecdb95a25b1f4e11675</anchor>
      <arglist>(X)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scalarmatrixview.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00284.html</filename>
    <includes id="a00029" name="boundschecking.hh" local="no" imported="no">dune/common/boundschecking.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00167" name="matvectraits.hh" local="no" imported="no">dune/common/matvectraits.hh</includes>
    <includes id="a00053" name="densematrix.hh" local="no" imported="no">dune/common/densematrix.hh</includes>
    <includes id="a00098" name="fmatrix.hh" local="no" imported="no">dune/common/fmatrix.hh</includes>
    <includes id="a00287" name="scalarvectorview.hh" local="no" imported="no">dune/common/scalarvectorview.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>scalarvectorview.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00287.html</filename>
    <includes id="a00056" name="densevector.hh" local="no" imported="no">dune/common/densevector.hh</includes>
    <includes id="a00113" name="fvector.hh" local="no" imported="no">dune/common/fvector.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00167" name="matvectraits.hh" local="no" imported="no">dune/common/matvectraits.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>selection.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00230.html</filename>
    <includes id="a00188" name="indexset.hh" local="yes" imported="no">indexset.hh</includes>
    <includes id="a00146" name="iteratorfacades.hh" local="no" imported="no">dune/common/iteratorfacades.hh</includes>
    <class kind="class">Dune::SelectionIterator</class>
    <class kind="class">Dune::UncachedSelection</class>
    <class kind="class">Dune::Selection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>shared_ptr.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00290.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="struct">Dune::null_deleter</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>stackobject_to_shared_ptr</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0ee36ec1f6416afa0487a8a224376e34</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>wrap_or_move</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abc8b6bf5f8910e34829136293000c29e</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>wrap_or_move</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab3669cc3fbff695e5ae793ab49f1ca8a</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>simd/simd.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a04337.html</filename>
    <includes id="a04328" name="simd/interface.hh" local="no" imported="no">dune/common/simd/interface.hh</includes>
    <includes id="a00308" name="standard.hh" local="no" imported="no">dune/common/simd/standard.hh</includes>
  </compound>
  <compound kind="file">
    <name>simd.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00305.html</filename>
    <includes id="a00038" name="conditional.hh" local="no" imported="no">dune/common/conditional.hh</includes>
    <includes id="a00044" name="debugalign.hh" local="no" imported="no">dune/common/debugalign.hh</includes>
    <includes id="a00278" name="rangeutilities.hh" local="no" imported="no">dune/common/rangeutilities.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00317" name="vc.hh" local="no" imported="no">dune/common/vc.hh</includes>
    <class kind="struct">Dune::SimdScalarTypeTraits</class>
    <class kind="struct">Dune::SimdScalarTypeTraits&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::SimdIndexTypeTraits</class>
    <class kind="struct">Dune::SimdMaskTypeTraits</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>typename SimdScalarTypeTraits&lt; T &gt;::type</type>
      <name>SimdScalar</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7cab87dc8a3eff4191a99a1084d7b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SimdIndexTypeTraits&lt; V &gt;::type</type>
      <name>SimdIndex</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a3c668a396cf5cd88bb7da3225787959a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SimdMaskTypeTraits&lt; V &gt;::type</type>
      <name>SimdMask</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a846fa7e0d4cf9e70b148592224eb360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>afc2c37fe2704917536f5263272d0a7e2</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lane</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a87be73bb4b219361645afcce2eb5b7a4</anchor>
      <arglist>(std::size_t l, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>lane</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af7ebdb04638aaaa3011903e9cd31444d</anchor>
      <arglist>(std::size_t l, T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a90c073df341c13a4da1c1522c60af0c3</anchor>
      <arglist>(T &amp;dst, const T &amp;src, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8cc9a46e5ec32e3b68c3071cf1a25361</anchor>
      <arglist>(T &amp;v1, T &amp;v2, bool mask)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>singleton.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00320.html</filename>
    <includes id="a00395" name="visibility.hh" local="no" imported="no">dune/common/visibility.hh</includes>
    <class kind="class">Dune::Singleton</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>sllist.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00323.html</filename>
    <includes id="a00146" name="iteratorfacades.hh" local="yes" imported="no">iteratorfacades.hh</includes>
    <class kind="class">Dune::SLList</class>
    <class kind="class">Dune::SLListIterator</class>
    <class kind="class">Dune::SLListConstIterator</class>
    <class kind="class">Dune::SLListModifyIterator</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga572fa4d72fb27c6134aa355abc083969</anchor>
      <arglist>(std::ostream &amp;os, const SLList&lt; T, A &gt; &amp;sllist)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>standard.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00308.html</filename>
    <includes id="a00134" name="indices.hh" local="no" imported="no">dune/common/indices.hh</includes>
    <includes id="a00293" name="base.hh" local="no" imported="no">dune/common/simd/base.hh</includes>
    <includes id="a00296" name="defaults.hh" local="no" imported="no">dune/common/simd/defaults.hh</includes>
    <class kind="struct">Dune::Simd::Overloads::ScalarType</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
    <member kind="function">
      <type>V</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ad329da4d6c881c0c53b63c01f576e6df</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, std::size_t, V v)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a743a8900c5957a1b8eeea17ce6ac0d1b</anchor>
      <arglist>(ADLTag&lt; 3 &gt;, std::size_t, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4da440a9db2b315f531d5412174982af</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aef12678a4fbb543b66e9a92eb85d9877</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8d635dd0e81111cb047adf5c28dfb781</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab3e2ff7938d3f9d0a691ee30924caee0</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ad329da4d6c881c0c53b63c01f576e6df</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, std::size_t, V v)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a743a8900c5957a1b8eeea17ce6ac0d1b</anchor>
      <arglist>(ADLTag&lt; 3 &gt;, std::size_t, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4da440a9db2b315f531d5412174982af</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aef12678a4fbb543b66e9a92eb85d9877</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8d635dd0e81111cb047adf5c28dfb781</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab3e2ff7938d3f9d0a691ee30924caee0</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdstreams.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00347.html</filename>
    <includes id="a00350" name="stdstreams.hh" local="yes" imported="no">stdstreams.hh</includes>
    <namespace>Dune</namespace>
    <member kind="variable">
      <type>DVVerbType</type>
      <name>dvverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20bcb085658a3b88393e47a1d36d667c</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DVerbType</type>
      <name>dverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab8900dadc584357856d4f6cc06324cea</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DInfoType</type>
      <name>dinfo</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab5d2fce8ed49f95067d9b5b54d6f5def</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DWarnType</type>
      <name>dwarn</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4bff1feeab1e96f08aca7796cc69b4ea</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>DGraveType</type>
      <name>dgrave</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga765267750e6b2718fa718ab5f9fa1ed9</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>DErrType</type>
      <name>derr</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gacaa61db1e034d693335d33d3919ba9ca</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdstreams.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00350.html</filename>
    <includes id="a00050" name="debugstream.hh" local="yes" imported="no">debugstream.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_MINIMAL_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga3a5303f96d33ae7299d9acd71b736998</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERY_VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga08d48df3a7a0e3bd9c0425aba8004488</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga65d14f278ea400db87ffb6a4bc7ed7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; INFO_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DInfoType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab41f4590c73d6408c89475e28bf18a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; WARN_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DWarnType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20379ab9c4472509d420e98659683fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; GRAVE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DGraveType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga70e0eedd6c7f613d6e9608fabb4d240d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; 1 &gt;</type>
      <name>DErrType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga768c0b513889d713fd0017ef7ae35056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>MINIMAL_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga2c074d4df6d5fa8fbe8b4e9d44b35df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERY_VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga490cf91178ed464c3eff5871b4b03c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gabdcf3b4c1aefae00afd3ecaf84f755bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>INFO_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaabd88387e7eb826323b9f7d3a53a283e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>WARN_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaed2aba7a7e55b026716d5027406566a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>GRAVE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4fc828eb9bb6c6b6143034b9211d2b72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdthread.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00353.html</filename>
    <includes id="a00356" name="stdthread.hh" local="no" imported="no">dune/common/stdthread.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>doAssertCallOnce</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa76832a917330622cdf531c2e6375f4c</anchor>
      <arglist>(const char *file, int line, const char *function)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stdthread.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00356.html</filename>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSERT_CALL_ONCE</name>
      <anchorfile>a00356.html</anchorfile>
      <anchor>acbf1020c1747ea8c3dd1031d2d608557</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doAssertCallOnce</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa76832a917330622cdf531c2e6375f4c</anchor>
      <arglist>(const char *file, int line, const char *function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertCallOnce</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a3b55a8ff91fc039845da40a86486a007</anchor>
      <arglist>(const char *file=nullptr, int line=-1, const char *function=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>streamoperators.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00359.html</filename>
    <includes id="a00128" name="hybridutilities.hh" local="no" imported="no">dune/common/hybridutilities.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafda8471a933991be73f03e0d349c1bf1</anchor>
      <arglist>(Stream &amp;stream, const std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga32f86b48dbe3ad88dfcb32ba01dcc4a2</anchor>
      <arglist>(Stream &amp;stream, std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga540c7a094361004a08fdbd9c95063822</anchor>
      <arglist>(Stream &amp;stream, const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stringutility.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00362.html</filename>
    <includes id="a00086" name="exceptions.hh" local="no" imported="no">dune/common/exceptions.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>bool</type>
      <name>hasPrefix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gaf31028edab397ce01e0192a2823488f7</anchor>
      <arglist>(const C &amp;c, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSuffix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>ga560ea1a14403e04148126a2e9396dea2</anchor>
      <arglist>(const C &amp;c, const char *suffix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>formatString</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gab825672ce0273462cb092bba70f39d0b</anchor>
      <arglist>(const std::string &amp;s, const T &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>test.cc</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00311.html</filename>
    <includes id="a00314" name="test.hh" local="no" imported="no">dune/common/simd/test.hh</includes>
  </compound>
  <compound kind="file">
    <name>test.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a00314.html</filename>
    <includes id="a00032" name="classname.hh" local="no" imported="no">dune/common/classname.hh</includes>
    <includes id="a00128" name="hybridutilities.hh" local="no" imported="no">dune/common/hybridutilities.hh</includes>
    <includes id="a00278" name="rangeutilities.hh" local="no" imported="no">dune/common/rangeutilities.hh</includes>
    <includes id="a00299" name="io.hh" local="no" imported="no">dune/common/simd/io.hh</includes>
    <includes id="a00302" name="loop.hh" local="no" imported="no">dune/common/simd/loop.hh</includes>
    <includes id="a04337" name="simd/simd.hh" local="no" imported="no">dune/common/simd/simd.hh</includes>
    <includes id="a00338" name="type_traits.hh" local="no" imported="no">dune/common/std/type_traits.hh</includes>
    <includes id="a00380" name="typelist.hh" local="no" imported="no">dune/common/typelist.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="struct">Dune::Simd::EndMark</class>
    <class kind="class">Dune::Simd::UnitTest</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_CHECK</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a597f9d11a82f392a91b8bc12bd49a595</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_CHECK_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a48b2df30d98156457f001562d4bd5270</anchor>
      <arglist>(expr)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_POSTFIX_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a09facb8a8a5240120cca8ec1d1605959</anchor>
      <arglist>(NAME, SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_PREFIX_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>aeb2257e86dd590d0f724653136732d17</anchor>
      <arglist>(NAME, SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_INFIX_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a20f7280cead2264697f74b1deebc17e5</anchor>
      <arglist>(NAME, SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_ASSIGN_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>ad379032c70061c8e4d7d292356c9381c</anchor>
      <arglist>(NAME, SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_REPL_OP</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>acf66af48cb08cc1bc5334b44dfd6e016</anchor>
      <arglist>(NAME, REPLFN, SYMBOL)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_OPNAME</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>a125e4c3f5620741cca9cc19974d8fc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_DO</name>
      <anchorfile>a00314.html</anchorfile>
      <anchor>afc92f199d5b487cb38c2befd03eed5de</anchor>
      <arglist>(M1, M2, M3, V1, V2, V3, NAME)</arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::RemoveEnd&lt; EndMark, TypeList&lt; Types... &gt; &gt;::type</type>
      <name>RebindList</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a320566db6148b3a25631f0620601b881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::IsLoop&lt; T &gt;::type</type>
      <name>IsLoop</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>ab73dd40e3f2afeb94216681ddf2d5b00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timer.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00365.html</filename>
    <class kind="class">Dune::Timer</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>to_unique_ptr.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00368.html</filename>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>ToUniquePtr</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9bbde85cc655ad122680398fef8fa5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>makeToUnique</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ade7db16fea4d4d85c90115bf94e4d7f5</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transpose.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00371.html</filename>
    <includes id="a00098" name="fmatrix.hh" local="no" imported="no">dune/common/fmatrix.hh</includes>
    <includes id="a00266" name="promotiontraits.hh" local="no" imported="no">dune/common/promotiontraits.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>transpose</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a413e66bc54b93298e15afc7af231e924</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tupleutility.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00374.html</filename>
    <includes id="a00128" name="hybridutilities.hh" local="no" imported="no">dune/common/hybridutilities.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <class kind="struct">Dune::TupleAccessTraits</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T * &gt;</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::NullPointerInitialiser&lt; std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="struct">Dune::ForEachType&lt; TE, std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="class">Dune::TransformTupleFunctor</class>
    <class kind="struct">Dune::TransformTupleFunctor::TypeEvaluator</class>
    <class kind="struct">Dune::AddRefTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AtType</class>
    <class kind="struct">Dune::At</class>
    <class kind="struct">Dune::PointerPairDeletor</class>
    <class kind="class">Dune::FirstPredicateIndex</class>
    <class kind="struct">Dune::IsType</class>
    <class kind="struct">Dune::IsType::Predicate</class>
    <class kind="struct">Dune::FirstTypeIndex</class>
    <class kind="struct">Dune::PushBackTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::PushFrontTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::ReduceTuple</class>
    <class kind="struct">Dune::ReduceTuple&lt; F, Tuple, Seed, 0 &gt;</class>
    <class kind="struct">Dune::JoinTuples</class>
    <class kind="struct">Dune::FlattenTuple</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>applyPartial</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaeeffbe0f382283c9a2314a3947e54be9</anchor>
      <arglist>(F &amp;&amp;f, ArgTuple &amp;&amp;args, std::integer_sequence&lt; I, i... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>genericTransformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaee981bf99011a9bc2dd496a7d486e4ab</anchor>
      <arglist>(Tuple &amp;&amp;t, Functor &amp;&amp;f) -&gt; decltype(genericTransformTupleBackend(t, f))</arglist>
    </member>
    <member kind="function">
      <type>TransformTupleFunctor&lt; TE, Args... &gt;</type>
      <name>makeTransformTupleFunctor</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gab09a0e6719518183a81d60695510186a</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga24fcc49c0d83971073f4e0bd5e96748b</anchor>
      <arglist>(Tuple &amp;&amp;orig, Args &amp;&amp;... args) -&gt; decltype(genericTransformTuple(orig, makeTransformTupleFunctor&lt; TypeEvaluator &gt;(args...)))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tuplevector.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00377.html</filename>
    <includes id="a00134" name="indices.hh" local="no" imported="no">dune/common/indices.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00338" name="type_traits.hh" local="no" imported="no">dune/common/std/type_traits.hh</includes>
    <class kind="class">Dune::TupleVector</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>constexpr auto</type>
      <name>makeTupleVector</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae982edb333af3a1f24fe324cc593be0d</anchor>
      <arglist>(T &amp;&amp;... t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_traits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00338.html</filename>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00386" name="typeutilities.hh" local="no" imported="no">dune/common/typeutilities.hh</includes>
    <class kind="class">Dune::Std::to_false_type</class>
    <class kind="class">Dune::Std::to_true_type</class>
    <class kind="struct">Dune::Std::is_callable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::Std::is_invocable</class>
    <class kind="struct">Dune::Std::is_invocable_r</class>
    <class kind="struct">Dune::Std::nonesuch</class>
    <class kind="struct">Dune::Std::conjunction</class>
    <class kind="struct">Dune::Std::disjunction</class>
    <class kind="struct">Dune::Std::negation</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
    <member kind="typedef">
      <type>Impl::detector&lt; Default, void, Op, Args... &gt;</type>
      <name>detected_or</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gadb4713b99082ef169f74666e0ec7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::value_t</type>
      <name>is_detected</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaccaa5104ef0c27be164435f42ef81fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::type</type>
      <name>detected_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga67b8ffda29f365419403a66e49ec0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; Default, Op, Args... &gt;::type</type>
      <name>detected_or_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga2f49a21b2f60f94fa8911db7e32c9703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_exact</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6778de5ea60a45fdae6db8b6d8c8b6f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_convertible&lt; Target, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_convertible</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaf26ed902d20da735bae252683a9ac5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga9f0b8af5e80b339c8346a327f28bab33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_exact_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga043d312181849f21d950de3f7198bac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_convertible_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga044daf77dd81fbaeb71a7ce6d15bf761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typelist.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00380.html</filename>
    <class kind="struct">Dune::MetaType</class>
    <class kind="struct">Dune::IsTypeList</class>
    <class kind="struct">Dune::IsTypeList&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::IsEmptyTypeList</class>
    <class kind="struct">Dune::TypeListSize</class>
    <class kind="struct">Dune::TypeListSize&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::TypeListElement</class>
    <class kind="struct">Dune::TypeListElement&lt; i, TypeList&lt; T... &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>std::tuple&lt; MetaType&lt; T &gt;... &gt;</type>
      <name>TypeList</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga7e18d05cb5d1e95f0e7c7409ffe9689f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TypeListElement&lt; i, T &gt;::type</type>
      <name>TypeListEntry_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae06816da928c17285e09ccb74357648b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UnpackTypeList&lt; Target, TL &gt;::type</type>
      <name>UnpackTypeList_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a05190548d101a946d1cab292cff5fdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UniqueTypesHelper&lt; Target, TypeList&lt; T... &gt; &gt;::type</type>
      <name>UniqueTypes_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7f31a234ebc9fa02660570324eabde1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UniqueTypesHelper&lt; TypeList, NonUniqueTypeList &gt;::type</type>
      <name>UniqueTypeList_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab8e5f27ee5ff462d88e7eb109f143263</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>uniqueTypeList</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a595be06b36830646a9a348d33b7c51c1</anchor>
      <arglist>(TypeList&lt; T... &gt; list)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typetraits.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00383.html</filename>
    <class kind="struct">Dune::Empty</class>
    <class kind="struct">Dune::IsInteroperable</class>
    <class kind="struct">Dune::EnableIfInterOperable</class>
    <class kind="struct">Dune::AlwaysFalse</class>
    <class kind="struct">Dune::AlwaysTrue</class>
    <class kind="struct">Dune::IsCallable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::IsNumber</class>
    <class kind="struct">Dune::HasNaN</class>
    <class kind="struct">Dune::IsIndexable</class>
    <class kind="struct">Dune::IsIterable</class>
    <class kind="struct">Dune::IsTuple</class>
    <class kind="struct">Dune::IsTupleOrDerived</class>
    <class kind="struct">Dune::IsIntegralConstant</class>
    <class kind="struct">Dune::SizeOf</class>
    <class kind="struct">Dune::AutonomousValueType</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp;&amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; const T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; std::vector&lt; bool &gt;::reference &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile const T &gt;</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>typename Impl::voider&lt; Types... &gt;::type</type>
      <name>void_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6a3de1d2dbd47536c4b007d3a3b108a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::field_type</type>
      <name>field_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaadd3a3e69d0220b41bb40ebc442d79ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::real_type</type>
      <name>real_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga48aa0bb0268c390d251495eabdac4ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename AutonomousValueType&lt; T &gt;::type</type>
      <name>AutonomousValue</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga64c2d9377550162293c4fabd163f457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integerSequenceEntry</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga0fe355ad7447f0f4bc8ae0b6a39f6318</anchor>
      <arglist>(std::integer_sequence&lt; T, t... &gt;, std::integral_constant&lt; std::size_t, index &gt; i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AutonomousValue&lt; T &gt;</type>
      <name>autoCopy</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab256c9245e4037f7f42aa453e00fd97a</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>typeutilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00386.html</filename>
    <class kind="struct">Dune::PriorityTag</class>
    <class kind="struct">Dune::PriorityTag&lt; 0 &gt;</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>std::enable_if_t&lt; not Impl::disableCopyMoveHelper&lt; This, T... &gt;::value, int &gt;</type>
      <name>disableCopyMove</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga5cf0dfc6fe8998b21503cd81c6681afc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unused.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00389.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_UNUSED</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga53be527752cf155b994e29d457629050</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_UNUSED_PARAMETER</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gabedfe90a62e9dfc989b8298fec44801b</anchor>
      <arglist>(parm)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utility.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00341.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
  </compound>
  <compound kind="file">
    <name>variablesizecommunicator.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/parallel/</path>
    <filename>a00233.html</filename>
    <includes id="a00035" name="concept.hh" local="no" imported="no">dune/common/concept.hh</includes>
    <includes id="a04325" name="parallel/interface.hh" local="no" imported="no">dune/common/parallel/interface.hh</includes>
    <includes id="a00221" name="mpitraits.hh" local="no" imported="no">dune/common/parallel/mpitraits.hh</includes>
    <class kind="struct">Dune::Concept::HasFixedSize</class>
    <class kind="class">Dune::VariableSizeCommunicator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Concept</namespace>
    <member kind="variable">
      <type>std::size_t</type>
      <name>fixedSize</name>
      <anchorfile>a00233.html</anchorfile>
      <anchor>ab8808b7c88a6c9013967559c8eae5e8c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>variant.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/std/</path>
    <filename>a00344.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Std</namespace>
  </compound>
  <compound kind="file">
    <name>simd/vc.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/simd/</path>
    <filename>a04340.html</filename>
    <includes id="a00134" name="indices.hh" local="no" imported="no">dune/common/indices.hh</includes>
    <includes id="a00293" name="base.hh" local="no" imported="no">dune/common/simd/base.hh</includes>
    <includes id="a00296" name="defaults.hh" local="no" imported="no">dune/common/simd/defaults.hh</includes>
    <includes id="a00302" name="loop.hh" local="no" imported="no">dune/common/simd/loop.hh</includes>
    <includes id="a00383" name="typetraits.hh" local="no" imported="no">dune/common/typetraits.hh</includes>
    <includes id="a00317" name="vc.hh" local="no" imported="no">dune/common/vc.hh</includes>
    <class kind="struct">Dune::Simd::VcImpl::IsMask</class>
    <class kind="struct">Dune::Simd::VcImpl::IsMask&lt; Vc::Mask&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsMask&lt; Vc::SimdMaskArray&lt; T, n, V, m &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector&lt; Vc::Vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector&lt; Vc::SimdArray&lt; T, n, V, m &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; double &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; float &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::int32_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::uint32_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::int16_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::uint16_t &gt;</class>
    <class kind="class">Dune::Simd::VcImpl::Proxy</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; Simd::Scalar&lt; V &gt;, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; bool, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; Scalar&lt; typename M::Vector &gt;, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; typename M::Vector &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, bool &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::IsNumber&lt; Vc::SimdArray&lt; T, N &gt; &gt;</class>
    <class kind="struct">Dune::IsNumber&lt; Vc::Vector&lt; T, Abi &gt; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; Simd::VcImpl::Proxy&lt; V &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::Simd::VcImpl</namespace>
    <namespace>Dune::Simd::Overloads</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>a10265b53075e0412501814d2acdf22d7</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>ae581f62b53fc8d182ec05f424910a553</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a04340.html</anchorfile>
      <anchor>aa9d8e7755a20452b060eee8f25243b49</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="function">
      <type>VcImpl::Proxy&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a22094239a5688ab1452b7982223c7016</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae585159181261a665aab2e2291639caf</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0515c11687dc667d89aa905d42812eb8</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1e381193cbbb6173182d9d5f715ae3cb</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7dcd6d93c9d734cdf503a6ec39dd6611</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4e67cb4e294fb9e23e783884c475861c</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ada68b996d408511a5b96d60227e680b2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3c9ba6ecba42930468eefd178d7de783</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac6cc7e64573f72a104ee83ae903b6dfa</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9f601c327d9ab8d51e3aec75f84444d5</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae90e70730fb94990a1bc589dfa097d60</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2d34d0b372b187035617c73dcd799489</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9266e14dbe6a575063591abddf191407</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3085301cd46f3b9b3fda46ba2d7cf100</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a39ddee23ad26ec283bcbe4463d4c63bd</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae673cb9df73262a7fb8fa3f66c9e24d2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab0976021e11084b73bc7e4a9bd8606fb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3ea4f4dc62f616402360c2090528931a</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8b906f431fec68fcbf32de9a0fd7dccb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3822ffe342a2e2f5708806ea720bb604</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>VcImpl::Proxy&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a22094239a5688ab1452b7982223c7016</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae585159181261a665aab2e2291639caf</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0515c11687dc667d89aa905d42812eb8</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1e381193cbbb6173182d9d5f715ae3cb</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7dcd6d93c9d734cdf503a6ec39dd6611</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4e67cb4e294fb9e23e783884c475861c</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ada68b996d408511a5b96d60227e680b2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3c9ba6ecba42930468eefd178d7de783</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac6cc7e64573f72a104ee83ae903b6dfa</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9f601c327d9ab8d51e3aec75f84444d5</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae90e70730fb94990a1bc589dfa097d60</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2d34d0b372b187035617c73dcd799489</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9266e14dbe6a575063591abddf191407</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3085301cd46f3b9b3fda46ba2d7cf100</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a39ddee23ad26ec283bcbe4463d4c63bd</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae673cb9df73262a7fb8fa3f66c9e24d2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab0976021e11084b73bc7e4a9bd8606fb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3ea4f4dc62f616402360c2090528931a</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8b906f431fec68fcbf32de9a0fd7dccb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3822ffe342a2e2f5708806ea720bb604</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>vc.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00317.html</filename>
  </compound>
  <compound kind="file">
    <name>version.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00392.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_JOIN</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a229e35109d69cff060df5c80e71f3d73</anchor>
      <arglist>(module, type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_EQUAL</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab25a714acc2ab9e565053cb523054a95</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_EQUAL_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a860ad2275fe1229fe01d9992a6685fe7</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_GTE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae9c7fb3f1d0d68848c2b03cf45a5f620</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_LT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a989ea73953b5d09cb17675d64233a15b</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_NEWER</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3ff6f986ce87d82c20da62e6355cf520</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_GT</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a4221602addcd43bfc16992d83eaab73b</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_LTE</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a30a27a1b8996420c55ed3c6009a62253</anchor>
      <arglist>(module, major, minor)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_GTE_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a95ef2ff0c01c2b1add28f5d4a55e6904</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_LT_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a475b789ab8bce20d26045e337955a52b</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_NEWER_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a5b004009c0c7997b2330992534942c3b</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_GT_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ab892e2a1845da3fb29c5fb0cbe4d413f</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_LTE_REV</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a3e5db809b447136ea37c9c2ab3ea8c52</anchor>
      <arglist>(module, major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_VERSION_ID</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>ae3ff9d66de4e43cbc5e67743013977c9</anchor>
      <arglist>(major, minor, revision)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_MODULE_VERSION_ID</name>
      <anchorfile>a00392.html</anchorfile>
      <anchor>a2c5026c661a32b8cb9e0f92a4515c6c6</anchor>
      <arglist>(module)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>visibility.hh</name>
    <path>C:/ID/cmake-build-release/dune-common-prefix/src/dune-common/dune/common/</path>
    <filename>a00395.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_EXPORT</name>
      <anchorfile>a00395.html</anchorfile>
      <anchor>a392e8fb5628732502467b715b88974b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_PRIVATE</name>
      <anchorfile>a00395.html</anchorfile>
      <anchor>ab9e9adaae1a11e7546a1b712495d1f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AddPtrTypeEvaluator</name>
    <filename>a02929.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_reference&lt; T &gt;::type *</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga3f79c29b08ec96b9cbc7a2dafa05932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gac945ea1ce184ff4c0c0ed12497774afc</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AddPtrTypeEvaluator&lt; T &amp; &gt;</name>
    <filename>a02933.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_reference&lt; T &gt;::type *</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga5a1f880a8524d4366bfdf5c3495707d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga631ae1fa474cb50d89fde7b5d89deeab</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AddRefTypeEvaluator</name>
    <filename>a02925.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga9089c4ce2c50287440a7970a8629343e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga420a17ec4f5415c1aa51c01da6a04a38</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MathOverloads::ADLTag</name>
    <filename>a01929.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ADLTag</name>
    <filename>a02553.html</filename>
    <templarg>i</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ADLTag&lt; 0 &gt;</name>
    <filename>a02561.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ADLTag&lt; i &gt;</name>
    <filename>a02557.html</filename>
    <templarg>i</templarg>
    <base>ADLTag&lt; i-1 &gt;</base>
  </compound>
  <compound kind="class">
    <name>ADLTag&lt; i-1 &gt;</name>
    <filename>a02553.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::AlignedAllocator</name>
    <filename>a01273.html</filename>
    <templarg></templarg>
    <templarg>Alignment</templarg>
    <base>Dune::MallocAllocator</base>
    <class kind="struct">Dune::AlignedAllocator::rebind</class>
    <member kind="typedef">
      <type>typename MallocAllocator&lt; T &gt;::pointer</type>
      <name>pointer</name>
      <anchorfile>a01273.html</anchorfile>
      <anchor>a57f69930a746aaeeabcb894c293a101d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename MallocAllocator&lt; T &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a01273.html</anchorfile>
      <anchor>a00199059d550932fe0e96124fff8042f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a5bd412902e78278cfc4ae87b18914203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>af6eae134970cf98f7a838ab3534f046e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ace628b73f1b9be04006069bf1a19e6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a8f6131f08be1676b2184d42e5a66291c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a6b7e7f4763a686cb502ec965c6fc5510</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>a01273.html</anchorfile>
      <anchor>a1ff63af119efc33496f6bb91519ad86d</anchor>
      <arglist>(size_type n, [[maybe_unused]] const void *hint=0)</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ab469170e893476617e6bfb8849232e25</anchor>
      <arglist>(reference x) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a823237939fd7a83d0830f3d2b6767796</anchor>
      <arglist>(const_reference x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>aa37511bb4c3b556b2634010e21174824</anchor>
      <arglist>(pointer p, [[maybe_unused]] size_type n)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ae73000f492c7b45cd0a4236577eaf70f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a26835d6ddecf172c3f42f14e7e51774c</anchor>
      <arglist>(pointer p, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>abc66d994c8d242b64151593c6a3d9909</anchor>
      <arglist>(pointer p, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a9a87f603e3548cd4668be6afd123c278</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>alignment</name>
      <anchorfile>a01273.html</anchorfile>
      <anchor>a88a3488574a3f40fc04154021a361cd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlignedBase</name>
    <filename>a01349.html</filename>
    <templarg>align</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>aefd3a8d5a861f72c5d3daf2042b37c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>aeefae775a26ac5838489c6a095783024</anchor>
      <arglist>(const AlignedBase &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a8ab2f10ea442b779556c5efcd59b8c47</anchor>
      <arglist>(AlignedBase &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a21ec503814f8c7af0494a86215d4a591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a51c6412f6781209d9a8923f9b8736953</anchor>
      <arglist>(const AlignedBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>AlignedBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a5076eefade0799b1781ca01f99ee2228</anchor>
      <arglist>(AlignedBase &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlignedBase&lt; align, AlignedNumber&lt; T, align &gt; &gt;</name>
    <filename>a01349.html</filename>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>aefd3a8d5a861f72c5d3daf2042b37c60</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>aeefae775a26ac5838489c6a095783024</anchor>
      <arglist>(const AlignedBase &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a8ab2f10ea442b779556c5efcd59b8c47</anchor>
      <arglist>(AlignedBase &amp;&amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlignedBase</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a21ec503814f8c7af0494a86215d4a591</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a51c6412f6781209d9a8923f9b8736953</anchor>
      <arglist>(const AlignedBase &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>AlignedBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a01349.html</anchorfile>
      <anchor>a5076eefade0799b1781ca01f99ee2228</anchor>
      <arglist>(AlignedBase &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlignedNumberImpl::AlignedNumber</name>
    <filename>a01353.html</filename>
    <templarg></templarg>
    <templarg>align</templarg>
    <base>AlignedBase&lt; align, AlignedNumber&lt; T, align &gt; &gt;</base>
    <member kind="function">
      <type></type>
      <name>AlignedNumber</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>ad26c7a4e2fc60ce58ceca91ab325f623</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedNumber</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>af460d5281e098d24dbd91b9fc6ea9a16</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlignedNumber</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>af58253c0912aee517fcaa5a95a76f302</anchor>
      <arglist>(const AlignedNumber&lt; U, uAlign &gt; &amp;o)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator U</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a6aacdf154d5b55b99cc6de2e2c791af0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>value</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>abec5183a376b1047760e1d48604adf35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a38ad3a4a258f55b412c99c49cda3132f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber &amp;</type>
      <name>operator++</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>ad33702d97cddcd92c88c9e097c7405a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber &amp;</type>
      <name>operator--</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a9c4c4a46851ced3a0cb9dd20c4180620</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator++</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a632848edda7042416db45ac8e8a9f4db</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator--</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a6003995170d08e81f1c50b046f4be0dd</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator+</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a4c4a0bff6eef9548067ed028c459a1a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator-</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>af92eb32fc3e7183a1bb7f3b00825c717</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator~</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>ae137e6b7da9d209c63b2362e7f99c6cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator!</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a83e2223bc9dd29b08ac111a774811799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a4c5bfa271bfdedc33d1bc9895c0a32f7</anchor>
      <arglist>(+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a15a4fcf4818b53665219020ddba33b14</anchor>
      <arglist>(-=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_ASSIGN_OP *</type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a2205d64cc01296c2d027c740b8da9d89</anchor>
      <arglist>(/=);DUNE_ASSIGN_OP(%=</arglist>
    </member>
    <member kind="function">
      <type>DUNE_ASSIGN_OP^</type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a920f70c8d78910daeb603aa5901be1c9</anchor>
      <arglist>(&amp;=);DUNE_ASSIGN_OP(|=</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a0db4df62d4364fc601f471108892c8ca</anchor>
      <arglist>(&lt;&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_ASSIGN_OP</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a7e970b3fcf7244b0fda37d0df693c511</anchor>
      <arglist>(&gt;&gt;=)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_istream&lt; charT, Traits &gt; &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a6f4c1c3748efa1e2a848f129ad6104cc</anchor>
      <arglist>(std::basic_istream&lt; charT, Traits &gt; &amp;str, AlignedNumber &amp;u)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::basic_ostream&lt; charT, Traits &gt; &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01353.html</anchorfile>
      <anchor>a2c20277cfbd8ae11b4c496a4e58ed9e0</anchor>
      <arglist>(std::basic_ostream&lt; charT, Traits &gt; &amp;str, const AlignedNumber &amp;u)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AllSet</name>
    <filename>a01529.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TA</type>
      <name>Type</name>
      <anchorfile>a01529.html</anchorfile>
      <anchor>a3c41c31d404b64943a46f88d96b1890d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1918a1179a53724c3fc0a3ee1812d5e7</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlwaysFalse</name>
    <filename>a03069.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AlwaysTrue</name>
    <filename>a03073.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ArrayList</name>
    <filename>a01289.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a4bc89a83aec46a860c487b5c5abd1240abb9a04b5eefb8a84c671f02cf031545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>acd9e2161d252b53f7a162645d92f8da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a09e5d8c534ae1f76a5957c9e4063cbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aa76d40d0219d9c69649d334884c79d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a9001bd10815a115576b70fc7c5eed675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aeb29c418b805d1468e9778268b4e4138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a69712ac1ea2ca0283a0d8caa1837f5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; MemberType, N, A &gt;</type>
      <name>iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a8f9169b83b353074b46e370becef4131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; MemberType, N, A &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aef3f1c0384f4a7e64598dabbeed3eb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>ac7115acf8023bbe985125ca3a3b11d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>af93a828728d8c9b9755bc594c19cb871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a4bc89a83aec46a860c487b5c5abd1240abb9a04b5eefb8a84c671f02cf031545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0453c1e8cf90d912f11c521784c917c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga62f554c219a3a4c77a72e7017ffd99a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84de6115438d8d36040af42a92777f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab0fe4b4eb568aad576641c9f0885e094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae5d0068f5773845dd133cb2cc6c2ab9c</anchor>
      <arglist>(const_reference entry)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga00fb2e9b1c7ed63dc48185d9fece84b3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8ccee6554a287f665acf1cc9d85995b3</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga27f3a69eb5479e4fb9fa21ea98539264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2b627c8796d6946f57458f9e90980397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab837ba808b8bfeeb6dac65a00b2e9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga5f26956b01c6a3d9db4c9da3ecd8b7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ArrayListIterator&lt; T, N, A &gt;</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a9af3595344996cddca3a6289e3258f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstArrayListIterator&lt; T, N, A &gt;</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>ac67071d84d909afc93908187720e5d91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; Dune::IndexPair, 100 &gt;</name>
    <filename>a01289.html</filename>
    <member kind="typedef">
      <type>Dune::IndexPair</type>
      <name>MemberType</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>acd9e2161d252b53f7a162645d92f8da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair</type>
      <name>value_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a09e5d8c534ae1f76a5957c9e4063cbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair &amp;</type>
      <name>reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aa76d40d0219d9c69649d334884c79d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Dune::IndexPair &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a9001bd10815a115576b70fc7c5eed675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair *</type>
      <name>pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aeb29c418b805d1468e9778268b4e4138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Dune::IndexPair *</type>
      <name>const_pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a69712ac1ea2ca0283a0d8caa1837f5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; MemberType, N, std::allocator&lt; Dune::IndexPair &gt; &gt;</type>
      <name>iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a8f9169b83b353074b46e370becef4131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; MemberType, N, std::allocator&lt; Dune::IndexPair &gt; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aef3f1c0384f4a7e64598dabbeed3eb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>ac7115acf8023bbe985125ca3a3b11d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>af93a828728d8c9b9755bc594c19cb871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a4bc89a83aec46a860c487b5c5abd1240abb9a04b5eefb8a84c671f02cf031545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0453c1e8cf90d912f11c521784c917c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga62f554c219a3a4c77a72e7017ffd99a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84de6115438d8d36040af42a92777f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab0fe4b4eb568aad576641c9f0885e094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae5d0068f5773845dd133cb2cc6c2ab9c</anchor>
      <arglist>(const_reference entry)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga00fb2e9b1c7ed63dc48185d9fece84b3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8ccee6554a287f665acf1cc9d85995b3</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga27f3a69eb5479e4fb9fa21ea98539264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2b627c8796d6946f57458f9e90980397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab837ba808b8bfeeb6dac65a00b2e9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga5f26956b01c6a3d9db4c9da3ecd8b7f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; Dune::IndexPair, N &gt;</name>
    <filename>a01289.html</filename>
    <member kind="typedef">
      <type>Dune::IndexPair</type>
      <name>MemberType</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>acd9e2161d252b53f7a162645d92f8da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair</type>
      <name>value_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a09e5d8c534ae1f76a5957c9e4063cbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair &amp;</type>
      <name>reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aa76d40d0219d9c69649d334884c79d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Dune::IndexPair &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a9001bd10815a115576b70fc7c5eed675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair *</type>
      <name>pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aeb29c418b805d1468e9778268b4e4138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Dune::IndexPair *</type>
      <name>const_pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a69712ac1ea2ca0283a0d8caa1837f5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; MemberType, N, std::allocator&lt; Dune::IndexPair &gt; &gt;</type>
      <name>iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a8f9169b83b353074b46e370becef4131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; MemberType, N, std::allocator&lt; Dune::IndexPair &gt; &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aef3f1c0384f4a7e64598dabbeed3eb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>ac7115acf8023bbe985125ca3a3b11d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>af93a828728d8c9b9755bc594c19cb871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a4bc89a83aec46a860c487b5c5abd1240abb9a04b5eefb8a84c671f02cf031545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0453c1e8cf90d912f11c521784c917c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga62f554c219a3a4c77a72e7017ffd99a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84de6115438d8d36040af42a92777f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab0fe4b4eb568aad576641c9f0885e094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae5d0068f5773845dd133cb2cc6c2ab9c</anchor>
      <arglist>(const_reference entry)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga00fb2e9b1c7ed63dc48185d9fece84b3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8ccee6554a287f665acf1cc9d85995b3</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga27f3a69eb5479e4fb9fa21ea98539264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2b627c8796d6946f57458f9e90980397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab837ba808b8bfeeb6dac65a00b2e9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga5f26956b01c6a3d9db4c9da3ecd8b7f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ArrayList&lt; T, N, A &gt;</name>
    <filename>a01289.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>acd9e2161d252b53f7a162645d92f8da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a09e5d8c534ae1f76a5957c9e4063cbd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aa76d40d0219d9c69649d334884c79d46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a9001bd10815a115576b70fc7c5eed675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aeb29c418b805d1468e9778268b4e4138</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a69712ac1ea2ca0283a0d8caa1837f5e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; MemberType, N, A &gt;</type>
      <name>iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a8f9169b83b353074b46e370becef4131</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; MemberType, N, A &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>aef3f1c0384f4a7e64598dabbeed3eb1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>ac7115acf8023bbe985125ca3a3b11d6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>af93a828728d8c9b9755bc594c19cb871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01289.html</anchorfile>
      <anchor>a4bc89a83aec46a860c487b5c5abd1240abb9a04b5eefb8a84c671f02cf031545a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0453c1e8cf90d912f11c521784c917c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga62f554c219a3a4c77a72e7017ffd99a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84de6115438d8d36040af42a92777f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab0fe4b4eb568aad576641c9f0885e094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae5d0068f5773845dd133cb2cc6c2ab9c</anchor>
      <arglist>(const_reference entry)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga00fb2e9b1c7ed63dc48185d9fece84b3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8ccee6554a287f665acf1cc9d85995b3</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga27f3a69eb5479e4fb9fa21ea98539264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2b627c8796d6946f57458f9e90980397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab837ba808b8bfeeb6dac65a00b2e9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga5f26956b01c6a3d9db4c9da3ecd8b7f4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ArrayListIterator</name>
    <filename>a01281.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
    <base>RandomAccessIteratorFacade&lt; ArrayListIterator&lt; T, N, A &gt;, A::value_type, A::value_type &amp;, A::difference_type &gt;</base>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a15b837e70ed08617eea3fd1dede3fa25a667321d60822cb5208d4b577cff47115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>MemberType</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a44d8c9d4aa483f2caaf01337649a12d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a57a0b493a61bf429936c80616b9d1972</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ab48b44ccc846c6e3603feb94899a8c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>afc84dfa83ee3a1cee95d4c92959b9719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>acb594abf9749c018d13d9ef3fcb38f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a15b837e70ed08617eea3fd1dede3fa25a667321d60822cb5208d4b577cff47115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; A::value_type &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; T, N, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0cdad573e352c6502c0b7167bdc27d55</anchor>
      <arglist>(const ArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaafd1d8065d9a75eb2ae575dece10c82d</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a141c2254e8326f22057e8e33086412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4456b3d5cbaa8d387a79412a97749ada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaba1512d36435a276d5076176981b9f94</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae3afc010b2150044b31d4d36c661eb44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseToHere</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga492de54ad819c0b784b7981d68228e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>position</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a39fc769d027b239d42226a5a1e54ebca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadcaa9ef9cac9effc73f797c9ec914d43</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafbcc3e5345f31e56fc77ef2cec30a4e2</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayListIterator&lt; T, N, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0d198bd472c7e6e5358fd51dd27f9d1</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayListIterator</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a523a803f75967ba8d98d8b938d3af5b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ArrayList&lt; T, N, A &gt;</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a38d983a004da53b7d2e038e696e56725</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConstArrayListIterator&lt; T, N, A &gt;</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ac67071d84d909afc93908187720e5d91</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AssociativePropertyMap</name>
    <filename>a02449.html</filename>
    <templarg></templarg>
    <base protection="private">RAPropertyMapHelper&lt; T::value_type::second_type &amp;, AssociativePropertyMap&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Dune::At</name>
    <filename>a02941.html</filename>
    <templarg>N</templarg>
    <member kind="function" static="yes">
      <type>static TupleAccessTraits&lt; typename AtType&lt; N, Tuple &gt;::Type &gt;::NonConstType</type>
      <name>get</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga25bd965ead78cac443c8ed01c8f70672</anchor>
      <arglist>(Tuple &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TupleAccessTraits&lt; typename AtType&lt; N, Tuple &gt;::Type &gt;::ConstType</type>
      <name>get</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga864db2500c6da8ba583ac288c76bdd19</anchor>
      <arglist>(const Tuple &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AtType</name>
    <filename>a02937.html</filename>
    <templarg>N</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::tuple_element&lt; std::tuple_size&lt; Tuple &gt;::value - N - 1, Tuple &gt;::type</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga79482cfe9e95004e408a5fc22bed5957</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType</name>
    <filename>a03121.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; const T &gt;</name>
    <filename>a03133.html</filename>
    <templarg></templarg>
    <base>Dune::AutonomousValueType</base>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; Simd::VcImpl::Proxy&lt; V &gt; &gt;</name>
    <filename>a02793.html</filename>
    <templarg></templarg>
    <base>AutonomousValueType&lt; Simd::VcImpl::Proxy&lt; V &gt;::value_type &gt;</base>
    <member kind="typedef">
      <type>Simd::VcImpl::Proxy&lt; V &gt;::value_type</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AutonomousValueType&lt; Simd::VcImpl::Proxy&lt; V &gt;::value_type &gt;</name>
    <filename>a03121.html</filename>
    <member kind="typedef">
      <type>Simd::VcImpl::Proxy&lt; V &gt;::value_type</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; std::vector&lt; bool &gt;::reference &gt;</name>
    <filename>a03141.html</filename>
    <member kind="typedef">
      <type>bool</type>
      <name>type</name>
      <anchorfile>a03141.html</anchorfile>
      <anchor>a1c5109740f4aae48f9d1cc7696c18ae8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; T &amp; &gt;</name>
    <filename>a03125.html</filename>
    <templarg></templarg>
    <base>Dune::AutonomousValueType</base>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; T &amp;&amp; &gt;</name>
    <filename>a03129.html</filename>
    <templarg></templarg>
    <base>Dune::AutonomousValueType</base>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; volatile const T &gt;</name>
    <filename>a03145.html</filename>
    <templarg></templarg>
    <base>Dune::AutonomousValueType</base>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AutonomousValueType&lt; volatile T &gt;</name>
    <filename>a03137.html</filename>
    <templarg></templarg>
    <base>Dune::AutonomousValueType</base>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03121.html</anchorfile>
      <anchor>ad77a42a936aba0f4cde5d642fd964108</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BidirectionalIteratorFacade</name>
    <filename>a01877.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab222df7a5b94fb7108165fd755c9d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; V &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a17dd04bfe7f87d179b866824ebf4c919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>difference_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3109e258ecc479d1a89264cb008a6d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0f6dd08b4acd03d36f3a8938a11c2200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ac0d8921fdfff47c3e58565221808728c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DerivedType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a38eca8a2f5f291eea2e671c779b4835c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>afa784c7ae85e48ce1b92e2d4c5e4607b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>Pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a84852b8bb971d813fdea08505e8beb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab46450f118d91d1ab6f369de739a317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a87c3aa03eb2c5dd985c8d77ae852e87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2aa2260fb114003aba8b741511a1ce28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3fab12364a98969c3c47f099e67b03af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0457e2e3dabf7b32f4941817ca58d502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a95b63baa3c45e25ef363fc0558943b2b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2cc0819c6d8a6170ecf692969c1a4057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>abad46a4c4536249d4cf557f63506e23a</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BidirectionalIteratorFacade&lt; ContainerWrapperIterator&lt; CW, T, R &gt;, T, R, int &gt;</name>
    <filename>a01877.html</filename>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab222df7a5b94fb7108165fd755c9d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a17dd04bfe7f87d179b866824ebf4c919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3109e258ecc479d1a89264cb008a6d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0f6dd08b4acd03d36f3a8938a11c2200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ac0d8921fdfff47c3e58565221808728c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; CW, T, R &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a38eca8a2f5f291eea2e671c779b4835c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>afa784c7ae85e48ce1b92e2d4c5e4607b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a84852b8bb971d813fdea08505e8beb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DifferenceType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab46450f118d91d1ab6f369de739a317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a87c3aa03eb2c5dd985c8d77ae852e87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2aa2260fb114003aba8b741511a1ce28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3fab12364a98969c3c47f099e67b03af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0457e2e3dabf7b32f4941817ca58d502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a95b63baa3c45e25ef363fc0558943b2b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2cc0819c6d8a6170ecf692969c1a4057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>abad46a4c4536249d4cf557f63506e23a</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::bigunsignedint</name>
    <filename>a01301.html</filename>
    <templarg>k</templarg>
    <member kind="enumvalue">
      <name>bits</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a830709c30404161b2ecf9337341492e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87af95f86520494656487c4f015abf10e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexdigits</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a6002f5b0c2baa70f9756d24fb7591b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bitmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a55823079ef91ceaa8b3e51dbc6e09945</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>compbitmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a401117247cfaa4ef2ba4ba45cafadfde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overflowmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a554e3967212abaf0c931e9415e383782</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bits</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a830709c30404161b2ecf9337341492e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>n</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87af95f86520494656487c4f015abf10e93</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexdigits</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a6002f5b0c2baa70f9756d24fb7591b67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>bitmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a55823079ef91ceaa8b3e51dbc6e09945</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>compbitmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a401117247cfaa4ef2ba4ba45cafadfde</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>overflowmask</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac11f2d078024e966078633c9b2a40e87a554e3967212abaf0c931e9415e383782</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga7276ad3ad9f0130df9307acf08c0dd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga6bf30d701bea2cedf6912f27a9e6bc98</anchor>
      <arglist>(Signed x, typename std::enable_if&lt; std::is_integral&lt; Signed &gt;::value &amp;&amp;std::is_signed&lt; Signed &gt;::value &gt;::type *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga89f5344581b995954cad1c1777e9f900</anchor>
      <arglist>(std::uintmax_t x)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga588c20d32be8eda48a3755baba464dd3</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a0115f4221d34347dd4e4010b2ba10110</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga33d7cece1203eab3cdbbb982fcacd608</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>abebce59ef0b85b1767e1c7ae314454e5</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae07a08fd0165093a4a120ab5ab30e3f8</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a2e765c1c65f7d3b675442aff639d3be0</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaea1b22b024fc727899cb356c8301df10</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gabca7e8dbfe73be43c64c517621f5177e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a033a73064aa7af398ba4ea73d8f46627</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga060fc6f6318d3631ac5a033cb8138458</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a0ab9d3c77d22acd60e3db38ff1b1d871</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gacb3b8f598053bbbde7cdfe60fe2ef879</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator&amp;</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a490b1b9339432d2fc8086c71e713ef32</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga75df8592292ff5ec40244d5fa6a26427</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator^</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac09912f775f0874b41e4a898d1ee939b</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga34d5f252a0f67b144c564b8c2591136c</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator|</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a22fd7c99bba7b80a4ecba1df93800338</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gabdc13f31b8591f91da4f7d1d5956b80d</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator~</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaaa7d16f0cab60097e45cd6ac53bd6883</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga2602e05148463d58dcf1cd4413aae120</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga91333533e6a75129f0c4e5b5e047856d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga5d1ba34e71ae213e710fabd1fb200c58</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga4a02b0f85e2a0c310392d2e786314233</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae5481e0b5ad21c8cd79c5c5bdf411578</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga84c245fe6f331cc855c4990cc35166d6</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga609734cdd317cf13ceae75369b7725c3</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga65605f984d47febd539f325e213ea8eb</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>std::uint_least32_t</type>
      <name>touint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf13823151f4fb0d8033b865257fb0adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>todouble</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gad1e00a0b5b456bbfc5b328ff74fcd0bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>bigunsignedint&lt; k/2 &gt;</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>ac8cacfe68d9dee78ab3a6cc52e1ec5a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPITraits&lt; bigunsignedint&lt; k &gt; &gt;</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>a91e5acd5da6eb3d587e79599c45329c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::size_t</type>
      <name>hash_value</name>
      <anchorfile>a01301.html</anchorfile>
      <anchor>aeb911d5a48fb8c2d2057e7fb0a741262</anchor>
      <arglist>(const bigunsignedint &amp;arg)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BitSetVector</name>
    <filename>a01317.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::bitset&lt; block_size &gt;</type>
      <name>value_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a626e869f3146626079719f94fcc5323f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Allocator &gt;</type>
      <name>reference</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a24dedac71eee2b285633b6c5970d8335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Allocator &gt;</type>
      <name>const_reference</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a3d2df775cc1f5cda7e2a0d7cb073dd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Allocator &gt; *</type>
      <name>pointer</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a77368e20a181448fe1ec3fb66e7d8331</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Allocator &gt; *</type>
      <name>const_pointer</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a1748752d70e783952c5fc98ce9a32b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Allocator &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a0ca0c0337cc2bfcaa897b47a3a73f882</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>af12b8bef1cf073e76837cdcaa6ae75f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; BitSetVector&lt; block_size, Allocator &gt;, value_type, reference, std::ptrdiff_t, ForwardIteratorFacade &gt;</type>
      <name>iterator</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>ac6c9da864ba7e7b3d5290436ed8c8895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; const BitSetVector&lt; block_size, Allocator &gt;, const value_type, const_reference, std::ptrdiff_t, ForwardIteratorFacade &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a558144ccff72f6c0eda0c8ae34b57f94</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a156105f898a21adafeadc62705d1ceba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>abf65deaad3905c70b88103b50a7e5ed8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a4703da2f4822e52508b574a182528434</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a1fbad5981cf377ee853ce2250161384d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitSetVector</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a4e048c5c08512f3c5c26fd1b62e72506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitSetVector</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a6e5b519d1cb32befb6d6c4128df69ae6</anchor>
      <arglist>(const BlocklessBaseClass &amp;blocklessBitField)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitSetVector</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>af573d7a6941f18bcbfc663d60bb8f335</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BitSetVector</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>ab60061d523874b8e190cdc397548f63c</anchor>
      <arglist>(int n, bool v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a7607c1864375bd17f429dd14675576ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>af00e82c69761b7630ffd26ac64a1360c</anchor>
      <arglist>(int n, bool v=bool())</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>aa6b0bd44649e2d510d34874d396a2183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAll</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a4fde9820c8b79db454de25485df96d57</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsetAll</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>af6090b5ea99037c9f5e7218579fdc58d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a971d8a2703356df2484af9d84ecee71e</anchor>
      <arglist>(int i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a144cbc3e6d7b48725b897f1efeb7e923</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a65a3fb7da11443d39af77a787b332f5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a717a58fbf15243e4a761a840004a26ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a4b4a95b39af9f949cd1f38df89c5c765</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>countmasked</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a261e575391489b15deb2bcab2d85652c</anchor>
      <arglist>(int j) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BitSetVectorReference&lt; block_size, Allocator &gt;</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a674f57df4a5a46d30c3efc2a3c52705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BitSetVectorConstReference&lt; block_size, Allocator &gt;</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a134c06d316708afd96c06aea5702ab29</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a099fd393a3eb13ac1b7e134c483d2127</anchor>
      <arglist>(std::ostream &amp;s, const BitSetVector &amp;v)</arglist>
    </member>
    <member kind="typedef">
      <type>std::bitset&lt; block_size &gt;</type>
      <name>value_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a626e869f3146626079719f94fcc5323f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Allocator &gt;</type>
      <name>reference</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a24dedac71eee2b285633b6c5970d8335</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Allocator &gt;</type>
      <name>const_reference</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a3d2df775cc1f5cda7e2a0d7cb073dd2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Allocator &gt; *</type>
      <name>pointer</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a77368e20a181448fe1ec3fb66e7d8331</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Allocator &gt; *</type>
      <name>const_pointer</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a1748752d70e783952c5fc98ce9a32b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Allocator &gt;::size_type</type>
      <name>size_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a0ca0c0337cc2bfcaa897b47a3a73f882</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>af12b8bef1cf073e76837cdcaa6ae75f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; BitSetVector&lt; block_size, Allocator &gt;, value_type, reference, std::ptrdiff_t, ForwardIteratorFacade &gt;</type>
      <name>iterator</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>ac6c9da864ba7e7b3d5290436ed8c8895</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; const BitSetVector&lt; block_size, Allocator &gt;, const value_type, const_reference, std::ptrdiff_t, ForwardIteratorFacade &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a01317.html</anchorfile>
      <anchor>a558144ccff72f6c0eda0c8ae34b57f94</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BitSetVectorConstReference</name>
    <filename>a01325.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::bitset&lt; block_size &gt;</type>
      <name>bitset</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>aa3d425b79a6dd4ef3ab48de8ac9445cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::const_reference</type>
      <name>reference</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>af4a238d3e387251053aad2b9850d3a45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a00d7068853e9826906d145f9dbe011a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>abaa3cc2c18c2f51d23dc12ee128ce4ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a15965b9a55dc1efdc039134cf7f79b48</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a3f6da6a3d44750b9a02c68c353af007d</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator~</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>abb4801f898a4bdf10cd99d183cb8e67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ac9ce5804f274d852bc70c02c9abc319d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ace0db548954a0423a0440a39af1a1cc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>addd5977eecfa87e396fee617e8b55392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>none</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ad732ab8a912109a534404162eb27528f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ab2f5bea51d560df1c5d8b9101fcf6144</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0bbc060b77401f33a3971afc55e196c9</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a1519d168ca79b23a5b668f45ce4123ef</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bitset</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0917204cce59c286115d16561837187d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0437c9d130dfb13fe9e7e3b69a5dfa93</anchor>
      <arglist>(const bitset &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a58e617650a2faf7095a366909d998c72</anchor>
      <arglist>(const BitSetVectorConstReference &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a43e28d8c2042e4aa42c2e2e059527fa9</anchor>
      <arglist>(const bitset &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>aa2d3a4f18afd166f3d05fbdcd9d09e7b</anchor>
      <arglist>(const BitSetVectorConstReference &amp;bs) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::BitSetVector&lt; block_size, Alloc &gt;</type>
      <name>BitSetVector</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a8bd910d0be75c6070ba48610dacfa23c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BitSetVectorConstReference</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a303324140d1eaae4bcb5839c4110f5f0</anchor>
      <arglist>(const BitSetVector &amp;blockBitField_, int block_number_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>BitSetVectorConstReference &amp;</type>
      <name>operator=</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a67567708e1b7f27b7cc31ea19d7b70b2</anchor>
      <arglist>(const BitSetVectorConstReference &amp;b)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_reference</type>
      <name>getBit</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a3fd293a234db6378cbff180087844c97</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a6116699491845d60d7559e7729695650</anchor>
      <arglist>(const BS &amp;bs) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BitSetVector &amp;</type>
      <name>blockBitField</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a33130c7445546fd132dfa53c68943b47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>block_number</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>adfac75a483d9f700de70de31a17147fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::BitSetVector&lt; block_size, Alloc &gt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a9c28ae0c2e215fe7b1f6a66a17bd52f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>BitSetVectorReference&lt; block_size, Alloc &gt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a68722b05b302430dbdcc78cfafbf0dcc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>acb92733eadef8a01c4093ee2e98b7f49</anchor>
      <arglist>(std::ostream &amp;s, const BitSetVectorConstReference &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BitSetVectorReference</name>
    <filename>a01321.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <base>Dune::BitSetVectorConstReference</base>
    <member kind="typedef">
      <type>std::bitset&lt; block_size &gt;</type>
      <name>bitset</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a7821687886035794917929af5127cd22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a4e8f09409641e4dcfa4de7eed5d8cb65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::reference</type>
      <name>reference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a9a370c0a529bfa604f88cf23e6ce0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a251d103b1445b4b18d44b2fca13ba5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>acacb3d912c86f4d8b4db611c1b0a5a56</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a737832fc89cacfd6076610140bd11dac</anchor>
      <arglist>(const bitset &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a44c5d0f208de58cddd3865b85ef8b339</anchor>
      <arglist>(const BitSetVectorConstReference &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a03b7474ae9560d6ba9071d8f6921591c</anchor>
      <arglist>(const BitSetVectorReference &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a3601c4e9a96d83391cbb23afa70f73b6</anchor>
      <arglist>(const bitset &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>adc8903663c7bc69600def85c09e286f4</anchor>
      <arglist>(const BitSetVectorConstReference &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a9e9f76078c71c09f0fa1c96042305007</anchor>
      <arglist>(const bitset &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator|=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a8bc7661606a883427a8a7021f4e0e80e</anchor>
      <arglist>(const BitSetVectorConstReference &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a3d6412ebe2bedf8c89e03699a1d6b95f</anchor>
      <arglist>(const bitset &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator^=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>adc1930765a85d4a1e1667a2b47d30b1f</anchor>
      <arglist>(const BitSetVectorConstReference &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator&lt;&lt;=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>af01d927c0eab54d8bba089f790cca52f</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>operator&gt;&gt;=</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>afb9ea02892a55a9f94ff44164ae87790</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>set</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a1a2c147befd45efc63c1a0eddae1d9dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>flip</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a21d8ccb9da5ede13149401b27a7163b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>reset</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a4ae75b2ad143e2305f4298c302337a6c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>set</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a377db75fb9a8feaf90de01ba443c69c3</anchor>
      <arglist>(size_type n, int val=1)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>reset</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a7792c6f414802ebd222efece184151a9</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>BitSetVectorReference &amp;</type>
      <name>flip</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>af25ae8eed12c75e01ae92164df65c232</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a1f35c87efe1ca5f9eff9c828acde8253</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a0bbc060b77401f33a3971afc55e196c9</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a15965b9a55dc1efdc039134cf7f79b48</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a3f6da6a3d44750b9a02c68c353af007d</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>bitset</type>
      <name>operator~</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>abb4801f898a4bdf10cd99d183cb8e67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ac9ce5804f274d852bc70c02c9abc319d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ace0db548954a0423a0440a39af1a1cc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>addd5977eecfa87e396fee617e8b55392</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>none</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ad732ab8a912109a534404162eb27528f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>ab2f5bea51d560df1c5d8b9101fcf6144</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>test</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0bbc060b77401f33a3971afc55e196c9</anchor>
      <arglist>(size_type n) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a1519d168ca79b23a5b668f45ce4123ef</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bitset</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0917204cce59c286115d16561837187d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a0437c9d130dfb13fe9e7e3b69a5dfa93</anchor>
      <arglist>(const bitset &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a58e617650a2faf7095a366909d998c72</anchor>
      <arglist>(const BitSetVectorConstReference &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a43e28d8c2042e4aa42c2e2e059527fa9</anchor>
      <arglist>(const bitset &amp;bs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>aa2d3a4f18afd166f3d05fbdcd9d09e7b</anchor>
      <arglist>(const BitSetVectorConstReference &amp;bs) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::BitSetVector&lt; block_size, Alloc &gt;</type>
      <name>BitSetVector</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a2d3aaa1a138c709210fa91cdf80dbb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::BitSetVectorConstReference&lt; block_size, Alloc &gt;</type>
      <name>BitSetVectorConstReference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a5262d97b15d625c678a8736f087d1ba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>BitSetVectorReference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a49d36948af85de105e2919936e0f559a</anchor>
      <arglist>(BitSetVector &amp;blockBitField_, int block_number_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>reference</type>
      <name>getBit</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a48a412bd4c8272a6afa5160b6e6d0bfb</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_reference</type>
      <name>getBit</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a3fd293a234db6378cbff180087844c97</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const_reference</type>
      <name>getBit</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a3fd293a234db6378cbff180087844c97</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>a6116699491845d60d7559e7729695650</anchor>
      <arglist>(const BS &amp;bs) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>BitSetVector &amp;</type>
      <name>blockBitField</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a56a6a7cd69c723812edd849a6032344d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>block_number</name>
      <anchorfile>a01325.html</anchorfile>
      <anchor>adfac75a483d9f700de70de31a17147fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::BitSetVector&lt; block_size, Alloc &gt;</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a9c28ae0c2e215fe7b1f6a66a17bd52f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::reference</type>
      <name>reference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a9a370c0a529bfa604f88cf23e6ce0be5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; bool, Alloc &gt;::const_reference</type>
      <name>const_reference</name>
      <anchorfile>a01321.html</anchorfile>
      <anchor>a251d103b1445b4b18d44b2fca13ba5ce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::impl::Buffer</name>
    <filename>a02153.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>adb9d4d5110c44653ea4523fddc4a9aa6</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a68e075f2ae5adc2734c8d561198d70f0</anchor>
      <arglist>(V &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>ad88077d58f45d406b140a231cf082505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a3b111cec5e3b0d762b9befb34560c66d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a62fde191050286b7563c6c77413ee271</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>value</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a3462c347ddd102a9981440bd5eb9deb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Buffer&lt; R &gt;</name>
    <filename>a02153.html</filename>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>adb9d4d5110c44653ea4523fddc4a9aa6</anchor>
      <arglist>(bool valid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a68e075f2ae5adc2734c8d561198d70f0</anchor>
      <arglist>(V &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>get</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>ad88077d58f45d406b140a231cf082505</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a3b111cec5e3b0d762b9befb34560c66d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>R &amp;</type>
      <name>operator*</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a62fde191050286b7563c6c77413ee271</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; R &gt;</type>
      <name>value</name>
      <anchorfile>a02153.html</anchorfile>
      <anchor>a3462c347ddd102a9981440bd5eb9deb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::impl::Buffer&lt; T &amp; &gt;</name>
    <filename>a02157.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a452244eaa73c4de337aa2bdf7bf2a6f1</anchor>
      <arglist>(bool valid=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>afbd96d60f9a2dd1e336b1fb14645c0a5</anchor>
      <arglist>(V &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>get</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a10b82fe09888174666f78f81b99f030e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>ac8f705e143a7de0dc83ed16f1f3dc934</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator*</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>aec8b9f5be1de2f053a66b4d4ebecb7b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::reference_wrapper&lt; T &gt; &gt;</type>
      <name>value</name>
      <anchorfile>a02157.html</anchorfile>
      <anchor>a445a5078c366120fc0ba3d0dcc349523</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::impl::Buffer&lt; void &gt;</name>
    <filename>a02161.html</filename>
    <member kind="function">
      <type></type>
      <name>Buffer</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>af1e6146bcdfe51e49f250898c42fa32d</anchor>
      <arglist>(bool valid=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a4ba66cd0b4596d5b18d62e1a5b84e71f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>ad17875d19ff505986446f77fe8bef684</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>valid_</name>
      <anchorfile>a02161.html</anchorfile>
      <anchor>a3c0b7dcd6a22e006dd5942872dbb2b69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BufferedCommunicator</name>
    <filename>a01997.html</filename>
    <member kind="function">
      <type></type>
      <name>BufferedCommunicator</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a1f300848507ebf916d81c4408ddc1822</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_same&lt; SizeOne, typename CommPolicy&lt; Data &gt;::IndexedTypeFlag &gt;::value, void &gt;::type</type>
      <name>build</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>abdfc7d3f1a575c48c9a0b3475f8ba01d</anchor>
      <arglist>(const Interface &amp;interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>aeab99a5db0cf455c6b05fb281a638776</anchor>
      <arglist>(const Data &amp;source, const Data &amp;target, const Interface &amp;interface)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a4f86bb99c54f3bd2e46181853a562ac7</anchor>
      <arglist>(const Data &amp;source, Data &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backward</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>ae96294473aa3ceff07fbed9d85650146</anchor>
      <arglist>(Data &amp;source, const Data &amp;dest)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>aeb716a11bebea8a36d04685c67102ca3</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backward</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a17b330cca5a0da2048a985c250dd2193</anchor>
      <arglist>(Data &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a97bf4eb3eb500a82c40e789028fe6f8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BufferedCommunicator</name>
      <anchorfile>a01997.html</anchorfile>
      <anchor>a2a56315145fce81c6dc8b76dc435889b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Cloneable</name>
    <filename>a01865.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual Cloneable *</type>
      <name>clone</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>ad99ab885ee85b2565769ebbebaf937d8</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Cloneable</name>
      <anchorfile>a01865.html</anchorfile>
      <anchor>a7f08c4409e8f17388832c262eaadea88</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CollectiveIterator</name>
    <filename>a02221.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::CollectiveIterator::iterator</class>
    <member kind="typedef">
      <type>std::map&lt; int, std::pair&lt; RemoteIndexList *, RemoteIndexList * &gt; &gt;</type>
      <name>RemoteIndexMap</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aad15e575478994cdcca2a23a69b3648e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CollectiveIterator</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a4d0229b383f88b7e869d3d346d536535</anchor>
      <arglist>(const RemoteIndexMap &amp;map_, bool send)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a71f04cfdd4d8d791dfb025137fa5babb</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a33305dac74dca574c9510d618b845cc3</anchor>
      <arglist>(const GlobalIndex &amp;global, const Attribute &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>CollectiveIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a25946dd731d82c7551e389060a224cac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a664b6cc4282ae8fb7821f5716bace6ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>aeb552d2655dc5f9acafa40b340f39843</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02221.html</anchorfile>
      <anchor>a2ef29aa2d7232de5d13764541da34add</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Combine</name>
    <filename>a01545.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9d4f7c53b0cf0f05e7535a1585e9dda7</anchor>
      <arglist>(const TA &amp;item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::common_bits</name>
    <filename>a01373.html</filename>
    <templarg>current</templarg>
    <templarg>mask</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gga2d909b8d182854d2d5d9e5d6f4452767ad6324c657abd3cf8771e77b98987500b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gga2d909b8d182854d2d5d9e5d6f4452767ad6324c657abd3cf8771e77b98987500b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy</name>
    <filename>a01973.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::CommPolicy::CommPolicy&lt; VariableBlockVector&lt; FieldVector&lt; K, n &gt;, A &gt; &gt;</class>
    <class kind="class">Dune::CommPolicy::CommunicationError</class>
    <class kind="struct">Dune::CommPolicy::CopyGatherScatter</class>
    <class kind="class">Dune::CommPolicy::FieldVector</class>
    <class kind="class">Dune::CommPolicy::VariableBlockVector</class>
    <member kind="typedef">
      <type>V</type>
      <name>Type</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>af60cf019b8e895938b6143f186c62d1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V::value_type</type>
      <name>IndexedType</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a2cda5e943599178476fac79e207b365b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SizeOne</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a82711a42e162a721414c8d9737a8ee0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const void *</type>
      <name>getAddress</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>ab44c68eebabd557379362711bd3e40d3</anchor>
      <arglist>(const V &amp;v, int index)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getSize</name>
      <anchorfile>a01973.html</anchorfile>
      <anchor>a4b5cf5c019f467b3e1f7798b076ceee8</anchor>
      <arglist>(const V &amp;, int index)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy::CommPolicy&lt; VariableBlockVector&lt; FieldVector&lt; K, n &gt;, A &gt; &gt;</name>
    <filename>a01985.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>VariableBlockVector&lt; FieldVector&lt; K, n &gt;, A &gt;</type>
      <name>Type</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a63316a3f87f4edf2011ffa151e1abd73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type::B</type>
      <name>IndexedType</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>af196fdca100c252ea392e44d2cdf02b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VariableSize</type>
      <name>IndexedTypeFlag</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a19085e204009d8644f44f8b9645559f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const void *</type>
      <name>getAddress</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a3733ca17545f2bc697a42f3683325c5c</anchor>
      <arglist>(const Type &amp;v, int i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getSize</name>
      <anchorfile>a01985.html</anchorfile>
      <anchor>a0d606c4b57293f6b13b0d1e933cfb32e</anchor>
      <arglist>(const Type &amp;v, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Communication</name>
    <filename>a01961.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Communication</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af9873f31f9e81114b4edcc50b01b0a3c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Communication</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a8e0e5bd2a26b9faa9e838f6511251299</anchor>
      <arglist>(const Communicator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a1ef747573e83679ea7e2051d7f774a24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator No_Comm</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a3055f415e453de1f4ac8065dcb28e04c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a52ca21c831f476ec12f4735d3e79a00a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>adb0dd6b07802d83380704c6cbdf16142</anchor>
      <arglist>([[maybe_unused]] const T &amp;data, [[maybe_unused]] int dest_rank, [[maybe_unused]] int tag)</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; T &gt;</type>
      <name>isend</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a8b06689882614f4f8510ec0ce1963f76</anchor>
      <arglist>([[maybe_unused]] const T &amp;&amp;data, [[maybe_unused]] int dest_rank, [[maybe_unused]] int tag)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ae0d7b8e5cf649035118961e377b317ee</anchor>
      <arglist>([[maybe_unused]] T &amp;&amp;data, [[maybe_unused]] int source_rank, [[maybe_unused]] int tag, [[maybe_unused]] void *status=0)</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; T &gt;</type>
      <name>irecv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a119f6a1d5e7bb38ee724ba3610a1cf5a</anchor>
      <arglist>([[maybe_unused]] T &amp;&amp;data, [[maybe_unused]] int source_rank, [[maybe_unused]] int tag)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rrecv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a651a997da89086023ae1401bd42ffcb6</anchor>
      <arglist>([[maybe_unused]] T &amp;&amp;data, [[maybe_unused]] int source_rank, [[maybe_unused]] int tag, [[maybe_unused]] void *status=0) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a1fc87be60f9760a9480c9dc152930440</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sum</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af91c7df82c46b3860dc20e9f89d87b6a</anchor>
      <arglist>([[maybe_unused]] T *inout, [[maybe_unused]] int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prod</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aa4689220c1adca5ccb16ee21266fdf71</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prod</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a3aed7ad16dbb88b69953154d0b78959d</anchor>
      <arglist>([[maybe_unused]] T *inout, [[maybe_unused]] int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a69c5b8222c61c324476264ebd441232e</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aaf1b4ccfadda1f2c00da8cd53ec0544d</anchor>
      <arglist>([[maybe_unused]] T *inout, [[maybe_unused]] int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a173db854792edfe07f776458740857d2</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ae606bd4005d0075e9130c94cd8ad9d28</anchor>
      <arglist>([[maybe_unused]] T *inout, [[maybe_unused]] int len) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>barrier</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ae17ea8bcd9c51be5dfb5e13442eb62fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; void &gt;</type>
      <name>ibarrier</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a101987dc3496ad7eb1b8215ccbdbb9de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a1ef0144aec181751dc99df50caf3530b</anchor>
      <arglist>([[maybe_unused]] T *inout, [[maybe_unused]] int len, [[maybe_unused]] int root) const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; T &gt;</type>
      <name>ibroadcast</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>aac346fda778ae1b3375e2cd04c9e3bbd</anchor>
      <arglist>(T &amp;&amp;data, int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gather</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a9fdc66a63d1bb3d05d09fff7cb513fff</anchor>
      <arglist>(const T *in, T *out, int len, [[maybe_unused]] int root) const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; TOUT &gt;</type>
      <name>igather</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ac77af2f58faa237db5c6c63ad4acf57b</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out, int root)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a1cf02572dfecaa05c543196cf621dae3</anchor>
      <arglist>(const T *in, int sendDataLen, T *out, [[maybe_unused]] int *recvDataLen, int *displ, [[maybe_unused]] int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatter</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a877d69beafb4280d1f37419ea378f0c6</anchor>
      <arglist>(const T *sendData, T *recvData, int len, [[maybe_unused]] int root) const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; TOUT &gt;</type>
      <name>iscatter</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>ae857e2024fc20bc7f4831600e6ac1108</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out, int root)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatterv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a542ddf9cc9600508b9fd788c52fd19cb</anchor>
      <arglist>(const T *sendData, int *sendDataLen, int *displ, T *recvData, [[maybe_unused]] int recvDataLen, [[maybe_unused]] int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allgather</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a803872d4e3cd6f9f53d481e9959f6f47</anchor>
      <arglist>(const T *sbuf, int count, T *rbuf) const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; TOUT &gt;</type>
      <name>iallgather</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a86b8fde6288d79181f3e0f42701a750a</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allgatherv</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>af08dc5ff5aa85b3563fd4c8545665421</anchor>
      <arglist>(const T *in, int sendDataLen, T *out, [[maybe_unused]] int *recvDataLen, int *displ) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allreduce</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>afff6d2e3d20624cd19e249f8bf939798</anchor>
      <arglist>([[maybe_unused]] Type *inout, [[maybe_unused]] int len) const</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; TOUT &gt;</type>
      <name>iallreduce</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a679199300f66b5707cae85d251846bcc</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out)</arglist>
    </member>
    <member kind="function">
      <type>PseudoFuture&lt; T &gt;</type>
      <name>iallreduce</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a9731ba41dc71489c939575ed09f402da</anchor>
      <arglist>(T &amp;&amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allreduce</name>
      <anchorfile>a01961.html</anchorfile>
      <anchor>a15b768750823821a242b20a92ff3a848</anchor>
      <arglist>(const Type *in, Type *out, int len) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Communication&lt; MPI_Comm &gt;</name>
    <filename>a02137.html</filename>
    <member kind="function">
      <type></type>
      <name>Communication</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ae9ea46012bc9abda6405389beeb67fd0</anchor>
      <arglist>(const MPI_Comm &amp;c=MPI_COMM_WORLD)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a50d39037a0984cdbf4ab0be6529154cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ab1cfce4400bd698a89f187fa93b58449</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>send</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>af5d5e675c568d7056a62a837756575cd</anchor>
      <arglist>(const T &amp;data, int dest_rank, int tag) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; const T &gt;</type>
      <name>isend</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a9721a928fcfb83ede16b104cba4715ba</anchor>
      <arglist>(const T &amp;&amp;data, int dest_rank, int tag) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>recv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a2b70117c0dd41cd5f2d77b5fe7cd51ef</anchor>
      <arglist>(T &amp;&amp;data, int source_rank, int tag, MPI_Status *status=MPI_STATUS_IGNORE) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; T &gt;</type>
      <name>irecv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a6e2df5c327ad17125c6e7cf534bdfc5b</anchor>
      <arglist>(T &amp;&amp;data, int source_rank, int tag) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>rrecv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>abd97a1335770ebb72e0e3396f343f563</anchor>
      <arglist>(T &amp;&amp;data, int source_rank, int tag, MPI_Status *status=MPI_STATUS_IGNORE) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>sum</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aa83d48067898ace39fae13eb85a8f8ea</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sum</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a93edad169e87c83e1986dc4119db180b</anchor>
      <arglist>(T *inout, int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>prod</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>afd89793190161043e995bfc08ca5402f</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>prod</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>add137faef1798cd63f55b6a7ac271e6c</anchor>
      <arglist>(T *inout, int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ae74d1dc8a261663c3e17f6443d226493</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>af4e2fff94086670506ddaa3c1ba8e756</anchor>
      <arglist>(T *inout, int len) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a18306f0930c470bd70857cf576c164bf</anchor>
      <arglist>(const T &amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a0592ff8c926cd7b767db2d12bb6f126e</anchor>
      <arglist>(T *inout, int len) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>barrier</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a3deb59ba25d647e9d9d9fc074e2286f1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; void &gt;</type>
      <name>ibarrier</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>addb8799209047f9057380dd06a6c9809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>broadcast</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a9939f52029799c9a294ffa8a82cf86d8</anchor>
      <arglist>(T *inout, int len, int root) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; T &gt;</type>
      <name>ibroadcast</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a803d0eb4845a552b3fd455688453a18e</anchor>
      <arglist>(T &amp;&amp;data, int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gather</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ab682f73753eb228a3b33e56235d6566d</anchor>
      <arglist>(const T *in, T *out, int len, int root) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; TOUT, TIN &gt;</type>
      <name>igather</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>abfff7ae8330dce07534c7f460a82b6f9</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out, int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>gatherv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aef3527cf0eaa57dcd76eeaaa5c907541</anchor>
      <arglist>(const T *in, int sendDataLen, T *out, int *recvDataLen, int *displ, int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatter</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ac47ee6a16bc5a15f80d48ff825cae06c</anchor>
      <arglist>(const T *sendData, T *recvData, int len, int root) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; TOUT, TIN &gt;</type>
      <name>iscatter</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>adb6864500554d9de611ee1febc45f05f</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out, int root) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>scatterv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a6e490a9c3293126e7e8a0d8c21dda210</anchor>
      <arglist>(const T *sendData, int *sendDataLen, int *displ, T *recvData, int recvDataLen, int root) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator MPI_Comm</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a4edd4930b29d348ab68486da3044a736</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allgather</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>af5c241f47c93f88187a473b9debee032</anchor>
      <arglist>(const T *sbuf, int count, T1 *rbuf) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; TOUT, TIN &gt;</type>
      <name>iallgather</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a73457f9bcad6a77bd92cf0db4a1dc841</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allgatherv</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a1226164a1ed61194cee1c45c4d28fde8</anchor>
      <arglist>(const T *in, int sendDataLen, T *out, int *recvDataLen, int *displ) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allreduce</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>ab81fbe2029f064cd7f7d84e61a3a5158</anchor>
      <arglist>(Type *inout, int len) const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>allreduce</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a907a75b0ef12e2c4801b0fa29d579d2f</anchor>
      <arglist>(Type &amp;&amp;in) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; TOUT, TIN &gt;</type>
      <name>iallreduce</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a5ca101ecfa2e708f11c6cefc8070595d</anchor>
      <arglist>(TIN &amp;&amp;data_in, TOUT &amp;&amp;data_out) const</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture&lt; T &gt;</type>
      <name>iallreduce</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>a321ad18b32d0294e1b9bf7633379ceba</anchor>
      <arglist>(T &amp;&amp;data) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>allreduce</name>
      <anchorfile>a02137.html</anchorfile>
      <anchor>aaefc67e255376dc3a91346248a8e3b82</anchor>
      <arglist>(const Type *in, Type *out, int len) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CommPolicy::CommunicationError</name>
    <filename>a01989.html</filename>
    <base>Dune::IOError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::conjunction</name>
    <filename>a02869.html</filename>
    <templarg>B</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference</name>
    <filename>a01793.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const R</type>
      <name>type</name>
      <anchorfile>a01793.html</anchorfile>
      <anchor>a1e953f3f8e374949e032b7f80fd05a86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</name>
    <filename>a01333.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Alloc &gt;</type>
      <name>type</name>
      <anchorfile>a01333.html</anchorfile>
      <anchor>af82c7c10665ee84ee6f96ef184c78ceb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</name>
    <filename>a01329.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BitSetVectorConstReference&lt; block_size, Alloc &gt;</type>
      <name>type</name>
      <anchorfile>a01329.html</anchorfile>
      <anchor>af8e356d0f78378fab592f4890ef8a3c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; const R &amp; &gt;</name>
    <filename>a01805.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const R &amp;</type>
      <name>type</name>
      <anchorfile>a01805.html</anchorfile>
      <anchor>af0e679b203aebaf86f048da9bcd4912e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; const R &gt;</name>
    <filename>a01797.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const R</type>
      <name>type</name>
      <anchorfile>a01797.html</anchorfile>
      <anchor>a74cee274ffbf5dc02b9d9ca6a82b1543</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</name>
    <filename>a01469.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabc526795104d73a60982e4e56d97f9e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</name>
    <filename>a01473.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga249ab0cf1a399fb2ddadbeaa51150721</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::const_reference&lt; R &amp; &gt;</name>
    <filename>a01801.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const R &amp;</type>
      <name>type</name>
      <anchorfile>a01801.html</anchorfile>
      <anchor>a98aab38fc38bbacd88751805f3a0e1c9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ConstArrayListIterator</name>
    <filename>a01285.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <templarg></templarg>
    <base>RandomAccessIteratorFacade&lt; ConstArrayListIterator&lt; T, N, A &gt;, const A::value_type, A::value_type const &amp;, A::difference_type &gt;</base>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a0966c4ea7fdb687dc99ae530cfee9514a7a7c6924b1a7d628efe4128c35b860e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>MemberType</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a17f853264e435614b1b7be688122b686</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a4de5f113deeec0b757b26281f8af4916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a8fe38a85a4dc9f501e3e7ecb7a8ff2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a08b4044caac22184fb640e79b58ca9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a7d9081b1bd2438d5341b0b8e93e52f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a0966c4ea7fdb687dc99ae530cfee9514a7a7c6924b1a7d628efe4128c35b860e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; const A::value_type &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; T, N, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type const &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gad497fa97898250580bb21cc2bd3c9041</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga76de40b277f94ee868d428d228e653db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9c8c49a4c9e7f9ec05f13ef08838125c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa8f468008db350985416802e19284c70</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1cae3a83ca1049439305af22591c508</anchor>
      <arglist>(const ConstArrayListIterator&lt; T, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga88c8c865d1b36a518b42dd8501d767f2</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab2e688a7ca86f9dbc14505df8edaab1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstArrayListIterator&lt; T, N, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga43f15672add4d897370c480eb2885b9b</anchor>
      <arglist>(const ConstArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstArrayListIterator</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a097961a84cb7e586c4620c45223d2a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstArrayListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2983bd3f7dfc692b4c360da1324ffcaf</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ArrayList&lt; T, N, A &gt;</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a38d983a004da53b7d2e038e696e56725</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ArrayListIterator&lt; T, N, A &gt;</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a9af3595344996cddca3a6289e3258f86</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ConstArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt;</name>
    <filename>a01285.html</filename>
    <base>Dune::RandomAccessIteratorFacade</base>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>MemberType</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a17f853264e435614b1b7be688122b686</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a4de5f113deeec0b757b26281f8af4916</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a8fe38a85a4dc9f501e3e7ecb7a8ff2cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a08b4044caac22184fb640e79b58ca9c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type const &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a7d9081b1bd2438d5341b0b8e93e52f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a0966c4ea7fdb687dc99ae530cfee9514a7a7c6924b1a7d628efe4128c35b860e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; V &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gad497fa97898250580bb21cc2bd3c9041</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga76de40b277f94ee868d428d228e653db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9c8c49a4c9e7f9ec05f13ef08838125c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa8f468008db350985416802e19284c70</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1cae3a83ca1049439305af22591c508</anchor>
      <arglist>(const ConstArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga88c8c865d1b36a518b42dd8501d767f2</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab2e688a7ca86f9dbc14505df8edaab1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ConstArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga43f15672add4d897370c480eb2885b9b</anchor>
      <arglist>(const ConstArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstArrayListIterator</name>
      <anchorfile>a01285.html</anchorfile>
      <anchor>a097961a84cb7e586c4620c45223d2a3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstArrayListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2983bd3f7dfc692b4c360da1324ffcaf</anchor>
      <arglist>(const ArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ConstAssociativePropertyMap</name>
    <filename>a02453.html</filename>
    <templarg></templarg>
    <base protection="private">RAPropertyMapHelper&lt; const T::value_type::second_type &amp;, ConstAssociativePropertyMap&lt; T &gt; &gt;</base>
  </compound>
  <compound kind="class">
    <name>Dune::ContainerWrapperIterator</name>
    <filename>a01457.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>BidirectionalIteratorFacade&lt; ContainerWrapperIterator&lt; CW, T, R &gt;, T, R, int &gt;</base>
    <member kind="typedef">
      <type>std::bidirectional_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab222df7a5b94fb7108165fd755c9d19b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a17dd04bfe7f87d179b866824ebf4c919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>difference_type</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a3109e258ecc479d1a89264cb008a6d44</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0f6dd08b4acd03d36f3a8938a11c2200</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ac0d8921fdfff47c3e58565221808728c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; CW, T, R &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a38eca8a2f5f291eea2e671c779b4835c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>afa784c7ae85e48ce1b92e2d4c5e4607b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a84852b8bb971d813fdea08505e8beb9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int</type>
      <name>DifferenceType</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>ab46450f118d91d1ab6f369de739a317f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a87c3aa03eb2c5dd985c8d77ae852e87b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga872742fba25446c6752c40ab88e6cfba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38dbfe91ed8a1a8630dbfa9df4b99fff</anchor>
      <arglist>(CW containerWrapper, int position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3ef8e56f47d0d37a9490bd035c83c7eb</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacf5d64531c6d47f667d668c02aadcc03</anchor>
      <arglist>(const MyType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>gacf5d64531c6d47f667d668c02aadcc03</anchor>
      <arglist>(const MyConstType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ContainerWrapperIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga64dfca582bd5626a5950370e78fd12ce</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga800b2225513a54e8c950dc3cd05a969e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf1fbe0db5c5f0273e594cb909a5c05f1</anchor>
      <arglist>(const MyType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01457.html</anchorfile>
      <anchor>gaf1fbe0db5c5f0273e594cb909a5c05f1</anchor>
      <arglist>(const MyConstType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>dereference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga82f913f79ccfbcd35694f89d780801c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga220bff72fe98ed85415cf4f288f8f430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaadc6eaf9a670b55fcdd740f600178ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>elementAt</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga57fa166ff95ca35bb3afd5e89032cbef</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87e16c8e8f21a72d2451398ef906e2a9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5d290606b2f6bcfd426fc5f5a98243eb</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>index</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaab7ef91d43ee3ba94aebb3783ac63e70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2aa2260fb114003aba8b741511a1ce28</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a0457e2e3dabf7b32f4941817ca58d502</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a95b63baa3c45e25ef363fc0558943b2b</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>a2cc0819c6d8a6170ecf692969c1a4057</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01877.html</anchorfile>
      <anchor>abad46a4c4536249d4cf557f63506e23a</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; CW, typename mutable_reference&lt; T &gt;::type, typename mutable_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaacc10491444d2bcc379b214a08f6a876</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; CW, typename const_reference&lt; T &gt;::type, typename const_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0546bde670c75bae25ccc5a5dc51eb53</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CommPolicy::CopyGatherScatter</name>
    <filename>a01993.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CommPolicy&lt; T &gt;::IndexedType</type>
      <name>IndexedType</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a75f3ea805efadcb366dc402490a20929</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const IndexedType &amp;</type>
      <name>gather</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a4ed5e82c9263f288ff74f3bbbfbe2b7b</anchor>
      <arglist>(const T &amp;vec, std::size_t i)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>scatter</name>
      <anchorfile>a01993.html</anchorfile>
      <anchor>a3a2e583dfb9e572e4e0606cfafcd4aa2</anchor>
      <arglist>(T &amp;vec, const IndexedType &amp;v, std::size_t i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DebugStream</name>
    <filename>a01389.html</filename>
    <templarg>thislevel</templarg>
    <templarg>dlevel</templarg>
    <templarg>alevel</templarg>
    <templarg>activator</templarg>
    <base>Dune::DebugStreamState</base>
    <member kind="function">
      <type></type>
      <name>DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga0f2ab6645431b2552d1d7732583f3a72</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaa64698be61f444f86487e2a548ba94ac</anchor>
      <arglist>(DebugStreamState &amp;master, std::ostream &amp;fallback=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaa40005d8956e1d61d55f6f169fb70441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga1e6a448f92df51f7414cd4b8afeee9a5</anchor>
      <arglist>(const T data)</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga20a49ab839757180aaf025616f0d3093</anchor>
      <arglist>(const int data)</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3aefb2a7c669943437210f98a44aa27e</anchor>
      <arglist>(std::ostream &amp;(*f)(std::ostream &amp;))</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>flush</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3f2f0137b862675f9ec2c1e8efbcaa51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga72506e0bf5c91c9f2fb661bd2eae2027</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3fcdade7b18e0d6cbd46c9e8cd051a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga474e32959c2a7a9a7e143f6e0b93228b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga27a2eade67505c3bf1c01b48731c355c</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga27c3774a0fd87899ddf215dc1d3b44e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tie</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga6add8418613c3cfaa0ae74bbee8c1820</anchor>
      <arglist>(DebugStreamState &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>untie</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga17bdd177c2a2d177ee1c4646f9bd463f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>StreamWrap *</type>
      <name>current</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga8a430d62e0ab862fbbdf6177d64273bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_active</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga4ca51511bad76b44cdd79716fdc5ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_tied</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga82ee54f4b88fb895510ed6d4cc92c02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_tied_streams</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga654bf28c5bd8a705856cd19f4bedfa4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DebugStreamError</name>
    <filename>a01377.html</filename>
    <base>Dune::IOError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DebugStreamState</name>
    <filename>a01385.html</filename>
    <member kind="variable">
      <type>StreamWrap *</type>
      <name>current</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga8a430d62e0ab862fbbdf6177d64273bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_active</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga4ca51511bad76b44cdd79716fdc5ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_tied</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga82ee54f4b88fb895510ed6d4cc92c02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_tied_streams</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga654bf28c5bd8a705856cd19f4bedfa4e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::DefaultEpsilon</name>
    <filename>a01717.html</filename>
    <templarg></templarg>
    <templarg>style</templarg>
    <member kind="function" static="yes">
      <type>static EpsilonType&lt; T &gt;::Type</type>
      <name>value</name>
      <anchorfile>a01717.html</anchorfile>
      <anchor>a126a41c7b5fc923073268dd17ee96cc4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::DefaultEpsilon&lt; T, absolute &gt;</name>
    <filename>a01609.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static EpsilonType&lt; T &gt;::Type</type>
      <name>value</name>
      <anchorfile>a01609.html</anchorfile>
      <anchor>aada0e06c86293ee154aa397ed160c355</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::DefaultEpsilon&lt; T, relativeStrong &gt;</name>
    <filename>a01605.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static EpsilonType&lt; T &gt;::Type</type>
      <name>value</name>
      <anchorfile>a01605.html</anchorfile>
      <anchor>af4fde7e100ec0d01f111c3cb86ca2aed</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::DefaultEpsilon&lt; T, relativeWeak &gt;</name>
    <filename>a01601.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static EpsilonType&lt; T &gt;::Type</type>
      <name>value</name>
      <anchorfile>a01601.html</anchorfile>
      <anchor>acc1098515460c18eb5778639791feea0</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DenseIterator</name>
    <filename>a01441.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>RandomAccessIteratorFacade&lt; DenseIterator&lt; C, T, T &amp; &gt;, T, T &amp;, std::ptrdiff_t &gt;</base>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ac5abcff5adac17756f15ddfa65ed44fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C::size_type</type>
      <name>SizeType</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>af9aaafb6136abd3384b36071f7513c6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; C, T, T &amp; &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseIterator</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ae5dfaed33906ef83161dc0d341f7b7cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseIterator</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ac25214444dda1262e849d684757887ae</anchor>
      <arglist>(C &amp;cont, SizeType pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseIterator</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a2f9a426f0f07297145ec445924f836d2</anchor>
      <arglist>(const MutableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DenseIterator</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a9cceaa154da79d1b41e25d3e91d286ad</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a2f40623e3e49214802e0ab6109fee57c</anchor>
      <arglist>(const MutableIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a33159c493749b9e0805200c1d07800b8</anchor>
      <arglist>(const ConstIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>dereference</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>aedfdbcdbff788a630f3195111c0143a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a0c2f50b37fda669b386afafacf1388e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a954b702b64c11deda726afd0abcaf75a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>elementAt</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a63145dea6a1f249fb1ead8e79368cc72</anchor>
      <arglist>(DifferenceType i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>af73b4b4bcc32278bdc04c30f88632694</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DifferenceType</type>
      <name>distanceTo</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a654a2c3d4bcb34b3956bf6df51814d18</anchor>
      <arglist>(DenseIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T &gt;::type &gt; other) const</arglist>
    </member>
    <member kind="function">
      <type>DifferenceType</type>
      <name>distanceTo</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>ab80096d3ed29344fbb1b38d8b2eb8c88</anchor>
      <arglist>(DenseIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T &gt;::type &gt; other) const</arglist>
    </member>
    <member kind="function">
      <type>SizeType</type>
      <name>index</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a20813a95a5f95924c1ff820d5062db5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DenseIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T &gt;::type, typename mutable_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>a7f8ff9d5bfdd4adbe6c082738e31e955</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>DenseIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T &gt;::type, typename const_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a01441.html</anchorfile>
      <anchor>abe8734d863840e3b17cc3f5248b36c8d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DenseMatrix</name>
    <filename>a01393.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a77c1a6438c7665d5142156337c5ffb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad86e41607482a02d21aa2ee8b7cdca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_type</type>
      <name>row_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>acff1e010547092ecf356c2e33fec19a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9f0177d23a0b01f5eac7be53bdca64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad8914bf4144967e1091e4e0215efe305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0351d4042eee7e084cf50e61e08cfbae</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>MAT &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>MAT &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i, [[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; MAT &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DenseMatrix</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>addf81781c906bd750c76b4f7198cf7f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseMatrix&lt; DynamicMatrix&lt; K &gt; &gt;</name>
    <filename>a01393.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a77c1a6438c7665d5142156337c5ffb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad86e41607482a02d21aa2ee8b7cdca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_type</type>
      <name>row_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>acff1e010547092ecf356c2e33fec19a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9f0177d23a0b01f5eac7be53bdca64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad8914bf4144967e1091e4e0215efe305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0351d4042eee7e084cf50e61e08cfbae</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix&lt; K &gt; &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix&lt; K &gt; &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i,[[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; DynamicMatrix&lt; K &gt; &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseMatrix&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</name>
    <filename>a01393.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a77c1a6438c7665d5142156337c5ffb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad86e41607482a02d21aa2ee8b7cdca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_type</type>
      <name>row_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>acff1e010547092ecf356c2e33fec19a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9f0177d23a0b01f5eac7be53bdca64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad8914bf4144967e1091e4e0215efe305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0351d4042eee7e084cf50e61e08cfbae</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, ROWS, COLS &gt; &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, ROWS, COLS &gt; &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i,[[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseMatrix&lt; ScalarMatrixView&lt; K &gt; &gt;</name>
    <filename>a01393.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a77c1a6438c7665d5142156337c5ffb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad86e41607482a02d21aa2ee8b7cdca0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_type</type>
      <name>row_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>acff1e010547092ecf356c2e33fec19a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9f0177d23a0b01f5eac7be53bdca64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad8914bf4144967e1091e4e0215efe305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0351d4042eee7e084cf50e61e08cfbae</anchor>
      <arglist>(const RHS &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>ScalarMatrixView&lt; K &gt; &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>ScalarMatrixView&lt; K &gt; &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i,[[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; ScalarMatrixView&lt; K &gt; &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatrixAssigner</name>
    <filename>a01417.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatrixAssigner&lt; DenseMatrix, DiagonalMatrix&lt; field, N &gt; &gt;</name>
    <filename>a01485.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacdc8dd0929e24775063d1bae351a6741</anchor>
      <arglist>(DenseMatrix &amp;denseMatrix, DiagonalMatrix&lt; field, N &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatVecTraits</name>
    <filename>a01941.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatVecTraits&lt; DynamicMatrix&lt; K &gt; &gt;</name>
    <filename>a01505.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DynamicMatrix&lt; K &gt;</type>
      <name>derived_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>ab086d3113b0356d8541bd1414f194b2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DynamicVector&lt; K &gt;</type>
      <name>row_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a3b63fa35f7a0ce0a293896a6a894486a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type &amp;</type>
      <name>row_reference</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a4a2f6233b96701959dc45c8bd744161a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const row_type &amp;</type>
      <name>const_row_reference</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>aee0cd6d08dc8451f8b8c91da766dce79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; K &gt;</type>
      <name>container_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>aeff2f27908d9d923c96c6786f173420b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a7c5226faf3f31dae4a22a70fb994bed3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01505.html</anchorfile>
      <anchor>a162fa134f84d6b769c744d07036ed9aa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatVecTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</name>
    <filename>a01517.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DynamicVector&lt; K, Allocator &gt;</type>
      <name>derived_type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>aaa1148eeccbfc9782c9cb2259d7b7d92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; K, Allocator &gt;</type>
      <name>container_type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>abf9c2cefdfb6ae35bc1d0bfaf6c9da19</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>a5cc47717220b490827f88e1a38271170</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01517.html</anchorfile>
      <anchor>af20e51465cc0a8a2644c6002a8e862f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatVecTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</name>
    <filename>a01725.html</filename>
    <templarg></templarg>
    <templarg>ROWS</templarg>
    <templarg>COLS</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; K, ROWS, COLS &gt;</type>
      <name>derived_type</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a343345362ef65a205b8ca4e46a7076a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; K, COLS &gt;</type>
      <name>row_type</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a9870ce2e1a490f38aeb9dc02edbe4005</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type &amp;</type>
      <name>row_reference</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>acf5d34f7765a91a7876ad6fd6c67d411</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const row_type &amp;</type>
      <name>const_row_reference</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a80aad49e850810bc07962a74f9ce3666</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; row_type, ROWS &gt;</type>
      <name>container_type</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a271d9830f30ea6c5ed7db55a928ae767</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a45681b58a821b4904ee465aafda10f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01725.html</anchorfile>
      <anchor>a9871136ce126b2e6553a1240d5c06932</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DenseMatVecTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</name>
    <filename>a01769.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <member kind="typedef">
      <type>FieldVector&lt; K, SIZE &gt;</type>
      <name>derived_type</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>aed7a78fa3310284a3b6b4a581d871648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; K, SIZE &gt;</type>
      <name>container_type</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>aabd9770f9fa1881a7f26c4d38ca3f1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>a142da5837be443b84b96047b3613d1fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>container_type::size_type</type>
      <name>size_type</name>
      <anchorfile>a01769.html</anchorfile>
      <anchor>abbf797e44c07558c9b24918b6d3c9279</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DenseVector</name>
    <filename>a01425.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a007463aa44631abffe62eb8c868ae95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a67b4a65a6199d863602f152045f5a5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa684143b2a15b3739d782a8327d5993c</anchor>
      <arglist>(const value_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aeb82fe94311ab1fd83f60b8a3814f881</anchor>
      <arglist>(const DenseVector&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a944b80dc8715a43d819f1a9b00a3dc23</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aabd99517304ad33f8771232d36fbe201</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aaa7e2f58ddd78aecef12e1f62cd0f13e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a7d8bf22be5e135ae219ecac8c574b426</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac7f5fe5d8925f4d17c957bee69ba70f7</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; V &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseVector&lt; DynamicVector&lt; K, std::allocator&lt; K &gt; &gt; &gt;</name>
    <filename>a01425.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a007463aa44631abffe62eb8c868ae95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a67b4a65a6199d863602f152045f5a5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa684143b2a15b3739d782a8327d5993c</anchor>
      <arglist>(const value_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aeb82fe94311ab1fd83f60b8a3814f881</anchor>
      <arglist>(const DenseVector&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a944b80dc8715a43d819f1a9b00a3dc23</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aabd99517304ad33f8771232d36fbe201</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aaa7e2f58ddd78aecef12e1f62cd0f13e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a7d8bf22be5e135ae219ecac8c574b426</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac7f5fe5d8925f4d17c957bee69ba70f7</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; DynamicVector&lt; K, std::allocator&lt; K &gt; &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt;</name>
    <filename>a01425.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a007463aa44631abffe62eb8c868ae95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a67b4a65a6199d863602f152045f5a5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa684143b2a15b3739d782a8327d5993c</anchor>
      <arglist>(const value_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aeb82fe94311ab1fd83f60b8a3814f881</anchor>
      <arglist>(const DenseVector&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a944b80dc8715a43d819f1a9b00a3dc23</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aabd99517304ad33f8771232d36fbe201</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aaa7e2f58ddd78aecef12e1f62cd0f13e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a7d8bf22be5e135ae219ecac8c574b426</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac7f5fe5d8925f4d17c957bee69ba70f7</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DenseVector&lt; ScalarVectorView&lt; K &gt; &gt;</name>
    <filename>a01425.html</filename>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a007463aa44631abffe62eb8c868ae95d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::size_type</type>
      <name>size_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a67b4a65a6199d863602f152045f5a5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa684143b2a15b3739d782a8327d5993c</anchor>
      <arglist>(const value_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aeb82fe94311ab1fd83f60b8a3814f881</anchor>
      <arglist>(const DenseVector&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a944b80dc8715a43d819f1a9b00a3dc23</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aabd99517304ad33f8771232d36fbe201</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>constexpr</type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aaa7e2f58ddd78aecef12e1f62cd0f13e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DenseVector</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a7d8bf22be5e135ae219ecac8c574b426</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac7f5fe5d8925f4d17c957bee69ba70f7</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; ScalarVectorView&lt; K &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiagonalMatrix</name>
    <filename>a01461.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4de9d4f3d6e583bae9bc9721d96827eab3693825fe3059b3704931fe953de2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4ac66d9560e84f7a75b4b709a2a617be3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4a471b1a78929ef5c6c30e2382660d2fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gadcf811f77d0dbfbbfbebefe63d8c43c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87d01fed9cbade66ddcb30e6e7132a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac9eb032eb8b34f1bc84b1e400d059ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga09481dc4c7c3f45b0579995d43476372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>row_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf1a6e61bc81a8a9804fe0254a561ae6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9b9094e6d6e43fb46710781109bfdb94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>row_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga13447d3a2908e8ad336a0eda843bfaf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>const_row_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf180f652fdac3be0ff7b8524113fe6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type</type>
      <name>const_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8f7c8db5c38abf29d6c1f8bd83443615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type</type>
      <name>const_row_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3403ca2666d15b112cf12fafd1767e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, reference, reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga639aa5335c30cc8ee2417a333593de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga458245ddfdee1ffaaf6c11ec6ae42067</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf5c630b737a8f3392ad4fe1dad9dcc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab64ac4c28d3fcda495eba25241fb9e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, const_reference, const_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga315d0cd528bf70e6654a62695b5d7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8de8ccb891ad1c57b0484806dbe73b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1251d019144b87ca59778aad4dc8f62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2a03765b476586f5023fc291d24bb267</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4de9d4f3d6e583bae9bc9721d96827eab3693825fe3059b3704931fe953de2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4ac66d9560e84f7a75b4b709a2a617be3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4a471b1a78929ef5c6c30e2382660d2fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa7102faf22aad2b37cc47d75057202cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga56a7618c84b30f163c77fd553be9e054</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac2bf1d100df6d7f3d03f0998efc2bcb0</anchor>
      <arglist>(const FieldVector&lt; K, n &gt; &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab5ab7d914659ca7d764da19e101e35ac</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1b4eb68ab278eed1b4e55dacea248870</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga907d7c1430e781b523203654085578b5</anchor>
      <arglist>(const DiagonalMatrix&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaee04e979459a18266f295fd99e3bb691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga94714f2dde399fa154e52382c4d3cda8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad89bc42c802d958671501491587c0f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacd2841f9061763615a3bce3a01dd824c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga88e4d37962ccbd1b73bbe2aa879992f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7014752ec03514e5ebee42e165aadf01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gafa0b37bcc31038479dd5e90317fdd82d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga04b3f46e85cf5ce92eb4b753943d2073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gadc88750845bd9743902b9246043d4f97</anchor>
      <arglist>(const DiagonalMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabe1968feb8b539d9649aa69ea6f028de</anchor>
      <arglist>(const DiagonalMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf9c5b000b3fc0e2cc416781c6846e6c7</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaedf6b0b5e4ca3b21160a2da6c9959a68</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf7d4ed530caa73e40681138164a99fac</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac119d61f5a9bf9c81ecdbc6c4f449576</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaef1633372bfdca4c3bc4129b2fa56ef1</anchor>
      <arglist>(const DiagonalMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87068aa84d9da6a366d6c67604f85af1</anchor>
      <arglist>(const DiagonalMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6fa5eec63f549ecc9dd9dc176ce63740</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa717728d4d27dec2e6ce372221dddd01</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga62c08731942334e813a6a1aa3985ff38</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga603ceeb6fa1346b10916036adbe35f1b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaccd611007f93912d4c4158385fe3b7a4</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8c221229831d9e57ce34a1f4178539d1</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga52c9ef16affc5021704a36197681bb35</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga061f3427164b2ba7ff5a846351448f17</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac78b1e58e7f010270d0565f2a921d08b</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaa5e5c43395e9abeddd0a9838c14aa06</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1ccf762bbe7f73d0837307eef4ebd450</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>frobenius_norm</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6fc0a92462ebff6e360c1300d768bb99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>frobenius_norm2</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa557f09b33880f4b4d83798509433799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>infinity_norm</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac7fbb06a8e8a20068533352eba7d89e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga61e3e67970d81f5801a79c2e453080a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3c2b067eb64651085f02d5b7c28b2e5b</anchor>
      <arglist>(V &amp;x, const V &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab189c94bae009606e2fef2e1ac586b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>determinant</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae0ee428fe48195ee28b514b3092cca38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2e350317ef431781d40c775f218db758</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaba6942dfc228d0ea47d50f1615342d19</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga44e8e6c2bcff6c2ce10f3eab0b9b18d7</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga96b90cfedbd58f16564437a2e855787e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga493779b8edaa825f6ab32382912ecdfb</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const FieldVector&lt; K, n &gt; &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab9eb1e695cfd7cd0002c3e178e33d5cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; K, n &gt; &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae674bf3d7093a75c2bdcb231ec084e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38a3734ba11bfb7fbd4732e5228e84a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3d22ae04806049201ad022e7ce7f6024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>M</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1ba6f480961f5cf42416f9608af1448d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa85c3f5efb63c4b5480eb4c558697b59</anchor>
      <arglist>(std::ostream &amp;s, const DiagonalMatrix&lt; K, n &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiagonalMatrixWrapper</name>
    <filename>a01453.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaec4b856260bbe814628142729127c5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6207194fb0de60699bed536aa655896f</anchor>
      <arglist>(const DiagonalMatrixType *mat)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga946866a34f2a843eed8ddbffa1c9a9f6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>row_type *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa97cbfbcf81ba3ddbe09a9c4e39a7e30</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa8ff4d2d7d2f8d66275fa39a1854e883</anchor>
      <arglist>(const DiagonalMatrixWrapper &amp;other) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; const MyType, reference, reference &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae5c2895dac94530f6a361dd95b99e023</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; const MyType, const_reference, const_reference &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2076846ca5fa9e66b8330e79de0fc823</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiagonalRowVector</name>
    <filename>a01449.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <base>Dune::DiagonalRowVectorConst</base>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab8168295c4fb89c606477cf28586535c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf792a185c9621199110a9542ef08a938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac3ddede43a63f4059d5d79faf65a31b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVector&lt; K, n &gt;, K, K &amp; &gt;</type>
      <name>Iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga572251fde21884c8131c3191528f4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1f7d8c693e84ad19fd9e19e414528bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa83d97fc3470edc150a3f1d0cb10628e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4cf901448080a39815a56eb5ef8b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9a0a07583b2e5b6a51ae11b8bfcbd1bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3986b9fff8b3c16a866c2406651d7422</anchor>
      <arglist>(K *p, int col)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalRowVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8f34f0cbc88be845663576b3f2f17c87</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3f108f3e315b748a428e2b52553f7d94</anchor>
      <arglist>([[maybe_unused]] size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8b9c13d9525660d7fc2dc176e3e97790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac174414c1c1c7f868b9150feb3a0606f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5f082c9c42c9fa73f437d6431e77731d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3e1a29732b794c3a874eb8e3562d4829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7063cafb858f9f338989a6a568b79dce</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4eecc2e9db4308fb75895910d62cce10</anchor>
      <arglist>(const DiagonalRowVectorConst&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga45be74b160bd2711a82493e8a6a120b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad2332579a4fac24ca75ea96793853584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga29838080165b9cf9895182df583fbe61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaebf1ad8b40eb68c95b18ca7b37ecf2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9cdb480af4da23f9dd136df870224687</anchor>
      <arglist>(const DiagonalRowVectorConst &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab4b9ce314796b731b411aed64280c67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0b810008a215372152ad626668d61c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rowIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7ff9628fcc62fe7cddc84ed440bd0928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabacfd872748c449bcd96bfbf4d2d26b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiagonalRowVector *</type>
      <name>operator&amp;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad6d7c8c6e0ef12c5725580bc4a30b235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c630492b619b394b9bde9e322db3c62</anchor>
      <arglist>([[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>K *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c57cb95789100a313f5d9463fa6746f</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>K *</type>
      <name>p_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7fdbefcb056f8f38dd2bd91840aeb9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>row_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38be35b1190cff72ee6a1c7f9e12bcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac6afa6f8fcd18e637a6c19defef4a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; DiagonalRowVector&lt; K, n &gt;, K, K &amp; &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga845250c07881e349f674401da1ed724b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiagonalRowVector&lt; K, DiagonalMatrixType::rows &gt;</name>
    <filename>a01449.html</filename>
    <base>Dune::DiagonalRowVectorConst</base>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab8168295c4fb89c606477cf28586535c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf792a185c9621199110a9542ef08a938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac3ddede43a63f4059d5d79faf65a31b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVector&lt; K, n &gt;, K, K &amp; &gt;</type>
      <name>Iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga572251fde21884c8131c3191528f4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1f7d8c693e84ad19fd9e19e414528bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa83d97fc3470edc150a3f1d0cb10628e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4cf901448080a39815a56eb5ef8b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9a0a07583b2e5b6a51ae11b8bfcbd1bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3986b9fff8b3c16a866c2406651d7422</anchor>
      <arglist>(K *p, int col)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalRowVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8f34f0cbc88be845663576b3f2f17c87</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3f108f3e315b748a428e2b52553f7d94</anchor>
      <arglist>([[maybe_unused]] size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8b9c13d9525660d7fc2dc176e3e97790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac174414c1c1c7f868b9150feb3a0606f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5f082c9c42c9fa73f437d6431e77731d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3e1a29732b794c3a874eb8e3562d4829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7063cafb858f9f338989a6a568b79dce</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4eecc2e9db4308fb75895910d62cce10</anchor>
      <arglist>(const DiagonalRowVectorConst&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga45be74b160bd2711a82493e8a6a120b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad2332579a4fac24ca75ea96793853584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga29838080165b9cf9895182df583fbe61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaebf1ad8b40eb68c95b18ca7b37ecf2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9cdb480af4da23f9dd136df870224687</anchor>
      <arglist>(const DiagonalRowVectorConst &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab4b9ce314796b731b411aed64280c67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0b810008a215372152ad626668d61c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rowIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7ff9628fcc62fe7cddc84ed440bd0928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabacfd872748c449bcd96bfbf4d2d26b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiagonalRowVector *</type>
      <name>operator&amp;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad6d7c8c6e0ef12c5725580bc4a30b235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c630492b619b394b9bde9e322db3c62</anchor>
      <arglist>([[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>K *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c57cb95789100a313f5d9463fa6746f</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>K *</type>
      <name>p_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7fdbefcb056f8f38dd2bd91840aeb9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>row_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38be35b1190cff72ee6a1c7f9e12bcb2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiagonalRowVectorConst</name>
    <filename>a01445.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2753d389d952f80aa7ac04f6088153c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gade7df9db3abf92abcd528582291155fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad3922c94874ab3a70ac449a6ba3ccecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaed9a3f6117dd8f51703a82e99d7aae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6177e4e050f2433f1d3428e1f8b7559e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVectorConst</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad49ae9729b45e967f0bd6cc38614b0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVectorConst</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5050d4c2fc205f1f8833e446b1da6a9c</anchor>
      <arglist>(K *p, int col)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7063cafb858f9f338989a6a568b79dce</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4eecc2e9db4308fb75895910d62cce10</anchor>
      <arglist>(const DiagonalRowVectorConst&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga45be74b160bd2711a82493e8a6a120b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad2332579a4fac24ca75ea96793853584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga29838080165b9cf9895182df583fbe61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaebf1ad8b40eb68c95b18ca7b37ecf2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9cdb480af4da23f9dd136df870224687</anchor>
      <arglist>(const DiagonalRowVectorConst &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab4b9ce314796b731b411aed64280c67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0b810008a215372152ad626668d61c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rowIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7ff9628fcc62fe7cddc84ed440bd0928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabacfd872748c449bcd96bfbf4d2d26b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c630492b619b394b9bde9e322db3c62</anchor>
      <arglist>([[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>K *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c57cb95789100a313f5d9463fa6746f</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiagonalRowVectorConst *</type>
      <name>operator&amp;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac258afffbcdec3f2611706beae86f1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>K *</type>
      <name>p_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7fdbefcb056f8f38dd2bd91840aeb9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>row_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38be35b1190cff72ee6a1c7f9e12bcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac6afa6f8fcd18e637a6c19defef4a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaac591e159e5002652b8fe8ee74aad00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::disjunction</name>
    <filename>a02873.html</filename>
    <templarg>B</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::DynamicMatrix</name>
    <filename>a01501.html</filename>
    <templarg></templarg>
    <base>DenseMatrix&lt; DynamicMatrix&lt; K &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a715df25a177360ee13c239a158ac23e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a6399dfd6908961062f7c214ce130b3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::row_type</type>
      <name>row_type</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a4e657447ffba0f00463851f145753e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9f0177d23a0b01f5eac7be53bdca64b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad8914bf4144967e1091e4e0215efe305</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicMatrix</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>adcc41a31367efa2942a0d46f687bf654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicMatrix</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ae9b3c26a18667e2e9658fa8f05927db2</anchor>
      <arglist>(size_type r, size_type c, value_type v=value_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicMatrix</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a3f9df58e4048081e1a545d6c8118ad8b</anchor>
      <arglist>(std::initializer_list&lt; DynamicVector&lt; K &gt;&gt; const &amp;ll)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicMatrix</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a9349e88c94e07c6f81133212a838baa7</anchor>
      <arglist>(T const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>acba4672549a724e6bc5d3e37bf3ed78e</anchor>
      <arglist>(size_type r, size_type c, value_type v=value_type())</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>af4ddf6809b34436b7e41f7faf8cbaef7</anchor>
      <arglist>(T const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ad387be4ef633734cfd76df74e9aa40d2</anchor>
      <arglist>(T scalar)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>mat_rows</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a7d3c5ef7112be7b46eceffa5e607e03e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>mat_cols</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a15a335d06cffaa17dc9979c8a3c6e4a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>row_type &amp;</type>
      <name>mat_access</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>ab546ab4ad605f861a7dc5624e8537719</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const row_type &amp;</type>
      <name>mat_access</name>
      <anchorfile>a01501.html</anchorfile>
      <anchor>a28350f37ce874b1c6815e02f7a820c91</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix&lt; K &gt; &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>DynamicMatrix&lt; K &gt; &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i,[[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; DynamicMatrix&lt; K &gt; &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DynamicVector</name>
    <filename>a01513.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>DenseVector&lt; DynamicVector&lt; K, std::allocator&lt; K &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a50a7d3fa728a4b82b4407b134e347190</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a735233c2a1599812e8cd3e6f4676dd48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; K, Allocator &gt;</type>
      <name>container_type</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a5a7bd4fc26554e6189ecc927bd1bfb4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Allocator</type>
      <name>allocator_type</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a7565d55f987adf7629660bdc919d3aff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a7ab6b30514c24d5afa6eaf1d12349692</anchor>
      <arglist>(const allocator_type &amp;a=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>abdca3f644f1b4151eb8e8f39656b239c</anchor>
      <arglist>(size_type n, const allocator_type &amp;a=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>ae821be352676f391e19ffa70d9ca3714</anchor>
      <arglist>(size_type n, value_type c, const allocator_type &amp;a=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>ac816734949044d1f94a33060fcb1da39</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a2dc74b2715a2e47302d769df2992201b</anchor>
      <arglist>(const DynamicVector &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a7e82f8787ae085c459dca22b0ed12d26</anchor>
      <arglist>(DynamicVector &amp;&amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>ad3719da9dabab00e1de6921c553983a1</anchor>
      <arglist>(const DynamicVector&lt; T, Allocator &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DynamicVector</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aec7d86873cf92f60efa2b17d11298f05</anchor>
      <arglist>(const DenseVector&lt; X &gt; &amp;x, const allocator_type &amp;a=allocator_type())</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a61f3befde174fd8fec8a4e9d1d57dd62</anchor>
      <arglist>(const DynamicVector &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>DynamicVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a1e4d5d1d002528026ab748e22b3d0558</anchor>
      <arglist>(DynamicVector &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>capacity</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aa28080f12c895ae6cf7f11f26bb6f729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a1dc5235fd9a477eb17112e4826753b48</anchor>
      <arglist>(size_type n, value_type c=value_type())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>adc5bfe6f530c32091c3dddca5f360b33</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a61cc6ffa5d43445b061035c97d58e38e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aea329d38527ac5c9c79c76f45faeb6fd</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>af5ec8c05e1b7ad8ca9b67a76882926a4</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K *</type>
      <name>data</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>a61466250acc18c3b87b216310831f6e1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const K *</type>
      <name>data</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>adf84bf7cd074630d98a443f5771a217d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const container_type &amp;</type>
      <name>container</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aef4b98fb48e820d4071162c1ec933bf6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>container_type &amp;</type>
      <name>container</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aad962bdabce70024ee5ccef0e4684eee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aa684143b2a15b3739d782a8327d5993c</anchor>
      <arglist>(const value_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DenseVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>ac7f5fe5d8925f4d17c957bee69ba70f7</anchor>
      <arglist>(const DenseVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator=</name>
      <anchorfile>a01513.html</anchorfile>
      <anchor>aeb82fe94311ab1fd83f60b8a3814f881</anchor>
      <arglist>(const DenseVector&lt; W &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5fd7ba8e53d3022e0cfe8f94ed6c8ff4</anchor>
      <arglist>(std::istream &amp;in, DynamicVector&lt; K, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; DynamicVector&lt; K, std::allocator&lt; K &gt; &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Empty</name>
    <filename>a03057.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::EmptySet</name>
    <filename>a01525.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>TA</type>
      <name>Type</name>
      <anchorfile>a01525.html</anchorfile>
      <anchor>a97993af013629e59913a6c9cd41f527c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabe9c296a2213a977a8579d2b1972bbd3</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EnableIfInterOperable</name>
    <filename>a03065.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::EndMark</name>
    <filename>a02681.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::EnumItem</name>
    <filename>a01533.html</filename>
    <templarg></templarg>
    <templarg>item</templarg>
    <member kind="typedef">
      <type>TA</type>
      <name>Type</name>
      <anchorfile>a01533.html</anchorfile>
      <anchor>a38b6b18d6a44b18e42f42be188baa255</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadd4bd8a68ff82f7bd648a651990ae8e5</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EnumRange</name>
    <filename>a01537.html</filename>
    <templarg></templarg>
    <templarg>from</templarg>
    <templarg>end</templarg>
    <member kind="typedef">
      <type>TA</type>
      <name>Type</name>
      <anchorfile>a01537.html</anchorfile>
      <anchor>a66bf0a9ee750c30004df0fcb92605fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6d859eacd34bc489093cf49624df2101</anchor>
      <arglist>(const Type &amp;item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::EpsilonType</name>
    <filename>a01589.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type</name>
      <anchorfile>a01589.html</anchorfile>
      <anchor>ae3241764f3a238e1d52f80167fc1ed1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::EpsilonType&lt; FieldVector&lt; T, n &gt; &gt;</name>
    <filename>a01597.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>EpsilonType&lt; T &gt;::Type</type>
      <name>Type</name>
      <anchorfile>a01597.html</anchorfile>
      <anchor>a7f947a4f459dd6234101b5dcb6723146</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FloatCmp::EpsilonType&lt; std::vector&lt; T, A &gt; &gt;</name>
    <filename>a01593.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>EpsilonType&lt; T &gt;::Type</type>
      <name>Type</name>
      <anchorfile>a01593.html</anchorfile>
      <anchor>af9b3dcd72f92cde42857db23be99f94a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Exception</name>
    <filename>a01549.html</filename>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga01c6ef86d8728e10ff8b61fdca89b34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ExceptionHook</name>
    <filename>a01553.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExceptionHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gac5b2708f8a37c9a4ebb890e4a1545c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gab7d05055167bdb067cce622f051cb551</anchor>
      <arglist>()=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Factorial</name>
    <filename>a01917.html</filename>
    <templarg>m</templarg>
    <member kind="enumvalue">
      <name>factorial</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9887fa76a22ef50328af19f3580398daa725ccaa397279ef2a9c6e3e363fb9893</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>factorial</name>
      <anchorfile>a01917.html</anchorfile>
      <anchor>a9887fa76a22ef50328af19f3580398daa725ccaa397279ef2a9c6e3e363fb9893</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Factorial&lt; 0 &gt;</name>
    <filename>a01921.html</filename>
    <member kind="enumvalue">
      <name>factorial</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a0392d534d17ffd1b6e5aa593f2c34d60afe67f705a798826930784ca792e8c4e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>factorial</name>
      <anchorfile>a01921.html</anchorfile>
      <anchor>a0392d534d17ffd1b6e5aa593f2c34d60afe67f705a798826930784ca792e8c4e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FakeMPIHelper</name>
    <filename>a02177.html</filename>
    <member kind="enumvalue">
      <name>isFake</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a77ccbc0d197e7a7f0694d219b77eac43a087fbd12564de3aefb47b98987acd752</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>No_Comm</type>
      <name>MPICommunicator</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a8273f31d2599a0e2daf8ca47778effe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFake</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a77ccbc0d197e7a7f0694d219b77eac43a087fbd12564de3aefb47b98987acd752</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>aebff07320a4b09dc687d0d13ee9a75a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a60a600fe6ed51c70a0a61b86ebba2977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT MPICommunicator</type>
      <name>getCommunicator</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a021b715f26fb0098c3d7647bab416338</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPICommunicator</type>
      <name>getLocalCommunicator</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a7c0cb1ffbda2e8f4feeadd745f64a5ef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Communication&lt; MPICommunicator &gt;</type>
      <name>getCollectiveCommunication</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a58313225271f50e082de37e5e51f0585</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Communication&lt; MPICommunicator &gt;</type>
      <name>getCommunication</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a6c5c3f921b6a5adadc42479819e85e05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT FakeMPIHelper &amp;</type>
      <name>instance</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a0d0bbe12acc4855b08e03c35f63a7e3e</anchor>
      <arglist>([[maybe_unused]] int argc, [[maybe_unused]] char **argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT FakeMPIHelper &amp;</type>
      <name>instance</name>
      <anchorfile>a02177.html</anchorfile>
      <anchor>a9b7c9887e6bd88896475a68039f7d15d</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FieldMatrix</name>
    <filename>a01401.html</filename>
    <templarg></templarg>
    <templarg>ROWS</templarg>
    <templarg>COLS</templarg>
    <base>DenseMatrix&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</base>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a5cbf6c6f0fa1ee98b98422197cef846ba6512cedf8dd7e35fce668bb8534c72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a5cbf6c6f0fa1ee98b98422197cef846ba9d8a3ebda5ceb0c1fac8178b0a8e3b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a39f0aea952d0a10cbc5bca58c4e992f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::row_type</type>
      <name>row_type</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a3791be4d71f1454c978fe4d6ca73a826</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::row_reference</type>
      <name>row_reference</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a946c76511649968ae531ee4cefb56e16</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::const_row_reference</type>
      <name>const_row_reference</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a290d0b69711d9e8af1783bc5322fdc4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a5cbf6c6f0fa1ee98b98422197cef846ba6512cedf8dd7e35fce668bb8534c72b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a5cbf6c6f0fa1ee98b98422197cef846ba9d8a3ebda5ceb0c1fac8178b0a8e3b9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a950c4cc950082728480c462e46ad1171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>value_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a77c1a6438c7665d5142156337c5ffb57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>field_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a15e463e056cf166bb3e6cd64fcee19d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3f0cab64e938eb3a47febb75b14da43f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseMatrix, row_type, row_reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aea42d728bea9dc1c855f66e863f87d1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae27c09bc18467479c702b41b4dcff748</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aaea193ed33e530073f12fc7c88e78358</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; row_reference &gt;::type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad9d3c487c8dee9718dba0ce4b8ed9a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseMatrix, const row_type, const_row_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac572cf0128294ef48259a2916864430b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a03edd87c258b9ad96d54897460313bb7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae40df82277a2909fbb041ad18488b9cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; const_row_reference &gt;::type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33db563350d58b99e92f43de5080e1a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aca6759d129b3cdb93fb520aad1dd9052a5b711b428ba7fa8a7ed73ff56d2e4a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FieldMatrix</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a0c23d3c31e4a57f105793911c68043f0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldMatrix</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>ab6a69d0aee2c6747abd119036cece0cb</anchor>
      <arglist>(std::initializer_list&lt; Dune::FieldVector&lt; K, cols &gt; &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldMatrix</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a669145dee517979807629faffe7cbb0c</anchor>
      <arglist>(T const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a997e9a1e97fc5519d57e0490fead3404</anchor>
      <arglist>(const FieldMatrix &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a4f2186123978e017a3eceebd0110cc0f</anchor>
      <arglist>(const FieldMatrix&lt; T, ROWS, COLS &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a6bafc64ee9b866bd44afce0c8434112a</anchor>
      <arglist>(FieldMatrix&lt; T, rows, cols &gt; const &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, l, cols &gt;</type>
      <name>leftmultiplyany</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a6c23bb504b82d44a23f987acc85ecc8b</anchor>
      <arglist>(const FieldMatrix&lt; K, l, rows &gt; &amp;M) const</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>ae3b0ab221d744ae7fc9d30ba6ed50a64</anchor>
      <arglist>(const FieldMatrix&lt; K, r, c &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, rows, l &gt;</type>
      <name>rightmultiplyany</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a7b964931b988f1a1e05fe90dbc3777c0</anchor>
      <arglist>(const FieldMatrix&lt; K, cols, l &gt; &amp;M) const</arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>mat_access</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a9b5e1c1e5b26ae8ecd4375cf16d312b0</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>mat_access</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>af3f50500fba35a2e216e4bf20700bf75</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a98f84d76ff1049f7af86cd00d91f395f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_row_reference</type>
      <name>operator[]</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad18d0214770a87a102830c4865e2d82e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a59d9aadda633d748509b646197b75dec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af395a6acbd619840c57861b7fb79ec8b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af21d4421081e97a298568deb5eecb500</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a68e5a5f0a33471a5a408d04b4789ec11</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>afe083d768551c84e44160687eb6e7183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a75dfa28521ee0ecb439e5c4a0a602853</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a1fb970d75e6e85f02e4addc3a9ffd1be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a6af26297f7939db5464d17ad40d73358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a33ecfd3792242e6bbc5b00c5c7bfd508</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>aab8991eb730c14817793f56166f42521</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a06a65ccaa6e0d9b4d48f5f33f4c7d577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a616152a1bb124c51ca891a72f923c24a</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abfc5703f4ecd55abc8438c851ab6a495</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a610de7cec032a0bde6fe0cc1e95b02ad</anchor>
      <arglist>(const field_type &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>abb32595af3a0af9c5b2bd63e28e07184</anchor>
      <arglist>(const field_type &amp;a, const DenseMatrix&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ae07aa37e8c22bc78e839a99c901a1403</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a8c3353e28d306597eb9e112de1fb1502</anchor>
      <arglist>(const DenseMatrix&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a13cc6517610c1056655817bf3f480ea9</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a474c2c48ca3b1b0a8d129e780e89d2b7</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ac2ad272175facf38ba3062b648514abc</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af10eafd2abcabcf50eb3a0d8428faf36</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af64dc6ef2659242a6f36510be6abb805</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a81abeb9780dfba561dab144071ce033a</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a2bcf8392733b9aca52bfdcdbccdbf8b2</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a9189eff4b20d29540a6bba8c3a16f285</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7da2770a8448fa6eb6cc8fad9c4f87c0</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a89839dbb7be1a2f59d62467e6851d93d</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7e1d9f1ab4ec00f8b304d80bfdb2cbb7</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a877ec8f0fbcd0bc85e9c70228bb0d9a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>frobenius_norm2</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a47ce5b36f27a469bec65526a3a713936</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af7f374a446da73947a03ee1e510bdb36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a7204d88d744be15957ceb9243ffea421</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a0c35446d8ee52e025087fe0ade646866</anchor>
      <arglist>(V1 &amp;x, const V2 &amp;b, bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a36fbc6e5410a79c307c3a2d28886b18e</anchor>
      <arglist>(bool doPivoting=true)</arglist>
    </member>
    <member kind="function">
      <type>field_type</type>
      <name>determinant</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>af3823ea29f7b0b77e77c3d352ec179e3</anchor>
      <arglist>(bool doPivoting=true) const</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, ROWS, COLS &gt; &amp;</type>
      <name>leftmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ade75b0474c85904b4ceb62860c260d8f</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>FieldMatrix&lt; K, ROWS, COLS &gt; &amp;</type>
      <name>rightmultiply</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a518cb030a8123f042a8e8b86e0b43f0a</anchor>
      <arglist>(const DenseMatrix&lt; M2 &gt; &amp;M)</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>N</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>ad31767b53c695563b22c403c90653cae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>M</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a5d4395aec1cc0580ed9651e9b00434b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>rows</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a87d6a39a8a05460bf6c23bb79203de06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>cols</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a4e24141a1dee8d2e438149c51c02bc6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>adeb7d9c62b0ad0ed249ff7e53738f748</anchor>
      <arglist>([[maybe_unused]] size_type i,[[maybe_unused]] size_type j) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>mat_rows</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>aa81497f25ddb7825279e67d32bad41df</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>mat_cols</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a064ef91197315fef9f26fbac11b809d1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>luDecomposition</name>
      <anchorfile>a01393.html</anchorfile>
      <anchor>a3c7e21f32c0c1968e0ef1a258fc4e17d</anchor>
      <arglist>(DenseMatrix&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt; &amp;A, Func func, Mask &amp;nonsingularLanes, bool throwEarly, bool doPivoting)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator+</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>ae6033f217d2de1c7c0ddd108459ff8ac</anchor>
      <arglist>(const FieldMatrix &amp;matrixA, const FieldMatrix&lt; OtherScalar, ROWS, COLS &gt; &amp;matrixB)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator-</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>aeef436b80f2fea9362ede567c2ad5ab7</anchor>
      <arglist>(const FieldMatrix &amp;matrixA, const FieldMatrix&lt; OtherScalar, ROWS, COLS &gt; &amp;matrixB)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a73571b59b3fd79624127eac25fbbb7eb</anchor>
      <arglist>(const FieldMatrix &amp;matrix, Scalar scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>ad34e6fbc1065f22931e41307c8c4a9a6</anchor>
      <arglist>(Scalar scalar, const FieldMatrix &amp;matrix)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator/</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>accbf82922c8508357f55097c078639a6</anchor>
      <arglist>(const FieldMatrix &amp;matrix, Scalar scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01401.html</anchorfile>
      <anchor>a333b1a7a03548260d93c80be0c0aebe9</anchor>
      <arglist>(const FieldMatrix &amp;matrixA, const FieldMatrix&lt; OtherScalar, COLS, otherCols &gt; &amp;matrixB)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits</name>
    <filename>a01733.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>field_type</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aaaf5412c6ed2f4ac627eec87a2d1de1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>real_type</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab1c1583160e1c47c4909273c82ae7a63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; const T &gt;</name>
    <filename>a01737.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>aa27c02e1da0f2f0c2df4d004d16dc6c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01737.html</anchorfile>
      <anchor>aa363d2f65a2c96d056733f6cd8cc7f15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; DenseMatrix&lt; M &gt; &gt;</name>
    <filename>a01397.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>const FieldTraits&lt; typename DenseMatVecTraits&lt; M &gt;::value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a18acbbcba550f0a62de0ee6dc3b61d5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const FieldTraits&lt; typename DenseMatVecTraits&lt; M &gt;::value_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01397.html</anchorfile>
      <anchor>a579cbb03329423b1e36b80b6efe32b7a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; DenseVector&lt; V &gt; &gt;</name>
    <filename>a01429.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; typename DenseMatVecTraits&lt; V &gt;::value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>aa278033ba6687a98e5950ecb948ac0e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; typename DenseMatVecTraits&lt; V &gt;::value_type &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01429.html</anchorfile>
      <anchor>ab0404137ecf76c181a93ba2e73af6c69</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; DiagonalMatrix&lt; K, n &gt; &gt;</name>
    <filename>a01465.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga06947d572d7c28aab71c731e41de6854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaeaa44fc39dd6d14d3c8b05c45ae146fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; DynamicMatrix&lt; K &gt; &gt;</name>
    <filename>a01509.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a56ba0ff08580dfe31323cb76a7869869</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01509.html</anchorfile>
      <anchor>a145951e3e4ac1843008bd044659498eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</name>
    <filename>a01521.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>a12a47156bab3a1645875bcc30bf2d653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01521.html</anchorfile>
      <anchor>acd4e4bf6cfb7176cf888350d8df0f62a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</name>
    <filename>a01729.html</filename>
    <templarg></templarg>
    <templarg>ROWS</templarg>
    <templarg>COLS</templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>a71956c856d1bed6341ba509a9954276b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01729.html</anchorfile>
      <anchor>abf2504393ce409e20a4d2567e8a65a5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</name>
    <filename>a01773.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>ade3402a89a4d8cdd598ca0a5131d7a83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01773.html</anchorfile>
      <anchor>a45febe4d04b7969068ab107fee6fb667</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; std::complex&lt; T &gt; &gt;</name>
    <filename>a01741.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::complex&lt; T &gt;</type>
      <name>field_type</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>ac76b233134c70cfa5427c3565a4e37e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>real_type</name>
      <anchorfile>a01741.html</anchorfile>
      <anchor>a76567b85e3ecbb6218b1791983b71b38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldTraits&lt; std::remove_const_t&lt; K &gt; &gt;</name>
    <filename>a01733.html</filename>
    <member kind="typedef">
      <type>std::remove_const_t&lt; K &gt;</type>
      <name>field_type</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>aaaf5412c6ed2f4ac627eec87a2d1de1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const_t&lt; K &gt;</type>
      <name>real_type</name>
      <anchorfile>a01733.html</anchorfile>
      <anchor>ab1c1583160e1c47c4909273c82ae7a63</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; std::vector&lt; T &gt; &gt;</name>
    <filename>a01749.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a24c2784cd0a4098bcbf1ec9460974e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01749.html</anchorfile>
      <anchor>a149ab84bd8a57ccfabdbf483abefc214</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::FieldTraits&lt; T[N] &gt;</name>
    <filename>a01745.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ac0f6d61f79c34c7e88138ff0814603da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; T &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a01745.html</anchorfile>
      <anchor>ac42cd4f57abdbe6f4dc2e79848e016f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CommPolicy::FieldVector</name>
    <filename>a01977.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::FieldVector</name>
    <filename>a01405.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <base>DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt;</base>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9576903722676f56f3d1c09fd327ba44a46cd8de19a115292224e0e38aae3f89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2c7b51d2f5088bed3f04f825b7981338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca57e1c44a7bb33047fb98a01b3a6c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac355ea990d87c53086303afb7542baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1c98c91c59736499b244656d7c233252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9576903722676f56f3d1c09fd327ba44a46cd8de19a115292224e0e38aae3f89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1867986f24820da1f68ed4a32be8d8d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a427b89a66ec3a1384a83121f961efcd8</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aeb95180e64502a15d63e8f9c1e16c0de</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a460b7a09e25ea42ad807a399eabe7519</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ace1c186c12dc313244184fe60727f242</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aac95a3364ea712526c5ff5b018f94972</anchor>
      <arglist>(const FieldVector&lt; T, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af8a3a551df32ea1dd04149d516047152</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a35cff4080eccdcf5b0973175e1d415</anchor>
      <arglist>(const DenseVector&lt; C &gt; &amp;x, [[maybe_unused]] typename std::enable_if&lt; IsFieldVectorSizeCorrect&lt; C, SIZE &gt;::value &gt;::type *dummy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9842ebc4cea4bfdeebb71149cd2d409a</anchor>
      <arglist>(const FieldVector&lt; K1, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f57841efcf6fe3910ba0e119a84bf10</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8aeef8726b76e27249e2847c3f7470b</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aae14491c26a9e5dff8cbc2b30460aa76</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac54cb0923bcb39afe8e7711c354e768a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a10493739d1ccda43bd8e552f5aae89e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a4d1cffba175fb410d40653f3b919f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7cf951e0cdab91d9384c9f06970e0c4d</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a433d86e226c16baec7128c1985c1e74c</anchor>
      <arglist>(Scalar scalar, const FieldVector &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator/</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4bbb059c389696e14c1a43c47a238730</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2f859ab39b4bf4fc0164e49deb986ccb</anchor>
      <arglist>(std::istream &amp;in, FieldVector&lt; K, SIZE &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldVector&lt; K, COLS &gt;</name>
    <filename>a01405.html</filename>
    <base>DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2c7b51d2f5088bed3f04f825b7981338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca57e1c44a7bb33047fb98a01b3a6c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac355ea990d87c53086303afb7542baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1c98c91c59736499b244656d7c233252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9576903722676f56f3d1c09fd327ba44a46cd8de19a115292224e0e38aae3f89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1867986f24820da1f68ed4a32be8d8d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a427b89a66ec3a1384a83121f961efcd8</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aeb95180e64502a15d63e8f9c1e16c0de</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a460b7a09e25ea42ad807a399eabe7519</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a35cff4080eccdcf5b0973175e1d415</anchor>
      <arglist>(const DenseVector&lt; C &gt; &amp;x,[[maybe_unused]] typename std::enable_if&lt; IsFieldVectorSizeCorrect&lt; C, SIZE &gt;::value &gt;::type *dummy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9842ebc4cea4bfdeebb71149cd2d409a</anchor>
      <arglist>(const FieldVector&lt; K1, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f57841efcf6fe3910ba0e119a84bf10</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ace1c186c12dc313244184fe60727f242</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aac95a3364ea712526c5ff5b018f94972</anchor>
      <arglist>(const FieldVector&lt; T, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af8a3a551df32ea1dd04149d516047152</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8aeef8726b76e27249e2847c3f7470b</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aae14491c26a9e5dff8cbc2b30460aa76</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac54cb0923bcb39afe8e7711c354e768a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a10493739d1ccda43bd8e552f5aae89e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a4d1cffba175fb410d40653f3b919f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7cf951e0cdab91d9384c9f06970e0c4d</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a433d86e226c16baec7128c1985c1e74c</anchor>
      <arglist>(Scalar scalar, const FieldVector &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator/</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4bbb059c389696e14c1a43c47a238730</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2f859ab39b4bf4fc0164e49deb986ccb</anchor>
      <arglist>(std::istream &amp;in, FieldVector&lt; K, SIZE &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FieldVector&lt; K, n &gt;</name>
    <filename>a01405.html</filename>
    <base>DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::size_type</type>
      <name>size_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a2c7b51d2f5088bed3f04f825b7981338</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::value_type</type>
      <name>value_type</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aca57e1c44a7bb33047fb98a01b3a6c40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac355ea990d87c53086303afb7542baf7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const value_type &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1c98c91c59736499b244656d7c233252</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9576903722676f56f3d1c09fd327ba44a46cd8de19a115292224e0e38aae3f89f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::derived_type</type>
      <name>derived_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a34e9bf293f856d54796593981ea52c17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; value_type &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab40059aac27a618d775bce116b4f3746</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::value_type</type>
      <name>block_type</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab5e72791f5c4cffc273a43f63a3072d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; DenseVector, value_type &gt;</type>
      <name>Iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c98d3c53e08f0db8cce3b1e88b45c1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0d32efa59ca198acd89776fff71d4ef3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; const DenseVector, const value_type &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a284929d58f3df6c66e2a7ad629a7f4f2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a08e293015cdccffda5df1fe06070a130</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ac53558845f4efcb6623cbddca97c2970a9e0600a48ac0882f0293f26f7de20f83</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a1867986f24820da1f68ed4a32be8d8d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a427b89a66ec3a1384a83121f961efcd8</anchor>
      <arglist>(const K &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aeb95180e64502a15d63e8f9c1e16c0de</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a460b7a09e25ea42ad807a399eabe7519</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a35cff4080eccdcf5b0973175e1d415</anchor>
      <arglist>(const DenseVector&lt; C &gt; &amp;x,[[maybe_unused]] typename std::enable_if&lt; IsFieldVectorSizeCorrect&lt; C, SIZE &gt;::value &gt;::type *dummy=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9842ebc4cea4bfdeebb71149cd2d409a</anchor>
      <arglist>(const FieldVector&lt; K1, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a3f57841efcf6fe3910ba0e119a84bf10</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ace1c186c12dc313244184fe60727f242</anchor>
      <arglist>(const FieldVector &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aac95a3364ea712526c5ff5b018f94972</anchor>
      <arglist>(const FieldVector&lt; T, SIZE &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>FieldVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>af8a3a551df32ea1dd04149d516047152</anchor>
      <arglist>(const FieldVector&lt; T, N &gt; &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ad8aeef8726b76e27249e2847c3f7470b</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>aae14491c26a9e5dff8cbc2b30460aa76</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>ac54cb0923bcb39afe8e7711c354e768a</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const K *</type>
      <name>data</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a10493739d1ccda43bd8e552f5aae89e0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aff7eb3783fc33c122c1bbd49da49483c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>front</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4535132c8c9be58328d5589de76ce1d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0802c4d1cc9af0e1da5590013baf4bf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const value_type &amp;</type>
      <name>back</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6ed9667b527c99a1eb172e13c3cffe37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afd39ba30f616bcf4158a1d8b3e4bf872</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a3daf5b5501de6164915db0e34e8ce763</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a2154e1f6858db8dad26046187837bc0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa4806c2eaf07106ccc5bd6b7320c9ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a5feee4aa0d88277f19169c7833cd9e9f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a195a839274c030e30ab03f7efabcc3aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8352d8d5b5d98f82b0620fdde870b3ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4cabf0d4856865d667868784fa511f4a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a23408ea7b99536c94aa32907372cc52b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1f4723b4cce2f85f275a3d26d21aac6f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af2264c91ca0dfbd9dda13814fc588e60</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>find</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1903b7bf21abd5d7c60a33182f6bf31d</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a88f16164643ad187211390a317e0bdf1</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>adc3237c1a6746c8a5a8cd3aae0b4485c</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af00bc8929e2831baa50b93aae523c370</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; ValueType, value_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a0ca7fedab4084fbbf33c1b1e08bff253</anchor>
      <arglist>(const ValueType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator+</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a36c92f5d9bb45d293d88849a7e85404e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a6c2f4380345e7663888d661caa64518c</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type</type>
      <name>operator-</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ae1e4c064a337af542311bf3fe2672098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator*=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a119f5e5f2cec83ef023c1c18ce182f14</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; FieldType, field_type &gt;::value, derived_type &gt;::type &amp;</type>
      <name>operator/=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a62eef9cdbbfc1d91e69af823256e1171</anchor>
      <arglist>(const FieldType &amp;kk)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fa793f3dffdd5ae987f0792dfc02fa6</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a8ebb6a081f83f2a80a86b5f417ba133e</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>derived_type &amp;</type>
      <name>axpy</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a31fb1c0efefc27f705e1e70893274e89</anchor>
      <arglist>(const field_type &amp;a, const DenseVector&lt; Other &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>operator*</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a4796b3c38eef54dde846d9b81b5710ca</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>PromotionTraits&lt; field_type, typename DenseVector&lt; Other &gt;::field_type &gt;::PromotedType</type>
      <name>dot</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab686121e2b1fa004158a10defc6d2e24</anchor>
      <arglist>(const DenseVector&lt; Other &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a517d6e277a84e9b29dda9701bc8c67d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>one_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>afee6d34642b49f809a80f52b00bbcf24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a846f8a5afda7160cbed51d6ebeb61c3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; value_type &gt;::real_type</type>
      <name>two_norm2</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a1fc4f5a3599d0a88aa26addc9bc36647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>ab08cf1d1e315ba9a99499fc907302aa7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldTraits&lt; vt &gt;::real_type</type>
      <name>infinity_norm_real</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>aa6bdfe70aee7324368e1c54ab3e461d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>af9aef3e17003431e0f5961c4dc6a812d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a01425.html</anchorfile>
      <anchor>a480978e0af56a520f3e7745da87d9e20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a9a4d1cffba175fb410d40653f3b919f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a7cf951e0cdab91d9384c9f06970e0c4d</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator*</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a433d86e226c16baec7128c1985c1e74c</anchor>
      <arglist>(Scalar scalar, const FieldVector &amp;vector)</arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>operator/</name>
      <anchorfile>a01405.html</anchorfile>
      <anchor>a4bbb059c389696e14c1a43c47a238730</anchor>
      <arglist>(const FieldVector &amp;vector, Scalar scalar)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2f859ab39b4bf4fc0164e49deb986ccb</anchor>
      <arglist>(std::istream &amp;in, FieldVector&lt; K, SIZE &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; FieldVector&lt; K, SIZE &gt; &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FirstPredicateIndex</name>
    <filename>a02949.html</filename>
    <templarg></templarg>
    <templarg>Predicate</templarg>
    <templarg>start</templarg>
    <templarg>size</templarg>
  </compound>
  <compound kind="class">
    <name>FirstPredicateIndex&lt; Tuple, IsType&lt; T &gt;::template Predicate, 0 &gt;</name>
    <filename>a02949.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::FirstTypeIndex</name>
    <filename>a02961.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>start</templarg>
    <base>FirstPredicateIndex&lt; Tuple, IsType&lt; T &gt;::template Predicate, 0 &gt;</base>
  </compound>
  <compound kind="struct">
    <name>Dune::FlattenTuple</name>
    <filename>a02993.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ReduceTuple&lt; JoinTuples, Tuple &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaa580e2f88998695fd3ba5749283d6183</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FloatCmpOps</name>
    <filename>a01721.html</filename>
    <templarg></templarg>
    <templarg>cstyle_</templarg>
    <templarg>rstyle_</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>ad2305e7e05141f16470ad1c4178834c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FloatCmp::EpsilonType&lt; T &gt;::Type</type>
      <name>EpsilonType</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>aa865bb7b8fda1c3460ea956c00c48205</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FloatCmpOps</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a1590280d8c7f3c7160c53495705032bb</anchor>
      <arglist>(EpsilonType epsilon=DefaultEpsilon::value())</arglist>
    </member>
    <member kind="function">
      <type>EpsilonType</type>
      <name>epsilon</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>ad720314995a1175d2b7648f9cafa91e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>epsilon</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a1a09b4f5ad8b43f82d4ad39e1727f6b3</anchor>
      <arglist>(EpsilonType epsilon__)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a498a2da2995839807249c4e8e49e7649</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>abd51723b0c50f428a0c47505daeacf44</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>afa0c2ebf45af602550aa9da0cbbd2eba</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a7a44bc1c5f5dab6e180ce21769c19336</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a7d30a3be9c17c853731f3776064d6c95</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a157dbc3ca5614f53e129bfc322ede59d</anchor>
      <arglist>(const ValueType &amp;first, const ValueType &amp;second) const</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>ae5601155512c834c4d36368d9ba90104</anchor>
      <arglist>(const ValueType &amp;val) const</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>aeeaf7a88b3e782655d1b1336a9b72f83</anchor>
      <arglist>(const ValueType &amp;val) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const CmpStyle</type>
      <name>cstyle</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a5f085d6dc94f4b3208216c4c12a745ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const RoundingStyle</type>
      <name>rstyle</name>
      <anchorfile>a01721.html</anchorfile>
      <anchor>a86183dfe5d62e11cc51eb8673e3b9b7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FMatrixError</name>
    <filename>a01421.html</filename>
    <base>Dune::MathError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FMatrixPrecision</name>
    <filename>a02401.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static ctype</type>
      <name>absolute_limit</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>a554b13677982d46917bb1bd05f831aec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>set_absolute_limit</name>
      <anchorfile>a02401.html</anchorfile>
      <anchor>aae2188f98a4cc65afa86fc2e5d334b58</anchor>
      <arglist>(ctype absthres)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ForEachType</name>
    <filename>a02909.html</filename>
    <templarg>TE</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ForEachType&lt; TE, std::tuple&lt; Args... &gt; &gt;</name>
    <filename>a02913.html</filename>
    <templarg>TE</templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::tuple&lt; typename TE&lt; Args &gt;::Type... &gt;</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gae36d1b293a8e0e6a505be040434331e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ForwardIteratorFacade</name>
    <filename>a01873.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; V &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForwardIteratorFacade&lt; SLListConstIterator&lt; T, A &gt;, const T, const T &amp;, std::size_t &gt;</name>
    <filename>a01873.html</filename>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; const T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForwardIteratorFacade&lt; SLListIterator&lt; T, A &gt;, T, T &amp;, std::size_t &gt;</name>
    <filename>a01873.html</filename>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ForwardIteratorFacade&lt; SLListModifyIterator&lt; T, A &gt;, T, T &amp;, std::size_t &gt;</name>
    <filename>a01873.html</filename>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Function</name>
    <filename>a01753.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::Function::Traits</class>
    <member kind="typedef">
      <type>RawRangeType</type>
      <name>RangeType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>aee694ec3111307a12bdec1eed399965d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawDomainType</type>
      <name>DomainType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ab05c710b26671cefdfac5a1a403aa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>adac10ee9c30ce5fb8162ddf6c56f4872</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, typename Traits::RangeType &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Function&lt; const DomainType &amp;, RangeType &amp; &gt;</name>
    <filename>a01753.html</filename>
    <member kind="typedef">
      <type>RawRangeType</type>
      <name>RangeType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>aee694ec3111307a12bdec1eed399965d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawDomainType</type>
      <name>DomainType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ab05c710b26671cefdfac5a1a403aa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>adac10ee9c30ce5fb8162ddf6c56f4872</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, typename Traits::RangeType &amp;y) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Future</name>
    <filename>a02049.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Future</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>adada4a4ddbf330c0be748bf754ba8d80</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Future</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a28ce185948d5dfc6ae38e53ea0200cfd</anchor>
      <arglist>(U &amp;&amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Future</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>ab7c3bdcec8ee8d0240d99de0b5f85fb0</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a12d6700e91dc0441e562b2c6a534e56d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a4c7f4da716cd69f8f6c9c8fe5ac17838</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>a06dbf43dc827d5d6ccb248ff32dc68fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02049.html</anchorfile>
      <anchor>abd07d08dcdbbd412727ec7c0d870c800</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Gcd</name>
    <filename>a01789.html</filename>
    <templarg>a</templarg>
    <templarg>b</templarg>
    <member kind="variable" static="yes">
      <type>constexpr static long</type>
      <name>value</name>
      <anchorfile>a01789.html</anchorfile>
      <anchor>aba52018de2fd9670385b0a5d5103b0fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Generic_MPI_Op</name>
    <filename>a02133.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static MPI_Op</type>
      <name>get</name>
      <anchorfile>a02133.html</anchorfile>
      <anchor>a630e429addd37d613753026e63f07410</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GenericIterator</name>
    <filename>a01825.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>IteratorFacade</templarg>
    <base>RandomAccessIteratorFacade&lt; GenericIterator&lt; C, T, T &amp;, std::ptrdiff_t, RandomAccessIteratorFacade &gt;, T, T &amp;, std::ptrdiff_t &gt;</base>
    <member kind="typedef">
      <type>C</type>
      <name>Container</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ac3b4f031090f89bae04676839a7d1ffc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ac78c83caf53ee8999f09a98299c971a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a919df26bfe8c41056f8252cfb399a68f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>aa47e631f6c00880c54305a219b9f555d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericIterator&lt; C, T, T &amp;, std::ptrdiff_t, RandomAccessIteratorFacade &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericIterator</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ad18ebcc99fae6136af9060371c4cf672</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericIterator</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a840fcdc70cf38abf2d284734171e789d</anchor>
      <arglist>(Container &amp;cont, DifferenceType pos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericIterator</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a2f26dd3336d6af8c8c9859b79fed5a20</anchor>
      <arglist>(const MutableIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GenericIterator</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a71eaad8c5605ada7b5ee169a733a5132</anchor>
      <arglist>(const ConstIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a435460f288c15af4fb62219a974e01b3</anchor>
      <arglist>(const MutableIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>afb8b3cf63d207449a651c927071e43ae</anchor>
      <arglist>(const ConstIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>dereference</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>af20ff2991e12a9158bff274bed220d8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a5d53d77806d07a05a487b6fbc0cf0827</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>acfc5f3bb399b4db6eb1d4350a908cba5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>elementAt</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a4983d3d6fc651bb9ecce4ed79b86fda3</anchor>
      <arglist>(DifferenceType i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a7717138c203d717e3671ce5ff6cbf8c9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DifferenceType</type>
      <name>distanceTo</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>aaa1aa9427bf542c1943b1fd3cd296447</anchor>
      <arglist>(const MutableIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>DifferenceType</type>
      <name>distanceTo</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>accc9c05e6fea1ea31f3a8dc01ec84d1f</anchor>
      <arglist>(const ConstIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GenericIterator&lt; typename std::remove_const&lt; C &gt;::type, typename std::remove_const&lt; T &gt;::type, typename mutable_reference&lt; R &gt;::type, D, IteratorFacade &gt;</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>a571ef5b17f0a490c081fb544419809d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GenericIterator&lt; const typename std::remove_const&lt; C &gt;::type, const typename std::remove_const&lt; T &gt;::type, typename const_reference&lt; R &gt;::type, D, IteratorFacade &gt;</name>
      <anchorfile>a01825.html</anchorfile>
      <anchor>ab79cf01f9294cdafe29956df62a588f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GlobalLookupIndexSet</name>
    <filename>a02073.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>I</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7b244f68738204004286a1e6833ef95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8b7de52f424abbff8027cd528e1f0c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf66c2a53e3745f2eb80a457f3358e484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga581c7a4200df70547189e64988a72e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair&lt; typename I::GlobalIndex, typename I::LocalIndex &gt;</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga568f6b5fd92dc6df720467dbd99f4c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf0a14b66fc635c8a66f4346aa1828a88</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3f3a1d9e4b1a841d77ce3730de247c90</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab501ff12c926340ba45b83cdd7b03d4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga49fe17ace8f5d66d985e85dc164ab10b</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair *</type>
      <name>pair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga08233ec627b179cc5d07a0e1cd61fec8</anchor>
      <arglist>(const std::size_t &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5ff81c8db1ab0bcaa8dfd4143b2553c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3295a37933fa3765b4df1b234c08644b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seqNo</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4bbd0e5717acc8a228930efddec0d9b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabad98ca1db16608ebe19e78d5e7baf63</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GMPField</name>
    <filename>a01829.html</filename>
    <templarg>precision</templarg>
    <member kind="function">
      <type></type>
      <name>GMPField</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a1c98f1cff0e1a4f47f21c8da20ab3d7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMPField</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a638036e0a8202b2b10a7ab75f2971abd</anchor>
      <arglist>(const char *str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMPField</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a2dba914e372f4ebaf7723700e70b895d</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GMPField</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>a04962d934cef35d60d59a9bd3142e22d</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator double</name>
      <anchorfile>a01829.html</anchorfile>
      <anchor>ac68f8e4c99a27750b3543f180882ac84</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::greater_or_equal</name>
    <filename>a01369.html</filename>
    <templarg>current</templarg>
    <templarg>threshold</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga0133cfa4f3c689ee46d56d409bf53c10</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Concept::HasFixedSize</name>
    <filename>a02249.html</filename>
    <member kind="function">
      <type>auto</type>
      <name>require</name>
      <anchorfile>a02249.html</anchorfile>
      <anchor>a9acffceab715728d980beae9cbbe8634</anchor>
      <arglist>(H &amp;&amp;h) -&gt; decltype(h.fixedSize())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::hash</name>
    <filename>a01853.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>a01853.html</anchorfile>
      <anchor>ae27633febd753959d3b8ab013e8bb4a7</anchor>
      <arglist>(const T &amp;t) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::HasNaN</name>
    <filename>a03089.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::HelpRequest</name>
    <filename>a02357.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::identity</name>
    <filename>a02837.html</filename>
    <member kind="function">
      <type>constexpr T &amp;&amp;</type>
      <name>operator()</name>
      <anchorfile>a02837.html</anchorfile>
      <anchor>ab226b954692a36104327efcf4bf7eb7d</anchor>
      <arglist>(T &amp;&amp;t) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IdentityMap</name>
    <filename>a02457.html</filename>
    <base>RAPropertyMapHelper&lt; std::size_t, IdentityMap &gt;</base>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>KeyType</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a454026a1ab4bd63d1be5560b2060b8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>ValueType</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a122fe3d0181e2a94229d5ae5e904e721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>Reference</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a9aa29798800727d9c158bee3b3a06ff2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReadablePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>ad562d06d6bd36fad370ef2a0ae2d76bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>operator[]</name>
      <anchorfile>a02457.html</anchorfile>
      <anchor>a667b1c743dad6753834adb0a75fba330</anchor>
      <arglist>(const KeyType &amp;key) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ImplementationDefined</name>
    <filename>a01489.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Indent</name>
    <filename>a01861.html</filename>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabb0f032ac7f93f75e8918741c6da79c5</anchor>
      <arglist>(const std::string &amp;basic_indent_=&quot;  &quot;, unsigned level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1f1ea564f5a91476186d98f86bc9e9c5</anchor>
      <arglist>(unsigned level_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae84075a0c38565df531b69c1cbba9de8</anchor>
      <arglist>(const Indent *parent_, const std::string &amp;basic_indent_=&quot;  &quot;, unsigned level_=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8aa75c75f4de24c071ad32c329c4f0f1</anchor>
      <arglist>(const Indent *parent_, unsigned level_)</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0d8e2d1ad854a5768618d827269c0483</anchor>
      <arglist>(const std::string &amp;newindent) const</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29e86c93b437fefa4d30687bece5a5d4</anchor>
      <arglist>(unsigned morelevel) const</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator++</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9b30e9d57dee5b5fa9f6e1a79547b90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator--</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae9115fbc5d176bdf580e893ee1f0a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga97f3159cb0a394380ed4668506b2c721</anchor>
      <arglist>(std::ostream &amp;s, const Indent &amp;indent)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndexPair</name>
    <filename>a02065.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac7ba161114dcda480ec1e03fade5d887</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga43eed1b88f2bc2e0b683465638df39fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8e4caa12b6c34752c7bc2f01361d3a63</anchor>
      <arglist>(const GlobalIndex &amp;global, const LocalIndex &amp;local)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga73eb42aaa0a54d593d6f537960446d7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabc5975873aa790a0f3caf5b8c185a1d1</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIndex &amp;</type>
      <name>global</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6ada98944af4bbe180fa595a1d83e245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndex &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5059e229ed1368fe8aa963f2d47ad6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LocalIndex &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9a5c24ac328f8ec0c3004759e96de295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocal</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga98503056ecd6fa927cd9189fa41f91a2</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPITraits&lt; IndexPair&lt; TG, TL &gt; &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac56f63a1893eb6178552c12f89661016</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab3241ebfbe7018e35320ef06078709c3</anchor>
      <arglist>(std::ostream &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5c51c63883c3a48dece4440c372d5c53</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6d384efb29a28c8ae7422e774a464249</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad03fd1605e39f81e9440cd1547b3066c</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8824a6d5aef509230254e252dd016258</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0e707b10e159a91b2d6059cfda435845</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga99b7c1f22d09887b6899092b83bbdff8</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae169ffa0362f8e9b1b24666dacb12d1c</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga15c6ed646bed8a062721d88ba58effaf</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabdce1156ece87043775b414ad9dbc06b</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d24c026726a7289f280e48ecd9911b2</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga61ff63328a975bd024f4e0b3d075f28d</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5849b4f276e6bf502389ecbd4d9c189</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexSetSortFunctor</name>
    <filename>a02089.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2e9e10ec7895128f5107668eef5d2842</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;i1, const IndexPair&lt; TG, TL &gt; &amp;i2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndicesSyncer</name>
    <filename>a02093.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa1e45a96ec6d391e816cf3a6ecd3ba71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::IndexPair</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae01c9c9d98e213ba18897c0fc69dba78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga44992bb99b3f3f3d7c9badb9c7ff74c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6087c4c3aa666ff87aa4ea4b9876646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d307cac53327747eab59d2c3bae34ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndicesSyncer</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8b032138e767af75563f7eab24eae18c</anchor>
      <arglist>(ParallelIndexSet &amp;indexSet, RemoteIndices &amp;remoteIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac6edb7facf4c4407f74982989e5f9980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gacf6bdea6809d17b74c69c255b7f4a233</anchor>
      <arglist>(T1 &amp;numberer)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SimdImpl::Inserter</name>
    <filename>a02577.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Inserter</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a232e95fd4c68d29088364920b6049269</anchor>
      <arglist>(const T &amp;value)</arglist>
    </member>
    <member kind="friend">
      <type>friend Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02577.html</anchorfile>
      <anchor>a8248b1dde349d5c3c9edee372bd836c7</anchor>
      <arglist>(Stream &amp;out, const Inserter &amp;ins)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IntegerSequenceEntry</name>
    <filename>a03117.html</filename>
    <templarg></templarg>
    <templarg>index</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::IntegralRange</name>
    <filename>a02473.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>ad74cc554ddff91fd5db8715d320f8062</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::IntegralRangeIterator&lt; T &gt;</type>
      <name>iterator</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a5cd7c770e0ee88827d4e16268e3c67af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::make_unsigned_t&lt; T &gt;</type>
      <name>size_type</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a549414c33083e7cc1068e50daaba09d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IntegralRange</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>aab7100ae3290c0eacdb52e20d584d51f</anchor>
      <arglist>(value_type from, value_type to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IntegralRange</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>acb5733c3c1095d9c1ef85b06a2728268</anchor>
      <arglist>(value_type to) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>IntegralRange</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>aa1a4b73815d071b2ba4b67581a4876f6</anchor>
      <arglist>(std::pair&lt; value_type, value_type &gt; range) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a071343b3285beba8b70792f6061c3880</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a3aa0fcc584561352712573e0ee7fb8c8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>operator[]</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a8cfdd5a5217385b8c7139afdbcd8edac</anchor>
      <arglist>(const value_type &amp;i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>a9b896be5e2675de8a8f9c9dc00e2835e</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>a02473.html</anchorfile>
      <anchor>abe290bc53408b32484b3099d0c4dc883</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Interface</name>
    <filename>a02121.html</filename>
    <base>Dune::InterfaceBuilder</base>
    <member kind="typedef">
      <type>std::map&lt; int, std::pair&lt; InterfaceInformation, InterfaceInformation &gt; &gt;</type>
      <name>InformationMap</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a7872c4faa3f54769d280e114a93a94d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1f0752f49661af9d5bacb90c8910342d</anchor>
      <arglist>(const R &amp;remoteIndices, const T1 &amp;sourceFlags, const T2 &amp;destFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad50cd798f6e309875ac63ede115d5691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9bd9ed165844afe33fa8fbccfa4575f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InformationMap &amp;</type>
      <name>interfaces</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7cc155572e8fc3567e9db0dbd6e71d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>ab078b6e054d4e2e004146bd9d1e9e6ec</anchor>
      <arglist>(MPI_Comm comm)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interface</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a80d7c415ff2720c9af43681d59b96388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga427e4574b1e457bbd5b28f8e817c407b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a0a20ca0bc1f3f0d0448307a79c7093ba</anchor>
      <arglist>(const Interface &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>aa24f7f863b750eb69339f7cd60ad4b93</anchor>
      <arglist>(const Interface &amp;o) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaab6892f43cc3663b905883124213e8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strip</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5a5a3a7322debca8f959d0f76165806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InformationMap &amp;</type>
      <name>interfaces</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga437c4911cec3efce1a7bdbe8c514beb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildInterface</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga05121b68560835efae0092c6a9078e78</anchor>
      <arglist>(const R &amp;remoteIndices, const T1 &amp;sourceFlags, const T2 &amp;destFlags, Op &amp;functor) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MPI_Comm</type>
      <name>communicator_</name>
      <anchorfile>a02121.html</anchorfile>
      <anchor>a14b21743f47cca3a3f2d686505ecacc0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InterfaceBuilder</name>
    <filename>a02109.html</filename>
    <class kind="class">Dune::InterfaceBuilder::RemoteIndicesStateError</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceBuilder</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>a8fd7e6b28d58b8b8550a63b416c08148</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>InterfaceBuilder</name>
      <anchorfile>a02109.html</anchorfile>
      <anchor>ae9a71b43a7e08ca2a9964deed35b1e28</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildInterface</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga05121b68560835efae0092c6a9078e78</anchor>
      <arglist>(const R &amp;remoteIndices, const T1 &amp;sourceFlags, const T2 &amp;destFlags, Op &amp;functor) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InterfaceInformation</name>
    <filename>a02117.html</filename>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ae44761e3e2f5b738e06d04b7e76cf90b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a1b09a24ec0a34578ef4ab487fce4df42</anchor>
      <arglist>(size_t i)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator[]</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>af672841b5e27036ef0de7111df2e4f08</anchor>
      <arglist>(size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reserve</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>ae4d44498ce2f25d30fe10d52a8c0b682</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a34fc2f7d08e7812ae7e74c5a76317cce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a4c38673248929efc6a381c7a3905a8a5</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>InterfaceInformation</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>acf04b8261cf9f1ea8919862b8c1417bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~InterfaceInformation</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a560e43bc8de72e3d52b91d10060ec2de</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a25477924f0360a72ddf14f89054abc2a</anchor>
      <arglist>(const InterfaceInformation &amp;o) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02117.html</anchorfile>
      <anchor>a6da64368ed961306ad2f421075f8e90d</anchor>
      <arglist>(const InterfaceInformation &amp;o) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InvalidFutureException</name>
    <filename>a02041.html</filename>
    <base>Dune::InvalidStateException</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InvalidIndexSetState</name>
    <filename>a02069.html</filename>
    <base>Dune::InvalidStateException</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RemoteIndexListModifier::InvalidPosition</name>
    <filename>a02229.html</filename>
    <base>Dune::RangeError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InvalidStateException</name>
    <filename>a01581.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IOError</name>
    <filename>a01557.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ios_base_all_saver</name>
    <filename>a01869.html</filename>
    <member kind="typedef">
      <type>std::ios_base</type>
      <name>state_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaab42b8e2cf5e10c794a7957e003edd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ios_base_all_saver</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaba871722210fe56717056b5e32f46429</anchor>
      <arglist>(state_type &amp;ios_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ios_base_all_saver</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga022177c21c172353d00b3d4658e75e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga11e7a466cb1a43b36026a751364ae564</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::is_callable</name>
    <filename>a02849.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::is_callable&lt; F(Args...), R &gt;</name>
    <filename>a02853.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::is_invocable</name>
    <filename>a02857.html</filename>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::is_invocable_r</name>
    <filename>a02861.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsCallable</name>
    <filename>a03077.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsCallable&lt; F(Args...), R &gt;</name>
    <filename>a03081.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsEmptyTypeList</name>
    <filename>a03013.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsFieldVectorSizeCorrect</name>
    <filename>a01777.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>adf414e0b23959fe5528db6e5b2f2b1b6a507185cf7683aa8ad8b084cb64ceb4d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01777.html</anchorfile>
      <anchor>adf414e0b23959fe5528db6e5b2f2b1b6a507185cf7683aa8ad8b084cb64ceb4d3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE &gt;, SIZE &gt;</name>
    <filename>a01781.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a81bb392ed8b677259902c4648caa2f67a4e28477d15383098b39629d20cc01feb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01781.html</anchorfile>
      <anchor>a81bb392ed8b677259902c4648caa2f67a4e28477d15383098b39629d20cc01feb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE1 &gt;, SIZE &gt;</name>
    <filename>a01785.html</filename>
    <templarg></templarg>
    <templarg>SIZE</templarg>
    <templarg>SIZE1</templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a0bd1e7a4634b88401f030b752fa05ec2a0ac14ea6ed182e74ca0897913e5b18fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a01785.html</anchorfile>
      <anchor>a0bd1e7a4634b88401f030b752fa05ec2a0ac14ea6ed182e74ca0897913e5b18fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsIndexable</name>
    <filename>a03093.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsIntegralConstant</name>
    <filename>a03109.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsInteroperable</name>
    <filename>a03061.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a03061.html</anchorfile>
      <anchor>a1d5879320ced080d6a596c3b793fffd9abedf2295a77ab82bfde1edd918bb595d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a03061.html</anchorfile>
      <anchor>a1d5879320ced080d6a596c3b793fffd9abedf2295a77ab82bfde1edd918bb595d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsIterable</name>
    <filename>a03097.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsMask</name>
    <filename>a02697.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsMask&lt; Vc::Mask&lt; T, A &gt; &gt;</name>
    <filename>a02701.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsMask&lt; Vc::SimdMaskArray&lt; T, n, V, m &gt; &gt;</name>
    <filename>a02705.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg>m</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsNumber</name>
    <filename>a03085.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsNumber&lt; GMPField&lt; precision &gt; &gt;</name>
    <filename>a01833.html</filename>
    <templarg>precision</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsNumber&lt; LoopSIMD&lt; T, S, A &gt; &gt;</name>
    <filename>a02597.html</filename>
    <templarg></templarg>
    <templarg>S</templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsNumber&lt; Vc::SimdArray&lt; T, N &gt; &gt;</name>
    <filename>a02785.html</filename>
    <templarg></templarg>
    <templarg>N</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsNumber&lt; Vc::Vector&lt; T, Abi &gt; &gt;</name>
    <filename>a02789.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsTuple</name>
    <filename>a03101.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsTupleOrDerived</name>
    <filename>a03105.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsType</name>
    <filename>a02953.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::IsType::Predicate</class>
  </compound>
  <compound kind="struct">
    <name>Dune::IsTypeList</name>
    <filename>a03005.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::IsTypeList&lt; TypeList&lt; T... &gt; &gt;</name>
    <filename>a03009.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::MathImpl::isUnorderedImpl</name>
    <filename>a01933.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator()</name>
      <anchorfile>a01933.html</anchorfile>
      <anchor>a8d23d823bd25c412130cc47608870676</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsVector</name>
    <filename>a01493.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVector</name>
    <filename>a02709.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Simd::VcImpl::IsMask</base>
  </compound>
  <compound kind="struct">
    <name>Dune::IsVector&lt; T, std::void_t&lt; typename T::field_type &gt; &gt;</name>
    <filename>a01497.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVector&lt; Vc::SimdArray&lt; T, n, V, m &gt; &gt;</name>
    <filename>a02717.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <templarg></templarg>
    <templarg>m</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVector&lt; Vc::Vector&lt; T, A &gt; &gt;</name>
    <filename>a02713.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable</name>
    <filename>a02721.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; double &gt;</name>
    <filename>a02725.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; float &gt;</name>
    <filename>a02729.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; std::int16_t &gt;</name>
    <filename>a02741.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; std::int32_t &gt;</name>
    <filename>a02733.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; std::uint16_t &gt;</name>
    <filename>a02745.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::VcImpl::IsVectorizable&lt; std::uint32_t &gt;</name>
    <filename>a02737.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::CollectiveIterator::iterator</name>
    <filename>a02233.html</filename>
    <member kind="typedef">
      <type>Map::iterator</type>
      <name>RealIterator</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ae5d41226652625640a8563fdb03886b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::iterator</type>
      <name>ConstRealIterator</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a871662531ccfbf6c44275ae503a0bbae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a491d1b4cc1609f7b3796412a47223642</anchor>
      <arglist>(const RealIterator &amp;iter, const ConstRealIterator &amp;end, GlobalIndex &amp;index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>acd82aadbf62f8d7b66e8e103c77f7f3f</anchor>
      <arglist>(const RealIterator &amp;iter, const ConstRealIterator &amp;end, GlobalIndex index, Attribute attribute)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a582b73710dce932d65e2965c71d8801e</anchor>
      <arglist>(const iterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a0fa1fc97a6defe084bfa199b8f13802f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const RemoteIndex &amp;</type>
      <name>operator*</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a8d58c7e4e47d3e8a1355ae5b767a9e8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>process</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>aa756664d5468d6acd6840620a30c172b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RemoteIndex *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a0da23d680c00d4b47485cdb1ed58e527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>a9adece05460e21a6e4d325c5c1deb692</anchor>
      <arglist>(const iterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02233.html</anchorfile>
      <anchor>ad911d79470bdeee705aeae46c2c9c333</anchor>
      <arglist>(const iterator &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParallelIndexSet::iterator</name>
    <filename>a02081.html</filename>
    <base>Dune::ArrayListIterator</base>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a15b837e70ed08617eea3fd1dede3fa25a667321d60822cb5208d4b577cff47115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>MemberType</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a44d8c9d4aa483f2caaf01337649a12d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a57a0b493a61bf429936c80616b9d1972</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>ab48b44ccc846c6e3603feb94899a8c83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>afc84dfa83ee3a1cee95d4c92959b9719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename A::value_type const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>acb594abf9749c018d13d9ef3fcb38f07</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize_</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a15b837e70ed08617eea3fd1dede3fa25a667321d60822cb5208d4b577cff47115</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; A::value_type &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; T, N, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad581672da5ad6ee90838ab86d76987c7</anchor>
      <arglist>(ParallelIndexSet&lt; TG, TL, N &gt; &amp;indexSet, const Father &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0cdad573e352c6502c0b7167bdc27d55</anchor>
      <arglist>(const ArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaafd1d8065d9a75eb2ae575dece10c82d</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a141c2254e8326f22057e8e33086412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4456b3d5cbaa8d387a79412a97749ada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaba1512d36435a276d5076176981b9f94</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae3afc010b2150044b31d4d36c661eb44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseToHere</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga492de54ad819c0b784b7981d68228e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>position</name>
      <anchorfile>a01281.html</anchorfile>
      <anchor>a39fc769d027b239d42226a5a1e54ebca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadcaa9ef9cac9effc73f797c9ec914d43</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafbcc3e5345f31e56fc77ef2cec30a4e2</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParallelIndexSet&lt; GlobalIndex, LocalIndex, N &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga70a8db32087cd2158f8057483bafaeff</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IteratorPropertyMap</name>
    <filename>a02445.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>RAPropertyMapHelper&lt; typename std::iterator_traits&lt; RAI &gt;::reference, IteratorPropertyMap&lt; RAI, IM, typename std::iterator_traits&lt; RAI &gt;::value_type, typename std::iterator_traits&lt; RAI &gt;::reference &gt; &gt;</base>
    <member kind="typedef">
      <type>RAI</type>
      <name>RandomAccessIterator</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>acd90f127237caef1a27de70da3630887</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IM</type>
      <name>IndexMap</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>ac783e3011ddbd7b6922ef73c273d2a91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexMap::KeyType</type>
      <name>KeyType</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a213da36f828303ab819447ee3f7a3c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a31d3db83cb6b01f67ed2ec089839d537</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a2450e89696714ca93a606b36cd2e136d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LvaluePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>ada3e0ede2039b89b47918644d9f7d912</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorPropertyMap</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a487a3ee82c33ad82a745acbb165a17ae</anchor>
      <arglist>(RandomAccessIterator iter, const IndexMap &amp;im=IndexMap())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorPropertyMap</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a7e3b105378dc1028160dee1940459c71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a02445.html</anchorfile>
      <anchor>a42f8aca9fa1d09e31511aa14730f354e</anchor>
      <arglist>(KeyType key) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IteratorRange</name>
    <filename>a01885.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ad98380cc975a532110a0838d1c89e029</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>const_iterator</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a49421ddcbc715d99afed075e73eb4f67</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorRange</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>adb7ec5bf3368650a16463ae41d9dd44f</anchor>
      <arglist>(const Iterator &amp;begin, const Iterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IteratorRange</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>ad08326830d31d95fbb9f2667508eff22</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a188cf31835e16d41ad2b1226cc7f4c1f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a01885.html</anchorfile>
      <anchor>a52704efe8a4f9cbe66eb4015549f41de</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IteratorTransformationTag</name>
    <filename>a02485.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::JoinTuples</name>
    <filename>a02989.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ReduceTuple&lt; PushBackTuple, Tail, Head &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga61efbf30dbd7906f2922063af3068a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::LaneCount</name>
    <filename>a02573.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::LaneCount&lt; AlignedNumber&lt; T, align &gt; &gt;</name>
    <filename>a01365.html</filename>
    <templarg></templarg>
    <templarg>align</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::LaneCount&lt; LoopSIMD&lt; T, S, A &gt; &gt;</name>
    <filename>a02593.html</filename>
    <templarg></templarg>
    <templarg>S</templarg>
    <templarg>A</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::LaneCount&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</name>
    <filename>a02781.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Lcm</name>
    <filename>a01889.html</filename>
    <templarg>m</templarg>
    <templarg>n</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>conceptCheck</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf9226f96fce99f6a144275371dd7d1ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>constexpr static long</type>
      <name>value</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf8e128c2907366d7a98ebbfe697fda88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalIndex</name>
    <filename>a02129.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalIndex</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a0da12322a253fc5169fbe2ed1c718cc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalIndex</name>
      <anchorfile>a02129.html</anchorfile>
      <anchor>a320964a5a6fa1425f4b7ab2dc219d748</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>const std::size_t &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae0ef0e636fb6deeca4abc05240f74289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::size_t</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0515e9338e8c8686b4791a50b5e3b036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7c8ea096790c7ac11677cae3f70659f0</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>LocalIndexState</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa2f125895bda6b0c9d9cf8d8aa7e6946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae134fe3358bd66ec666029d570bdb5c1</anchor>
      <arglist>(LocalIndexState state)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalIndexComparator</name>
    <filename>a02085.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compare</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga36eca44db71c6631922d8fd76802cee7</anchor>
      <arglist>([[maybe_unused]] const T &amp;t1, [[maybe_unused]] const T &amp;t2)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LocalIndexComparator&lt; ParallelLocalIndex&lt; T &gt; &gt;</name>
    <filename>a02197.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compare</name>
      <anchorfile>a02197.html</anchorfile>
      <anchor>a3477a42c2d755bb829f26147dc03e0b8</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;t1, const ParallelLocalIndex&lt; T &gt; &amp;t2)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LoopSIMD</name>
    <filename>a02581.html</filename>
    <templarg></templarg>
    <templarg>S</templarg>
    <templarg>A</templarg>
    <member kind="function">
      <type></type>
      <name>LoopSIMD</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aa7b761d44fdf729db83c8c2ad943c4ba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoopSIMD</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a072ca848e458658de03c506a9d2408b1</anchor>
      <arglist>(Simd::Scalar&lt; T &gt; i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LoopSIMD</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aa66bb88d1bb61a611d0ebe555e9e6f07</anchor>
      <arglist>(const LoopSIMD&lt; T, S, OA &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_PREFIX_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a09206bc74b4e9a3a25c7457ead00e494</anchor>
      <arglist>(++)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_PREFIX_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a92891f99fea14834d17cbe94428d539f</anchor>
      <arglist>(--)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_UNARY_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>ad826c942880b4c23f49fd4b900e0dfb2</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_UNARY_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a8f97a4932bc0962a8ec091a330cc8679</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_UNARY_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aad7e5faf8cca7d1e22761f2bfcd7ce04</anchor>
      <arglist>(~)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator!</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a16e384a8ba61bea6a296969c05c7a098</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_POSTFIX_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a9bb1878a35c712fb79352f52e40ca7b1</anchor>
      <arglist>(++)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_POSTFIX_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a17df23af41bf7ca0ab00716a211e1eed</anchor>
      <arglist>(--)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>ac73e1c5632b372906989fb2b15a3ac97</anchor>
      <arglist>(+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>aa0372d8042f192139fc8f6a6715aa342</anchor>
      <arglist>(-=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_ASSIGNMENT_OP *</type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>af37786fa50a87d2bcf500dc734ea212d</anchor>
      <arglist>(/=);DUNE_SIMD_LOOP_ASSIGNMENT_OP(%=</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>af7ed8775dc642a00516af9399c19fba2</anchor>
      <arglist>(&lt;&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a979108ca8980bbbb106619f4a7fcb3f0</anchor>
      <arglist>(&gt;&gt;=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_ASSIGNMENT_OP &amp;</type>
      <name>DUNE_SIMD_LOOP_ASSIGNMENT_OP</name>
      <anchorfile>a02581.html</anchorfile>
      <anchor>a24465b3ba526b6f2dab516ca5be94161</anchor>
      <arglist>(|=);DUNE_SIMD_LOOP_ASSIGNMENT_OP(^=</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::lru</name>
    <filename>a01897.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::key_type</type>
      <name>key_type</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>aeda92a2b060663bbceb17c16bb0ab3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>allocator::value_type</type>
      <name>value_type</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a40f89573d1b557b338531dcbf81af42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename allocator::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>ab605faec247e98d56b6aa5161873a2a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename allocator::value_type const  *</type>
      <name>const_pointer</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a4b0f268d929dd6219d3a54e0bff885ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename allocator::value_type const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>add3ff5021fdf6c8d27bbf1463f0a9750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename allocator::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a675e3c2081b8c609574cd860404b89e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>allocator::size_type</type>
      <name>size_type</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a3948720468f37e008671618f767cf923</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>list_type::iterator</type>
      <name>iterator</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a3dda844ee17447258f388ca19edcef25</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>list_type::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a2d259e3e02d3ef4f649732fc71512414</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a8c7128595c530784a73f61e6dd75a402</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a42c540a71e6ae6caa8451304428cebc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a6ac3d7821b2380fd2d4900eb152e6fe3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a45a1cdd55b3a80c72da23d6f169fce5f</anchor>
      <arglist>([[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a707ca6b80bbe1fcbf1e27b3c58d6114b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a0b377bb8e1bd16033097b37ffcef6736</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>find</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a2325941345948dbb76d5143600983233</anchor>
      <arglist>(const key_type &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>ac951fe04a4422888efd8ff6d74a80cb7</anchor>
      <arglist>(const key_type &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>insert</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a9b3a324fbbf5fddc364d0aab90fae38b</anchor>
      <arglist>(const key_type &amp;key, const_reference data)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>insert</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a25eea05777d9900a8a772514feb353db</anchor>
      <arglist>(const key_type &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>touch</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a96cdfe9a08ee13b0502934c7d3fac181</anchor>
      <arglist>(const key_type &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a5982765df837d6606a5bbc5de341dc74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a2fdca2744a61848805095618a875a901</anchor>
      <arglist>(size_type new_size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a01897.html</anchorfile>
      <anchor>a915f071cd97817d3d59775fe7c8db119</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::LvaluePropertyMapTag</name>
    <filename>a02429.html</filename>
    <base>Dune::ReadWritePropertyMapTag</base>
  </compound>
  <compound kind="class">
    <name>Dune::MallocAllocator</name>
    <filename>a01901.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::MallocAllocator::rebind</class>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a4ad7a4e3301a2a80d24203ba42b334bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a5bd412902e78278cfc4ae87b18914203</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a1602721e262656858b3238da474046b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>af6eae134970cf98f7a838ab3534f046e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ace628b73f1b9be04006069bf1a19e6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a8f6131f08be1676b2184d42e5a66291c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a6b7e7f4763a686cb502ec965c6fc5510</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MallocAllocator</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a35ebf90590908c206d9844e8d9355f7f</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MallocAllocator</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a38af96ea5e917601570241b50c6ae099</anchor>
      <arglist>(const MallocAllocator&lt; U &gt; &amp;) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MallocAllocator</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a1053835e7c61170dc70b48d420e51bbe</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ab469170e893476617e6bfb8849232e25</anchor>
      <arglist>(reference x) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a823237939fd7a83d0830f3d2b6767796</anchor>
      <arglist>(const_reference x) const</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>aceea533714a27849771e3d25d0fa1122</anchor>
      <arglist>(size_type n, [[maybe_unused]] const void *hint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>aa37511bb4c3b556b2634010e21174824</anchor>
      <arglist>(pointer p, [[maybe_unused]] size_type n)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>max_size</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>ae73000f492c7b45cd0a4236577eaf70f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a26835d6ddecf172c3f42f14e7e51774c</anchor>
      <arglist>(pointer p, const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>abc66d994c8d242b64151593c6a3d9909</anchor>
      <arglist>(pointer p, Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>a01901.html</anchorfile>
      <anchor>a9a87f603e3548cd4668be6afd123c278</anchor>
      <arglist>(pointer p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MathematicalConstants</name>
    <filename>a01913.html</filename>
    <templarg></templarg>
    <base>StandardMathematicalConstants&lt; Field &gt;</base>
    <member kind="function" static="yes">
      <type>static const Field</type>
      <name>e</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aae17c7e397f4e52c0994a070a589b568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Field</type>
      <name>pi</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ab18fe71b10625774844be9b726c8c313</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MathError</name>
    <filename>a01561.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Max</name>
    <filename>a01313.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Type</type>
      <name>first_argument_type</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a33e20d90dcf2581c158a748d52146ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>second_argument_type</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>adcf11807cc01644428fbeaa5628964dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>result_type</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a186a7c3e52441741a3293eb9890944e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator()</name>
      <anchorfile>a01313.html</anchorfile>
      <anchor>a12f75ff2a1596bce9309cb1a0b877703</anchor>
      <arglist>(const Type &amp;t1, const Type &amp;t2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MetaType</name>
    <filename>a03001.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a03001.html</anchorfile>
      <anchor>a6b3de5881641ffb3bb9c5af780fc3a13</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Min</name>
    <filename>a01309.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Type</type>
      <name>first_argument_type</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a82606dcf591eb20e407a2e0bcc41b10d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>second_argument_type</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>aeeee48475d6ff825b11a1e5d2b33fcb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Type</type>
      <name>result_type</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a1a9f5602b00c47102e8a673735384025</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>operator()</name>
      <anchorfile>a01309.html</anchorfile>
      <anchor>a3a095ab2b2588ca48de65a3d25d03de7</anchor>
      <arglist>(const Type &amp;t1, const Type &amp;t2) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MPIData</name>
    <filename>a02141.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>a6200fd095e752561d493fc838c29b9ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>aaa76e34727f04969952f182fdac25c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Datatype</type>
      <name>type</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>a7cb19d5652c945edfe6d1fc99807a56b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>static_size</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>ac3d9baea31f200f2c24c5d4f11247ed7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MPIData</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>ae90ceb5a21137756e6976b11cb4dbb95</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T &amp;</type>
      <name>data_</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>a4211b13fd4d3035db9305f7a0f1c3552</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend auto</type>
      <name>getMPIData</name>
      <anchorfile>a02141.html</anchorfile>
      <anchor>aeba1f4509657983770fefd330a8467e3</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MPIData&lt; P, std::enable_if_t&lt; std::is_same&lt; std::remove_const_t&lt; P &gt;, MPIPack &gt;::value &gt; &gt;</name>
    <filename>a02189.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a73cf392207cbc5dcd743e5b00b147f63</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a59cd59c3ed948bd63ac2458ee979fa8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Datatype</type>
      <name>type</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a02b7f3d9e3bd4f29263a9ca0239b8342</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>adfda208b5fa9c1ff571fec47a5dd8f30</anchor>
      <arglist>(int size)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>static_size</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a58ea2da7bf87f3c1d010984d0ebe202f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MPIData</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a0e36f32e21b0e0775912292194d53b61</anchor>
      <arglist>(P &amp;t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>P &amp;</type>
      <name>data_</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>a90ba0a6e530cd16a869848394b921359</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend auto</type>
      <name>getMPIData</name>
      <anchorfile>a02189.html</anchorfile>
      <anchor>ab3710820716335b2f26a2e05b91e1b79</anchor>
      <arglist>(P &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MPIData&lt; T, std::void_t&lt; std::tuple&lt; decltype(std::declval&lt; T &gt;().data()), decltype(std::declval&lt; T &gt;().size()), typename std::decay_t&lt; T &gt;::value_type &gt; &gt; &gt;</name>
    <filename>a02149.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a6403d53384e414b1cf9ecfc4b945a207</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a92c2c66f424e9429fad7562554a2f9fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Datatype</type>
      <name>type</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>af5e526f2b3dc16775f55c049648c1f7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>resize</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a6a1186fdddab12e26d8456d0979a4184</anchor>
      <arglist>(int size) -&gt; std::enable_if_t&lt;!std::is_const&lt; S &gt;::value||!Std::is_detected_v&lt; hasResizeOp, S &gt;&gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>static_size</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a6dbdde2bd1a29875c60b16873c3fe4ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MPIData</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>a3d4a8fdc4a660381174ab7542c6e27be</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T &amp;</type>
      <name>data_</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>abc02aaa487701db662eef8e00b4ef0d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend auto</type>
      <name>getMPIData</name>
      <anchorfile>a02149.html</anchorfile>
      <anchor>aeba1f4509657983770fefd330a8467e3</anchor>
      <arglist>(T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MPIData&lt; void &gt;</name>
    <filename>a02145.html</filename>
    <member kind="function">
      <type>void *</type>
      <name>ptr</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a9b7381fa9d2477012dc241c9cbbf89cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>ac6af51037c43267ff48f26fff43c00e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a69921753947113bb6dc2277b662e78b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MPI_Datatype</type>
      <name>type</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>aed622bd6987ec696881ac2d055c89234</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MPIData</name>
      <anchorfile>a02145.html</anchorfile>
      <anchor>a7b0b250c4f2420d3b0b1696779461cda</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPIFuture</name>
    <filename>a02165.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MPIFuture</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a6a22bdeaef8af5b3e999f94fcfa1578e</anchor>
      <arglist>(bool valid=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIFuture</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ac815aaa3205bb243232fab54ded55621</anchor>
      <arglist>(V &amp;&amp;recv_data, U &amp;&amp;send_data, typename std::enable_if_t&lt;!std::is_void&lt; V &gt;::value &amp;&amp;!std::is_void&lt; U &gt;::value &gt; *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIFuture</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a28105fdb649dd4daed15bdbee976441c</anchor>
      <arglist>(V &amp;&amp;recv_data, typename std::enable_if_t&lt;!std::is_void&lt; V &gt;::value &gt; *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPIFuture</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a63de4fe5ac3a58260eda634e5e887d84</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIFuture</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>adc23ee3c87690a915483de3bd7835cd5</anchor>
      <arglist>(MPIFuture &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>MPIFuture &amp;</type>
      <name>operator=</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a9106101849db1c127b3a300e747af99d</anchor>
      <arglist>(MPIFuture &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a62cfd7f63b71fc801464ee62677b716e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a9b4ff908a74e6ae6e0b844b3e9e522b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a455d57478fc8d86926a87de50b7f2a56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>get</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ab19baf46557a5230efca8d2b534941ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>S</type>
      <name>get_send_data</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>ad420f573c17270d14b78d061384aafae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_mpidata</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aaed0bff4902565f113393ef1dd05b1ce</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_send_mpidata</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>a84099521bff00364e652a362fc3bfd1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Communication&lt; MPI_Comm &gt;</name>
      <anchorfile>a02165.html</anchorfile>
      <anchor>aa615235d4fa5a1741b466a54e4146e11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPIGuard</name>
    <filename>a02173.html</filename>
    <member kind="function">
      <type></type>
      <name>MPIGuard</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ad0dafbe8eb21985ac54f70e48ce44def</anchor>
      <arglist>(bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIGuard</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>ade82937388e34e6b822f440abcebc515</anchor>
      <arglist>(MPIHelper &amp;m, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIGuard</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aa8a8f8af42a0d96879e6a07def3f08fe</anchor>
      <arglist>(const C &amp;comm, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIGuard</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aafb09885f516dcf7b8006387867a3f4c</anchor>
      <arglist>(const MPI_Comm &amp;comm, bool active=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPIGuard</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aa6f3f082ef7baf6c289d7100355b47d7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reactivate</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>a5d2f7d69ac52a68541a5fa4993affa9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02173.html</anchorfile>
      <anchor>aa62d92872dd577561a2014a94e12ce93</anchor>
      <arglist>(bool success=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPIGuardError</name>
    <filename>a02169.html</filename>
    <base>Dune::ParallelError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPIHelper</name>
    <filename>a02181.html</filename>
    <member kind="enumvalue">
      <name>isFake</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a93c106db99662d57df87081d4fa4f2bbac60e1c10f03db90866a63e28e9e28670</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPI_Comm</type>
      <name>MPICommunicator</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a964a0eb7ebfcade1d62501964265393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>isFake</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a93c106db99662d57df87081d4fa4f2bbac60e1c10f03db90866a63e28e9e28670</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a80816db762402ae74393abc7b05cf62c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a0f9e774a4f87850e29dfa8ad8911bc80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~MPIHelper</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a610a5144937277a2e082ff8fda5f2845</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPICommunicator</type>
      <name>getCommunicator</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a9a512ea0eb356230aee39b93af2eceaf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPICommunicator</type>
      <name>getLocalCommunicator</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a9dd9120f09ba5a96e6c85f24ed9117dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Communication&lt; MPICommunicator &gt;</type>
      <name>getCollectiveCommunication</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>a48d1ef9eba37e23648d0a612bc9d14bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Communication&lt; MPICommunicator &gt;</type>
      <name>getCommunication</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ad80a7288909998bac8155a81164ce8a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT MPIHelper &amp;</type>
      <name>instance</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>add3def0a8530656093294370cd8ef006</anchor>
      <arglist>(int &amp;argc, char **&amp;argv)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT MPIHelper &amp;</type>
      <name>instance</name>
      <anchorfile>a02181.html</anchorfile>
      <anchor>ae2f69b1380c8a6c270dc30a4a79167b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPIPack</name>
    <filename>a02185.html</filename>
    <member kind="function">
      <type></type>
      <name>MPIPack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a4e166e81e3c9ffba16197994c428112f</anchor>
      <arglist>(Communication&lt; MPI_Comm &gt; comm, std::size_t size=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIPack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a9f5ffce415d2f91c197a89d66f8c168e</anchor>
      <arglist>(const MPIPack &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>MPIPack &amp;</type>
      <name>operator=</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a01fe69af290a8f88d43ba497977199a4</anchor>
      <arglist>(const MPIPack &amp;other)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MPIPack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae345dccaffe1d2a7249cb69a6ed05bd1</anchor>
      <arglist>(MPIPack &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>MPIPack &amp;</type>
      <name>operator=</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>afcba31b51887d4e75ccbb8fae9f6e012</anchor>
      <arglist>(MPIPack &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a8137baa3519b95bca7666656ab444c9a</anchor>
      <arglist>(const T &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>unpack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a9397dca7e515551b4bd9cffd4e80596a</anchor>
      <arglist>(T &amp;data) -&gt; std::enable_if_t&lt; decltype(getMPIData(data))::static_size, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>unpack</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a8f9f039ea91efa7b7abf5315d42de788</anchor>
      <arglist>(T &amp;data) -&gt; std::enable_if_t&lt;!decltype(getMPIData(data))::static_size, void &gt;</arglist>
    </member>
    <member kind="function">
      <type>MPIPack &amp;</type>
      <name>read</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a8bab4e26ebff3e07eb5de72ddf7ecd09</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>MPIPack &amp;</type>
      <name>write</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a12ee634c6a30dc2d7ca8e13a53e15c77</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ac81205c529c6773f8d9c264a5b25822e</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enlarge</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a048a5ab1d1f48705ebb2a6ba39633079</anchor>
      <arglist>(int s)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a3ccdfa3cc0a7016509b99419e5d0a1f6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>seek</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>aac7fb3ab173235293fcfb078f800cd28</anchor>
      <arglist>(int p)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tell</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>acebd42797228202d73f8d473b9e3edb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eof</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ac6b4ce4e41470ebe8da31effb05a9a5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getPackSize</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>af8489fffe0883c0f32ea94149fa4ca07</anchor>
      <arglist>(int len, const MPI_Comm &amp;comm, const MPI_Datatype &amp;dt)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPIData&lt; MPIPack &gt;</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a6731cda61ad9a8c63a9a8cf817447b4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPIData&lt; const MPIPack &gt;</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a809c55b98255835e47bc6a5ae30f9f73</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend MPIPack &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>ae250d93e3bf815f118f76deda2de782c</anchor>
      <arglist>(MPIPack &amp;p, const T &amp;t)</arglist>
    </member>
    <member kind="friend">
      <type>friend MPIPack &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a13c11b84a26d984938853bd37baafe68</anchor>
      <arglist>(MPIPack &amp;p, T &amp;t)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a9d36349acac9334be18f85e870a6ec58</anchor>
      <arglist>(const MPIPack &amp;a, const MPIPack &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a02185.html</anchorfile>
      <anchor>a2b4f9b65dab21f12d6ff6e39db02b37c</anchor>
      <arglist>(const MPIPack &amp;a, const MPIPack &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MPITraits</name>
    <filename>a01293.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static MPI_Datatype</type>
      <name>getType</name>
      <anchorfile>a01293.html</anchorfile>
      <anchor>ac906f6e9494e6b3f6d097d872a72c0da</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr bool</type>
      <name>is_intrinsic</name>
      <anchorfile>a01293.html</anchorfile>
      <anchor>ad7d2090b026c427e3a5455d2a60c83da</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPITraits&lt; IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &gt;</name>
    <filename>a02205.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static MPI_Datatype</type>
      <name>getType</name>
      <anchorfile>a02205.html</anchorfile>
      <anchor>af122c1dea36537fe760b7d0c7a54d35c</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MPITraits&lt; ParallelLocalIndex&lt; T &gt; &gt;</name>
    <filename>a02201.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static MPI_Datatype</type>
      <name>getType</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga841c70a0d146199e4a88408895390856</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference</name>
    <filename>a01809.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>R</type>
      <name>type</name>
      <anchorfile>a01809.html</anchorfile>
      <anchor>a5df1dcae36e710f8d5a337d6f5810f87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</name>
    <filename>a01341.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Alloc &gt;</type>
      <name>type</name>
      <anchorfile>a01341.html</anchorfile>
      <anchor>abd2d869525047acc396e863a38c6104e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</name>
    <filename>a01337.html</filename>
    <templarg>block_size</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>BitSetVectorReference&lt; block_size, Alloc &gt;</type>
      <name>type</name>
      <anchorfile>a01337.html</anchorfile>
      <anchor>a427bd69c90cc455bb390f00f5d8521ba</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; const R &amp; &gt;</name>
    <filename>a01821.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>R &amp;</type>
      <name>type</name>
      <anchorfile>a01821.html</anchorfile>
      <anchor>a83e91c5f25c6fb9ef57644c290ebd498</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; const R &gt;</name>
    <filename>a01813.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>R</type>
      <name>type</name>
      <anchorfile>a01813.html</anchorfile>
      <anchor>a2d78ceb0438d32d19da9c495cb60264a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</name>
    <filename>a01477.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga28c984d0ebcafd7c2d413905dedad07d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</name>
    <filename>a01481.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6c0dc6df097a09a2706166b882e4b7a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::mutable_reference&lt; R &amp; &gt;</name>
    <filename>a01817.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>R &amp;</type>
      <name>type</name>
      <anchorfile>a01817.html</anchorfile>
      <anchor>a91ae2e13ffe6fbfd651336e97562360a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NegateSet</name>
    <filename>a01541.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>S::Type</type>
      <name>Type</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a627e2719804a05a0169b0ccb94369eb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a01541.html</anchorfile>
      <anchor>a7c3f23caf1e655c169d032f15c660d63</anchor>
      <arglist>(const Type &amp;item)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::negation</name>
    <filename>a02877.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::No_Comm</name>
    <filename>a01957.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::Std::nonesuch</name>
    <filename>a02865.html</filename>
    <member kind="function">
      <type></type>
      <name>nonesuch</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>a4bee85fb45f38b33038badf2f2ffe9d5</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~nonesuch</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>aa6b9d5c13bf56e0833d2bec017b87128</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>nonesuch</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>a75852f3ad35d5a5f7f7899d0f70a8c12</anchor>
      <arglist>(const nonesuch &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02865.html</anchorfile>
      <anchor>a8cac140fbcf1e2094f787b58ffa8fd71</anchor>
      <arglist>(const nonesuch &amp;)=delete</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::NotImplemented</name>
    <filename>a01569.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::null_deleter</name>
    <filename>a02549.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a3f1c97c83e9a406bab22a317a51056fb</anchor>
      <arglist>(T *) const</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>stackobject_to_shared_ptr</name>
      <anchorfile>a02549.html</anchorfile>
      <anchor>a0ee36ec1f6416afa0487a8a224376e34</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::NullPointerInitialiser</name>
    <filename>a02901.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::NullPointerInitialiser&lt; std::tuple&lt; Args... &gt; &gt;</name>
    <filename>a02905.html</filename>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>std::tuple&lt; Args... &gt;</type>
      <name>ResultType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga54bf4fc69e946380c712ba483d7e8d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ResultType</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga4eee92ad122054a54cbb68659499f090</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::numeric_limits&lt; Dune::bigunsignedint&lt; k &gt; &gt;</name>
    <filename>a01305.html</filename>
    <templarg>k</templarg>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>min</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>ae0744407e038a2b67f54f094e9a47391</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>max</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a88d4c60c7502abdfc3f75001d1553001</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>epsilon</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>af23947ada1a18aa312d5b8a813acf2ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>round_error</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a12e7ce5cc57a5146ad6ce3bd13a59e02</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>infinity</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>afaf3dbd1be879d6471a8ffeecbe24346</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>quiet_NaN</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a152286dcfc3e7b7dfdec52f2047be9f7</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>signaling_NaN</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a2af4eaa50d79d50972233dfb57150d4e</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::bigunsignedint&lt; k &gt;</type>
      <name>denorm_min</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>adc1a34f02b758652e2b106a2e213c829</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_specialized</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a1a396c452e81f52c6cf2d14c3205986c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>digits</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a520d1532d745936877d69e5070b32fa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_signed</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a22405f12e1be2cbdea902dc2da22cbdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_integer</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a299eccd925f1985523b7d223c45f4e0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_exact</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a976832cbee7aa6acf3e5497456733fa7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>radix</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a12c3763d345b3efe39d40556e200e07e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>min_exponent</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a10e3a75da5c6abf70460c0dc59016b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>min_exponent10</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a641185fbfcf6705309481eadd771c88c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>max_exponent</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>abe1e9492a285947218a72a3f533b6d27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>max_exponent10</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a968a76b56b7be4e2aba35ba080796338</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_infinity</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>ac594f8e5c9b6f2c13ac4fea98ec173c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_quiet_NaN</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a1fe8f703b889b941707582c4b88fc420</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_signaling_NaN</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>aa828387b18af2a7612656b540c5b69a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float_denorm_style</type>
      <name>has_denorm</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>aa356390d662894ee071b9616eac26b57</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>has_denorm_loss</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a8fffdc7c4d8d887261afb1dfead413fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_iec559</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a01904551554f63705f6937d7e18019da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_bounded</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a314911a5fe3cc47664b0ed32db78b91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>is_modulo</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a35f9af7e0a710c5847308fe3c26f7c68</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>traps</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a57298fcdf916e5e2f2eed729c9319a67</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>tinyness_before</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a5f0b3705b8393eeddde65be4c68defd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const float_round_style</type>
      <name>round_style</name>
      <anchorfile>a01305.html</anchorfile>
      <anchor>a8e9cf07a211cb7af81e31aacf62473cd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OutOfMemoryError</name>
    <filename>a01577.html</filename>
    <base>Dune::SystemError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OwnerOverlapCopyCommunication</name>
    <filename>a02225.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ParallelError</name>
    <filename>a01585.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParallelIndexSet</name>
    <filename>a02077.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <class kind="class">Dune::ParallelIndexSet::iterator</class>
    <member kind="enumvalue">
      <name>arraySize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ggadb29d8d416b503757d405f85055c6bc0a7f95f052a4180cbaae53571e19da4d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac025d93d84144d1ab5bcddfbc1760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga80f93e9c02b5f29b011140b3a87d39af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair&lt; GlobalIndex, LocalIndex &gt;</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gafa0d2c4698da918525f35e3f5b74f1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; IndexPair, N &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2d339136484321658ecf88e2e4dfa28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arraySize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ggadb29d8d416b503757d405f85055c6bc0a7f95f052a4180cbaae53571e19da4d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaab9080b900ad0b31e35b9c0654a763b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSetState &amp;</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad7fbeef92f1ee69893d2efcb908e133b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga10a18b0bbba6cbda15a58d7a2ede111f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga314b28a2ac2171f330979eb82c7d48fc</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa0be4f42ade95057bcb960cafc5e0503</anchor>
      <arglist>(const GlobalIndex &amp;global, const LocalIndex &amp;local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsDeleted</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8967dfc42b1855566b7f9a3557f89005</anchor>
      <arglist>(const iterator &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaadfad947098175e885aa7fd6c5b490a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga34979e144d86dce0cc4e02396a93c140</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9e5e21839535b80fe5e8dc646311feb1</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga21770fef689d2ea8d39eb0e5406f528f</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga501e4895ae57ac9d1203d0a06e5da7ee</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga785a7eb308c9711cd42ca482b8acd8d3</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5250fda08ab9b507082ed3ed56f1c419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga56f46f24d39e108bf4ba9c47850c280d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7089f5da6696016802dea2b69a41d264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5aa8fe134aa2ba4f58df512d89e0b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renumberLocal</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d85acf860530070eb101872811f1fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seqNo</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac89a8dd444edd8b31795cff2a6cceca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2709e2fa108db124ec66dd46c515c005</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GlobalLookupIndexSet&lt; ParallelIndexSet&lt; TG, TL, N &gt; &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9c2e5b70801cc1d46e6d7235e28c4958</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ParallelIndexSet&lt; TG, TL, N &gt;</name>
    <filename>a02077.html</filename>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac025d93d84144d1ab5bcddfbc1760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga80f93e9c02b5f29b011140b3a87d39af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair&lt; GlobalIndex, LocalIndex &gt;</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gafa0d2c4698da918525f35e3f5b74f1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; IndexPair, N &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2d339136484321658ecf88e2e4dfa28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arraySize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ggadb29d8d416b503757d405f85055c6bc0a7f95f052a4180cbaae53571e19da4d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaab9080b900ad0b31e35b9c0654a763b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSetState &amp;</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad7fbeef92f1ee69893d2efcb908e133b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga10a18b0bbba6cbda15a58d7a2ede111f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga314b28a2ac2171f330979eb82c7d48fc</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa0be4f42ade95057bcb960cafc5e0503</anchor>
      <arglist>(const GlobalIndex &amp;global, const LocalIndex &amp;local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsDeleted</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8967dfc42b1855566b7f9a3557f89005</anchor>
      <arglist>(const iterator &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaadfad947098175e885aa7fd6c5b490a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga34979e144d86dce0cc4e02396a93c140</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga501e4895ae57ac9d1203d0a06e5da7ee</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9e5e21839535b80fe5e8dc646311feb1</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga785a7eb308c9711cd42ca482b8acd8d3</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga21770fef689d2ea8d39eb0e5406f528f</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5250fda08ab9b507082ed3ed56f1c419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7089f5da6696016802dea2b69a41d264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga56f46f24d39e108bf4ba9c47850c280d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5aa8fe134aa2ba4f58df512d89e0b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renumberLocal</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d85acf860530070eb101872811f1fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seqNo</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac89a8dd444edd8b31795cff2a6cceca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2709e2fa108db124ec66dd46c515c005</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParallelLocalIndex</name>
    <filename>a02193.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Attribute</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a7e473eb41ada9a29dd9b18b59d27cab4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac704d4292815f9acba45ee00a37fc77b</anchor>
      <arglist>(const Attribute &amp;attribute, bool isPublic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaed09c9747cc10feff6d76487117409e1</anchor>
      <arglist>(size_t localIndex, const Attribute &amp;attribute, bool isPublic=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae17e1ae024e8ef0dc1532125ae0296e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Attribute</type>
      <name>attribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaee488b2250ba0a999ebfc6231d3cbd96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33792062116e47a94116e36fb9d54ca4</anchor>
      <arglist>(const Attribute &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4b260e0b49fdbdeec3c139fcfcc03518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1be72bf75dc8899d1065b0540f17d18b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParallelLocalIndex&lt; Attribute &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8f021b0913f65c10de19b9d9084800ef</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPublic</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2554ad11aabc31785663a4f396030d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndexState</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9ee41fe1d95778d467110d8a7eb87f22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga803d70f66ccc5cc004e30f734bbd3cc8</anchor>
      <arglist>(const LocalIndexState &amp;state)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPITraits&lt; ParallelLocalIndex&lt; T &gt; &gt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>ac7ab139a1b5a86a14e58b022e732705b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02193.html</anchorfile>
      <anchor>a71ecea113bd2202ea9aa2da16fe3ff33</anchor>
      <arglist>(std::ostream &amp;os, const ParallelLocalIndex&lt; T &gt; &amp;index)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParameterizedObjectFactory</name>
    <filename>a02301.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::ParameterizedObjectFactory&lt; TypeT(Args...), KeyT &gt;</name>
    <filename>a02305.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>Args</templarg>
    <member kind="typedef">
      <type>KeyT</type>
      <name>Key</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aaacef10f443ad58ee6b9ffeefac18ac5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypeT</type>
      <name>Type</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a929aacd539c11aa66e8db93a13c69f2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>create</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>aadcc7f24a9298aa5197f423326d091db</anchor>
      <arglist>(Key const &amp;key, Args ... args) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>define</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>abca3df0669dfa457239527d12db10723</anchor>
      <arglist>(Key const &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>define</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>abeaa3e42a83948fd675029d7a09d88cd</anchor>
      <arglist>(Key const &amp;key, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>define</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a9f2caf0add62879bef0ca0cd6fe84591</anchor>
      <arglist>(Key const &amp;key, Impl &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>accbc62bd9fcb72c9959cdc927f2fcc59</anchor>
      <arglist>(Key const &amp;key) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::function&lt; Type(Args...)&gt;</type>
      <name>Creator</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a3f5f2a662743726e3353e0218a561e53</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr auto</type>
      <name>has_proper_signature</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>a7ef9a565a54d9e5d45f7c0fe2b24a02c</anchor>
      <arglist>(Dune::PriorityTag&lt; 1 &gt;) -&gt; decltype(std::declval&lt; F &gt;()(std::declval&lt; Args &gt;()...), std::true_type())</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static constexpr std::false_type</type>
      <name>has_proper_signature</name>
      <anchorfile>a02305.html</anchorfile>
      <anchor>ac666739d6f79796e5ac2c92024889275</anchor>
      <arglist>(Dune::PriorityTag&lt; 0 &gt;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParameterTree</name>
    <filename>a02317.html</filename>
    <class kind="struct">Dune::ParameterTree::Parser&lt; bool &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; FieldVector&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::array&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::basic_string&lt; char, traits, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::bitset&lt; n &gt; &gt;</class>
    <class kind="struct">Dune::ParameterTree::Parser&lt; std::vector&lt; T, A &gt; &gt;</class>
    <member kind="typedef">
      <type>std::vector&lt; std::string &gt;</type>
      <name>KeyVector</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a431a09c44d71a67f54c3fcd0ae19d437</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParameterTree</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a568eecdaf5552be971fd69ef4ed663ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasKey</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a7fe0cdda98abc77aec93909e4b06d615</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSub</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a832cfee8731b35d154629ea500f37a3b</anchor>
      <arglist>(const std::string &amp;sub) const</arglist>
    </member>
    <member kind="function">
      <type>std::string &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a5a0919e72eb26ee78e22ed40ca1b7282</anchor>
      <arglist>(const std::string &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>operator[]</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>acb5b9affbcdf7f8b1209195b8c955c2d</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>report</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a3cc048befa55a9a39ed93505c9200e18</anchor>
      <arglist>(std::ostream &amp;stream=std::cout, const std::string &amp;prefix=&quot;&quot;) const</arglist>
    </member>
    <member kind="function">
      <type>ParameterTree &amp;</type>
      <name>sub</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a5f73049178d155458f155be5d15b59c0</anchor>
      <arglist>(const std::string &amp;sub)</arglist>
    </member>
    <member kind="function">
      <type>const ParameterTree &amp;</type>
      <name>sub</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>aa8be95068748c425fe914d57d2d0d6bd</anchor>
      <arglist>(const std::string &amp;sub, bool fail_if_missing=false) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a206f94a0e28875b1d25f89d69f9c6ebc</anchor>
      <arglist>(const std::string &amp;key, const std::string &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a0fa9fd7c121769389e2243b954290d09</anchor>
      <arglist>(const std::string &amp;key, const char *defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>aa82b23ebdc6fac07b24d77ee04076b4c</anchor>
      <arglist>(const std::string &amp;key, const T &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a82a2f1f446462d4a77ce2f32ebbfbbce</anchor>
      <arglist>(const std::string &amp;key) const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>getValueKeys</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ac868c7aa954a2a55028165d1bead2864</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const KeyVector &amp;</type>
      <name>getSubKeys</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a7fe2a9869f82ec1932d5e45c37c0753d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>ltrim</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a3003d7384c4547eec110caccb06e0984</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>rtrim</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a201c48d4e1243e147674fe8db5ef5f16</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::vector&lt; std::string &gt;</type>
      <name>split</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>ac0d41be56375ed3385b140178c1b7570</anchor>
      <arglist>(const std::string &amp;s)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>parseRange</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a449534cf654483f19ea9d4d1884c1e4a</anchor>
      <arglist>(const std::string &amp;str, Iterator it, const Iterator &amp;end)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>prefix_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>aaab5bdf8b1c17a07b72ace6ba47b2b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>valueKeys_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a01832928fcf940b5c2c0e2760714dd6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>KeyVector</type>
      <name>subKeys_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a5b1105e2df569608ac8160f24b1bd74b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>values_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a9555cfbb6892f4a5a07881482c4a7451</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; std::string, ParameterTree &gt;</type>
      <name>subs_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a05931dc3a5f0f3150c89db1e27adb663</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const ParameterTree</type>
      <name>empty_</name>
      <anchorfile>a02317.html</anchorfile>
      <anchor>a1b23fea8bbceed6263ef29cdc3d78376</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParameterTreeParser</name>
    <filename>a02361.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readINITree</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a8081a535316ca91b018237162e4cda29</anchor>
      <arglist>(std::istream &amp;in, ParameterTree &amp;pt, bool overwrite)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::ParameterTree</type>
      <name>readINITree</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a70e28e3be41dc142241b64eecd8a8814</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readINITree</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a2d7cae36536feb2bded5cd10f931fddc</anchor>
      <arglist>(std::istream &amp;in, ParameterTree &amp;pt, const std::string srcname=&quot;stream&quot;, bool overwrite=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readINITree</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a77da92c3445d9ed8d05a5f0191aecaa7</anchor>
      <arglist>(std::string file, ParameterTree &amp;pt, bool overwrite=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::ParameterTree</type>
      <name>readINITree</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a291932c9bdb2d6e5d732b1cce2f20111</anchor>
      <arglist>(const std::string &amp;file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readOptions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>a699bfd3ccbdb9d9c6add63e6315c4d6d</anchor>
      <arglist>(int argc, char *argv[], ParameterTree &amp;pt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readNamedOptions</name>
      <anchorfile>a02361.html</anchorfile>
      <anchor>aa874751f6501ec91b4079b75f057f16a</anchor>
      <arglist>(int argc, char *argv[], ParameterTree &amp;pt, std::vector&lt; std::string &gt; keywords, unsigned int required=std::numeric_limits&lt; unsigned int &gt;::max(), bool allow_more=true, bool overwrite=true, std::vector&lt; std::string &gt; help=std::vector&lt; std::string &gt;())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ParameterTreeParserError</name>
    <filename>a02353.html</filename>
    <base>Dune::RangeError</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; bool &gt;</name>
    <filename>a02329.html</filename>
    <class kind="struct">Dune::ParameterTree::Parser&lt; bool &gt;::ToLower</class>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>parse</name>
      <anchorfile>a02329.html</anchorfile>
      <anchor>a7aa5997f9c36d7095e29536626f14d03</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; FieldVector&lt; T, n &gt; &gt;</name>
    <filename>a02337.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; T, n &gt;</type>
      <name>parse</name>
      <anchorfile>a02337.html</anchorfile>
      <anchor>a2776465f6e60f29ffd5e77258b597d3b</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; std::array&lt; T, n &gt; &gt;</name>
    <filename>a02341.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="function" static="yes">
      <type>static std::array&lt; T, n &gt;</type>
      <name>parse</name>
      <anchorfile>a02341.html</anchorfile>
      <anchor>ae58178a287bbbb6ad17b4442d05725f7</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; std::basic_string&lt; char, traits, Allocator &gt; &gt;</name>
    <filename>a02325.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::basic_string&lt; char, traits, Allocator &gt;</type>
      <name>parse</name>
      <anchorfile>a02325.html</anchorfile>
      <anchor>aa13b548b7c5007d6b3095e1913334026</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; std::bitset&lt; n &gt; &gt;</name>
    <filename>a02345.html</filename>
    <templarg>n</templarg>
    <member kind="function" static="yes">
      <type>static std::bitset&lt; n &gt;</type>
      <name>parse</name>
      <anchorfile>a02345.html</anchorfile>
      <anchor>a054435f0f45cdacd62b10c3cdd00ac5c</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; std::vector&lt; T, A &gt; &gt;</name>
    <filename>a02349.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::vector&lt; T, A &gt;</type>
      <name>parse</name>
      <anchorfile>a02349.html</anchorfile>
      <anchor>a5d29cd69f9af2ef37b09f749204ead6e</anchor>
      <arglist>(const std::string &amp;str)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PointerPairDeletor</name>
    <filename>a02945.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga07b35bb47020e1850b89d151ca24d24b</anchor>
      <arglist>(std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Pool</name>
    <filename>a02365.html</filename>
    <templarg></templarg>
    <templarg>s</templarg>
    <member kind="enumvalue">
      <name>unionSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca5de3947023e26c0599831908d7df667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca8c75f48b23a9c340aff6e100a14929c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignment</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca823e15940614eff36ec753923433ee85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignedSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983caefd66dbceb37ee11ecd23dba6e6453ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca55c576a713d8c08523ee238a5380a982</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elements</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca25fb03b933eb30a49d68956cc7e87e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>ac19df4f78d13ff43b53772bbfb84e4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unionSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca5de3947023e26c0599831908d7df667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca8c75f48b23a9c340aff6e100a14929c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignment</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca823e15940614eff36ec753923433ee85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignedSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983caefd66dbceb37ee11ecd23dba6e6453ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca55c576a713d8c08523ee238a5380a982</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elements</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca25fb03b933eb30a49d68956cc7e87e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gad22b5366230a0a19803668fb20fbd059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga4e532951b380f21051712b6e458389e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6b5f7d8dec1166e3860aa2ecf81d1b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga47e9484d263bece81e75897dd885f5c0</anchor>
      <arglist>(void *o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga7b0a19e8009fb6e5b43ebf5a27c38ce5</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>::testPoolMain&lt; s, T &gt;</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a590427bb94cfd8bb4bce5fe49de78430</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>PoolAllocator</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>ab4ef76ca65d09c6bef68b70a037dde05</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Pool&lt; T, size &gt;</name>
    <filename>a02365.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>ac19df4f78d13ff43b53772bbfb84e4d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unionSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca5de3947023e26c0599831908d7df667c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca8c75f48b23a9c340aff6e100a14929c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignment</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca823e15940614eff36ec753923433ee85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>alignedSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983caefd66dbceb37ee11ecd23dba6e6453ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>chunkSize</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca55c576a713d8c08523ee238a5380a982</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>elements</name>
      <anchorfile>a02365.html</anchorfile>
      <anchor>a0d90719ab27c393a52e8a31878de983ca25fb03b933eb30a49d68956cc7e87e0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gad22b5366230a0a19803668fb20fbd059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga4e532951b380f21051712b6e458389e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6b5f7d8dec1166e3860aa2ecf81d1b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga47e9484d263bece81e75897dd885f5c0</anchor>
      <arglist>(void *o)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga7b0a19e8009fb6e5b43ebf5a27c38ce5</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PoolAllocator</name>
    <filename>a02369.html</filename>
    <templarg></templarg>
    <templarg>s</templarg>
    <class kind="struct">Dune::PoolAllocator::rebind</class>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a76fae2361a6e776828d9a294185f5499aff988cf66932eead4a737cb73f8299cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a4ed6a52068ceb7b0e7d2a7422e203c45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>abd4eae3a95c4e8d4d34ef208c2c07c18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>const_pointer</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a9d9966c358545f33d20e9f2c1d4fd142</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a77ec4852f29ae6b535eb0c86dc50de59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a207175c65f7a437325bd52e89a947eb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a4c1929051904526400d1a2489390930f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ae4c4f263c1c1739eb766e6594bfbad5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Pool&lt; T, size &gt;</type>
      <name>PoolType</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a035634f816fb8ce9713e58a7c66ade33</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a76fae2361a6e776828d9a294185f5499aff988cf66932eead4a737cb73f8299cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolAllocator</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gafe8c4a7219fd9e0a6ccddb9f8195891c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolAllocator</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>abd6f8d2f003f7ea20f3086fe7b20affb</anchor>
      <arglist>(const PoolAllocator&lt; U, u &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolAllocator</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a95e8e685e73f7fe52b2144925a702677</anchor>
      <arglist>(const PoolAllocator &amp;)</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga8ce62477683e1aba23b2907c7c7383b4</anchor>
      <arglist>(std::size_t n, const_pointer hint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gae2fe41e945dc1313868890aa28d75e7f</anchor>
      <arglist>(pointer p, std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga2c654f3d338d310b294d105d28d78758</anchor>
      <arglist>(pointer p, const_reference value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gaeb9692354592eaceb050be5299c344af</anchor>
      <arglist>(pointer p)</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>address</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>ab1a10dae282315578128f07e7ea822c9</anchor>
      <arglist>(reference x) const</arglist>
    </member>
    <member kind="function">
      <type>const_pointer</type>
      <name>address</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>a038f9ef92bd30bfcd254bbcede23d8c6</anchor>
      <arglist>(const_reference x) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max_size</name>
      <anchorfile>a02369.html</anchorfile>
      <anchor>af4e944f9abf842fbd2d75e14d8fa937b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PoolAllocator&lt; void, s &gt;</name>
    <filename>a02385.html</filename>
    <templarg>s</templarg>
    <class kind="struct">Dune::PoolAllocator&lt; void, s &gt;::rebind</class>
    <member kind="typedef">
      <type>void *</type>
      <name>pointer</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a90a6ff74c0e0895561000f14e36058e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const void *</type>
      <name>const_pointer</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>aae8d520e77d777bbd2bee3c8ee7430df</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>value_type</name>
      <anchorfile>a02385.html</anchorfile>
      <anchor>a03dfca199bfbc5f96b0af7cbf34e7020</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Power</name>
    <filename>a02397.html</filename>
    <templarg>p</templarg>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>eval</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga71e044edf267e984da3cb61e61a9d886</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IsType::Predicate</name>
    <filename>a02957.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::PriorityTag</name>
    <filename>a03157.html</filename>
    <templarg>priority</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>value</name>
      <anchorfile>a03157.html</anchorfile>
      <anchor>ac24cb72d1f984e7e73cd43b0ab55aee4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PriorityTag&lt; 0 &gt;</name>
    <filename>a03161.html</filename>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>value</name>
      <anchorfile>a03161.html</anchorfile>
      <anchor>a31ed9dda850ce73e5a9117f1d2335b9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits</name>
    <filename>a02405.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable">
      <type>decltype(std::declval&lt; T1 &gt;()+std::declval&lt; T2 &gt;()) typedef</type>
      <name>PromotedType</name>
      <anchorfile>a02405.html</anchorfile>
      <anchor>ab1c37fdbf101a64757e4ee551e60b1f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, GMPField&lt; precision &gt; &gt;</name>
    <filename>a01841.html</filename>
    <templarg>precision</templarg>
    <member kind="typedef">
      <type>GMPField&lt; precision &gt;</type>
      <name>PromotedType</name>
      <anchorfile>a01841.html</anchorfile>
      <anchor>aeda98e0b61d7a6958bdd1f1ba93dfd79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, T &gt;</name>
    <filename>a01845.html</filename>
    <templarg>precision</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GMPField&lt; precision &gt;</type>
      <name>PromotedType</name>
      <anchorfile>a01845.html</anchorfile>
      <anchor>ab29744d04f497ab356bb62f42d77c866</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits&lt; GMPField&lt; precision1 &gt;, GMPField&lt; precision2 &gt; &gt;</name>
    <filename>a01837.html</filename>
    <templarg>precision1</templarg>
    <templarg>precision2</templarg>
    <member kind="typedef">
      <type>GMPField&lt;(precision1 &gt; precision2 ? precision1 :precision2)&gt;</type>
      <name>PromotedType</name>
      <anchorfile>a01837.html</anchorfile>
      <anchor>af814fa56640f9019d2b096b3aa365e0e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits&lt; T, GMPField&lt; precision &gt; &gt;</name>
    <filename>a01849.html</filename>
    <templarg></templarg>
    <templarg>precision</templarg>
    <member kind="typedef">
      <type>GMPField&lt; precision &gt;</type>
      <name>PromotedType</name>
      <anchorfile>a01849.html</anchorfile>
      <anchor>af819792396739bc1bdf908b5741ae9bd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PromotionTraits&lt; T1, T1 &gt;</name>
    <filename>a02409.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>PromotedType</name>
      <anchorfile>a02409.html</anchorfile>
      <anchor>ab4f6d422c0baac66e9496252327e6682</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PropertyMapTraits</name>
    <filename>a02413.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PM::KeyType</type>
      <name>KeyType</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>aefa8f676ee021f8ea1115671ffc2151a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PM::ValueType</type>
      <name>ValueType</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a3bb5afe09fc0319fa3a2dc95c47438cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PM::Reference</type>
      <name>Reference</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a7b34064119ee04a9b27de25c1ba18c50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PM::Category</type>
      <name>Category</name>
      <anchorfile>a02413.html</anchorfile>
      <anchor>a6523572f0459d768d9923e84dc0c5d32</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PropertyMapTraits&lt; const T * &gt;</name>
    <filename>a02437.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ad04ca9d77ff37df29ee625faa3a41b74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const ValueType &amp;</type>
      <name>Reference</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>ab2b795946cd41b7bd3b6926516c8b1a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>KeyType</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>a5acfa71b670a845ae5b71912b2026306</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LvaluePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a02437.html</anchorfile>
      <anchor>adace2e8d94ce3e78ece0970ba260f1af</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PropertyMapTraits&lt; T * &gt;</name>
    <filename>a02433.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ValueType</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>ab39568f3b7665ef3f37133e3bd730769</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ValueType &amp;</type>
      <name>Reference</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a07802b26da42da291623626023a7cb29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>KeyType</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>a9ee803228ffc5eac14a6436786687756</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LvaluePropertyMapTag</type>
      <name>Category</name>
      <anchorfile>a02433.html</anchorfile>
      <anchor>af7a412576ce736043f2951499b3ff4ea</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PropertyMapTypeSelector</name>
    <filename>a02461.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Tag</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>a4c7559b11fa26cde5dbc32ed4b787b70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>C</type>
      <name>Container</name>
      <anchorfile>a02461.html</anchorfile>
      <anchor>add93eb935a165d1c8d687767819ab13a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Simd::VcImpl::Proxy</name>
    <filename>a02749.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename V::value_type</type>
      <name>value_type</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>adfd0acc274c4fcd6ae7badcc1b22816e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a937f3d11b090969d569c0a81012bb66c</anchor>
      <arglist>(std::size_t idx, V &amp;vec)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ad50385a78709fbc6b44f0e674f3fb969</anchor>
      <arglist>(const Proxy &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Proxy</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a5b44aa5741ad3831e4e89a08548c0787</anchor>
      <arglist>(Proxy &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a7d5eaeef7d94ef1c95116a2461568671</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a3e17f8c9bf35ff996cad98144a9c9998</anchor>
      <arglist>(=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_ASSIGNMENT *</type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ac3eca90ec87ef6701e42e453177f56e1</anchor>
      <arglist>(/=);DUNE_SIMD_VC_ASSIGNMENT(%=</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a2a08133bace68d2d50217499d8635659</anchor>
      <arglist>(+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a6a33d4db8051346e6941dc9dbafa202d</anchor>
      <arglist>(-=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>aa7e7eefe01584f5737e44c974cd313f7</anchor>
      <arglist>(&lt;&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>afe64234723dc4d0aaccf76b739a83fde</anchor>
      <arglist>(&gt;&gt;=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_ASSIGNMENT &amp;</type>
      <name>DUNE_SIMD_VC_ASSIGNMENT</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a93cb879d6e54f943548ec37769395a10</anchor>
      <arglist>(^=);DUNE_SIMD_VC_ASSIGNMENT(|=</arglist>
    </member>
    <member kind="function">
      <type>Proxy</type>
      <name>operator++</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>af427ce41962386a083621dae4f145705</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Proxy</type>
      <name>operator--</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a4ae8e42a689c82020d2f2b6cb79fda50</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator++</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a6997e5e4fa7495556b5406a2803383da</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>operator--</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a86820775e89425dc20a6bf7ecf8a44ee</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_BINARY *</type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>aa869f41d307415c3bfe5dc8d6d1ae5f8</anchor>
      <arglist>(/);DUNE_SIMD_VC_BINARY(%</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ac96266efe610ac8e0f5c32aee3805f01</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>aabca20e2c94cba607894493eca056096</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>aa132c94d56317846da871a964931a5b1</anchor>
      <arglist>(&lt;&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a5b10dc8ac305b238630004793ed674fa</anchor>
      <arglist>(&gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_BINARY &amp;</type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a2081001dcf2faa04e1dc7e60dc8aa857</anchor>
      <arglist>(^);DUNE_SIMD_VC_BINARY(|</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a6085908cebee313ccf69509617c9d37b</anchor>
      <arglist>(&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>ae520f03a6c3129343a8262fd6384043c</anchor>
      <arglist>(&gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a80202e933bcf14938aa643063ecdf170</anchor>
      <arglist>(&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a20ddd8631f00770e3135bf5d26720680</anchor>
      <arglist>(&gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>adaf74f4555284e01c758385928d386cb</anchor>
      <arglist>(==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_BINARY</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>af9713cdab6aefc9bdb4d4a31204faa54</anchor>
      <arglist>(!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Vc::Vector&lt; T, Abi &gt;</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a0102df5431c533a6d0dd32d57305447b</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Vc::SimdArray&lt; T, n, Vec, m &gt;</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>acee80d81be35f1ad9221d5656f4e51b6</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_ASSIGN *</type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a6e28cb34f3ab1521fb8e2b450d2f1481</anchor>
      <arglist>(/=);DUNE_SIMD_VC_ASSIGN(%=</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a94cf53ca5d29c7bd1d30732a5873b443</anchor>
      <arglist>(+=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a2e51fa0139ba45cd51ff73a6c5dbc720</anchor>
      <arglist>(-=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_VC_ASSIGN &amp;</type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a29cf2cef97ca1e29d49208865e958ed9</anchor>
      <arglist>(^=);DUNE_SIMD_VC_ASSIGN(|=</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a77e605a9e68c0158a55614d5cae7bbc0</anchor>
      <arglist>(&lt;&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_VC_ASSIGN</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a68f1ddc2a535d1972172086b69bf68df</anchor>
      <arglist>(&gt;&gt;=)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>aa5a6056fdf246771aad8cf68a33fe757</anchor>
      <arglist>(const Proxy &amp;a, const Proxy &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a7a9d3817b74a69ea7c3837df8a5bd6e9</anchor>
      <arglist>(value_type &amp;a, const Proxy &amp;b)</arglist>
    </member>
    <member kind="friend">
      <type>friend void</type>
      <name>swap</name>
      <anchorfile>a02749.html</anchorfile>
      <anchor>a5407a445cf18ea2a20d71ef947eaa645</anchor>
      <arglist>(const Proxy &amp;a, value_type &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PseudoFuture</name>
    <filename>a02045.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>PseudoFuture</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ad2af2f7c1f6c313ac03e170e56c27f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PseudoFuture</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a5f37cc21afd107dec16f778d95dbf03c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>ae061aeaeeaeba5bd89b78cef67776565</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a0b604c3a78f4f3201a3baf3e3ca07e92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>get</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>a504f8ecb1458f3339fb39a23041457ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02045.html</anchorfile>
      <anchor>afdf91dc9f6d96552a05cd55c9f8acc42</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PseudoFuture&lt; void &gt;</name>
    <filename>a02061.html</filename>
    <member kind="function">
      <type></type>
      <name>PseudoFuture</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a73b8e4e78cbe2bd5ec76e717c1dba863</anchor>
      <arglist>(bool valid=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>ae37adc535a1a8c5d67d8555d7de0293f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a4660b141f15682ce715c45f53f237973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a65eebc3d89bf119b212ff53dca265ac5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a02061.html</anchorfile>
      <anchor>a56ac4c6b31ef1e690f1449b91e460c28</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PushBackTuple</name>
    <filename>a02965.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::PushBackTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</name>
    <filename>a02969.html</filename>
    <templarg>Args</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::tuple&lt; Args..., T &gt;</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gab4981425c1728ed7690aec0f7895ca14</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PushFrontTuple</name>
    <filename>a02973.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::PushFrontTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</name>
    <filename>a02977.html</filename>
    <templarg>Args</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::tuple&lt; T, Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gabd81573d00ffd85f700fba2552c3f45c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RandomAccessIteratorFacade</name>
    <filename>a01881.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; V &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomAccessIteratorFacade&lt; ArrayListIterator&lt; T, N, A &gt;, A::value_type, A::value_type &amp;, A::difference_type &gt;</name>
    <filename>a01881.html</filename>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; A::value_type &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayListIterator&lt; T, N, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomAccessIteratorFacade&lt; ConstArrayListIterator&lt; T, N, A &gt;, const A::value_type, A::value_type const &amp;, A::difference_type &gt;</name>
    <filename>a01881.html</filename>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; const A::value_type &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type const &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; T, N, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const A::value_type *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::value_type const &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomAccessIteratorFacade&lt; DenseIterator&lt; C, T, T &amp; &gt;, T, T &amp;, std::ptrdiff_t &gt;</name>
    <filename>a01881.html</filename>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DenseIterator&lt; C, T, T &amp; &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>RandomAccessIteratorFacade&lt; GenericIterator&lt; C, T, T &amp;, std::ptrdiff_t, RandomAccessIteratorFacade &gt;, T, T &amp;, std::ptrdiff_t &gt;</name>
    <filename>a01881.html</filename>
    <member kind="typedef">
      <type>std::random_access_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a454c8b10dd6aa3ab6ab95bad4dd75f95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a04c1e4fd34a03f1fadd08e650013133a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a09238f4b046059a7e3c64009580eeacb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a3ece32c13de0c4483077d432da9ce578</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a5fdb48c2bd0a1f17b3ed88efe083ae76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GenericIterator&lt; C, T, T &amp;, std::ptrdiff_t, RandomAccessIteratorFacade &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac79014d9986cecb8e8434889be331d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ae381544d0a7ecdccb8b950e5e3603239</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ace674ab45e91ec281320c1916685cde4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a6c35e250a4b90f4074e7dd1208408f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aff1b505e7e7894e94d662a6dbf729045</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a4a9aff534081c010f37148c7d3993d88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a66e6928e84b4e8161b0f6e0cbac53ed9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator[]</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ab3b6204c49b629893e01ab290cb9cae9</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a8b8b50ed74141416e6f5f82bca30e7b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ade0700830b6d8e4174c719190bdda166</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator+=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>aa85eac14b4c973941a661196e4cee1a9</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator+</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a9ea0b76acc09ab79fec2e6479e562fb3</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a36fe4780ac9cd96c4530391a23e5163f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator--</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>a250cf00aa31543f2e4943d440cff0810</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator-=</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>ac3c6332b3932adfc93721a89bde2acf1</anchor>
      <arglist>(DifferenceType n)</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator-</name>
      <anchorfile>a01881.html</anchorfile>
      <anchor>adc759638e5e7afefd8a7e42342a7a95e</anchor>
      <arglist>(DifferenceType n) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RangeError</name>
    <filename>a01565.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::RAPropertyMapHelper</name>
    <filename>a02441.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>RAPropertyMapHelper&lt; const T::value_type::second_type &amp;, ConstAssociativePropertyMap&lt; T &gt; &gt;</name>
    <filename>a02441.html</filename>
  </compound>
  <compound kind="class">
    <name>RAPropertyMapHelper&lt; std::size_t, IdentityMap &gt;</name>
    <filename>a02441.html</filename>
  </compound>
  <compound kind="class">
    <name>RAPropertyMapHelper&lt; T::value_type::second_type &amp;, AssociativePropertyMap&lt; T &gt; &gt;</name>
    <filename>a02441.html</filename>
  </compound>
  <compound kind="class">
    <name>RAPropertyMapHelper&lt; typename std::iterator_traits&lt; RAI &gt;::reference, IteratorPropertyMap&lt; RAI, IM, typename std::iterator_traits&lt; RAI &gt;::value_type, typename std::iterator_traits&lt; RAI &gt;::reference &gt; &gt;</name>
    <filename>a02441.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::ReadablePropertyMapTag</name>
    <filename>a02417.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::ReadWritePropertyMapTag</name>
    <filename>a02425.html</filename>
    <base>Dune::ReadablePropertyMapTag</base>
    <base>Dune::WritablePropertyMapTag</base>
  </compound>
  <compound kind="struct">
    <name>Dune::AlignedAllocator::rebind</name>
    <filename>a01277.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>AlignedAllocator&lt; U, Alignment &gt;</type>
      <name>other</name>
      <anchorfile>a01277.html</anchorfile>
      <anchor>a54ac4737293fe076302709983b9a8920</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MallocAllocator::rebind</name>
    <filename>a01905.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>MallocAllocator&lt; U &gt;</type>
      <name>other</name>
      <anchorfile>a01905.html</anchorfile>
      <anchor>ac7be9e590b210d8694a19e329048982c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PoolAllocator::rebind</name>
    <filename>a02381.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PoolAllocator&lt; U, s &gt;</type>
      <name>other</name>
      <anchorfile>a02381.html</anchorfile>
      <anchor>a0048e10bf60a17b106ab2139bcf87006</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PoolAllocator&lt; void, s &gt;::rebind</name>
    <filename>a02389.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>PoolAllocator&lt; U, s &gt;</type>
      <name>other</name>
      <anchorfile>a02389.html</anchorfile>
      <anchor>a39aac025e673bbe9da3e99e15e6e4e89</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType</name>
    <filename>a02569.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>S</type>
      <name>type</name>
      <anchorfile>a02569.html</anchorfile>
      <anchor>a36ba8db89c385f576f383a984ef8c286</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; bool, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt; &gt;</name>
    <filename>a02761.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename V::mask_type</type>
      <name>type</name>
      <anchorfile>a02761.html</anchorfile>
      <anchor>a12cc59c43bbaeed29bff2a0e39f8300c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; S, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; typename M::Vector &gt; &gt;::value &gt; &gt;</name>
    <filename>a02769.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Vc::SimdArray&lt; S, Simd::lanes&lt; M &gt;()&gt;</type>
      <name>type</name>
      <anchorfile>a02769.html</anchorfile>
      <anchor>a0921d8829c7333b6814cae423e60946f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</name>
    <filename>a02773.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Vc::SimdArray&lt; S, Simd::lanes&lt; V &gt;()&gt;</type>
      <name>type</name>
      <anchorfile>a02773.html</anchorfile>
      <anchor>a12a6b91bd3096f8e603721af4d059b00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, bool &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</name>
    <filename>a02777.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>LoopSIMD&lt; S, Simd::lanes&lt; V &gt;()&gt;</type>
      <name>type</name>
      <anchorfile>a02777.html</anchorfile>
      <anchor>a78a75662c0795db03269b9e900f2b339</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; Scalar&lt; typename M::Vector &gt;, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &gt; &gt;</name>
    <filename>a02765.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename M::Vector</type>
      <name>type</name>
      <anchorfile>a02765.html</anchorfile>
      <anchor>af50a152aebb7500650944ae3b891bf24</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; Simd::Scalar&lt; V &gt;, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</name>
    <filename>a02757.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>V</type>
      <name>type</name>
      <anchorfile>a02757.html</anchorfile>
      <anchor>a6d9cd75c2885611c7874be8d7155b7c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; U, AlignedNumber&lt; T, align &gt; &gt;</name>
    <filename>a01361.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>align</templarg>
    <member kind="typedef">
      <type>AlignedNumber&lt; U, align &gt;</type>
      <name>type</name>
      <anchorfile>a01361.html</anchorfile>
      <anchor>a764d6a26b5476f8fcfcb45ccd56a8cce</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::RebindType&lt; U, LoopSIMD&lt; T, S, A &gt; &gt;</name>
    <filename>a02589.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>S</templarg>
    <templarg>A</templarg>
    <member kind="typedef">
      <type>LoopSIMD&lt; Simd::Rebind&lt; U, T &gt;, S, A &gt;</type>
      <name>type</name>
      <anchorfile>a02589.html</anchorfile>
      <anchor>a30f2b8d6e6db39e878ac1bbcda904b2a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ReduceTuple</name>
    <filename>a02981.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>ReduceTuple&lt; F, Tuple, Seed, N-1 &gt;::type</type>
      <name>Accumulated</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga65dd729f95b540d3ad4d8b510d19a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple_element&lt; N-1, Tuple &gt;::type</type>
      <name>Value</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga780338238a75b8c437baf30e7bde9002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F&lt; Accumulated, Value &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7be50b03070a878f2d6dd778443b2234</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ReduceTuple&lt; F, Tuple, Seed, 0 &gt;</name>
    <filename>a02985.html</filename>
    <templarg>F</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Seed</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga3c82c919222082b94e5610411a7ea382</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Concept::Refines</name>
    <filename>a01345.html</filename>
    <templarg>BaseConcepts</templarg>
    <member kind="typedef">
      <type>TypeList&lt; BaseConcepts... &gt;</type>
      <name>BaseConceptList</name>
      <anchorfile>a01345.html</anchorfile>
      <anchor>ae7207e9050eb5211a4dcbea2007a382e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RemoteIndex</name>
    <filename>a02213.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T1</type>
      <name>GlobalIndex</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a38bf1a0bd2297f499cf393d0562e5b5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T2</type>
      <name>Attribute</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a5d69db3a848cd9ba863871d8ef39bc7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexPair&lt; GlobalIndex, ParallelLocalIndex&lt; Attribute &gt; &gt;</type>
      <name>PairType</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a7278cd65d076d04388202262f1bfd5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Attribute</type>
      <name>attribute</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a0d98b1e5d3412d5c898482870dd21479</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const PairType &amp;</type>
      <name>localIndexPair</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a763591bf46c7fb0cbe2e2436add0cca1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndex</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>aacc30da4e4e606b7dfc63679d2adb604</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndex</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ad163fd11a0e9368142a60d99fa61dd9a</anchor>
      <arglist>(const T2 &amp;attribute, const PairType *local)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndex</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>afefc26e5a8987c4b7c032ba0dc158190</anchor>
      <arglist>(const T2 &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a37f7f65575d362b2d1d49cdfc1db4ebe</anchor>
      <arglist>(const RemoteIndex &amp;ri) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>ae5fc8f180ce51f032012952148966a0e</anchor>
      <arglist>(const RemoteIndex &amp;ri) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndicesSyncer</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a28cc1134adbb762393dc031508094dc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RemoteIndexListModifier</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a977b745c7480ed3b8a5b428f59b06b7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a02213.html</anchorfile>
      <anchor>a0e1b46e95a0a31b8c20418e601c04b3b</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;, RemoteIndices&lt; T, A1 &gt; &amp;, const T &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RemoteIndexListModifier</name>
    <filename>a02217.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>mode</templarg>
    <class kind="class">Dune::RemoteIndexListModifier::InvalidPosition</class>
    <member kind="enumvalue">
      <name>MODIFYINDEXSET</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a14d841feb1a53ba65c7d93c9e392ec8ba2e72faebea00414da252cdef086f46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a9ddbacb1c8c06b67caeb3d0e7789dd34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a40c5988e9f118e1ef9721b3b82dfdbef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a43b2bc4cdc29a3734504d18e9e6f44ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>aa8ed1fc83e1d9d76840eff54709e67d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndex&lt; GlobalIndex, Attribute &gt;</type>
      <name>RemoteIndex</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>ac88be7c776080319b941d8ec40b0018e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A</type>
      <name>Allocator</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a25249516f5d7daaa55d86b0739bf7b10</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::SLList&lt; RemoteIndex, Allocator &gt;</type>
      <name>RemoteIndexList</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a1616b98cc4dc5559e0425293ff55222a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; RemoteIndex, Allocator &gt;</type>
      <name>ModifyIterator</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a85914a84ea922ffb5594c0b577af814f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RemoteIndexList::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a6e1328b5e8dce4a21ff8c3d789f80cff</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MODIFYINDEXSET</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a14d841feb1a53ba65c7d93c9e392ec8ba2e72faebea00414da252cdef086f46c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a2ef1ca0c193cb0fa66ae20065956296f</anchor>
      <arglist>(const RemoteIndex &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a04a9228f8e83fd6330d732ff5792c27d</anchor>
      <arglist>(const RemoteIndex &amp;index, const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>remove</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a9957ceca64c2cd6ab747242379587032</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a09f2446abe247eb1f03a50a77f36cc2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndexListModifier</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a2a1e82ddd525270bd3498d1532bf54b1</anchor>
      <arglist>(const RemoteIndexListModifier &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndexListModifier</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a9e5225e634beb1027353b2065bfc13a3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>RemoteIndices</name>
      <anchorfile>a02217.html</anchorfile>
      <anchor>a1628087573046f25cc5705d47ab1d2dc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RemoteIndices</name>
    <filename>a02209.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a34d5b63b71b70bc705fb5821c24c4896</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CollectiveIterator&lt; T, A &gt;</type>
      <name>CollectiveIteratorT</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ad171da4ad3ec90525937ecb0d09c14e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a306a6c53829e2034c1468bdf34d53053</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aec082eb9f2fa728a4e66af2165dee854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a43e2c046c8e66d671a035b0b6e3ba8a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndex&lt; GlobalIndex, Attribute &gt;</type>
      <name>RemoteIndex</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a11ee8db9c65c70e67c26cfc2daeea2b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; RemoteIndex &gt;</type>
      <name>Allocator</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>adb0868a0b9981ddfe44ce7952375f961</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::SLList&lt; RemoteIndex, Allocator &gt;</type>
      <name>RemoteIndexList</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a977d6686e682c76ac4f01ff33bd6dbd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::map&lt; int, std::pair&lt; RemoteIndexList *, RemoteIndexList * &gt; &gt;</type>
      <name>RemoteIndexMap</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a5e7b1b5ba2135dc056e547cb2de5f91d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RemoteIndexMap::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>af5b9efcb7c1d23e4b69197a45749f8b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndices</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ada6712eb9a5ff2eae2c4c22f882d9dd5</anchor>
      <arglist>(const ParallelIndexSet &amp;source, const ParallelIndexSet &amp;destination, const MPI_Comm &amp;comm, const std::vector&lt; int &gt; &amp;neighbours=std::vector&lt; int &gt;(), bool includeSelf=false)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>RemoteIndices</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a18e4126c19e9d8c1f7961814e84ac75b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIncludeSelf</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a4b97c848f4314057cb580272a7081367</anchor>
      <arglist>(bool includeSelf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexSets</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2809af24e177f77027834e6a3a31b1dd</anchor>
      <arglist>(const ParallelIndexSet &amp;source, const ParallelIndexSet &amp;destination, const MPI_Comm &amp;comm, const std::vector&lt; int &gt; &amp;neighbours=std::vector&lt; int &gt;())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setNeighbours</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a67823f37257c4691780105e3c1264bb0</anchor>
      <arglist>(const C &amp;neighbours)</arglist>
    </member>
    <member kind="function">
      <type>const std::set&lt; int &gt; &amp;</type>
      <name>getNeighbours</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a024e6fc2fda8c881984124415c4254c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~RemoteIndices</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a7d895d6517e549fc895b66412cba9632</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>rebuild</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a31dc5b30d4550b1e9b3714b57b51f75e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a5d685895a71845c9c227c235fd85ef37</anchor>
      <arglist>(const RemoteIndices &amp;ri) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isSynced</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ae1d07171d9dd26bb521f66c07160fafc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a417c3f9720e28475be898a40ac8c8b00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RemoteIndexListModifier&lt; T, A, mode &gt;</type>
      <name>getModifier</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a6c616a5dd2efdb1f878390179a11c81c</anchor>
      <arglist>(int process)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>find</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>adfdcea9f8b03cb57635d5dcf7dc6dd47</anchor>
      <arglist>(int proc) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ae97264453f472fd931e4f6465c7db27e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a5ae3ec855482a8709e0e2aa007881a83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CollectiveIteratorT</type>
      <name>iterator</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a46bde1d3228ac47e00a06268317810a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2c6f4ee30398bcbae50a1d0a3eba602c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>neighbours</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab6a174a15b728441c9c6edee7a466e8b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSet &amp;</type>
      <name>sourceIndexSet</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a7d77c2c0dcbb161ef7eb40d4895a874a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSet &amp;</type>
      <name>destinationIndexSet</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ad6493d46cb9fadb3545d3d5fa0bb064c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>packEntries</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2433a6b6be62adbaf7f147a43e678e85</anchor>
      <arglist>(IndexPair&lt; GlobalIndex, LocalIndex &gt; **pairs, const ParallelIndexSet &amp;indexSet, char *p_out, MPI_Datatype type, int bufferSize, int *position, [[maybe_unused]] int n)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>InterfaceBuilder</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a75758d2f136c412d34418c5dd7f57e14</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndicesSyncer&lt; T &gt;</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>aa0f037d069f3afd0dea7ed07bc56b9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a2cde368e930dba5dfadb5d0feaa3ac93</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T1::GlobalIndex, typename T1::LocalIndex::Attribute &gt;, A2 &gt; &gt; &amp;, RemoteIndices&lt; T1, A1 &gt; &amp;, const T1 &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend void</type>
      <name>fillIndexSetHoles</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>a1b24077ed89c2a70ec1f729c15e0f5b5</anchor>
      <arglist>(const G &amp;graph, Dune::OwnerOverlapCopyCommunication&lt; T1, T2 &gt; &amp;oocomm)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02209.html</anchorfile>
      <anchor>ab67dff4bac094d9b1d5211a7700809aa</anchor>
      <arglist>(std::ostream &amp;, const RemoteIndices&lt; T &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::InterfaceBuilder::RemoteIndicesStateError</name>
    <filename>a02113.html</filename>
    <base>Dune::InvalidStateException</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::ReservedVector</name>
    <filename>a02513.html</filename>
    <templarg></templarg>
    <templarg>n</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a54542fb28af69498a2be727d6aa2f054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a3bd888f712beb995283c8cc33cdbdca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a994ab20358f70f4f7a409d6cdb5bd082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aa422ba2af5980e56df25b49039604a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ae81e7d352f92b6ce33b843271b66abd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac8288dcc3c7ac50cef2083cc01fc77f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; ReservedVector, value_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>adce2a563fdb16fd9fee020c43a2962a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; const ReservedVector, const value_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac2d0d2b7f8700302bfdbb16044d37b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aeeb1a7223edc3010319a4d84594d4862</anchor>
      <arglist>(const ReservedVector &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReservedVector</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a00b01cadf7f48f2978f99513b40335e3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReservedVector</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aa41da5fad32eb5e7e5240f731f82c0ac</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a84ccc7de28691068cce99e0857f21159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a784ee39726350fe280ff2c334fe6d06d</anchor>
      <arglist>(size_t s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a463c620766ca27b96e1fab85322823d6</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>acb5e53006c96d9fd20f5f2b542617221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a8cb90e7d831a283b8865a00d02022b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a43d2af4807773165afbbe1edf42bdb8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a1b1270319fbb4b821f0ea076919ce4d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aee1382e9af9d793d850489958ca56c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac2dffe0a32dee5fcdd81c7d31f9611cf</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a7c77d5d6a2c7d3d7a11eda8190cff5ab</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a5904d20989afd38c7e884d46192b933c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a421764c550ba31824b0f0feba47318a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a86c6d9ea7dc0c567b89dd495ffd915b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a6e7e73cf140292ab30fedbbc3309fce7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ab116eee761ae277b2d055726f4c2aec2</anchor>
      <arglist>(std::ostream &amp;s, const ReservedVector &amp;v)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::size_t</type>
      <name>hash_value</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a6629c1ed4c369f3ef45b34478c1fea65</anchor>
      <arglist>(const ReservedVector &amp;v) noexcept</arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a54542fb28af69498a2be727d6aa2f054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a3bd888f712beb995283c8cc33cdbdca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a994ab20358f70f4f7a409d6cdb5bd082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>const_reference</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aa422ba2af5980e56df25b49039604a9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>size_t</type>
      <name>size_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ae81e7d352f92b6ce33b843271b66abd8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac8288dcc3c7ac50cef2083cc01fc77f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; ReservedVector, value_type &gt;</type>
      <name>iterator</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>adce2a563fdb16fd9fee020c43a2962a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GenericIterator&lt; const ReservedVector, const value_type &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac2d0d2b7f8700302bfdbb16044d37b3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReservedVector</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a00b01cadf7f48f2978f99513b40335e3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ReservedVector</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aa41da5fad32eb5e7e5240f731f82c0ac</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a84ccc7de28691068cce99e0857f21159</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a784ee39726350fe280ff2c334fe6d06d</anchor>
      <arglist>(size_t s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a463c620766ca27b96e1fab85322823d6</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>acb5e53006c96d9fd20f5f2b542617221</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a8cb90e7d831a283b8865a00d02022b2c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a43d2af4807773165afbbe1edf42bdb8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a1b1270319fbb4b821f0ea076919ce4d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>aee1382e9af9d793d850489958ca56c50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>ac2dffe0a32dee5fcdd81c7d31f9611cf</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a7c77d5d6a2c7d3d7a11eda8190cff5ab</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>front</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a5904d20989afd38c7e884d46192b933c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>front</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a421764c550ba31824b0f0feba47318a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a86c6d9ea7dc0c567b89dd495ffd915b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>back</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a6e7e73cf140292ab30fedbbc3309fce7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a3828614458a158a31207de1240850f92</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a4d59737439d9008bcd151a7b5f727122</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>capacity</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a34a5fbe5c24aaca808d2fe59e2560060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>max_size</name>
      <anchorfile>a02513.html</anchorfile>
      <anchor>a199a39020a45cee1c056730c3b0bd2b3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ScalarType</name>
    <filename>a02565.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>V</type>
      <name>type</name>
      <anchorfile>a02565.html</anchorfile>
      <anchor>ab4f6f38e2c9e3272e5146799d512d978</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ScalarType&lt; AlignedNumber&lt; T, align &gt; &gt;</name>
    <filename>a01357.html</filename>
    <templarg></templarg>
    <templarg>align</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a01357.html</anchorfile>
      <anchor>a9998248cc7506f81d922f4fde4f7e781</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ScalarType&lt; LoopSIMD&lt; T, S, A &gt; &gt;</name>
    <filename>a02585.html</filename>
    <templarg></templarg>
    <templarg>S</templarg>
    <templarg>A</templarg>
    <member kind="typedef">
      <type>Simd::Scalar&lt; T &gt;</type>
      <name>type</name>
      <anchorfile>a02585.html</anchorfile>
      <anchor>afd217750ca3a8095dc151ddee578fedb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Simd::Overloads::ScalarType&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</name>
    <filename>a02753.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>typename V::value_type</type>
      <name>type</name>
      <anchorfile>a02753.html</anchorfile>
      <anchor>ae2a891547a0d138a0055b3ede4c0dac2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Selection</name>
    <filename>a02245.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>TS</type>
      <name>AttributeSet</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a9c09045504d302872563ec0e272cb0a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a609d50e4e956d21622d176a406994abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a98df995b1d2d6272536dfdfd7d9686a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ParallelIndexSet&lt; GlobalIndex, LocalIndex, N &gt;</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>aef492e88a2ed6d9e2d9120d67ef488f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t *</type>
      <name>iterator</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ab90de859aac860f1aa8f86b51eae956c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t *</type>
      <name>const_iterator</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>ad9560f391c7883de971065ddfd229a69</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a8ab175ecef5cc0d02ebcde8405197e51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Selection</name>
      <anchorfile>a02245.html</anchorfile>
      <anchor>a7fdfef9419880ca86cc1b8b1f9d96fe6</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Selection</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf850420ce20615038f0a4a0ef241058d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga14017845409e8d7c054caea5f8881e1c</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa67d894e44e69f61d2e547d526230cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7668f14afb7dc833db63b46ae0d9a5e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga734b64cf72aa789e44465b669ab9222c</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SelectionIterator</name>
    <filename>a02237.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>TS</type>
      <name>AttributeSet</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a879e7b4fc89ddd0e688db4b259a4d804</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ParallelIndexSet&lt; TG, TL, N &gt;</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a886346234b927463117431b844788c1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstArrayListIterator&lt; IndexPair&lt; TG, TL &gt;, N, std::allocator&lt; Dune::IndexPair&lt; TG, TL &gt; &gt; &gt;</type>
      <name>ParallelIndexSetIterator</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a69207e6abafc5c71bed706c9d7652634</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SelectionIterator</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>acd08f08f65bb42d180daa9b0e6270a6c</anchor>
      <arglist>(const ParallelIndexSetIterator &amp;iter, const ParallelIndexSetIterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator++</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a6b60c2d296b157b2c53a3409b3b19b6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>uint32_t</type>
      <name>operator*</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>a83e85c7bcddd7a6ba6eb92fc81ced5e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>af5bffe9ea7846740bc5b4ff47376e6bf</anchor>
      <arglist>(const SelectionIterator&lt; TS, TG, TL, N &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02237.html</anchorfile>
      <anchor>addb28f6b9f5e759b68884156b3732fb0</anchor>
      <arglist>(const SelectionIterator&lt; TS, TG, TL, N &gt; &amp;other) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SimdIndexTypeTraits</name>
    <filename>a02805.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>type</name>
      <anchorfile>a02805.html</anchorfile>
      <anchor>a29a1c3676f164a724e95fc2a56a85c96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SimdMaskTypeTraits</name>
    <filename>a02809.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>bool</type>
      <name>type</name>
      <anchorfile>a02809.html</anchorfile>
      <anchor>a18caa08e28fdf11a680d2bf13e75a45c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SimdScalarTypeTraits</name>
    <filename>a02797.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a02797.html</anchorfile>
      <anchor>ac58eb6a061f11b93623abcf9f541307d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SimdScalarTypeTraits&lt; AlignedNumber&lt; T, align &gt; &gt;</name>
    <filename>a02801.html</filename>
    <templarg></templarg>
    <templarg>align</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>type</name>
      <anchorfile>a02801.html</anchorfile>
      <anchor>a991769055c785002cb76df598012401c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Singleton</name>
    <filename>a02813.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Singleton</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a57f3c57f7f9f0fcfc08550d94e15aaf1</anchor>
      <arglist>(const Singleton &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator=</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>aaa5a12878e6f4ca89127990e5197898f</anchor>
      <arglist>(const Singleton &amp;)=delete</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DUNE_EXPORT T &amp;</type>
      <name>instance</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>afb453ca5badb11dcd3d945391c22136d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>Singleton</name>
      <anchorfile>a02813.html</anchorfile>
      <anchor>a4c8e8068dc0d09d23e86e320e9355cc8</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::SizeOf</name>
    <filename>a03113.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::SizeOne</name>
    <filename>a01965.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::SLList</name>
    <filename>a02829.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadefacd67926b31f38dcc996d275ff1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9548258d3f4de56a110c6f549780ec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4871529deceba9839fa6cb5640d0e1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; T, A &gt;</type>
      <name>iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga543a8c5a50d30cd488550f5e99161754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; T, A &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa026efcc562ed6ef620e4a96f26a393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; T, A &gt;</type>
      <name>ModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac398614c243228cc0f7678b6c70007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab097c05f186dacbbdd11361de5b2500f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9519c3673afc2d76f4bc76ef35181225</anchor>
      <arglist>(const SLList&lt; T1, A1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga72a901265ef5d3658dceb0f7bd6a0782</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafa3231a07e56ae81cc6334e19d603a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SLList&lt; T, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0eb5f84602ae9120178e2e9659bc41</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0a71f761f2ee2a6d5c72c5b8b6b60f0e</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga07373aa465c1db378233026b89420275</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac40778d9f4576908734ed49890c26a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga91a8c67d17ae6595ee2f5eca3a2df144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff151c44f4a1e43ab0b2f0cf55bab6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d007afaea3e81e26ae2f4963faadd33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>beginModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0cfc5d3be7b2719e938face53b832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>endModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1859abb70b39f6cd675d5d1f6c23a5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8eee1922ee4cf09e85c03af4ceef39ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae74580801beccdd3ad849dfafc81cdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa1824b536a04a403838bf363053f7b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84f7bb0bf0fe313d5ccc558683df4255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6a7d895d33aa806a78fe61a1d96104ab</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29be35a0986714d7a74946eaea406628</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SLList&lt; GlobalIndex, Allocator &gt;</name>
    <filename>a02829.html</filename>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadefacd67926b31f38dcc996d275ff1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlobalIndex</type>
      <name>MemberType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9548258d3f4de56a110c6f549780ec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4871529deceba9839fa6cb5640d0e1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; GlobalIndex, Allocator &gt;</type>
      <name>iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga543a8c5a50d30cd488550f5e99161754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; GlobalIndex, Allocator &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa026efcc562ed6ef620e4a96f26a393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; GlobalIndex, Allocator &gt;</type>
      <name>ModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac398614c243228cc0f7678b6c70007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab097c05f186dacbbdd11361de5b2500f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9519c3673afc2d76f4bc76ef35181225</anchor>
      <arglist>(const SLList&lt; T1, A1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga72a901265ef5d3658dceb0f7bd6a0782</anchor>
      <arglist>(const SLList&lt; GlobalIndex, Allocator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafa3231a07e56ae81cc6334e19d603a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SLList&lt; GlobalIndex, Allocator &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0eb5f84602ae9120178e2e9659bc41</anchor>
      <arglist>(const SLList&lt; GlobalIndex, Allocator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0a71f761f2ee2a6d5c72c5b8b6b60f0e</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga07373aa465c1db378233026b89420275</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac40778d9f4576908734ed49890c26a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga91a8c67d17ae6595ee2f5eca3a2df144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff151c44f4a1e43ab0b2f0cf55bab6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d007afaea3e81e26ae2f4963faadd33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>beginModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0cfc5d3be7b2719e938face53b832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>endModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1859abb70b39f6cd675d5d1f6c23a5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8eee1922ee4cf09e85c03af4ceef39ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae74580801beccdd3ad849dfafc81cdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa1824b536a04a403838bf363053f7b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84f7bb0bf0fe313d5ccc558683df4255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6a7d895d33aa806a78fe61a1d96104ab</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29be35a0986714d7a74946eaea406628</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SLList&lt; T, A &gt;</name>
    <filename>a02829.html</filename>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadefacd67926b31f38dcc996d275ff1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9548258d3f4de56a110c6f549780ec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4871529deceba9839fa6cb5640d0e1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; T, A &gt;</type>
      <name>iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga543a8c5a50d30cd488550f5e99161754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; T, A &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa026efcc562ed6ef620e4a96f26a393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; T, A &gt;</type>
      <name>ModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac398614c243228cc0f7678b6c70007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab097c05f186dacbbdd11361de5b2500f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9519c3673afc2d76f4bc76ef35181225</anchor>
      <arglist>(const SLList&lt; T1, A1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga72a901265ef5d3658dceb0f7bd6a0782</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafa3231a07e56ae81cc6334e19d603a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SLList&lt; T, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0eb5f84602ae9120178e2e9659bc41</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0a71f761f2ee2a6d5c72c5b8b6b60f0e</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga07373aa465c1db378233026b89420275</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac40778d9f4576908734ed49890c26a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga91a8c67d17ae6595ee2f5eca3a2df144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff151c44f4a1e43ab0b2f0cf55bab6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d007afaea3e81e26ae2f4963faadd33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>beginModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0cfc5d3be7b2719e938face53b832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>endModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1859abb70b39f6cd675d5d1f6c23a5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8eee1922ee4cf09e85c03af4ceef39ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae74580801beccdd3ad849dfafc81cdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa1824b536a04a403838bf363053f7b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84f7bb0bf0fe313d5ccc558683df4255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6a7d895d33aa806a78fe61a1d96104ab</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29be35a0986714d7a74946eaea406628</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SLListConstIterator</name>
    <filename>a02821.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ForwardIteratorFacade&lt; SLListConstIterator&lt; T, A &gt;, const T, const T &amp;, std::size_t &gt;</base>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; const T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa9aa8d3ff92cb2d129f4599fab155c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga45a6795cf3f7ecf496f468456a2bedca</anchor>
      <arglist>(typename SLList&lt; T, A &gt;::Element *item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f10eb89661f52d4ca00dd6d99207a01</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga7e61aceefccc30ce8b58a1d36a74e980</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga567bb88006449bdb6c09bd979c64edcc</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2283bc25520b96c7b07eef08a764f257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga085f923325186832edb4964b8649d8ae</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf7b6b1990f6bf2abeadd60f3ae813bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLList&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0096c66d16b973dcf48c031493e8846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SLListIterator</name>
    <filename>a02817.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ForwardIteratorFacade&lt; SLListIterator&lt; T, A &gt;, T, T &amp;, std::size_t &gt;</base>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabc65f1b9122dcb8b3b3c66a34a14d672</anchor>
      <arglist>(typename SLList&lt; T, A &gt;::Element *item, SLList&lt; T, A &gt; *sllist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga605b22cb26368709b6c6978afa74422f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gad54a5b1a329454fda47f567f271be2dc</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga929393cf6c3a5b1cfe71adf852a5ded2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa9b60b73ed6c493df407f3a797f74a96</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff2937a6381d19a9809f14d691729426</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga7516c4f7b05093c21dba691af222c9e4</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac484c101bf8dac91cf42c87ab4095c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4883dd27ede8ff505dfaec9202c7ec98</anchor>
      <arglist>(const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNext</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6b29ec8a7c92e623e5c019c51af9dd94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListModifyIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa251be526cd0ddad4ed6adb4993cbc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLList&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0096c66d16b973dcf48c031493e8846</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SLListModifyIterator</name>
    <filename>a02825.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>ForwardIteratorFacade&lt; SLListModifyIterator&lt; T, A &gt;, T, T &amp;, std::size_t &gt;</base>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; T &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; T, A &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1c0769352260150e71992906797c6bf</anchor>
      <arglist>(SLListIterator&lt; T, A &gt; beforeIterator, SLListIterator&lt; T, A &gt; _iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae453df10198c999b8d05e7957df62a31</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a786d2cd78f48907f0411e6670a077b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0b885d79a6290ca39936ff80c6164f12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac02bc0597c75cd4b08db18a44536c33</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafeb8eb61bc81005274daf39f1a31dad2</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9e54256a87b83eee3428010d8e822d69</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf185b8fbd19f5e6aa881f94781f97ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab584227c678fe14379ab64bf38e90fc3</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1aa043816f91daf4d1cc0d680b6cec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SLListModifyIterator&lt; RemoteIndex, Allocator &gt;</name>
    <filename>a02825.html</filename>
    <base>Dune::ForwardIteratorFacade</base>
    <member kind="typedef">
      <type>std::forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a0f4a9ffc7f0617c74b92d9f5eb9bead5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::remove_const&lt; V &gt;::type</type>
      <name>value_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab489781ace31952ffca9a4e43a2e2363</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>difference_type</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ad31ac07a5e26ff49e1d9616d4072a0fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a15d11ccef925779642b1637aac23bfe5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>af42be6f3deadd418c6d79818603a5bdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>DerivedType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a9192927ea5d6bde865f36619380692ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V</type>
      <name>Value</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a91b8956e40e1fa5395f9bc095bc69557</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>V *</type>
      <name>Pointer</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abf8e952829c2c7c3a7635939b40c630b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>D</type>
      <name>DifferenceType</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a4b5e403398426bad661a47efd77f3329</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>R</type>
      <name>Reference</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a5086d138aa712956ab7334e3677e5f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1c0769352260150e71992906797c6bf</anchor>
      <arglist>(SLListIterator&lt; RemoteIndex, Allocator &gt; beforeIterator, SLListIterator&lt; RemoteIndex, Allocator &gt; _iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae453df10198c999b8d05e7957df62a31</anchor>
      <arglist>(const SLListModifyIterator&lt; RemoteIndex, Allocator &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a786d2cd78f48907f0411e6670a077b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>RemoteIndex &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0b885d79a6290ca39936ff80c6164f12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac02bc0597c75cd4b08db18a44536c33</anchor>
      <arglist>(const SLListConstIterator&lt; RemoteIndex, Allocator &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafeb8eb61bc81005274daf39f1a31dad2</anchor>
      <arglist>(const SLListIterator&lt; RemoteIndex, Allocator &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9e54256a87b83eee3428010d8e822d69</anchor>
      <arglist>(const SLListModifyIterator&lt; RemoteIndex, Allocator &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf185b8fbd19f5e6aa881f94781f97ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab584227c678fe14379ab64bf38e90fc3</anchor>
      <arglist>(const RemoteIndex &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1aa043816f91daf4d1cc0d680b6cec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>operator*</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>addb69ce5c37bc55e5b7aa5d133e3f647</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Pointer</type>
      <name>operator-&gt;</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>a7652915172bfadc464e813ee73bd6013</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DerivedType &amp;</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>ab644e9f915098aefc8a090004a8f6b2a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DerivedType</type>
      <name>operator++</name>
      <anchorfile>a01873.html</anchorfile>
      <anchor>abeab195ddd461db8d2d9e6f560ddee6d</anchor>
      <arglist>(int)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StandardMathematicalConstants</name>
    <filename>a01909.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static const T</type>
      <name>e</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aae17c7e397f4e52c0994a070a589b568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const T</type>
      <name>pi</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ab18fe71b10625774844be9b726c8c313</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>StandardMathematicalConstants&lt; Field &gt;</name>
    <filename>a01909.html</filename>
    <member kind="function" static="yes">
      <type>static const Field</type>
      <name>e</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>aae17c7e397f4e52c0994a070a589b568</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Field</type>
      <name>pi</name>
      <anchorfile>a01909.html</anchorfile>
      <anchor>ab18fe71b10625774844be9b726c8c313</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StaticIntegralRange</name>
    <filename>a02477.html</filename>
    <templarg></templarg>
    <templarg>to</templarg>
    <templarg>from</templarg>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a58ff891755441b324726ec12439164eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::IntegralRangeIterator&lt; T &gt;</type>
      <name>iterator</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aeafa4f9b8cd8551d2b127a7eb7fa63ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::make_unsigned_t&lt; T &gt;</type>
      <name>size_type</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a57e6b7efcbab85e67f81b171588b5e6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(shift_integer_sequence&lt; from &gt;(std::make_integer_sequence&lt; T, to-from &gt;())) typedef</type>
      <name>integer_sequence</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a06cd7ccb040b3d30ec785c7179c5be88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>StaticIntegralRange</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a51e3b4e1e6f94f1e8a28945630c1d966</anchor>
      <arglist>() noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator IntegralRange&lt; T &gt;</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a66666f8766cd220433b30eb9e14b6651</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator integer_sequence</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a2736d5e0f3a2813e9a4464577827c331</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>operator[]</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a6fbb0546b65709fc176fb8397df7de97</anchor>
      <arglist>(const std::integral_constant&lt; U, i &gt; &amp;) const noexcept -&gt; std::integral_constant&lt; value_type, from+static_cast&lt; value_type &gt;(i)&gt;</arglist>
    </member>
    <member kind="function">
      <type>constexpr value_type</type>
      <name>operator[]</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>ae0c70e5979eeec5f8456fb2546e06f9b</anchor>
      <arglist>(const size_type &amp;i) const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr iterator</type>
      <name>begin</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aaf1ca7a1f2aa29ca29dee6bf85b12059</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr iterator</type>
      <name>end</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a1b1a85f5fbaf4d37ad397fa758c9f423</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::integral_constant&lt; bool, from==to &gt;</type>
      <name>empty</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>a7cd0bcb4d1c1a8d88e9ffbcc2adccfe9</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::integral_constant&lt; size_type, static_cast&lt; size_type &gt;to) - static_cast&lt; size_type &gt;from) &gt;</type>
      <name>size</name>
      <anchorfile>a02477.html</anchorfile>
      <anchor>aaec4767e86a64a7b859e8aff0c77ef8b</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::StaticPower</name>
    <filename>a02393.html</filename>
    <templarg>m</templarg>
    <templarg>p</templarg>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>power</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2c23a81dd28b07169831c7ef51a40c42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StreamWrap</name>
    <filename>a01381.html</filename>
    <member kind="function">
      <type></type>
      <name>StreamWrap</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga06e3c89ca78a336ab9c5d2d13fbb7d86</anchor>
      <arglist>(std::ostream &amp;_out)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>out</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3eaed1d890bb1bc7ba0593b1565d5fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StreamWrap *</type>
      <name>next</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaf0931b582e183cb17963d23d7598ae23</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SystemError</name>
    <filename>a01573.html</filename>
    <base>Dune::Exception</base>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Timer</name>
    <filename>a02881.html</filename>
    <member kind="function">
      <type></type>
      <name>Timer</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>a55b4e69b9e9ef128b998fb0f59f0fa63</anchor>
      <arglist>(bool startImmediately=true) noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>a08ea290ecdd2cb4e98b4bc22e65abff4</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>start</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>af232d81c85e04ca4ffdd2f8ead677316</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>elapsed</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>ad8cce9cefec3e1aadf87c9a9896b1da2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>lastElapsed</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>adcef76c27f53655b662af3e80fdf4486</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>stop</name>
      <anchorfile>a02881.html</anchorfile>
      <anchor>a30628558c1dd47eab76ab2d408bb6319</anchor>
      <arglist>() noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Std::to_false_type</name>
    <filename>a02841.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::Std::to_true_type</name>
    <filename>a02845.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::ParameterTree::Parser&lt; bool &gt;::ToLower</name>
    <filename>a02333.html</filename>
    <member kind="function">
      <type>char</type>
      <name>operator()</name>
      <anchorfile>a02333.html</anchorfile>
      <anchor>ac099c5cf62ffa1b441f8dea0b532fcd3</anchor>
      <arglist>(char c)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Function::Traits</name>
    <filename>a01757.html</filename>
    <member kind="typedef">
      <type>RawDomainType</type>
      <name>DomainType</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>a66c4ebef1a18a71c2c642f40cea94b98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawRangeType</type>
      <name>RangeType</name>
      <anchorfile>a01757.html</anchorfile>
      <anchor>aaea602c51557193beda54005f318361e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TransformedRangeView</name>
    <filename>a02509.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Impl::TransformedRangeIterator&lt; RawConstIterator, F, T &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a4525e9203f5db4cf3e1fdf9b0d453df8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::TransformedRangeIterator&lt; RawIterator, F, T &gt;</type>
      <name>iterator</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a8482e5b84a047127fe60cc80bb53bad2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference_t&lt; R &gt;</type>
      <name>RawRange</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a44345c10b030bfa04c86f796d6083550</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TransformedRangeView</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a81cf2c30680c482da5bb634aff1d6d04</anchor>
      <arglist>(RR &amp;&amp;rawRange, const F &amp;f) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>begin</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a8aa8355d5ddb660ee70b913f42fd502a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a6391fe66dbde9a812ff8575be362dd21</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr const_iterator</type>
      <name>end</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>ae98dbae7abd49e1c63c6eb65d597a1ff</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a39676fca9b44d02c31b9aaed57368924</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>a02e07e9cc5ebedef76090a21232a9f5b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const RawRange &amp;</type>
      <name>rawRange</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>adbd33f4414d72e303bb9d80563c94bbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>RawRange &amp;</type>
      <name>rawRange</name>
      <anchorfile>a02509.html</anchorfile>
      <anchor>ad6b2aae1534a15576804557317fb99b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TransformTupleFunctor</name>
    <filename>a02917.html</filename>
    <templarg>TE</templarg>
    <templarg>Args</templarg>
    <class kind="struct">Dune::TransformTupleFunctor::TypeEvaluator</class>
    <member kind="function">
      <type></type>
      <name>TransformTupleFunctor</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga5e2f53ce863d3763ea065a2af450a6e5</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga72cc2a2c399ba265680ee260354def7b</anchor>
      <arglist>(T &amp;&amp;t) -&gt; decltype(this-&gt;apply(t, std::index_sequence_for&lt; Args... &gt;{})) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TupleAccessTraits</name>
    <filename>a02889.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::add_const&lt; T &gt;::type &amp;</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga041f1e2352cf960c2cdabcc24b63810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7ac7c737f08242dabc75d211dffb4573</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const std::remove_const&lt; T &gt;::type &amp;</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaf3eb742968041769424b84691408fb73</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TupleAccessTraits&lt; T &amp; &gt;</name>
    <filename>a02897.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga2613d7a17e0204d5184be226f62c528d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7642b9a2b63fc07ad3adcbfa7742bc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaef361574ba7087d6324f129026b13d3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TupleAccessTraits&lt; T * &gt;</name>
    <filename>a02893.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::add_const&lt; T &gt;::type *</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaf5d4dd28478959589b3ea38408a58c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga340eaa6d59fbad9efa50f39495267dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga12185fab48344d079604e6357fe83025</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TupleVector</name>
    <filename>a02997.html</filename>
    <templarg>T</templarg>
    <member kind="function">
      <type>constexpr</type>
      <name>TupleVector</name>
      <anchorfile>a02997.html</anchorfile>
      <anchor>a18fb497d8152c2f3eb144449d70e9bc9</anchor>
      <arglist>(TT &amp;&amp;... tt)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>TupleVector</name>
      <anchorfile>a02997.html</anchorfile>
      <anchor>af79a45a6b4d14f7db794298985da714e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>operator[]</name>
      <anchorfile>a02997.html</anchorfile>
      <anchor>ae61a44c59db745e575ee839989dc13ed</anchor>
      <arglist>(const Dune::index_constant&lt; i &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>operator[]</name>
      <anchorfile>a02997.html</anchorfile>
      <anchor>a22b24b2bd8f2fa120c183b3c8becf1c9</anchor>
      <arglist>(const Dune::index_constant&lt; i &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr std::size_t</type>
      <name>size</name>
      <anchorfile>a02997.html</anchorfile>
      <anchor>a1595dc930c803c3b4e4652b011ebf47b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TransformTupleFunctor::TypeEvaluator</name>
    <filename>a02921.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::TypeListElement</name>
    <filename>a03025.html</filename>
    <templarg>i</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::TypeListElement&lt; i, TypeList&lt; T... &gt; &gt;</name>
    <filename>a03029.html</filename>
    <templarg>i</templarg>
    <templarg>T</templarg>
    <member kind="typedef">
      <type>typename std::tuple_element&lt; i, std::tuple&lt; T... &gt; &gt;::type</type>
      <name>type</name>
      <anchorfile>a03029.html</anchorfile>
      <anchor>a9fb580f946834896c389e6c04d27675f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>type</type>
      <name>Type</name>
      <anchorfile>a03029.html</anchorfile>
      <anchor>ae91efdaa72ed01633da2f8fa2185408a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::TypeListSize</name>
    <filename>a03017.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::TypeListSize&lt; TypeList&lt; T... &gt; &gt;</name>
    <filename>a03021.html</filename>
    <templarg>T</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::UncachedSelection</name>
    <filename>a02241.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>TS</type>
      <name>AttributeSet</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a589f0ae8cab2af79028ade308825715a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a8748b8516080752715bf8549cf31ba7b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ae440f5bd9baadebd5b0a0fbd185608c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::ParallelIndexSet&lt; GlobalIndex, LocalIndex, N &gt;</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>ae19f53347972a0957f323868c352de30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SelectionIterator&lt; TS, TG, TL, N &gt;</type>
      <name>iterator</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a45b943f9dd471f615e645b72d4562bf0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>iterator</type>
      <name>const_iterator</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a829c38da28747527728d2f8158ccffc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UncachedSelection</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>a41dbe000796d01366e593aaf53fefe3a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UncachedSelection</name>
      <anchorfile>a02241.html</anchorfile>
      <anchor>add165db1e1b8b728eb45dd9a59a6cb5a</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga514215f2f4fbb39b9e8cf2b8ebbf5dce</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad305c289f49e9910203af2456c4f068b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga12176ea64b01c47d9d72cde7eb918a52</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Simd::UnitTest</name>
    <filename>a02685.html</filename>
    <member kind="function">
      <type>void</type>
      <name>check</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a4f1d473ac4656d85fc4bae772f75e5ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>good</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a8b1babbc82304bc4a9ec81f033f7f123</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkType</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a2cb6f2cf7764648923c3572c1352b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNonOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>aa3fa1100c0ac8829b40d83b920336db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkUnaryOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a25da063351aaf7e7b0cd4f7c82bdd14c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a26e00323c861fdf5e3c798464bfd2ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a910b99baa137401d30ccac0de457b13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsScalarVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a2b18d13e6664f1f5f25d26ccf1c4ad98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorScalar</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a679c3532b311975e6b9629a41957bbcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsProxyVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>ae3fdaff71fc87755575a2a705c3c4af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorProxy</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>add87a5a582d230238bd6a0d29fc346a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkType</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a2cb6f2cf7764648923c3572c1352b8c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkNonOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>aa3fa1100c0ac8829b40d83b920336db8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkUnaryOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a25da063351aaf7e7b0cd4f7c82bdd14c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOps</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a26e00323c861fdf5e3c798464bfd2ef6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a910b99baa137401d30ccac0de457b13b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsScalarVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a2b18d13e6664f1f5f25d26ccf1c4ad98</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorScalar</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>a679c3532b311975e6b9629a41957bbcb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsProxyVector</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>ae3fdaff71fc87755575a2a705c3c4af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkBinaryOpsVectorProxy</name>
      <anchorfile>a02685.html</anchorfile>
      <anchor>add87a5a582d230238bd6a0d29fc346a6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ValueTransformationTag</name>
    <filename>a02481.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::CommPolicy::VariableBlockVector</name>
    <filename>a01981.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::VariableSize</name>
    <filename>a01969.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::VariableSizeCommunicator</name>
    <filename>a02261.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::map&lt; int, std::pair&lt; InterfaceInformation, InterfaceInformation &gt;, std::less&lt; int &gt;, typename std::allocator_traits&lt; Allocator &gt;::template rebind_alloc&lt; std::pair&lt; const int, std::pair&lt; InterfaceInformation, InterfaceInformation &gt; &gt; &gt; &gt;</type>
      <name>InterfaceMap</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ac07b014b2b75db794151757adb6b492e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ac2946c7682440f0665a9bf7aad39cb8d</anchor>
      <arglist>(MPI_Comm comm, const InterfaceMap &amp;inf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>acf4a953181f36758090b08fc8edd2786</anchor>
      <arglist>(const Interface &amp;inf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a83c1344cc9f6f130c4f778b02bd2fdd0</anchor>
      <arglist>(MPI_Comm comm, const InterfaceMap &amp;inf, std::size_t max_buffer_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a5c1a57e82c9e5bdde316a9a50b4f18a5</anchor>
      <arglist>(const Interface &amp;inf, std::size_t max_buffer_size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a6c7267fdf39ef8e54ee9523bb2b54efb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VariableSizeCommunicator</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a883c298d904b968729111f88ff8f638e</anchor>
      <arglist>(const VariableSizeCommunicator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>VariableSizeCommunicator &amp;</type>
      <name>operator=</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ab172dca7595d9ed822bea48e10524934</anchor>
      <arglist>(const VariableSizeCommunicator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forward</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>ab026dd7732ed7d19fbabf0179e9fbe17</anchor>
      <arglist>(DataHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backward</name>
      <anchorfile>a02261.html</anchorfile>
      <anchor>a6ad535e301ded2a13796dda9d93dfd00</anchor>
      <arglist>(DataHandle &amp;handle)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VirtualFunction</name>
    <filename>a01761.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Function&lt; const DomainType &amp;, RangeType &amp; &gt;</base>
    <member kind="typedef">
      <type>Function&lt; const DomainType &amp;, RangeType &amp; &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a42fc84ca33a00bb52d033c3c80c541f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawRangeType</type>
      <name>RangeType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>aee694ec3111307a12bdec1eed399965d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawDomainType</type>
      <name>DomainType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ab05c710b26671cefdfac5a1a403aa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualFunction</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a30df51e33c5f7ace1cdc1dba02dc50ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a9b9122921a590c9152704edbc0476609</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, typename Traits::RangeType &amp;y) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VirtualFunction&lt; Domain, Range &gt;</name>
    <filename>a01761.html</filename>
    <base>Dune::Function</base>
    <member kind="typedef">
      <type>Function&lt; const Domain &amp;, Range &amp; &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a42fc84ca33a00bb52d033c3c80c541f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawRangeType</type>
      <name>RangeType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>aee694ec3111307a12bdec1eed399965d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RawDomainType</type>
      <name>DomainType</name>
      <anchorfile>a01753.html</anchorfile>
      <anchor>ab05c710b26671cefdfac5a1a403aa6aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VirtualFunction</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a30df51e33c5f7ace1cdc1dba02dc50ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a01761.html</anchorfile>
      <anchor>a9b9122921a590c9152704edbc0476609</anchor>
      <arglist>(const typename Traits::DomainType &amp;x, typename Traits::RangeType &amp;y) const=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::WritablePropertyMapTag</name>
    <filename>a02421.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dune</name>
    <filename>a00428.html</filename>
    <namespace>Dune::AlignedNumberImpl</namespace>
    <namespace>Dune::Concept</namespace>
    <namespace>Dune::DenseMatrixHelp</namespace>
    <namespace>Dune::DynamicMatrixHelp</namespace>
    <namespace>Dune::FloatCmp</namespace>
    <namespace>Dune::FMatrixHelp</namespace>
    <namespace>Dune::fvmeta</namespace>
    <namespace>Dune::Hybrid</namespace>
    <namespace>Dune::impl</namespace>
    <namespace>Dune::Indices</namespace>
    <namespace>Dune::MathImpl</namespace>
    <namespace>Dune::MathOverloads</namespace>
    <namespace>Dune::Simd</namespace>
    <namespace>Dune::SimdImpl</namespace>
    <namespace>Dune::Std</namespace>
    <class kind="class">Dune::AlignedAllocator</class>
    <class kind="class">Dune::ArrayListIterator</class>
    <class kind="class">Dune::ConstArrayListIterator</class>
    <class kind="class">Dune::ArrayList</class>
    <class kind="struct">Dune::MPITraits</class>
    <class kind="class">Dune::bigunsignedint</class>
    <class kind="struct">Dune::Min</class>
    <class kind="struct">Dune::Max</class>
    <class kind="class">Dune::BitSetVector</class>
    <class kind="class">Dune::BitSetVectorReference</class>
    <class kind="class">Dune::BitSetVectorConstReference</class>
    <class kind="struct">Dune::const_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; BitSetVectorReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; BitSetVectorConstReference&lt; block_size, Alloc &gt; &gt;</class>
    <class kind="class">Dune::AlignedBase</class>
    <class kind="struct">Dune::greater_or_equal</class>
    <class kind="struct">Dune::common_bits</class>
    <class kind="class">Dune::DebugStreamError</class>
    <class kind="class">Dune::StreamWrap</class>
    <class kind="class">Dune::DebugStreamState</class>
    <class kind="class">Dune::DebugStream</class>
    <class kind="class">Dune::DenseMatrix</class>
    <class kind="struct">Dune::FieldTraits&lt; DenseMatrix&lt; M &gt; &gt;</class>
    <class kind="class">Dune::FieldMatrix</class>
    <class kind="class">Dune::FieldVector</class>
    <class kind="struct">Dune::DenseMatrixAssigner</class>
    <class kind="class">Dune::FMatrixError</class>
    <class kind="class">Dune::DenseVector</class>
    <class kind="struct">Dune::FieldTraits&lt; DenseVector&lt; V &gt; &gt;</class>
    <class kind="class">Dune::DenseIterator</class>
    <class kind="class">Dune::DiagonalRowVectorConst</class>
    <class kind="class">Dune::DiagonalRowVector</class>
    <class kind="class">Dune::DiagonalMatrixWrapper</class>
    <class kind="class">Dune::ContainerWrapperIterator</class>
    <class kind="class">Dune::DiagonalMatrix</class>
    <class kind="struct">Dune::FieldTraits&lt; DiagonalMatrix&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::DenseMatrixAssigner&lt; DenseMatrix, DiagonalMatrix&lt; field, N &gt; &gt;</class>
    <class kind="struct">Dune::ImplementationDefined</class>
    <class kind="struct">Dune::IsVector</class>
    <class kind="struct">Dune::IsVector&lt; T, std::void_t&lt; typename T::field_type &gt; &gt;</class>
    <class kind="class">Dune::DynamicMatrix</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="class">Dune::DynamicVector</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="class">Dune::EmptySet</class>
    <class kind="class">Dune::AllSet</class>
    <class kind="class">Dune::EnumItem</class>
    <class kind="class">Dune::EnumRange</class>
    <class kind="class">Dune::NegateSet</class>
    <class kind="class">Dune::Combine</class>
    <class kind="class">Dune::Exception</class>
    <class kind="struct">Dune::ExceptionHook</class>
    <class kind="class">Dune::IOError</class>
    <class kind="class">Dune::MathError</class>
    <class kind="class">Dune::RangeError</class>
    <class kind="class">Dune::NotImplemented</class>
    <class kind="class">Dune::SystemError</class>
    <class kind="class">Dune::OutOfMemoryError</class>
    <class kind="class">Dune::InvalidStateException</class>
    <class kind="class">Dune::ParallelError</class>
    <class kind="class">Dune::FloatCmpOps</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits</class>
    <class kind="struct">Dune::FieldTraits&lt; const T &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; std::complex&lt; T &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; T[N] &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; std::vector&lt; T &gt; &gt;</class>
    <class kind="class">Dune::Function</class>
    <class kind="class">Dune::VirtualFunction</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE &gt;, SIZE &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE1 &gt;, SIZE &gt;</class>
    <class kind="struct">Dune::Gcd</class>
    <class kind="struct">Dune::const_reference</class>
    <class kind="struct">Dune::const_reference&lt; const R &gt;</class>
    <class kind="struct">Dune::const_reference&lt; R &amp; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; const R &amp; &gt;</class>
    <class kind="struct">Dune::mutable_reference</class>
    <class kind="struct">Dune::mutable_reference&lt; const R &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; R &amp; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; const R &amp; &gt;</class>
    <class kind="class">Dune::GenericIterator</class>
    <class kind="class">Dune::GMPField</class>
    <class kind="struct">Dune::IsNumber&lt; GMPField&lt; precision &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision1 &gt;, GMPField&lt; precision2 &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, GMPField&lt; precision &gt; &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; GMPField&lt; precision &gt;, T &gt;</class>
    <class kind="struct">Dune::PromotionTraits&lt; T, GMPField&lt; precision &gt; &gt;</class>
    <class kind="struct">Dune::hash</class>
    <class kind="class">Dune::Indent</class>
    <class kind="struct">Dune::Cloneable</class>
    <class kind="class">Dune::ios_base_all_saver</class>
    <class kind="class">Dune::ForwardIteratorFacade</class>
    <class kind="class">Dune::BidirectionalIteratorFacade</class>
    <class kind="class">Dune::RandomAccessIteratorFacade</class>
    <class kind="class">Dune::IteratorRange</class>
    <class kind="struct">Dune::Lcm</class>
    <class kind="class">Dune::lru</class>
    <class kind="class">Dune::MallocAllocator</class>
    <class kind="struct">Dune::StandardMathematicalConstants</class>
    <class kind="struct">Dune::MathematicalConstants</class>
    <class kind="struct">Dune::Factorial</class>
    <class kind="struct">Dune::Factorial&lt; 0 &gt;</class>
    <class kind="struct">Dune::DenseMatVecTraits</class>
    <class kind="struct">Dune::No_Comm</class>
    <class kind="class">Dune::Communication</class>
    <class kind="struct">Dune::SizeOne</class>
    <class kind="struct">Dune::VariableSize</class>
    <class kind="struct">Dune::CommPolicy</class>
    <class kind="class">Dune::BufferedCommunicator</class>
    <class kind="class">Dune::InvalidFutureException</class>
    <class kind="class">Dune::PseudoFuture</class>
    <class kind="class">Dune::Future</class>
    <class kind="class">Dune::PseudoFuture&lt; void &gt;</class>
    <class kind="class">Dune::IndexPair</class>
    <class kind="class">Dune::InvalidIndexSetState</class>
    <class kind="class">Dune::GlobalLookupIndexSet</class>
    <class kind="class">Dune::ParallelIndexSet</class>
    <class kind="struct">Dune::LocalIndexComparator</class>
    <class kind="struct">Dune::IndexSetSortFunctor</class>
    <class kind="class">Dune::IndicesSyncer</class>
    <class kind="class">Dune::InterfaceBuilder</class>
    <class kind="class">Dune::InterfaceInformation</class>
    <class kind="class">Dune::Interface</class>
    <class kind="class">Dune::LocalIndex</class>
    <class kind="class">Dune::Generic_MPI_Op</class>
    <class kind="class">Dune::Communication&lt; MPI_Comm &gt;</class>
    <class kind="struct">Dune::MPIData</class>
    <class kind="struct">Dune::MPIData&lt; void &gt;</class>
    <class kind="struct">Dune::MPIData&lt; T, std::void_t&lt; std::tuple&lt; decltype(std::declval&lt; T &gt;().data()), decltype(std::declval&lt; T &gt;().size()), typename std::decay_t&lt; T &gt;::value_type &gt; &gt; &gt;</class>
    <class kind="class">Dune::MPIFuture</class>
    <class kind="class">Dune::MPIGuardError</class>
    <class kind="class">Dune::MPIGuard</class>
    <class kind="class">Dune::FakeMPIHelper</class>
    <class kind="class">Dune::MPIHelper</class>
    <class kind="class">Dune::MPIPack</class>
    <class kind="struct">Dune::MPIData&lt; P, std::enable_if_t&lt; std::is_same&lt; std::remove_const_t&lt; P &gt;, MPIPack &gt;::value &gt; &gt;</class>
    <class kind="class">Dune::ParallelLocalIndex</class>
    <class kind="struct">Dune::LocalIndexComparator&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <class kind="class">Dune::MPITraits&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <class kind="class">Dune::MPITraits&lt; IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &gt;</class>
    <class kind="class">Dune::RemoteIndices</class>
    <class kind="class">Dune::RemoteIndex</class>
    <class kind="class">Dune::RemoteIndexListModifier</class>
    <class kind="class">Dune::CollectiveIterator</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
    <class kind="class">Dune::SelectionIterator</class>
    <class kind="class">Dune::UncachedSelection</class>
    <class kind="class">Dune::Selection</class>
    <class kind="class">Dune::VariableSizeCommunicator</class>
    <class kind="class">Dune::ParameterizedObjectFactory</class>
    <class kind="class">Dune::ParameterizedObjectFactory&lt; TypeT(Args...), KeyT &gt;</class>
    <class kind="class">Dune::ParameterTree</class>
    <class kind="class">Dune::ParameterTreeParserError</class>
    <class kind="class">Dune::HelpRequest</class>
    <class kind="class">Dune::ParameterTreeParser</class>
    <class kind="class">Dune::Pool</class>
    <class kind="class">Dune::PoolAllocator</class>
    <class kind="class">Dune::PoolAllocator&lt; void, s &gt;</class>
    <class kind="struct">Dune::StaticPower</class>
    <class kind="struct">Dune::Power</class>
    <class kind="class">Dune::FMatrixPrecision</class>
    <class kind="struct">Dune::PromotionTraits</class>
    <class kind="struct">Dune::PromotionTraits&lt; T1, T1 &gt;</class>
    <class kind="struct">Dune::PropertyMapTraits</class>
    <class kind="struct">Dune::ReadablePropertyMapTag</class>
    <class kind="struct">Dune::WritablePropertyMapTag</class>
    <class kind="struct">Dune::ReadWritePropertyMapTag</class>
    <class kind="struct">Dune::LvaluePropertyMapTag</class>
    <class kind="struct">Dune::PropertyMapTraits&lt; T * &gt;</class>
    <class kind="struct">Dune::PropertyMapTraits&lt; const T * &gt;</class>
    <class kind="struct">Dune::RAPropertyMapHelper</class>
    <class kind="class">Dune::IteratorPropertyMap</class>
    <class kind="class">Dune::AssociativePropertyMap</class>
    <class kind="class">Dune::ConstAssociativePropertyMap</class>
    <class kind="struct">Dune::IdentityMap</class>
    <class kind="struct">Dune::PropertyMapTypeSelector</class>
    <class kind="class">Dune::IntegralRange</class>
    <class kind="class">Dune::StaticIntegralRange</class>
    <class kind="struct">Dune::ValueTransformationTag</class>
    <class kind="struct">Dune::IteratorTransformationTag</class>
    <class kind="class">Dune::TransformedRangeView</class>
    <class kind="class">Dune::ReservedVector</class>
    <class kind="struct">Dune::null_deleter</class>
    <class kind="class">Dune::LoopSIMD</class>
    <class kind="struct">Dune::IsNumber&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::IsNumber&lt; Vc::SimdArray&lt; T, N &gt; &gt;</class>
    <class kind="struct">Dune::IsNumber&lt; Vc::Vector&lt; T, Abi &gt; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; Simd::VcImpl::Proxy&lt; V &gt; &gt;</class>
    <class kind="struct">Dune::SimdScalarTypeTraits</class>
    <class kind="struct">Dune::SimdScalarTypeTraits&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::SimdIndexTypeTraits</class>
    <class kind="struct">Dune::SimdMaskTypeTraits</class>
    <class kind="class">Dune::Singleton</class>
    <class kind="class">Dune::SLListIterator</class>
    <class kind="class">Dune::SLListConstIterator</class>
    <class kind="class">Dune::SLListModifyIterator</class>
    <class kind="class">Dune::SLList</class>
    <class kind="class">Dune::Timer</class>
    <class kind="struct">Dune::TupleAccessTraits</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T * &gt;</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::NullPointerInitialiser</class>
    <class kind="struct">Dune::NullPointerInitialiser&lt; std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="struct">Dune::ForEachType</class>
    <class kind="struct">Dune::ForEachType&lt; TE, std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="class">Dune::TransformTupleFunctor</class>
    <class kind="struct">Dune::AddRefTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AtType</class>
    <class kind="struct">Dune::At</class>
    <class kind="struct">Dune::PointerPairDeletor</class>
    <class kind="class">Dune::FirstPredicateIndex</class>
    <class kind="struct">Dune::IsType</class>
    <class kind="struct">Dune::FirstTypeIndex</class>
    <class kind="struct">Dune::PushBackTuple</class>
    <class kind="struct">Dune::PushBackTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::PushFrontTuple</class>
    <class kind="struct">Dune::PushFrontTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::ReduceTuple</class>
    <class kind="struct">Dune::ReduceTuple&lt; F, Tuple, Seed, 0 &gt;</class>
    <class kind="struct">Dune::JoinTuples</class>
    <class kind="struct">Dune::FlattenTuple</class>
    <class kind="class">Dune::TupleVector</class>
    <class kind="struct">Dune::MetaType</class>
    <class kind="struct">Dune::IsTypeList</class>
    <class kind="struct">Dune::IsTypeList&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::IsEmptyTypeList</class>
    <class kind="struct">Dune::TypeListSize</class>
    <class kind="struct">Dune::TypeListSize&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::TypeListElement</class>
    <class kind="struct">Dune::TypeListElement&lt; i, TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::Empty</class>
    <class kind="struct">Dune::IsInteroperable</class>
    <class kind="struct">Dune::EnableIfInterOperable</class>
    <class kind="struct">Dune::AlwaysFalse</class>
    <class kind="struct">Dune::AlwaysTrue</class>
    <class kind="struct">Dune::IsCallable</class>
    <class kind="struct">Dune::IsCallable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::IsNumber</class>
    <class kind="struct">Dune::HasNaN</class>
    <class kind="struct">Dune::IsIndexable</class>
    <class kind="struct">Dune::IsIterable</class>
    <class kind="struct">Dune::IsTuple</class>
    <class kind="struct">Dune::IsTupleOrDerived</class>
    <class kind="struct">Dune::IsIntegralConstant</class>
    <class kind="struct">Dune::SizeOf</class>
    <class kind="struct">Dune::IntegerSequenceEntry</class>
    <class kind="struct">Dune::AutonomousValueType</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp;&amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; const T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; std::vector&lt; bool &gt;::reference &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile const T &gt;</class>
    <class kind="struct">Dune::PriorityTag</class>
    <class kind="struct">Dune::PriorityTag&lt; 0 &gt;</class>
    <member kind="typedef">
      <type>std::function&lt; void(const char *, std::size_t, const void *)&gt;</type>
      <name>ViolatedAlignmentHandler</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aeeddbd17746ee9ac74ce286741916e4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>DebugLevel</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga7b78ef57d1b77933ab277ebe66c79d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; std::size_t, i &gt;</type>
      <name>index_constant</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gacf764509e6dae37477f5ad09b5ca3467</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Communication&lt; T &gt;</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a51c6057d41509cc616fb60f483d7d6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SimdScalarTypeTraits&lt; T &gt;::type</type>
      <name>SimdScalar</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7cab87dc8a3eff4191a99a1084d7b28e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SimdIndexTypeTraits&lt; V &gt;::type</type>
      <name>SimdIndex</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a3c668a396cf5cd88bb7da3225787959a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename SimdMaskTypeTraits&lt; V &gt;::type</type>
      <name>SimdMask</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a846fa7e0d4cf9e70b148592224eb360f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERY_VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga08d48df3a7a0e3bd9c0425aba8004488</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga65d14f278ea400db87ffb6a4bc7ed7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; INFO_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DInfoType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab41f4590c73d6408c89475e28bf18a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; WARN_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DWarnType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20379ab9c4472509d420e98659683fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; GRAVE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DGraveType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga70e0eedd6c7f613d6e9608fabb4d240d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; 1 &gt;</type>
      <name>DErrType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga768c0b513889d713fd0017ef7ae35056</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>ToUniquePtr</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9bbde85cc655ad122680398fef8fa5cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; MetaType&lt; T &gt;... &gt;</type>
      <name>TypeList</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga7e18d05cb5d1e95f0e7c7409ffe9689f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TypeListElement&lt; i, T &gt;::type</type>
      <name>TypeListEntry_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae06816da928c17285e09ccb74357648b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UnpackTypeList&lt; Target, TL &gt;::type</type>
      <name>UnpackTypeList_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a05190548d101a946d1cab292cff5fdb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UniqueTypesHelper&lt; Target, TypeList&lt; T... &gt; &gt;::type</type>
      <name>UniqueTypes_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7f31a234ebc9fa02660570324eabde1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::UniqueTypesHelper&lt; TypeList, NonUniqueTypeList &gt;::type</type>
      <name>UniqueTypeList_t</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab8e5f27ee5ff462d88e7eb109f143263</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::voider&lt; Types... &gt;::type</type>
      <name>void_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6a3de1d2dbd47536c4b007d3a3b108a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::field_type</type>
      <name>field_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaadd3a3e69d0220b41bb40ebc442d79ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::real_type</type>
      <name>real_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga48aa0bb0268c390d251495eabdac4ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename AutonomousValueType&lt; T &gt;::type</type>
      <name>AutonomousValue</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga64c2d9377550162293c4fabd163f457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; not Impl::disableCopyMoveHelper&lt; This, T... &gt;::value, int &gt;</type>
      <name>disableCopyMove</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga5cf0dfc6fe8998b21503cd81c6681afc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implementationDefined</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga587081ae4568cb94ed43b5dbaba7870ea7de84f476fd1d9f55ac5e2c25f252c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParallelIndexSetState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1b1dd66b80964351e68f44bddb32593e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUND</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea30f779eddf23499c322b692257ae7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESIZE</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea2fbc0ce9b92442e69a405a452f2ef416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalIndexState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4f24bf6f596bf963429e084ecf3a0835</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALID</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835a10e7469c306a6a1cc9c8c89ce65b09f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETED</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835ab8c498280a429843d8eaa93ddfb8fb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga354fc36a88498193df8a295e678de95a</anchor>
      <arglist>(std::ostream &amp;s, const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga4733af4e0faa3a06ea6cd1e030cadfe0</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf1e188eaa5ea83115d8b7137ce9252a5</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga6e7bfd8374b58f7895cb9f7d67fd0ead</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf235b6dd71516eafdd566d673d076339</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga8e48a8a50b777236555abd9ca13528c3</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga621131a6364d2636e0c66707f8b3d8df</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf42863ce01d98553d1ceb962b447cec0</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae09acd40217cc791030af3a38f18a66a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga0d5daa1e3e2d36c2b186ead3b1152d0a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gadf2313e3cdc41ab5d6051818637b6e3a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a33ac30656648b528235c913852c28ac7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>className</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1d7665500285ebc74f89523cb8cf4fae</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>models</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ga91a4108f1ea3f3644e343659a4e25904</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const T1</type>
      <name>cond</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa7df1a64bf1697e91502bce842535577</anchor>
      <arglist>(bool b, const T1 &amp;v1, const T2 &amp;v2)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>defaultViolatedAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a9f0c3f5a28263a8dd6cb81d9cfd8c929</anchor>
      <arglist>(const char *className, std::size_t expectedAlignment, const void *address)</arglist>
    </member>
    <member kind="function">
      <type>ViolatedAlignmentHandler &amp;</type>
      <name>violatedAlignmentHandler</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abeb716c21bff1ff9559bb62074d90e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>violatedAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0e6c32c539889f324d46417dca3dfebe</anchor>
      <arglist>(const char *className, std::size_t expectedAlignment, const void *address)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAligned</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abf9e4364af213c448afdf072eea1b913</anchor>
      <arglist>(const void *p, std::size_t align)</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber&lt; T, align &gt;</type>
      <name>aligned</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a154ffbe53dd8b81b0937ec08481e6b09</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>AlignedNumber&lt; T, align &gt;</type>
      <name>cond</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7e7b894879f459e9da9bfa1d8af0663a</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;b, const AlignedNumber&lt; T, align &gt; &amp;v1, const AlignedNumber&lt; T, align &gt; &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>max_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae23cfd2094b38ad5889b56de92d1f019</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>min_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af97af7156507b5bbb3433e3f7e5a15a7</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1ed24891986fbb8fea5cfee4c23a7173</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a231fdc968bf4b24f6c52031edd1fca96</anchor>
      <arglist>(const AlignedNumber&lt; bool, align &gt; &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga46978987490dbf404514b63b984be43d</anchor>
      <arglist>(std::ostream &amp;s, const DenseMatrix&lt; MAT &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dot</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga06a55ef13638a2a56a42473b812498dd</anchor>
      <arglist>(const A &amp;a, const B &amp;b) -&gt; typename std::enable_if&lt;!IsVector&lt; A &gt;::value &amp;&amp;!std::is_same&lt; typename FieldTraits&lt; A &gt;::field_type, typename FieldTraits&lt; A &gt;::real_type &gt; ::value, decltype(conj(a) *b)&gt;::type</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dotT</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa2d28f67ec2d74f14ec3ce3f9c27c221</anchor>
      <arglist>(const A &amp;a, const B &amp;b) -&gt; decltype(a *b)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga853a8a6088e8bc36612e0d1a14f1d0b4</anchor>
      <arglist>(std::ostream &amp;os, const EnumItem&lt; TA, i &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1e9ea5bea2c22bdd2808a54ec71458a1</anchor>
      <arglist>(std::ostream &amp;os, const EnumRange&lt; TA, from, to &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Combine&lt; TI1, TI2, typename TI1::Type &gt;</type>
      <name>combine</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga698bedb0f72197e6d28d9c77068d7e05</anchor>
      <arglist>([[maybe_unused]] const TI1 &amp;set1, [[maybe_unused]] const TI2 &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga63adbddbe290df558538dc462fd43711</anchor>
      <arglist>(std::ostream &amp;os, const Combine&lt; TI1, TI2, T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gae09dcfbbe07912030b1413ad5ee706c6</anchor>
      <arglist>(std::ostream &amp;stream, const Exception &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; T, n &gt;</type>
      <name>filledArray</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf3b0a934939d7a49b8ec4e3e28c21bc5</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Impl::LambdaVirtualFunction&lt; Domain, Range, std::decay_t&lt; F &gt; &gt;</type>
      <name>makeVirtualFunction</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d326289f3fb37ecc5f30dd0cab45bb6</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_combine</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa4f0199c109bde1698fb5279a414d01a</anchor>
      <arglist>(std::size_t &amp;seed, const T &amp;arg)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>hash_range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a6e45658b7c63f546c3c0897608d9d23d</anchor>
      <arglist>(It first, It last)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hash_range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab09a051cb1381c71f6c91032cd2ba754</anchor>
      <arglist>(std::size_t &amp;seed, It first, It last)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac282bd5d47ea4d2daf9523fb5de848a9</anchor>
      <arglist>(std::ostream &amp;s, const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>unpackIntegerSequence</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0959a949c8385a1b41669380e439d5d8</anchor>
      <arglist>(F &amp;&amp;f, std::integer_sequence&lt; I, i... &gt; sequence)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gad89f7fc265d9bd63c5b5a8da6748d8af</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga1369bc3ae1876892c6567eff7987620f</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; T2, T1 &gt;::value, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga0a147b2ec114b90e57366216029b40bc</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; T1, T2 &gt;::value &amp;&amp;!std::is_convertible&lt; T2, T1 &gt;::value, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ga0a147b2ec114b90e57366216029b40bc</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gace8cd0fee28b999a64ce7a75ca582cae</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga639a6e346454c1d6635f21ea15af4032</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga78d64b70022a4945cb797908fb3f6d65</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gaa5760aff14000ebe9042e042b31db949</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadf0c29cb2d498e30122d48b15db41f7f</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga4cd2214e489cbe140c0394a24f7d77fa</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadd0f438316b237180be4c98e915da261</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, D &gt;::type</type>
      <name>operator-</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga567e9701961fedd3a613c9f6d3b68b5d</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0b225faa806a6ba0744fd93ce17b447a</anchor>
      <arglist>(const MallocAllocator&lt; T &gt; &amp;, const MallocAllocator&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a336418ea10c30e25ece655d63bdf3d84</anchor>
      <arglist>(const MallocAllocator&lt; T &gt; &amp;, const MallocAllocator&lt; T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr Mantissa</type>
      <name>power</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a43fb9e50cbb18051ddf5497465ccf734</anchor>
      <arglist>(Mantissa m, Exponent p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static T</type>
      <name>factorial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa4eb5cbca2609d132ac6866b4960247b</anchor>
      <arglist>(const T &amp;n) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>factorial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad4be70f69e2f8bbda33075a643a23d6e</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static T</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae548cdfab3c07fd32610c7b4da8f0eb9</anchor>
      <arglist>(const T &amp;n, const T &amp;k) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a03852ec1241ecb93d746dc64bc0e41cc</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;, std::integral_constant&lt; T, k &gt;) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>constexpr static auto</type>
      <name>binomial</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1169603932af226513ef054667a1657d</anchor>
      <arglist>(std::integral_constant&lt; T, n &gt;, std::integral_constant&lt; T, n &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>conjugateComplex</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae6ef69fa70938d4aa93d8e30d3813c13</anchor>
      <arglist>(const K &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>sign</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac1712a3bb38c829a2c339355cdb28133</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>overload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gae007ebc02578de3fe994b28e4378fd80</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>orderedOverload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga85390a9ae268b1ed2be79b8637e8becd</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aee0776cda12fa2fc183e2796bcc23743</anchor>
      <arglist>(const No_Comm &amp;, const No_Comm &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a02c039e6b551a3771cc8c60e84e9bcdc</anchor>
      <arglist>(const No_Comm &amp;, const No_Comm &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7fcd5b444a9e60cfdc21f7d0cfd22250</anchor>
      <arglist>(std::ostream &amp;os, const IndexPair&lt; TG, TL &gt; &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7795b290702a59497007270c46e2b8c6</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3a50aa86c8ff96eee7ef68200531326d</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0d9a1c3873a538aa66c22b03b406db87</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0bc63043e58d66643b64cbd6b08dfb82</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6cdf9614911aa5cd70ed58663de013c2</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5c5245f4fd0352faad94ca8e9c1f6c6f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga239e646b27f7f35ac944aebb59380913</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadf0b39a244a69d9e7f71811f960a5728</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga912a9eba5f4d34e7e50ef4335b7ba108</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab4b337bd4e613e88381306db889e811f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad6d5923b72e3214d9f20349b722ea874</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7d670d228f6635f587d21ef117951fd9</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac377e14b5944471054bdb0012008393b</anchor>
      <arglist>(std::ostream &amp;os, const ParallelIndexSet&lt; TG, TL, N &gt; &amp;indexSet)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf61fa30bf15e87a0f910b9068f775067</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae5b7bd4e69ee01360e666f12913c1459</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i1, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga058ac87cbdd5c6c4bf3166e8f55efa30</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga94296b1fafb04cd392611a43968df582</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga300a4a465d5bb251de3953c682d314cb</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga114537d071365593e8ec0ac11de6ac31</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeGlobalIndicesOfRemoteIndices</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac603bb313a217401041e4afc6fe4fa3a</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, const RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33d784101a8baf32ce462c484a90674c</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices, const T &amp;indexSet)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae1640f7fd69aac13c49a1750bdfa8ac5</anchor>
      <arglist>(std::ostream &amp;os, const Interface &amp;interface)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a59a2fa61f1387001cea29f6934ff2316</anchor>
      <arglist>(std::plus, MPI_SUM)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8b1b0f5e50429120ba7fc972b022c620</anchor>
      <arglist>(std::multiplies, MPI_PROD)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a428c0ab2a3d2fd8f57aaf06a51bcc558</anchor>
      <arglist>(Min, MPI_MIN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ComposeMPIOp</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac6814315ac90b4c03e394688a30c63d9</anchor>
      <arglist>(Max, MPI_MAX)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>getMPIData</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a60e5c2863bb763524cbc65eaea515adb</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6f6a56e79b01b4bd4385c81502559be3</anchor>
      <arglist>(std::ostream &amp;os, const ParallelLocalIndex&lt; T &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3f656ae09bca24998c26b42304a9d1b2</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga773d38fd187016eb6fef134776f7d761</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadff1176482f8b02fb98cc4e08695a2ce</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndex&lt; T1, T2 &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4298476f0be2dd2f85d9fb856ff228a1</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndices&lt; T, A &gt; &amp;indices)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad5fcca471c1f5c5909f0b8fe316e6dcf</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndex&lt; TG, TA &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>concatPaths</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaf35055b90526b3266f36956a4e361f50</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>processPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1b4c87bd874abdd0db9f6dc51d9588b0</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathIndicatesDirectory</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1d1669ed8677a07b152b1de21640b3f9</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaa9908e9eb153f3d37d7c7063ffc9b6a2</anchor>
      <arglist>(const std::string &amp;p, bool isDirectory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gae07624c824232706454d5d6d1d1cb5c8</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>relativePath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gab2ce1b1de5e4a5c74802d615b4027a7b</anchor>
      <arglist>(const std::string &amp;newbase, const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga67f486062c5bfb92aa3365373d491836</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gaf0e4942c0493dceaf371ba9f0ec29ab6</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab6358d63f2012e81c5066d6c6d9cb94a</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga2c515ca850107e6807b75f4d90ca4dcc</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab00b326f648ee860460ddeec2f4b6d3b</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gace25a69f0bcd5ba1fffd567af1d9a9cf</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga5bc475e78eb7d029ee0782eab49d5938</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6795aefd733bd618db889c6f15f1552f</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>get</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a422c8e50ed4f40b534187b8fb83fbf3d</anchor>
      <arglist>(const RAPropertyMapHelper&lt; Reference, PropertyMap &gt; &amp;pmap, const Key &amp;key)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2dc4d3a226776723750b848ae303a11a</anchor>
      <arglist>(const RAPropertyMapHelper&lt; Reference, PropertyMap &gt; &amp;pmap, const Key &amp;key, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>pointer_or_proxy_holder</type>
      <name>handle_proxy_member_access</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab204e4c1df410966214b242af99406a1</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>T::value_type</type>
      <name>max_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaf05bafe739a71f1e7f30780dbae4fa05</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>max_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gaf05bafe739a71f1e7f30780dbae4fa05</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T::value_type</type>
      <name>min_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa56de4535eff55ba6d5e418fd26b686c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>min_value</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gaa56de4535eff55ba6d5e418fd26b686c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga19dd21ff930466597df962ae58d58c57</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaaca8a2450469eb41c338d8f51231fc34</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga3f11c34177907a5c592990a5f4840e92</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga1782fbfe7b40a75fecb933f720357e54</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga20c2d5d24fba2015d933669de38606f9</anchor>
      <arglist>(T &amp;&amp;from, U &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gab64fac9d63a7009ccfa29af11ec5fc1c</anchor>
      <arglist>(T &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::underlying_type_t&lt; std::decay_t&lt; T &gt; &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>gab64fac9d63a7009ccfa29af11ec5fc1c</anchor>
      <arglist>(T &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticIntegralRange&lt; T, to &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gadd0ae414ee372842796c06cee030a78b</anchor>
      <arglist>(std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gae2dd8cb1fce8767381e33a5b834cf55d</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>iteratorTransformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaccf70716194b093e0d21e6da93c108f8</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparseRange</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa75d4e74da1410405a33a5a62b5710e7</anchor>
      <arglist>(Range &amp;&amp;range)</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; T &gt;</type>
      <name>stackobject_to_shared_ptr</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0ee36ec1f6416afa0487a8a224376e34</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>wrap_or_move</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abc8b6bf5f8910e34829136293000c29e</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>wrap_or_move</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab3669cc3fbff695e5ae793ab49f1ca8a</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a87b977cae5e0e694b4b108bc1cab9434</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa97415d63ec08e63ea87832efe86ddb4</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BINARY_OP *</type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abed8fafa25b2552e5a1b73ab0b48c87d</anchor>
      <arglist>(/);DUNE_SIMD_LOOP_BINARY_OP(%</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BINARY_OP &amp;</type>
      <name>DUNE_SIMD_LOOP_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad9fb3b7e66eca6930e91efcbee98b201</anchor>
      <arglist>(|);DUNE_SIMD_LOOP_BINARY_OP(^</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BITSHIFT_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ab1786e12e4c3efe8a6117ddd99a8724a</anchor>
      <arglist>(&lt;&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_BITSHIFT_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a250563e257d03a8336c3370f5caeaf84</anchor>
      <arglist>(&gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aae72f618cfe280b17a988b83395f8927</anchor>
      <arglist>(&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a86b3da3ac3b884cf28ba5dc3dfee5652</anchor>
      <arglist>(&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a16bec43001a47bb4b3d6a78aec88476b</anchor>
      <arglist>(&gt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_COMPARISON_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aafcd80f1669dd6eee03a6ff6bbf85150</anchor>
      <arglist>(!=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_SIMD_LOOP_BOOLEAN_OP &amp;&amp;</type>
      <name>DUNE_SIMD_LOOP_BOOLEAN_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a36c74f8a0a2706073686260f2dc63012</anchor>
      <arglist>(||);template&lt; class T, std::size_t S, std::size_t A &gt; std::ostream &amp;operator&lt;&lt;(std::ostream &amp;os, const LoopSIMD&lt; T, S, A &gt; &amp;v</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa6e5e1c5f79b6254d378e95cfd322a65</anchor>
      <arglist>(cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a79ab0dba2a12a0bc0a7944f9ae9f1f29</anchor>
      <arglist>(sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae84860183d3c2955e5faa0d0cc32fb4c</anchor>
      <arglist>(tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa360ad475ef9a72d1d29c5dabcc3bf73</anchor>
      <arglist>(acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a09f392d978d7b88cf99fb06019e7bd40</anchor>
      <arglist>(asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2d537b66b859eb038d3820337c18fce9</anchor>
      <arglist>(atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a680c29e54698d49501b3b2de4ce2ef47</anchor>
      <arglist>(cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a395094c113cdd8c2121111872085a735</anchor>
      <arglist>(sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a98e1c8435b5fa7a7b196806e25a1425f</anchor>
      <arglist>(tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa08b81d847b50e9c9c4cee7c7d1f29cf</anchor>
      <arglist>(acosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>acbb4e14d3112e1de6b78b1210a991865</anchor>
      <arglist>(asinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>adfbdf70bffe090b2531d64749b2c91c4</anchor>
      <arglist>(atanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abe0541c3cddfa4781331ac0d05887d48</anchor>
      <arglist>(exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a0ab0990a076434714f940464ebce3fe9</anchor>
      <arglist>(log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af920243bd9e1e124679ead131489016e</anchor>
      <arglist>(log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a4544c2a970c27e9ebb3cd7e2ea5ddc7b</anchor>
      <arglist>(exp2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a7634e73ae107cad38d3c1c30d2be80bd</anchor>
      <arglist>(expm1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a17d65fea3f35e081fc433ef3366cba7b</anchor>
      <arglist>(ilogb, int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a5a67dfa432cacbe104d169f89ea161f8</anchor>
      <arglist>(log1p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a5ca741e8dd2d8cefaf43410eff2f1e28</anchor>
      <arglist>(log2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a83810e6d9502d807c8bd6500e398df7c</anchor>
      <arglist>(logb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a160d3e17ed369ef66e6a5616b9d0f0ed</anchor>
      <arglist>(sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ade26d1af9df16776724aa09f347d8856</anchor>
      <arglist>(cbrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ad5569c638beb6711c21a041ef6441bc7</anchor>
      <arglist>(erf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a01ef7058640643efbe18ac57cc6eaf48</anchor>
      <arglist>(erfc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac9e21698991978ed28373a29ebaa7676</anchor>
      <arglist>(tgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a185f315ad3d194156672fdd4f299197d</anchor>
      <arglist>(lgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a26dcbb76cee8f0300798c309959d86ee</anchor>
      <arglist>(ceil)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a762a6b51f18dadfb4eda6047cf754c64</anchor>
      <arglist>(floor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a2109020367318862d81752b29c3af75d</anchor>
      <arglist>(trunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a38807b16fbd42153aea86c4ccdd6bb91</anchor>
      <arglist>(round)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a33060ecf7417568c97b04111620a1e28</anchor>
      <arglist>(lround, long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1749c45138975ab7d1e9a8f426b8811c</anchor>
      <arglist>(llround, long long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>abc68537e003af1c6cc7bf154566008b0</anchor>
      <arglist>(rint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a4a50ac60761fb189996f0c6455c9deab</anchor>
      <arglist>(lrint, long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP_WITH_RETURN</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>adfa38b41506a8e473669feddb7d1db8c</anchor>
      <arglist>(llrint, long long)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a10471153b4d96fc5e79f3b771b314ce2</anchor>
      <arglist>(nearbyint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a577485241fdec0624801d8463b5987ca</anchor>
      <arglist>(fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_CMATH_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>acf083bd80799339ad4b7bc26009d1760</anchor>
      <arglist>(abs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ac5157b5aa1692d5a700cde7d8285ea99</anchor>
      <arglist>(real)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_UNARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a97b017f376d4eb1da79440f824f7ee55</anchor>
      <arglist>(imag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a1853753d5f04e6743b59ef878437e2e1</anchor>
      <arglist>(max)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_SIMD_LOOP_STD_BINARY_OP</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8461f4eb3f7d2309ba49e96ad8df6305</anchor>
      <arglist>(min)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>afc2c37fe2704917536f5263272d0a7e2</anchor>
      <arglist>(const T &amp;)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lane</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a87be73bb4b219361645afcce2eb5b7a4</anchor>
      <arglist>(std::size_t l, const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>lane</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>af7ebdb04638aaaa3011903e9cd31444d</anchor>
      <arglist>(std::size_t l, T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a90c073df341c13a4da1c1522c60af0c3</anchor>
      <arglist>(T &amp;dst, const T &amp;src, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a8cc9a46e5ec32e3b68c3071cf1a25361</anchor>
      <arglist>(T &amp;v1, T &amp;v2, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga572fa4d72fb27c6134aa355abc083969</anchor>
      <arglist>(std::ostream &amp;os, const SLList&lt; T, A &gt; &amp;sllist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>doAssertCallOnce</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>aa76832a917330622cdf531c2e6375f4c</anchor>
      <arglist>(const char *file, int line, const char *function)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assertCallOnce</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a3b55a8ff91fc039845da40a86486a007</anchor>
      <arglist>(const char *file=nullptr, int line=-1, const char *function=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafda8471a933991be73f03e0d349c1bf1</anchor>
      <arglist>(Stream &amp;stream, const std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga32f86b48dbe3ad88dfcb32ba01dcc4a2</anchor>
      <arglist>(Stream &amp;stream, std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga540c7a094361004a08fdbd9c95063822</anchor>
      <arglist>(Stream &amp;stream, const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasPrefix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gaf31028edab397ce01e0192a2823488f7</anchor>
      <arglist>(const C &amp;c, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSuffix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>ga560ea1a14403e04148126a2e9396dea2</anchor>
      <arglist>(const C &amp;c, const char *suffix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>formatString</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gab825672ce0273462cb092bba70f39d0b</anchor>
      <arglist>(const std::string &amp;s, const T &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; T &gt;</type>
      <name>makeToUnique</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ade7db16fea4d4d85c90115bf94e4d7f5</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transpose</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a413e66bc54b93298e15afc7af231e924</anchor>
      <arglist>(const Matrix &amp;matrix)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>applyPartial</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaeeffbe0f382283c9a2314a3947e54be9</anchor>
      <arglist>(F &amp;&amp;f, ArgTuple &amp;&amp;args, std::integer_sequence&lt; I, i... &gt;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>genericTransformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaee981bf99011a9bc2dd496a7d486e4ab</anchor>
      <arglist>(Tuple &amp;&amp;t, Functor &amp;&amp;f) -&gt; decltype(genericTransformTupleBackend(t, f))</arglist>
    </member>
    <member kind="function">
      <type>TransformTupleFunctor&lt; TE, Args... &gt;</type>
      <name>makeTransformTupleFunctor</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gab09a0e6719518183a81d60695510186a</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga24fcc49c0d83971073f4e0bd5e96748b</anchor>
      <arglist>(Tuple &amp;&amp;orig, Args &amp;&amp;... args) -&gt; decltype(genericTransformTuple(orig, makeTransformTupleFunctor&lt; TypeEvaluator &gt;(args...)))</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>makeTupleVector</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>ae982edb333af3a1f24fe324cc593be0d</anchor>
      <arglist>(T &amp;&amp;... t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>uniqueTypeList</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a595be06b36830646a9a348d33b7c51c1</anchor>
      <arglist>(TypeList&lt; T... &gt; list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integerSequenceEntry</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga0fe355ad7447f0f4bc8ae0b6a39f6318</anchor>
      <arglist>(std::integer_sequence&lt; T, t... &gt;, std::integral_constant&lt; std::size_t, index &gt; i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AutonomousValue&lt; T &gt;</type>
      <name>autoCopy</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab256c9245e4037f7f42aa453e00fd97a</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>debugAlignment</name>
      <anchorfile>a00428.html</anchorfile>
      <anchor>a6560bc030b518cf2da62724367f6ccdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StaticIntegralRange&lt; T, to, from &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga9749b12765838700df3504bcae783e35</anchor>
      <arglist>(std::integral_constant&lt; T, from &gt;, std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
    <member kind="variable">
      <type>DVVerbType</type>
      <name>dvverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20bcb085658a3b88393e47a1d36d667c</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DVerbType</type>
      <name>dverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab8900dadc584357856d4f6cc06324cea</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DInfoType</type>
      <name>dinfo</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab5d2fce8ed49f95067d9b5b54d6f5def</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable">
      <type>DWarnType</type>
      <name>dwarn</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4bff1feeab1e96f08aca7796cc69b4ea</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>DGraveType</type>
      <name>dgrave</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga765267750e6b2718fa718ab5f9fa1ed9</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>DErrType</type>
      <name>derr</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gacaa61db1e034d693335d33d3919ba9ca</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>MINIMAL_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga2c074d4df6d5fa8fbe8b4e9d44b35df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERY_VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga490cf91178ed464c3eff5871b4b03c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gabdcf3b4c1aefae00afd3ecaf84f755bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>INFO_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaabd88387e7eb826323b9f7d3a53a283e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>WARN_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaed2aba7a7e55b026716d5027406566a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>GRAVE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4fc828eb9bb6c6b6143034b9211d2b72</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::AlignedNumberImpl</name>
    <filename>a00431.html</filename>
    <class kind="class">Dune::AlignedNumberImpl::AlignedNumber</class>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a369805c961075a51b0298fbff650155f</anchor>
      <arglist>(+)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af9ad98aaa0d1920b38f0769ebb275bed</anchor>
      <arglist>(-)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP *</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a5df4e23ee85004987be0dee2b60e0695</anchor>
      <arglist>(/);DUNE_BINARY_OP(%</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP^</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ae6fc20617f688d76333e634bace7592c</anchor>
      <arglist>(&amp;);DUNE_BINARY_OP(|</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a438743c199b67aeaf239115b8ba8a9ff</anchor>
      <arglist>(&lt;&lt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a451ebcb71a523296e6d5e0cab6697491</anchor>
      <arglist>(&gt;&gt;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afe118c63f3b7cbc716481981479f7c9a</anchor>
      <arglist>(==)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a8c7e5ab7757d7dc4759523b3b26db767</anchor>
      <arglist>(!=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a75884149cef4b2c7f41a1abcc87326d4</anchor>
      <arglist>(&lt;=)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a42befb28573540774f668c9ba1b7218b</anchor>
      <arglist>(&gt;=)</arglist>
    </member>
    <member kind="function">
      <type>DUNE_BINARY_OP &amp;&amp;</type>
      <name>DUNE_BINARY_OP</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a7aa4346426caa250dbdfa8b9eb458378</anchor>
      <arglist>(||);#define DUNE_UNARY_FUNC(name) DUNE_UNARY_FUNC(abs</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a1da1a09be9ff64ea82a49df01150531e</anchor>
      <arglist>(acos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9b65f15a860640a778c81158faf7b9dd</anchor>
      <arglist>(acosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a65f3b35ee461a2870128fce21644c843</anchor>
      <arglist>(asin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a64efa6ef3f5b0ca99d2713c820828a19</anchor>
      <arglist>(asinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac239abd3f67dd027a9aa5d0b5ab9b504</anchor>
      <arglist>(atan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ad756216412d0c460f4fbb97007774f12</anchor>
      <arglist>(atanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aa3e24758cdab3d0e22c008fe0266c46a</anchor>
      <arglist>(cbrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aaa830b4f4ddc9f6aeef73b2da5af9ea3</anchor>
      <arglist>(ceil)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6bd011b16d560ad67151615213e40f42</anchor>
      <arglist>(cos)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a78a73863744ce088860eb0468ecb1f35</anchor>
      <arglist>(cosh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>acb8846b7a8f37003560323643a86ee9a</anchor>
      <arglist>(erf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a177e638f500c324cd3bbff3f4e47ba56</anchor>
      <arglist>(erfc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6bf158e4f02c6072c4a1fff65a0909b9</anchor>
      <arglist>(exp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a968f1fe780d60b24027490136bf4693b</anchor>
      <arglist>(exp2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afe2c96ecc7520f39be8a5a127130d618</anchor>
      <arglist>(expm1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aac4645a74a429726f37d145c1ce04317</anchor>
      <arglist>(fabs)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>abe15ce11a76f0587d4fad75b6c20e856</anchor>
      <arglist>(floor)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a7326b43be9d90c15632bfed71991e6bd</anchor>
      <arglist>(ilogb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aef8d40e2048a19503fd1963493d65f52</anchor>
      <arglist>(lgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a2747a77d801bde7a286aca367e179885</anchor>
      <arglist>(llrint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a2177eaf73e463d62ae28e089ab2dbf0c</anchor>
      <arglist>(llround)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac8ad46a782c1d0d61a35aaaa760b93e4</anchor>
      <arglist>(log)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a45627df0086e0935eb55a8a71f9c7b53</anchor>
      <arglist>(log10)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ab1166c7e0e48252490e143a01f66b9f0</anchor>
      <arglist>(log1p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac484afd7cc106e83335d221f8550a728</anchor>
      <arglist>(log2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a0211d4cdbc91c5ead836cbe016201b69</anchor>
      <arglist>(logb)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>afbf91830816db942689be29b598bc831</anchor>
      <arglist>(lrint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a11784b1d00eb403de0bc0f1d8e4a2641</anchor>
      <arglist>(lround)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a263563632b1eadb36538534debe77cff</anchor>
      <arglist>(nearbyint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a20736e64d41fe10fddfdc73e6afb7e90</anchor>
      <arglist>(rint)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a91236c05dc4596eb2e8a0c22eeb6ea38</anchor>
      <arglist>(round)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a917f492a75149b6f644fa4044785ab07</anchor>
      <arglist>(sin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a4887317b830e9d47dae969958ecf84c1</anchor>
      <arglist>(sinh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aa590ed125d67b3296c40ec5e1cf7c9c3</anchor>
      <arglist>(sqrt)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>af886641eb2068f6f890440728a1eedd3</anchor>
      <arglist>(tan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9cf72cf5fe1887cf2ddda3267cb94f65</anchor>
      <arglist>(tanh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6ae9b816b587daebb49f4be30d443d2b</anchor>
      <arglist>(tgamma)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>abe4fcac7d6e51e6989036e92e341b518</anchor>
      <arglist>(trunc)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a52695be60038e954feadf8a3b4b719ac</anchor>
      <arglist>(isfinite)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a1877ee33e451d469a821af25ea294459</anchor>
      <arglist>(isinf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>ac8e0684810b836eab1c0a962139b0631</anchor>
      <arglist>(isnan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a5953980a5d9c915ac77175dd8823b2e7</anchor>
      <arglist>(isnormal)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>aead27a6a7fa9e12b3e4f9477fa87760c</anchor>
      <arglist>(signbit)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_UNARY_FUNC</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a3d31f84473d04d0a66d43e0d73a3da68</anchor>
      <arglist>(real)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a63c18a33653d80d902d11126c4547e0d</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a9fc132a0731c1b050016eaaccc02d0e0</anchor>
      <arglist>(const T &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a0fab1d925cf727704c04adfec150a2a2</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const T &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a10f66b4d8465c253379031564e8ba250</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>a6b1ccae3593fec2e37bf859b9c9eb886</anchor>
      <arglist>(const T &amp;a, const AlignedNumber&lt; T, align &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00431.html</anchorfile>
      <anchor>adffe14ab05b2df419ae75093f8449529</anchor>
      <arglist>(const AlignedNumber&lt; T, align &gt; &amp;a, const T &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Concept</name>
    <filename>a00430.html</filename>
    <class kind="struct">Dune::Concept::Refines</class>
    <class kind="struct">Dune::Concept::HasFixedSize</class>
    <member kind="function">
      <type>constexpr auto</type>
      <name>tupleEntriesModel</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a505975b777b113e7a170bf0b92f18cc4</anchor>
      <arglist>() -&gt; typename Impl::TupleEntriesModelHelper&lt; C, Tuple &gt;::Result</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireTrue</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a0c5244fc0c1f77eb234e0bab79bb5240</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConcept</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a06e79a0db6608ca4c073c4c8f0dd824d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConcept</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a2dbe5630e5ddb8c2f2a23f48cce6013b</anchor>
      <arglist>(T &amp;&amp;...)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConceptForTupleEntries</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a59645477bd6b09962ab62f4e2afe6c81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConvertible</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a8b5ee9cb9837e082ac1da60fe2a1ca81</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireConvertible</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a9a36856034f3033ad8c3fb905b6b2018</anchor>
      <arglist>(const From &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireType</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>ad96e1a5fe36cebbed3c85d0e24b49bef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireBaseOf</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a7d39e8ecc39ad89d9b47c1ccf9873a54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireBaseOf</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a25819f337507625582babfb5ee0b1798</anchor>
      <arglist>(const Derived &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>requireSameType</name>
      <anchorfile>a00430.html</anchorfile>
      <anchor>a0cdb8b8ed4fc7d006516dc22697edcc3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::DenseMatrixHelp</name>
    <filename>a00435.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multAssign</name>
      <anchorfile>a00435.html</anchorfile>
      <anchor>a4b9cee31bcd8d5a2d4caaa6073c7f7cb</anchor>
      <arglist>(const DenseMatrix&lt; MAT &gt; &amp;matrix, const DenseVector&lt; V1 &gt; &amp;x, DenseVector&lt; V2 &gt; &amp;ret)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::DynamicMatrixHelp</name>
    <filename>a00437.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesNonSym</name>
      <anchorfile>a00437.html</anchorfile>
      <anchor>abe8e51282658775085e3959963e2187a</anchor>
      <arglist>(const DynamicMatrix&lt; K &gt; &amp;matrix, DynamicVector&lt; C &gt; &amp;eigenValues, std::vector&lt; DynamicVector&lt; K &gt;&gt; *eigenVectors=nullptr)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::FloatCmp</name>
    <filename>a00438.html</filename>
    <class kind="struct">Dune::FloatCmp::EpsilonType</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; std::vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; FieldVector&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, relativeWeak &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, relativeStrong &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon&lt; T, absolute &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon</class>
    <member kind="enumeration">
      <type></type>
      <name>CmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga4aeb759ed9de8b477a155492aeb2789b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeWeak</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789bacfb0348876cc64404ec31a6ca4b889ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeStrong</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba244e679dffd35be3f0b6cdacd4cd53b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>absolute</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789badaf8946c7ffe8f697b16515f9d880d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultCmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba07502cff1e6a0857c51bec553f241697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga8507e971c45243aed2c4de1b3736ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardZero</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a01b681db891f7b67fa52a4c2193eea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardInf</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0ba1a9b8cce0034f6b0a6bef4b1eb670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>downward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a6074c993d9019e8a31f30649602e21b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0e10271b704ebf42395156318e3442bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultRoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a9d0bc0cf3b15252ab74e9cbeddc805c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga50c93e693f102298c61ecb14758f8d5b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga1d1eabc465f54e3c3dc8dc38189d0ddd</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae7ebcba7fc2fdf4497eacc57f4971eda</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gacca725b16b35b04c4eea0c4ee21757de</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae8eb5c5d458b2556d5d685bb65161aef</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae9bad71c0f79d8f287fa419dd8bd565b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a20989b2c0619b31d8a15c85aae184d32</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>af10cd25d78f35677c8d588e924792cff</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a15ac4ddae1d906c2ea6c6aa0e16c0e41</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>ac752c032096de736aa97b2c6cbcd5190</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a9c439fbc2fe166ff75f97f69fb5aee9d</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a28bc28618b41c234fb9c83284c6a9d52</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga510d97be4644ccab5db0b674d79633c6</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>aa1c6178f9e297570109a68b93e95a3ef</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a1014d75e7683b011cabd18f3ab8d2499</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga78eaf86b21236f5c55336724e911da08</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>aa47496c22fdda340c3f4d0d1ac0b56a1</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00438.html</anchorfile>
      <anchor>a07975dfac981cd91b7a159e57a3c1d5d</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, defaultCmpStyle &gt;::value())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::FMatrixHelp</name>
    <filename>a00440.html</filename>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a9f70ac3f14f482a99d4e01ada277d5c1</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a67155815b034773129d21bfe3992f0b6</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a27757ac69a505e206e82b5b184333f15</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a4944da58b2dcefc979ea0fccf87971c4</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a8569be33ba4985b1ceda0e3bc05aadd8</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invertMatrix_retTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a6ae34a44709f5ad6bae281284d08bc8a</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a95f823a566af9fca2f8f4add5bea7bc0</anchor>
      <arglist>(const FieldMatrix&lt; K, m, n &gt; &amp;A, const FieldMatrix&lt; K, n, p &gt; &amp;B, FieldMatrix&lt; K, m, p &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multTransposedMatrix</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aed0b39ddfc6a99aed9241609b0bbfbc0</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, FieldMatrix&lt; K, cols, cols &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>multAssignTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aef7fb29fd8ec4371bbca42d7aaa15ddc</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, rows &gt; &amp;x, FieldVector&lt; K, cols &gt; &amp;ret)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, rows &gt;</type>
      <name>mult</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a6b35fcd36fc7c4586e6045d0d22929b8</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, cols &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, cols &gt;</type>
      <name>multTransposed</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>aa58360e4f8dda8d4dd9406f867b208a0</anchor>
      <arglist>(const FieldMatrix&lt; K, rows, cols &gt; &amp;matrix, const FieldVector&lt; K, rows &gt; &amp;x)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValues</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a86eafff72a6c52bec8aa92e191f08887</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesVectors</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>ae35eb55b361af2d69d419f3b6ecf4d2c</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues, FieldMatrix&lt; K, dim, dim &gt; &amp;eigenVectors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesLapack</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a96fe2783815b8f97773279ed069cf1d8</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesVectorsLapack</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>afe77be4b948169fdcebb318248023920</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; K, dim &gt; &amp;eigenValues, FieldMatrix&lt; K, dim, dim &gt; &amp;eigenVectors)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>eigenValuesNonSym</name>
      <anchorfile>a00440.html</anchorfile>
      <anchor>a72135a64a9d7252dbcf26664c5810cce</anchor>
      <arglist>(const FieldMatrix&lt; K, dim, dim &gt; &amp;matrix, FieldVector&lt; C, dim &gt; &amp;eigenValues)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::fvmeta</name>
    <filename>a00436.html</filename>
  </compound>
  <compound kind="namespace">
    <name>Dune::Hybrid</name>
    <filename>a00443.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga0df72c8cdbb69ecf6da9483d5cdac1de</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>elementAt</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gac85f9d601905a3d0001edd94bd67b2d7</anchor>
      <arglist>(Container &amp;&amp;c, Index &amp;&amp;i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaacd5d1927ffa1d96adf1db1fdbaba28c</anchor>
      <arglist>(const Begin &amp;begin, const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1a44b7c50255662ec8d3553925ce9b46</anchor>
      <arglist>(const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>forEach</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga2df9e60e21091ed59c4a636b99abbedc</anchor>
      <arglist>(Range &amp;&amp;range, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>accumulate</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaf41421cb94c1a0a3d334eeb409701620</anchor>
      <arglist>(Range &amp;&amp;range, T value, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaac1691e6004f0428bdacab6407152807</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc, ElseFunc &amp;&amp;elseFunc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga044cfa54089ac3509d0a3a24b85ef42b</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>equals</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1f6da8119c5af45fe0413b9f75ef9861</anchor>
      <arglist>(T1 &amp;&amp;t1, T2 &amp;&amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga57705e4850c91cd0a92b452384bdc0a0</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches, ElseBranch &amp;&amp;elseBranch)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaa3c378c2ae090a6b608ec667486ede4b</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::impl</name>
    <filename>a00449.html</filename>
    <class kind="struct">Dune::impl::Buffer</class>
    <class kind="struct">Dune::impl::Buffer&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::impl::Buffer&lt; void &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::Indices</name>
    <filename>a00445.html</filename>
    <member kind="variable">
      <type>constexpr index_constant&lt; 0 &gt;</type>
      <name>_0</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2f3de78a2872dfc7652b48b42c537eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 1 &gt;</type>
      <name>_1</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga50d06c69be6f5a74e319d34064d8bc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 2 &gt;</type>
      <name>_2</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac405682eeaf6a8a64648dd85af7e84fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 3 &gt;</type>
      <name>_3</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6b1d6527c4b8dcf500d6c7c34d5eeb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 4 &gt;</type>
      <name>_4</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf50cd5ff4b29a43100a00a6e7cc9b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 5 &gt;</type>
      <name>_5</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab875313e016428e2498da7fd90f1949d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 6 &gt;</type>
      <name>_6</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf220e1bb42d603f557cbc9a9331830b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 7 &gt;</type>
      <name>_7</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2ca75d1d25482664a74ee83e8ce0b5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 8 &gt;</type>
      <name>_8</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1c19945beef1b5f54065de84e7a8641f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 9 &gt;</type>
      <name>_9</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga3419af1bbd8440b0e54d041f2a8c2b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 10 &gt;</type>
      <name>_10</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac31c1f8aded673ba67174158bd5fa33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 11 &gt;</type>
      <name>_11</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac852bc693ac4fbdebac5196bcdc9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 12 &gt;</type>
      <name>_12</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga70c227071a19ea12597ebde7abc8d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 13 &gt;</type>
      <name>_13</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab861b496b29bb9d1f32b4010434e003d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 14 &gt;</type>
      <name>_14</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga46aedfe3d5090a00cffcb7a652013a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 15 &gt;</type>
      <name>_15</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a8ff2bb0e356684b14a2c5e3c4d60bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 16 &gt;</type>
      <name>_16</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga16898b601989e869b270c43c173de953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 17 &gt;</type>
      <name>_17</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1f450218a4ab129a04ae59bac7c57a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 18 &gt;</type>
      <name>_18</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab50e00b1160125118d3a3f36f0d82654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 19 &gt;</type>
      <name>_19</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae846500876d7d06fe7f53c03b5c23fbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::MathImpl</name>
    <filename>a00447.html</filename>
    <class kind="struct">Dune::MathImpl::isUnorderedImpl</class>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a3ae62f6f2833a56f9c4d5c9fe10e1116</anchor>
      <arglist>(isNaN)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>ab3d3f80e8ca72d2c4ff96b488c940d28</anchor>
      <arglist>(isInf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION_FUNCTOR</name>
      <anchorfile>a00447.html</anchorfile>
      <anchor>a1434c3257e1930c54618527637803b47</anchor>
      <arglist>(isFinite)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::MathOverloads</name>
    <filename>a00442.html</filename>
    <class kind="struct">Dune::MathOverloads::ADLTag</class>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ab33f61f8962056b6619b0d5b7edceefd</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a5312822f8a17821bbd4fdd8671528d88</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a4daa32207a54271c8d4496a7fe7ef610</anchor>
      <arglist>(const FieldVector&lt; K, SIZE &gt; &amp;b, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>abe1edb9dee17e22e019dcc99fda44e7f</anchor>
      <arglist>(const FieldVector&lt; K, 1 &gt; &amp;b, const FieldVector&lt; K, 1 &gt; &amp;c, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a52c04e77b813dd109ca59f9ded3a3515</anchor>
      <arglist>(isNaN, isnan)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a132229e4e1f87c4ea645b92e5ce316e2</anchor>
      <arglist>(isInf, isinf)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DUNE_COMMON_MATH_ISFUNCTION</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a826fe50216822399903f37a0b901a9d4</anchor>
      <arglist>(isFinite, isfinite)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aab4ad4b002d6757a35d82f9d7954e604</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, PriorityTag&lt; 1 &gt;, ADLTag) -&gt; decltype(isUnordered(t1, t2))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isUnordered</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a5fe96f40a2f7d525f8828086e306bc6a</anchor>
      <arglist>(const T &amp;t1, const T &amp;t2, PriorityTag&lt; 0 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>a33bee19ed499c8354c0616209d1d0602</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aa6e7f9378ae85cd77da2651ad6e4124c</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ae285615ca57483eca8f45c6368811e36</anchor>
      <arglist>(const T &amp;t, PriorityTag&lt; 2 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isNaN</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ab008d5003f6c9044b8b7f14fed1122b2</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isInf</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>ad7dd6e7c744f4313ab479354e10dd3f6</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>isFinite</name>
      <anchorfile>a00442.html</anchorfile>
      <anchor>aa76b9631cea947492ba9c255f01df865</anchor>
      <arglist>(const LoopSIMD&lt; T, S, A &gt; &amp;v, PriorityTag&lt; 3 &gt;, ADLTag)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Simd</name>
    <filename>a00432.html</filename>
    <namespace>Dune::Simd::Overloads</namespace>
    <namespace>Dune::Simd::VcImpl</namespace>
    <class kind="struct">Dune::Simd::EndMark</class>
    <class kind="class">Dune::Simd::UnitTest</class>
    <member kind="typedef">
      <type>typename Impl::RemoveEnd&lt; EndMark, TypeList&lt; Types... &gt; &gt;::type</type>
      <name>RebindList</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>a320566db6148b3a25631f0620601b881</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::IsLoop&lt; T &gt;::type</type>
      <name>IsLoop</name>
      <anchorfile>a00432.html</anchorfile>
      <anchor>ab73dd40e3f2afeb94216681ddf2d5b00</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vio</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga5f024733517533308b22bd0b9a5e0820</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>io</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga47000d8c79bf7ab0548867bc01a56cac</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="typedef">
      <type>typename Overloads::ScalarType&lt; std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Scalar</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf7f6f3418836afcdb2c033509fd2eb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Overloads::RebindType&lt; std::decay_t&lt; S &gt;, std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Rebind</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga8d4752fe47def6075b211544a932c709</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gac6a0cf43eb7664581bd8a6954d7ff305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaca5433c99a350b973623f94491e43a86</anchor>
      <arglist>(std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gab5615170452d6ad3d87596cafef62f7c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>broadcast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa0d1652bc61cae3351079ca5510e8d4f</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1a04d18cec7c2f206e9de49926bfe5a8</anchor>
      <arglist>(M &amp;&amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaed055bc5f93bbb34cee35cdcba278b3d</anchor>
      <arglist>(bool mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa6c890aa2ed0432984358e6e0b487b3f</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gafa18ecd1517a0f3c3ae83c6a6b5e1559</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17639369fac8b6c516ebf2125849d0f4</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga54577fa7b2752b55d6efd05878ca1e24</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaaee5c9c3caa23996397af767ca52845e</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf404687904c5a04c3ab453b9b19c1562</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga88727c2f832123b04cd014d1d6c5f746</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17a41b619cc1d658d70bc4b643ac778d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga3e3f45a22ca7244829e9adf246ac4a9d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga19a63bc3591ee6c8fd5706c9be4380bf</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf74d4b9a4722c8de326046b89e2acef7</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="typedef">
      <type>Rebind&lt; bool, V &gt;</type>
      <name>Mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gad41c8f8908cdade89370a34de31ace54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1cb6eae7fc34d3c9258a35eb318f6e18</anchor>
      <arglist>(const V &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vio</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga5f024733517533308b22bd0b9a5e0820</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>io</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga47000d8c79bf7ab0548867bc01a56cac</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Simd::Overloads</name>
    <filename>a00433.html</filename>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; U, AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; AlignedNumber&lt; T, align &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; i &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; 0 &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; U, LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; LoopSIMD&lt; T, S, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; Simd::Scalar&lt; V &gt;, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; bool, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; Scalar&lt; typename M::Vector &gt;, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, M, std::enable_if_t&lt; VcImpl::IsMask&lt; M &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; typename M::Vector &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &amp;&amp;VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType&lt; S, V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsVectorizable&lt; S &gt;::value &amp;&amp;!std::is_same&lt; S, bool &gt;::value &amp;&amp;!std::is_same&lt; S, Scalar&lt; V &gt; &gt;::value &gt; &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount&lt; V, std::enable_if_t&lt; VcImpl::IsVector&lt; V &gt;::value &gt; &gt;</class>
    <member kind="function">
      <type>T &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a296f66754aaa4414985e2a8c6ded7527</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, AlignedNumber&lt; T, align &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2bd0478568a047692ca4cc795a2c9c50</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, const AlignedNumber&lt; T, align &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>const AlignedNumber&lt; T, align &gt; &amp;</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a29d26ea99826519efddbd223d5b5da59</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, AlignedNumber&lt; bool, align &gt; mask, const AlignedNumber&lt; T, align &gt; &amp;ifTrue, const AlignedNumber&lt; T, align &gt; &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a19296f860eb9fda0a58ab8c43747370d</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, const AlignedNumber&lt; bool, align &gt; &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a452fad355c3eacb7c067f28043d0752f</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, LoopSIMD&lt; T, S, A &gt; &amp;&amp;v) -&gt; decltype(std::move(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()])))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2177e01a1aeeea549723fd79450b0feb</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, const LoopSIMD&lt; T, S, A &gt; &amp;v) -&gt; decltype(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()]))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a106fb2169a224cf0c3c1d49b5fd00e7b</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, std::size_t l, LoopSIMD&lt; T, S, A &gt; &amp;v) -&gt; decltype(Simd::lane(l%lanes&lt; T &gt;(), v[l/lanes&lt; T &gt;()]))</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac50147955144b79ec9a88b225e2e4e8a</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, Simd::Mask&lt; LoopSIMD&lt; T, S, AM &gt;&gt; mask, LoopSIMD&lt; T, S, AD &gt; ifTrue, LoopSIMD&lt; T, S, AD &gt; ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7969a915566d89d2c44b15048ba30042</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; bool, Simd::Scalar&lt; M &gt; &gt;::value &amp;&amp;Simd::lanes&lt; M &gt;()==Simd::lanes&lt; LoopSIMD&lt; T, S, A &gt; &gt;()&gt;, M mask, LoopSIMD&lt; T, S, A &gt; ifTrue, LoopSIMD&lt; T, S, A &gt; ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac08bce3140146a37b6aad7176fa9c210</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aaca8a2c3303140cff486e9c8df5cc884</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0b596e579ef4073d562c67696fb8f7b8</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aca164af00221ebcbd6c683845d3f4829</anchor>
      <arglist>(ADLTag&lt; 5 &gt;, LoopSIMD&lt; M, S, A &gt; mask)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga172c6bee6a07fdaf412ca0771084d117</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, std::size_t l, V v)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga2d92cc23bb0b95ca627fa2560c2f9006</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const V &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaacc1dbc07ddc0fd6b237ca18e213c3be</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const U &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>broadcast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac82cb295f767f7aece888fd9216db1b3</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gacd3b3b8cae27c30aa73e855afbe904d7</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gafb35651a7a1777d932462357552bb90c</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gab9dde84db30133b70a28c0b89399bc71</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gae87036ad8322cb0064cdd3bfad16ca69</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6850149b7bbe8eff67835ecfd8471f7d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaa272813526339482ae077b1a0e52a01e</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga537e92d4cfd4637707852c7f93c73c74</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6be36412c4ee50b1e5023f43e85a53ec</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga45f575aad94606a1a2afa3698abcee72</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mask&lt; V &gt;</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga739860dc7b3d5e5bffd0af618aa07f20</anchor>
      <arglist>(ADLTag&lt; 0, std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac968f40d2358486033fdc31464a2df7f</anchor>
      <arglist>(ADLTag&lt; 0, !std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga8ae87f60e149f0ab44b71fc6624da25d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga77595bdf5b1cfe2377baa16cc52b1cee</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ad329da4d6c881c0c53b63c01f576e6df</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, std::size_t, V v)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a743a8900c5957a1b8eeea17ce6ac0d1b</anchor>
      <arglist>(ADLTag&lt; 3 &gt;, std::size_t, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4da440a9db2b315f531d5412174982af</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aef12678a4fbb543b66e9a92eb85d9877</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8d635dd0e81111cb047adf5c28dfb781</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab3e2ff7938d3f9d0a691ee30924caee0</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>VcImpl::Proxy&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a22094239a5688ab1452b7982223c7016</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae585159181261a665aab2e2291639caf</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0515c11687dc667d89aa905d42812eb8</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1e381193cbbb6173182d9d5f715ae3cb</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7dcd6d93c9d734cdf503a6ec39dd6611</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4e67cb4e294fb9e23e783884c475861c</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ada68b996d408511a5b96d60227e680b2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3c9ba6ecba42930468eefd178d7de783</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac6cc7e64573f72a104ee83ae903b6dfa</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9f601c327d9ab8d51e3aec75f84444d5</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae90e70730fb94990a1bc589dfa097d60</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2d34d0b372b187035617c73dcd799489</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9266e14dbe6a575063591abddf191407</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3085301cd46f3b9b3fda46ba2d7cf100</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a39ddee23ad26ec283bcbe4463d4c63bd</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae673cb9df73262a7fb8fa3f66c9e24d2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab0976021e11084b73bc7e4a9bd8606fb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3ea4f4dc62f616402360c2090528931a</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8b906f431fec68fcbf32de9a0fd7dccb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3822ffe342a2e2f5708806ea720bb604</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga172c6bee6a07fdaf412ca0771084d117</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, std::size_t l, V v)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga2d92cc23bb0b95ca627fa2560c2f9006</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const V &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaacc1dbc07ddc0fd6b237ca18e213c3be</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const U &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>broadcast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac82cb295f767f7aece888fd9216db1b3</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gacd3b3b8cae27c30aa73e855afbe904d7</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gafb35651a7a1777d932462357552bb90c</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gab9dde84db30133b70a28c0b89399bc71</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gae87036ad8322cb0064cdd3bfad16ca69</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6850149b7bbe8eff67835ecfd8471f7d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaa272813526339482ae077b1a0e52a01e</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga537e92d4cfd4637707852c7f93c73c74</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6be36412c4ee50b1e5023f43e85a53ec</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga45f575aad94606a1a2afa3698abcee72</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mask&lt; V &gt;</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga739860dc7b3d5e5bffd0af618aa07f20</anchor>
      <arglist>(ADLTag&lt; 0, std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac968f40d2358486033fdc31464a2df7f</anchor>
      <arglist>(ADLTag&lt; 0, !std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga8ae87f60e149f0ab44b71fc6624da25d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga77595bdf5b1cfe2377baa16cc52b1cee</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ad329da4d6c881c0c53b63c01f576e6df</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, std::size_t, V v)</arglist>
    </member>
    <member kind="function">
      <type>V &amp;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a743a8900c5957a1b8eeea17ce6ac0d1b</anchor>
      <arglist>(ADLTag&lt; 3 &gt;, std::size_t, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4da440a9db2b315f531d5412174982af</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>aef12678a4fbb543b66e9a92eb85d9877</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8d635dd0e81111cb047adf5c28dfb781</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab3e2ff7938d3f9d0a691ee30924caee0</anchor>
      <arglist>(ADLTag&lt; 2 &gt;, bool mask)</arglist>
    </member>
    <member kind="function">
      <type>VcImpl::Proxy&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a22094239a5688ab1452b7982223c7016</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae585159181261a665aab2e2291639caf</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>lane</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a0515c11687dc667d89aa905d42812eb8</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &gt;, std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a1e381193cbbb6173182d9d5f715ae3cb</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a7dcd6d93c9d734cdf503a6ec39dd6611</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a4e67cb4e294fb9e23e783884c475861c</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ada68b996d408511a5b96d60227e680b2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3c9ba6ecba42930468eefd178d7de783</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ac6cc7e64573f72a104ee83ae903b6dfa</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;m1, const M &amp;m2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9f601c327d9ab8d51e3aec75f84444d5</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae90e70730fb94990a1bc589dfa097d60</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a2d34d0b372b187035617c73dcd799489</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a9266e14dbe6a575063591abddf191407</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>max</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3085301cd46f3b9b3fda46ba2d7cf100</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a39ddee23ad26ec283bcbe4463d4c63bd</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V &gt;::value &amp;&amp;!VcImpl::IsMask&lt; V &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>min</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ae673cb9df73262a7fb8fa3f66c9e24d2</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsMask&lt; M &gt;::value &gt;, const M &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>ab0976021e11084b73bc7e4a9bd8606fb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3ea4f4dc62f616402360c2090528931a</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a8b906f431fec68fcbf32de9a0fd7dccb</anchor>
      <arglist>(ADLTag&lt; 5, std::is_same&lt; Mask&lt; S1 &gt;, bool &gt;::value &amp;&amp;VcImpl::IsVector&lt; V2 &gt;::value &gt;, const S1 &amp;s1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00433.html</anchorfile>
      <anchor>a3822ffe342a2e2f5708806ea720bb604</anchor>
      <arglist>(ADLTag&lt; 5, VcImpl::IsVector&lt; V1 &gt;::value &amp;&amp;std::is_same&lt; Mask&lt; S2 &gt;, bool &gt;::value &gt;, const V1 &amp;v1, const S2 &amp;s2)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Simd::VcImpl</name>
    <filename>a00453.html</filename>
    <class kind="struct">Dune::Simd::VcImpl::IsMask</class>
    <class kind="struct">Dune::Simd::VcImpl::IsMask&lt; Vc::Mask&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsMask&lt; Vc::SimdMaskArray&lt; T, n, V, m &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector&lt; Vc::Vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVector&lt; Vc::SimdArray&lt; T, n, V, m &gt; &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; double &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; float &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::int32_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::uint32_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::int16_t &gt;</class>
    <class kind="struct">Dune::Simd::VcImpl::IsVectorizable&lt; std::uint16_t &gt;</class>
    <class kind="class">Dune::Simd::VcImpl::Proxy</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::SimdImpl</name>
    <filename>a00451.html</filename>
    <class kind="class">Dune::SimdImpl::Inserter</class>
    <member kind="function">
      <type>Inserter&lt; V &gt;</type>
      <name>io</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>a0b30c1f0e354e3151c4a3ae4e139aeb9</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Simd::Scalar&lt; V &gt;</type>
      <name>io</name>
      <anchorfile>a00451.html</anchorfile>
      <anchor>ab6194cae09c86c497696459836e08628</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Std</name>
    <filename>a00454.html</filename>
    <class kind="struct">Dune::Std::identity</class>
    <class kind="class">Dune::Std::to_false_type</class>
    <class kind="class">Dune::Std::to_true_type</class>
    <class kind="struct">Dune::Std::is_callable</class>
    <class kind="struct">Dune::Std::is_callable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::Std::is_invocable</class>
    <class kind="struct">Dune::Std::is_invocable_r</class>
    <class kind="struct">Dune::Std::nonesuch</class>
    <class kind="struct">Dune::Std::conjunction</class>
    <class kind="struct">Dune::Std::disjunction</class>
    <class kind="struct">Dune::Std::negation</class>
    <member kind="typedef">
      <type>std::optional&lt; T &gt;</type>
      <name>optional</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a67e10f06e4e27a5a4ad29b045de3ce65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::nullopt_t</type>
      <name>nullopt_t</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a2f55f129145db5843048d81bafa78f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::in_place_t</type>
      <name>in_place_t</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a9f874821d9d7e1e7e1850182297f70d9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::bad_optional_access</type>
      <name>bad_optional_access</name>
      <anchorfile>a00454.html</anchorfile>
      <anchor>a4fd3f32fb44e4e46c1af7c676e1d9edf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::detector&lt; Default, void, Op, Args... &gt;</type>
      <name>detected_or</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gadb4713b99082ef169f74666e0ec7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::value_t</type>
      <name>is_detected</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaccaa5104ef0c27be164435f42ef81fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::type</type>
      <name>detected_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga67b8ffda29f365419403a66e49ec0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; Default, Op, Args... &gt;::type</type>
      <name>detected_or_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga2f49a21b2f60f94fa8911db7e32c9703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_exact</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6778de5ea60a45fdae6db8b6d8c8b6f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_convertible&lt; Target, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_convertible</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaf26ed902d20da735bae252683a9ac5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; typename std::common_type&lt; Args... &gt;::type, sizeof...(Args)&gt;</type>
      <name>make_array</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga4bc9a120a411bddf93f2c58977befa63</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga9f0b8af5e80b339c8346a327f28bab33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_exact_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga043d312181849f21d950de3f7198bac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_convertible_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga044daf77dd81fbaeb71a7ce6d15bf761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Common</name>
    <title>Common</title>
    <filename>a00400.html</filename>
    <subgroup>Allocators</subgroup>
    <subgroup>Utilities</subgroup>
    <subgroup>Numbers</subgroup>
    <subgroup>DebugOut</subgroup>
    <subgroup>DenseMatVec</subgroup>
    <subgroup>Exceptions</subgroup>
    <subgroup>IteratorFacades</subgroup>
    <subgroup>ParallelCommunication</subgroup>
    <subgroup>SIMD</subgroup>
    <file>function.hh</file>
    <file>indent.hh</file>
    <file>ios_state.hh</file>
    <file>lcm.hh</file>
    <file>sllist.hh</file>
    <file>timer.hh</file>
    <class kind="class">Dune::ArrayList</class>
    <class kind="class">Dune::ArrayListIterator</class>
    <class kind="class">Dune::ConstArrayListIterator</class>
    <class kind="struct">Dune::ImplementationDefined</class>
    <class kind="struct">Dune::IsVector</class>
    <class kind="struct">Dune::IsVector&lt; T, std::void_t&lt; typename T::field_type &gt; &gt;</class>
    <class kind="class">Dune::EmptySet</class>
    <class kind="class">Dune::AllSet</class>
    <class kind="class">Dune::EnumItem</class>
    <class kind="class">Dune::EnumRange</class>
    <class kind="class">Dune::NegateSet</class>
    <class kind="class">Dune::Combine</class>
    <class kind="class">Dune::Function</class>
    <class kind="class">Dune::VirtualFunction</class>
    <class kind="class">Dune::Indent</class>
    <class kind="class">Dune::ios_base_all_saver</class>
    <class kind="struct">Dune::Lcm</class>
    <class kind="class">Dune::ParameterTree</class>
    <class kind="class">Dune::ParameterTreeParser</class>
    <class kind="struct">Dune::StaticPower</class>
    <class kind="struct">Dune::Power</class>
    <class kind="struct">Dune::PromotionTraits</class>
    <class kind="struct">Dune::PromotionTraits&lt; T1, T1 &gt;</class>
    <class kind="class">Dune::SLListIterator</class>
    <class kind="class">Dune::SLListConstIterator</class>
    <class kind="class">Dune::SLListModifyIterator</class>
    <class kind="class">Dune::SLList</class>
    <class kind="class">Dune::Timer</class>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSERT_BOUNDS</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga75d4ba5883cb39e7ec7927891a12615e</anchor>
      <arglist>(cond)</arglist>
    </member>
    <member kind="typedef">
      <type>std::integral_constant&lt; std::size_t, i &gt;</type>
      <name>index_constant</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gacf764509e6dae37477f5ad09b5ca3467</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ios_base</type>
      <name>state_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaab42b8e2cf5e10c794a7957e003edd76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>A::size_type</type>
      <name>size_type</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadefacd67926b31f38dcc996d275ff1e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>MemberType</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9548258d3f4de56a110c6f549780ec2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename std::allocator_traits&lt; A &gt;::template rebind_alloc&lt; Element &gt;</type>
      <name>Allocator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4871529deceba9839fa6cb5640d0e1b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListIterator&lt; T, A &gt;</type>
      <name>iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga543a8c5a50d30cd488550f5e99161754</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListConstIterator&lt; T, A &gt;</type>
      <name>const_iterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa026efcc562ed6ef620e4a96f26a393e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>SLListModifyIterator&lt; T, A &gt;</type>
      <name>ModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac398614c243228cc0f7678b6c70007b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>implementationDefined</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga587081ae4568cb94ed43b5dbaba7870ea7de84f476fd1d9f55ac5e2c25f252c3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>dot</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga06a55ef13638a2a56a42473b812498dd</anchor>
      <arglist>(const A &amp;a, const B &amp;b) -&gt; typename std::enable_if&lt;!IsVector&lt; A &gt;::value &amp;&amp;!std::is_same&lt; typename FieldTraits&lt; A &gt;::field_type, typename FieldTraits&lt; A &gt;::real_type &gt; ::value, decltype(conj(a) *b)&gt;::type</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga853a8a6088e8bc36612e0d1a14f1d0b4</anchor>
      <arglist>(std::ostream &amp;os, const EnumItem&lt; TA, i &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1e9ea5bea2c22bdd2808a54ec71458a1</anchor>
      <arglist>(std::ostream &amp;os, const EnumRange&lt; TA, from, to &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>Combine&lt; TI1, TI2, typename TI1::Type &gt;</type>
      <name>combine</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga698bedb0f72197e6d28d9c77068d7e05</anchor>
      <arglist>([[maybe_unused]] const TI1 &amp;set1, [[maybe_unused]] const TI2 &amp;set2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga63adbddbe290df558538dc462fd43711</anchor>
      <arglist>(std::ostream &amp;os, const Combine&lt; TI1, TI2, T &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>constexpr std::array&lt; T, n &gt;</type>
      <name>filledArray</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf3b0a934939d7a49b8ec4e3e28c21bc5</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Impl::LambdaVirtualFunction&lt; Domain, Range, std::decay_t&lt; F &gt; &gt;</type>
      <name>makeVirtualFunction</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d326289f3fb37ecc5f30dd0cab45bb6</anchor>
      <arglist>(F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabb0f032ac7f93f75e8918741c6da79c5</anchor>
      <arglist>(const std::string &amp;basic_indent_=&quot;  &quot;, unsigned level_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1f1ea564f5a91476186d98f86bc9e9c5</anchor>
      <arglist>(unsigned level_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae84075a0c38565df531b69c1cbba9de8</anchor>
      <arglist>(const Indent *parent_, const std::string &amp;basic_indent_=&quot;  &quot;, unsigned level_=1)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Indent</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8aa75c75f4de24c071ad32c329c4f0f1</anchor>
      <arglist>(const Indent *parent_, unsigned level_)</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0d8e2d1ad854a5768618d827269c0483</anchor>
      <arglist>(const std::string &amp;newindent) const</arglist>
    </member>
    <member kind="function">
      <type>Indent</type>
      <name>operator+</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29e86c93b437fefa4d30687bece5a5d4</anchor>
      <arglist>(unsigned morelevel) const</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator++</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9b30e9d57dee5b5fa9f6e1a79547b90d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Indent &amp;</type>
      <name>operator--</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae9115fbc5d176bdf580e893ee1f0a3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac282bd5d47ea4d2daf9523fb5de848a9</anchor>
      <arglist>(std::ostream &amp;s, const Indent &amp;indent)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>unpackIntegerSequence</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0959a949c8385a1b41669380e439d5d8</anchor>
      <arglist>(F &amp;&amp;f, std::integer_sequence&lt; I, i... &gt; sequence)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ios_base_all_saver</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaba871722210fe56717056b5e32f46429</anchor>
      <arglist>(state_type &amp;ios_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ios_base_all_saver</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga022177c21c172353d00b3d4658e75e33</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restore</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga11e7a466cb1a43b36026a751364ae564</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>conceptCheck</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf9226f96fce99f6a144275371dd7d1ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr auto</type>
      <name>eval</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga71e044edf267e984da3cb61e61a9d886</anchor>
      <arglist>(const T &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab097c05f186dacbbdd11361de5b2500f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9519c3673afc2d76f4bc76ef35181225</anchor>
      <arglist>(const SLList&lt; T1, A1 &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga72a901265ef5d3658dceb0f7bd6a0782</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~SLList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafa3231a07e56ae81cc6334e19d603a23</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>SLList&lt; T, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0eb5f84602ae9120178e2e9659bc41</anchor>
      <arglist>(const SLList&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0a71f761f2ee2a6d5c72c5b8b6b60f0e</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga07373aa465c1db378233026b89420275</anchor>
      <arglist>(const MemberType &amp;item)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop_front</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac40778d9f4576908734ed49890c26a93</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga91a8c67d17ae6595ee2f5eca3a2df144</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff151c44f4a1e43ab0b2f0cf55bab6f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8d007afaea3e81e26ae2f4963faadd33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>beginModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f0cfc5d3be7b2719e938face53b832f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ModifyIterator</type>
      <name>endModify</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1859abb70b39f6cd675d5d1f6c23a5e0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8eee1922ee4cf09e85c03af4ceef39ed</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaae74580801beccdd3ad849dfafc81cdf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa1824b536a04a403838bf363053f7b31</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84f7bb0bf0fe313d5ccc558683df4255</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6a7d895d33aa806a78fe61a1d96104ab</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga29be35a0986714d7a74946eaea406628</anchor>
      <arglist>(const SLList &amp;sl) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga61bbcb7b68a18c3699956e998289a923</anchor>
      <arglist>(const MemberType &amp;item, Element *next_=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Element</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1c813017fc33817c8b6bd284689e7d5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Element</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga68b102b9d14631d90cd092aa254c8450</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabc65f1b9122dcb8b3b3c66a34a14d672</anchor>
      <arglist>(typename SLList&lt; T, A &gt;::Element *item, SLList&lt; T, A &gt; *sllist)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga605b22cb26368709b6c6978afa74422f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gad54a5b1a329454fda47f567f271be2dc</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga929393cf6c3a5b1cfe71adf852a5ded2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa9b60b73ed6c493df407f3a797f74a96</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaff2937a6381d19a9809f14d691729426</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga7516c4f7b05093c21dba691af222c9e4</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac484c101bf8dac91cf42c87ab4095c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertAfter</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4883dd27ede8ff505dfaec9202c7ec98</anchor>
      <arglist>(const T &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deleteNext</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6b29ec8a7c92e623e5c019c51af9dd94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa9aa8d3ff92cb2d129f4599fab155c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga45a6795cf3f7ecf496f468456a2bedca</anchor>
      <arglist>(typename SLList&lt; T, A &gt;::Element *item)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9f10eb89661f52d4ca00dd6d99207a01</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga7e61aceefccc30ce8b58a1d36a74e980</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListConstIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga567bb88006449bdb6c09bd979c64edcc</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2283bc25520b96c7b07eef08a764f257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga085f923325186832edb4964b8649d8ae</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf7b6b1990f6bf2abeadd60f3ae813bd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1c0769352260150e71992906797c6bf</anchor>
      <arglist>(SLListIterator&lt; T, A &gt; beforeIterator, SLListIterator&lt; T, A &gt; _iterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae453df10198c999b8d05e7957df62a31</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SLListModifyIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a786d2cd78f48907f0411e6670a077b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0b885d79a6290ca39936ff80c6164f12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac02bc0597c75cd4b08db18a44536c33</anchor>
      <arglist>(const SLListConstIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafeb8eb61bc81005274daf39f1a31dad2</anchor>
      <arglist>(const SLListIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9e54256a87b83eee3428010d8e822d69</anchor>
      <arglist>(const SLListModifyIterator&lt; T, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf185b8fbd19f5e6aa881f94781f97ea0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab584227c678fe14379ab64bf38e90fc3</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>remove</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1aa043816f91daf4d1cc0d680b6cec0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga572fa4d72fb27c6134aa355abc083969</anchor>
      <arglist>(std::ostream &amp;os, const SLList&lt; T, A &gt; &amp;sllist)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafda8471a933991be73f03e0d349c1bf1</anchor>
      <arglist>(Stream &amp;stream, const std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga32f86b48dbe3ad88dfcb32ba01dcc4a2</anchor>
      <arglist>(Stream &amp;stream, std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>Stream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga540c7a094361004a08fdbd9c95063822</anchor>
      <arglist>(Stream &amp;stream, const std::array&lt; T, N &gt; &amp;a)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ArrayList</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga5f26956b01c6a3d9db4c9da3ecd8b7f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab837ba808b8bfeeb6dac65a00b2e9c31</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga27f3a69eb5479e4fb9fa21ea98539264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push_back</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae5d0068f5773845dd133cb2cc6c2ab9c</anchor>
      <arglist>(const_reference entry)</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga00fb2e9b1c7ed63dc48185d9fece84b3</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga8ccee6554a287f665acf1cc9d85995b3</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0453c1e8cf90d912f11c521784c917c9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga62f554c219a3a4c77a72e7017ffd99a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga84de6115438d8d36040af42a92777f66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab0fe4b4eb568aad576641c9f0885e094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>purge</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2b627c8796d6946f57458f9e90980397</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadcaa9ef9cac9effc73f797c9ec914d43</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa8f468008db350985416802e19284c70</anchor>
      <arglist>(difference_type n)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga0cdad573e352c6502c0b7167bdc27d55</anchor>
      <arglist>(const ArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaafd1d8065d9a75eb2ae575dece10c82d</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gad497fa97898250580bb21cc2bd3c9041</anchor>
      <arglist>(const ConstArrayListIterator&lt; MemberType, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a141c2254e8326f22057e8e33086412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga76de40b277f94ee868d428d228e653db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga4456b3d5cbaa8d387a79412a97749ada</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9c8c49a4c9e7f9ec05f13ef08838125c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaba1512d36435a276d5076176981b9f94</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>elementAt</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga88c8c865d1b36a518b42dd8501d767f2</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae3afc010b2150044b31d4d36c661eb44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>dereference</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab2e688a7ca86f9dbc14505df8edaab1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gafbcc3e5345f31e56fc77ef2cec30a4e2</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>difference_type</type>
      <name>distanceTo</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae1cae3a83ca1049439305af22591c508</anchor>
      <arglist>(const ConstArrayListIterator&lt; T, N, A &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ArrayListIterator&lt; T, N, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0d198bd472c7e6e5358fd51dd27f9d1</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const ConstArrayListIterator&lt; T, N, A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga43f15672add4d897370c480eb2885b9b</anchor>
      <arglist>(const ConstArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>eraseToHere</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga492de54ad819c0b784b7981d68228e4d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstArrayListIterator</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2983bd3f7dfc692b4c360da1324ffcaf</anchor>
      <arglist>(const ArrayListIterator&lt; T, N, A &gt; &amp;other)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gabe9c296a2213a977a8579d2b1972bbd3</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1918a1179a53724c3fc0a3ee1812d5e7</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gadd4bd8a68ff82f7bd648a651990ae8e5</anchor>
      <arglist>(const Type &amp;attribute)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6d859eacd34bc489093cf49624df2101</anchor>
      <arglist>(const Type &amp;item)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>contains</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga9d4f7c53b0cf0f05e7535a1585e9dda7</anchor>
      <arglist>(const TA &amp;item)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 0 &gt;</type>
      <name>_0</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2f3de78a2872dfc7652b48b42c537eb8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 1 &gt;</type>
      <name>_1</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga50d06c69be6f5a74e319d34064d8bc3c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 2 &gt;</type>
      <name>_2</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac405682eeaf6a8a64648dd85af7e84fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 3 &gt;</type>
      <name>_3</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6b1d6527c4b8dcf500d6c7c34d5eeb79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 4 &gt;</type>
      <name>_4</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf50cd5ff4b29a43100a00a6e7cc9b4fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 5 &gt;</type>
      <name>_5</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab875313e016428e2498da7fd90f1949d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 6 &gt;</type>
      <name>_6</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf220e1bb42d603f557cbc9a9331830b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 7 &gt;</type>
      <name>_7</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2ca75d1d25482664a74ee83e8ce0b5fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 8 &gt;</type>
      <name>_8</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1c19945beef1b5f54065de84e7a8641f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 9 &gt;</type>
      <name>_9</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga3419af1bbd8440b0e54d041f2a8c2b80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 10 &gt;</type>
      <name>_10</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac31c1f8aded673ba67174158bd5fa33b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 11 &gt;</type>
      <name>_11</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaac852bc693ac4fbdebac5196bcdc9a64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 12 &gt;</type>
      <name>_12</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga70c227071a19ea12597ebde7abc8d373</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 13 &gt;</type>
      <name>_13</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab861b496b29bb9d1f32b4010434e003d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 14 &gt;</type>
      <name>_14</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga46aedfe3d5090a00cffcb7a652013a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 15 &gt;</type>
      <name>_15</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga1a8ff2bb0e356684b14a2c5e3c4d60bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 16 &gt;</type>
      <name>_16</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga16898b601989e869b270c43c173de953</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 17 &gt;</type>
      <name>_17</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gac1f450218a4ab129a04ae59bac7c57a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 18 &gt;</type>
      <name>_18</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gab50e00b1160125118d3a3f36f0d82654</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr index_constant&lt; 19 &gt;</type>
      <name>_19</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae846500876d7d06fe7f53c03b5c23fbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>constexpr static long</type>
      <name>value</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf8e128c2907366d7a98ebbfe697fda88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr int</type>
      <name>power</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2c23a81dd28b07169831c7ef51a40c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Element *</type>
      <name>next_</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaf0c784f90f7e5c03979031252dbf020e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>MemberType</type>
      <name>item_</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2ab7716a755ae785552cd61f167dad34</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListModifyIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gaa251be526cd0ddad4ed6adb4993cbc24</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLList&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0096c66d16b973dcf48c031493e8846</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLList&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>gae0096c66d16b973dcf48c031493e8846</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListConstIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga2e804e57680f20cb8d454383a0c64ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>SLListIterator&lt; T, A &gt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga6cd4d1b1867c816ece75f9d161d562a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00400.html</anchorfile>
      <anchor>ga97f3159cb0a394380ed4668506b2c721</anchor>
      <arglist>(std::ostream &amp;s, const Indent &amp;indent)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Allocators</name>
    <title>Allocators</title>
    <filename>a00401.html</filename>
    <class kind="class">Dune::AlignedAllocator</class>
    <class kind="class">Dune::MallocAllocator</class>
    <class kind="class">Dune::Pool</class>
    <class kind="class">Dune::PoolAllocator</class>
    <class kind="class">Dune::PoolAllocator&lt; void, s &gt;</class>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga67f486062c5bfb92aa3365373d491836</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gaf0e4942c0493dceaf371ba9f0ec29ab6</anchor>
      <arglist>(const PoolAllocator&lt; T1, t1 &gt; &amp;, const PoolAllocator&lt; T2, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab6358d63f2012e81c5066d6c6d9cb94a</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga2c515ca850107e6807b75f4d90ca4dcc</anchor>
      <arglist>(const PoolAllocator&lt; T, t1 &gt; &amp;p1, const PoolAllocator&lt; T, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gab00b326f648ee860460ddeec2f4b6d3b</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gace25a69f0bcd5ba1fffd567af1d9a9cf</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;, const PoolAllocator&lt; T, t2 &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga5bc475e78eb7d029ee0782eab49d5938</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6795aefd733bd618db889c6f15f1552f</anchor>
      <arglist>(const PoolAllocator&lt; void, t1 &gt; &amp;p1, const PoolAllocator&lt; void, t2 &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gad22b5366230a0a19803668fb20fbd059</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Pool</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga4e532951b380f21051712b6e458389e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga7b0a19e8009fb6e5b43ebf5a27c38ce5</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga47e9484d263bece81e75897dd885f5c0</anchor>
      <arglist>(void *o)</arglist>
    </member>
    <member kind="function">
      <type>void *</type>
      <name>allocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga6b5f7d8dec1166e3860aa2ecf81d1b61</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PoolAllocator</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gafe8c4a7219fd9e0a6ccddb9f8195891c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>pointer</type>
      <name>allocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga8ce62477683e1aba23b2907c7c7383b4</anchor>
      <arglist>(std::size_t n, const_pointer hint=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>deallocate</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gae2fe41e945dc1313868890aa28d75e7f</anchor>
      <arglist>(pointer p, std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>construct</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>ga2c654f3d338d310b294d105d28d78758</anchor>
      <arglist>(pointer p, const_reference value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>a00401.html</anchorfile>
      <anchor>gaeb9692354592eaceb050be5299c344af</anchor>
      <arglist>(pointer p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Utilities</name>
    <title>Utilities</title>
    <filename>a00402.html</filename>
    <subgroup>Path</subgroup>
    <subgroup>RangeUtilities</subgroup>
    <subgroup>StringUtilities</subgroup>
    <subgroup>TupleUtilities</subgroup>
    <subgroup>TypeUtilities</subgroup>
    <subgroup>HybridUtilities</subgroup>
    <subgroup>CxxUtilities</subgroup>
    <subgroup>CxxConcepts</subgroup>
    <class kind="class">Dune::TupleVector</class>
  </compound>
  <compound kind="group">
    <name>Path</name>
    <title>Filesystem Paths</title>
    <filename>a00403.html</filename>
    <file>path.cc</file>
    <file>path.hh</file>
    <member kind="function">
      <type>std::string</type>
      <name>concatPaths</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaf35055b90526b3266f36956a4e361f50</anchor>
      <arglist>(const std::string &amp;base, const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>processPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1b4c87bd874abdd0db9f6dc51d9588b0</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>pathIndicatesDirectory</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>ga1d1669ed8677a07b152b1de21640b3f9</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gaa9908e9eb153f3d37d7c7063ffc9b6a2</anchor>
      <arglist>(const std::string &amp;p, bool isDirectory)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>prettyPath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gae07624c824232706454d5d6d1d1cb5c8</anchor>
      <arglist>(const std::string &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>relativePath</name>
      <anchorfile>a00403.html</anchorfile>
      <anchor>gab2ce1b1de5e4a5c74802d615b4027a7b</anchor>
      <arglist>(const std::string &amp;newbase, const std::string &amp;p)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>RangeUtilities</name>
    <title>Range Utilities</title>
    <filename>a00404.html</filename>
    <class kind="class">Dune::IntegralRange</class>
    <class kind="class">Dune::StaticIntegralRange</class>
    <class kind="struct">Dune::ValueTransformationTag</class>
    <class kind="struct">Dune::IteratorTransformationTag</class>
    <class kind="class">Dune::TransformedRangeView</class>
    <member kind="function">
      <type>T::value_type</type>
      <name>max_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaf05bafe739a71f1e7f30780dbae4fa05</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>T::value_type</type>
      <name>min_value</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa56de4535eff55ba6d5e418fd26b686c</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga19dd21ff930466597df962ae58d58c57</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>any_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaaca8a2450469eb41c338d8f51231fc34</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga3f11c34177907a5c592990a5f4840e92</anchor>
      <arglist>(const T &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>all_true</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga1782fbfe7b40a75fecb933f720357e54</anchor>
      <arglist>(const std::bitset&lt; N &gt; &amp;b)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga20c2d5d24fba2015d933669de38606f9</anchor>
      <arglist>(T &amp;&amp;from, U &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static IntegralRange&lt; std::decay_t&lt; T &gt; &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gab64fac9d63a7009ccfa29af11ec5fc1c</anchor>
      <arglist>(T &amp;&amp;to) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static StaticIntegralRange&lt; T, to &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gadd0ae414ee372842796c06cee030a78b</anchor>
      <arglist>(std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gae2dd8cb1fce8767381e33a5b834cf55d</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>iteratorTransformedRangeView</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaccf70716194b093e0d21e6da93c108f8</anchor>
      <arglist>(R &amp;&amp;range, const F &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>sparseRange</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>gaa75d4e74da1410405a33a5a62b5710e7</anchor>
      <arglist>(Range &amp;&amp;range)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static StaticIntegralRange&lt; T, to, from &gt;</type>
      <name>range</name>
      <anchorfile>a00404.html</anchorfile>
      <anchor>ga9749b12765838700df3504bcae783e35</anchor>
      <arglist>(std::integral_constant&lt; T, from &gt;, std::integral_constant&lt; T, to &gt;) noexcept</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>StringUtilities</name>
    <title>String Utilities</title>
    <filename>a00405.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>hasPrefix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gaf31028edab397ce01e0192a2823488f7</anchor>
      <arglist>(const C &amp;c, const char *prefix)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasSuffix</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>ga560ea1a14403e04148126a2e9396dea2</anchor>
      <arglist>(const C &amp;c, const char *suffix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>formatString</name>
      <anchorfile>a00405.html</anchorfile>
      <anchor>gab825672ce0273462cb092bba70f39d0b</anchor>
      <arglist>(const std::string &amp;s, const T &amp;... args)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>TupleUtilities</name>
    <title>Tuple Utilities</title>
    <filename>a00406.html</filename>
    <file>tupleutility.hh</file>
    <class kind="struct">Dune::TupleAccessTraits</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T * &gt;</class>
    <class kind="struct">Dune::TupleAccessTraits&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::NullPointerInitialiser</class>
    <class kind="struct">Dune::NullPointerInitialiser&lt; std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="struct">Dune::ForEachType</class>
    <class kind="struct">Dune::ForEachType&lt; TE, std::tuple&lt; Args... &gt; &gt;</class>
    <class kind="class">Dune::TransformTupleFunctor</class>
    <class kind="struct">Dune::TransformTupleFunctor::TypeEvaluator</class>
    <class kind="struct">Dune::AddRefTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator</class>
    <class kind="struct">Dune::AddPtrTypeEvaluator&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AtType</class>
    <class kind="struct">Dune::At</class>
    <class kind="struct">Dune::PointerPairDeletor</class>
    <class kind="class">Dune::FirstPredicateIndex</class>
    <class kind="struct">Dune::IsType</class>
    <class kind="struct">Dune::IsType::Predicate</class>
    <class kind="struct">Dune::FirstTypeIndex</class>
    <class kind="struct">Dune::PushBackTuple</class>
    <class kind="struct">Dune::PushBackTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::PushFrontTuple</class>
    <class kind="struct">Dune::PushFrontTuple&lt; typename std::tuple&lt; Args... &gt;, T &gt;</class>
    <class kind="struct">Dune::ReduceTuple</class>
    <class kind="struct">Dune::ReduceTuple&lt; F, Tuple, Seed, 0 &gt;</class>
    <class kind="struct">Dune::JoinTuples</class>
    <class kind="struct">Dune::FlattenTuple</class>
    <member kind="typedef">
      <type>std::add_const&lt; T &gt;::type &amp;</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga041f1e2352cf960c2cdabcc24b63810b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7ac7c737f08242dabc75d211dffb4573</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const std::remove_const&lt; T &gt;::type &amp;</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaf3eb742968041769424b84691408fb73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::add_const&lt; T &gt;::type *</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaf5d4dd28478959589b3ea38408a58c8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga340eaa6d59fbad9efa50f39495267dde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga12185fab48344d079604e6357fe83025</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga2613d7a17e0204d5184be226f62c528d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>NonConstType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7642b9a2b63fc07ad3adcbfa7742bc71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>ParameterType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaef361574ba7087d6324f129026b13d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; Args... &gt;</type>
      <name>ResultType</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga54bf4fc69e946380c712ba483d7e8d3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; typename TE&lt; Args &gt;::Type... &gt;</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gae36d1b293a8e0e6a505be040434331e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga9089c4ce2c50287440a7970a8629343e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; T &gt;::type *</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga3f79c29b08ec96b9cbc7a2dafa05932a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_reference&lt; T &gt;::type *</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga5a1f880a8524d4366bfdf5c3495707d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple_element&lt; std::tuple_size&lt; Tuple &gt;::value - N - 1, Tuple &gt;::type</type>
      <name>Type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga79482cfe9e95004e408a5fc22bed5957</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; Args..., T &gt;</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gab4981425c1728ed7690aec0f7895ca14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple&lt; T, Args... &gt;</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gabd81573d00ffd85f700fba2552c3f45c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReduceTuple&lt; F, Tuple, Seed, N-1 &gt;::type</type>
      <name>Accumulated</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga65dd729f95b540d3ad4d8b510d19a69d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::tuple_element&lt; N-1, Tuple &gt;::type</type>
      <name>Value</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga780338238a75b8c437baf30e7bde9002</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>F&lt; Accumulated, Value &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga7be50b03070a878f2d6dd778443b2234</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Seed</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga3c82c919222082b94e5610411a7ea382</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReduceTuple&lt; PushBackTuple, Tail, Head &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga61efbf30dbd7906f2922063af3068a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReduceTuple&lt; JoinTuples, Tuple &gt;::type</type>
      <name>type</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaa580e2f88998695fd3ba5749283d6183</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>applyPartial</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaeeffbe0f382283c9a2314a3947e54be9</anchor>
      <arglist>(F &amp;&amp;f, ArgTuple &amp;&amp;args, std::integer_sequence&lt; I, i... &gt;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ResultType</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga4eee92ad122054a54cbb68659499f090</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>genericTransformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gaee981bf99011a9bc2dd496a7d486e4ab</anchor>
      <arglist>(Tuple &amp;&amp;t, Functor &amp;&amp;f) -&gt; decltype(genericTransformTupleBackend(t, f))</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TransformTupleFunctor</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga5e2f53ce863d3763ea065a2af450a6e5</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga72cc2a2c399ba265680ee260354def7b</anchor>
      <arglist>(T &amp;&amp;t) -&gt; decltype(this-&gt;apply(t, std::index_sequence_for&lt; Args... &gt;{})) const</arglist>
    </member>
    <member kind="function">
      <type>TransformTupleFunctor&lt; TE, Args... &gt;</type>
      <name>makeTransformTupleFunctor</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gab09a0e6719518183a81d60695510186a</anchor>
      <arglist>(Args &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>transformTuple</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga24fcc49c0d83971073f4e0bd5e96748b</anchor>
      <arglist>(Tuple &amp;&amp;orig, Args &amp;&amp;... args) -&gt; decltype(genericTransformTuple(orig, makeTransformTupleFunctor&lt; TypeEvaluator &gt;(args...)))</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga420a17ec4f5415c1aa51c01da6a04a38</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>gac945ea1ce184ff4c0c0ed12497774afc</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Type</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga631ae1fa474cb50d89fde7b5d89deeab</anchor>
      <arglist>(T &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TupleAccessTraits&lt; typename AtType&lt; N, Tuple &gt;::Type &gt;::NonConstType</type>
      <name>get</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga25bd965ead78cac443c8ed01c8f70672</anchor>
      <arglist>(Tuple &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static TupleAccessTraits&lt; typename AtType&lt; N, Tuple &gt;::Type &gt;::ConstType</type>
      <name>get</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga864db2500c6da8ba583ac288c76bdd19</anchor>
      <arglist>(const Tuple &amp;t)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00406.html</anchorfile>
      <anchor>ga07b35bb47020e1850b89d151ca24d24b</anchor>
      <arglist>(std::tuple&lt; Ts... &gt; &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>TypeUtilities</name>
    <title>Type Utilities</title>
    <filename>a00407.html</filename>
    <class kind="struct">Dune::MetaType</class>
    <class kind="struct">Dune::IsTypeList</class>
    <class kind="struct">Dune::IsTypeList&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::IsEmptyTypeList</class>
    <class kind="struct">Dune::TypeListSize&lt; TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::TypeListElement&lt; i, TypeList&lt; T... &gt; &gt;</class>
    <class kind="struct">Dune::PriorityTag</class>
    <class kind="struct">Dune::PriorityTag&lt; 0 &gt;</class>
    <member kind="typedef">
      <type>std::tuple&lt; MetaType&lt; T &gt;... &gt;</type>
      <name>TypeList</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga7e18d05cb5d1e95f0e7c7409ffe9689f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::enable_if_t&lt; not Impl::disableCopyMoveHelper&lt; This, T... &gt;::value, int &gt;</type>
      <name>disableCopyMove</name>
      <anchorfile>a00407.html</anchorfile>
      <anchor>ga5cf0dfc6fe8998b21503cd81c6681afc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>HybridUtilities</name>
    <title>Hybrid Utilities</title>
    <filename>a00408.html</filename>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga0df72c8cdbb69ecf6da9483d5cdac1de</anchor>
      <arglist>(const T &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>elementAt</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gac85f9d601905a3d0001edd94bd67b2d7</anchor>
      <arglist>(Container &amp;&amp;c, Index &amp;&amp;i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaacd5d1927ffa1d96adf1db1fdbaba28c</anchor>
      <arglist>(const Begin &amp;begin, const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integralRange</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1a44b7c50255662ec8d3553925ce9b46</anchor>
      <arglist>(const End &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>forEach</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga2df9e60e21091ed59c4a636b99abbedc</anchor>
      <arglist>(Range &amp;&amp;range, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr T</type>
      <name>accumulate</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaf41421cb94c1a0a3d334eeb409701620</anchor>
      <arglist>(Range &amp;&amp;range, T value, F &amp;&amp;f)</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaac1691e6004f0428bdacab6407152807</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc, ElseFunc &amp;&amp;elseFunc)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>ifElse</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga044cfa54089ac3509d0a3a24b85ef42b</anchor>
      <arglist>(const Condition &amp;condition, IfFunc &amp;&amp;ifFunc)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>equals</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga1f6da8119c5af45fe0413b9f75ef9861</anchor>
      <arglist>(T1 &amp;&amp;t1, T2 &amp;&amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>constexpr decltype(auto)</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>ga57705e4850c91cd0a92b452384bdc0a0</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches, ElseBranch &amp;&amp;elseBranch)</arglist>
    </member>
    <member kind="function">
      <type>constexpr void</type>
      <name>switchCases</name>
      <anchorfile>a00408.html</anchorfile>
      <anchor>gaa3c378c2ae090a6b608ec667486ede4b</anchor>
      <arglist>(const Cases &amp;cases, const Value &amp;value, Branches &amp;&amp;branches)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CxxUtilities</name>
    <title>C++ utilities and backports</title>
    <filename>a00409.html</filename>
    <file>keywords.hh</file>
    <file>proxymemberaccess.hh</file>
    <class kind="class">Dune::IteratorRange</class>
    <class kind="struct">Dune::Std::is_callable</class>
    <class kind="struct">Dune::Std::is_callable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::Std::is_invocable</class>
    <class kind="struct">Dune::Std::is_invocable_r</class>
    <class kind="struct">Dune::Std::nonesuch</class>
    <class kind="struct">Dune::Std::conjunction</class>
    <class kind="struct">Dune::Std::disjunction</class>
    <class kind="struct">Dune::Std::negation</class>
    <class kind="struct">Dune::Empty</class>
    <class kind="struct">Dune::IsInteroperable</class>
    <class kind="struct">Dune::EnableIfInterOperable</class>
    <class kind="struct">Dune::AlwaysFalse</class>
    <class kind="struct">Dune::AlwaysTrue</class>
    <class kind="struct">Dune::IsCallable</class>
    <class kind="struct">Dune::IsCallable&lt; F(Args...), R &gt;</class>
    <class kind="struct">Dune::IsNumber</class>
    <class kind="struct">Dune::HasNaN</class>
    <class kind="struct">Dune::IsIndexable</class>
    <class kind="struct">Dune::IsIterable</class>
    <class kind="struct">Dune::IsTuple</class>
    <class kind="struct">Dune::IsTupleOrDerived</class>
    <class kind="struct">Dune::IsIntegralConstant</class>
    <class kind="struct">Dune::SizeOf</class>
    <class kind="struct">Dune::IntegerSequenceEntry</class>
    <class kind="struct">Dune::AutonomousValueType</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; T &amp;&amp; &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; const T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile T &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; std::vector&lt; bool &gt;::reference &gt;</class>
    <class kind="struct">Dune::AutonomousValueType&lt; volatile const T &gt;</class>
    <class kind="class">Dune::Std::to_false_type</class>
    <class kind="class">Dune::Std::to_true_type</class>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ASSERT_AND_RETURN</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga902aaece2c20a75cbf6daad4957ba069</anchor>
      <arglist>(C, X)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_DEPRECATED</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab56b68b6f47fe5b4f2bbd28d2227ca4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_DEPRECATED_MSG</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga98dcbe0cf30aec44df67e481fd82414c</anchor>
      <arglist>(text)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_NO_DEPRECATED_BEGIN</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga74d440d098178dc5a4adea8f7c160e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_NO_DEPRECATED_END</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga664ae9266c2a074c71746e68aaa8eb6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_UNUSED</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga53be527752cf155b994e29d457629050</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_UNUSED_PARAMETER</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gabedfe90a62e9dfc989b8298fec44801b</anchor>
      <arglist>(parm)</arglist>
    </member>
    <member kind="typedef">
      <type>Impl::detector&lt; Default, void, Op, Args... &gt;</type>
      <name>detected_or</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gadb4713b99082ef169f74666e0ec7a46e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::value_t</type>
      <name>is_detected</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaccaa5104ef0c27be164435f42ef81fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; nonesuch, Op, Args... &gt;::type</type>
      <name>detected_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga67b8ffda29f365419403a66e49ec0ffe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detected_or&lt; Default, Op, Args... &gt;::type</type>
      <name>detected_or_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga2f49a21b2f60f94fa8911db7e32c9703</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_exact</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6778de5ea60a45fdae6db8b6d8c8b6f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::is_convertible&lt; Target, detected_t&lt; Op, Args... &gt; &gt;</type>
      <name>is_detected_convertible</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaf26ed902d20da735bae252683a9ac5ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Impl::voider&lt; Types... &gt;::type</type>
      <name>void_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga6a3de1d2dbd47536c4b007d3a3b108a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::field_type</type>
      <name>field_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gaadd3a3e69d0220b41bb40ebc442d79ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FieldTraits&lt; Type &gt;::real_type</type>
      <name>real_t</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga48aa0bb0268c390d251495eabdac4ae6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename AutonomousValueType&lt; T &gt;::type</type>
      <name>AutonomousValue</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga64c2d9377550162293c4fabd163f457b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>overload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gae007ebc02578de3fe994b28e4378fd80</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>orderedOverload</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga85390a9ae268b1ed2be79b8637e8becd</anchor>
      <arglist>(F &amp;&amp;... f)</arglist>
    </member>
    <member kind="function">
      <type>pointer_or_proxy_holder</type>
      <name>handle_proxy_member_access</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab204e4c1df410966214b242af99406a1</anchor>
      <arglist>(T &amp;&amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; typename std::common_type&lt; Args... &gt;::type, sizeof...(Args)&gt;</type>
      <name>make_array</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga4bc9a120a411bddf93f2c58977befa63</anchor>
      <arglist>(const Args &amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>integerSequenceEntry</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga0fe355ad7447f0f4bc8ae0b6a39f6318</anchor>
      <arglist>(std::integer_sequence&lt; T, t... &gt;, std::integral_constant&lt; std::size_t, index &gt; i)</arglist>
    </member>
    <member kind="function">
      <type>constexpr AutonomousValue&lt; T &gt;</type>
      <name>autoCopy</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>gab256c9245e4037f7f42aa453e00fd97a</anchor>
      <arglist>(T &amp;&amp;v)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga9f0b8af5e80b339c8346a327f28bab33</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_exact_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga043d312181849f21d950de3f7198bac6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>is_detected_convertible_v</name>
      <anchorfile>a00409.html</anchorfile>
      <anchor>ga044daf77dd81fbaeb71a7ce6d15bf761</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>CxxConcepts</name>
    <title>C++ concepts</title>
    <filename>a00410.html</filename>
    <class kind="struct">Dune::Concept::Refines</class>
    <member kind="function">
      <type>constexpr auto</type>
      <name>models</name>
      <anchorfile>a00410.html</anchorfile>
      <anchor>ga91a4108f1ea3f3644e343659a4e25904</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Numbers</name>
    <title>Numbers</title>
    <filename>a00411.html</filename>
    <subgroup>FloatCmp</subgroup>
    <class kind="class">Dune::bigunsignedint</class>
    <class kind="class">Dune::GMPField</class>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_BINOP</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf87f343423f6514fb0bea86e67539446</anchor>
      <arglist>(OP)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga354fc36a88498193df8a295e678de95a</anchor>
      <arglist>(std::ostream &amp;s, const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga4733af4e0faa3a06ea6cd1e030cadfe0</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf1e188eaa5ea83115d8b7137ce9252a5</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga6e7bfd8374b58f7895cb9f7d67fd0ead</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf235b6dd71516eafdd566d673d076339</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga8e48a8a50b777236555abd9ca13528c3</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x, std::uintmax_t y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator+</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga621131a6364d2636e0c66707f8b3d8df</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator-</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf42863ce01d98553d1ceb962b447cec0</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator*</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae09acd40217cc791030af3a38f18a66a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator/</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga0d5daa1e3e2d36c2b186ead3b1152d0a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator%</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gadf2313e3cdc41ab5d6051818637b6e3a</anchor>
      <arglist>(std::uintmax_t x, const bigunsignedint&lt; k &gt; &amp;y)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga7276ad3ad9f0130df9307acf08c0dd8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga6bf30d701bea2cedf6912f27a9e6bc98</anchor>
      <arglist>(Signed x, typename std::enable_if&lt; std::is_integral&lt; Signed &gt;::value &amp;&amp;std::is_signed&lt; Signed &gt;::value &gt;::type *=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bigunsignedint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga89f5344581b995954cad1c1777e9f900</anchor>
      <arglist>(std::uintmax_t x)</arglist>
    </member>
    <member kind="function">
      <type>std::uint_least32_t</type>
      <name>touint</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaf13823151f4fb0d8033b865257fb0adc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>todouble</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gad1e00a0b5b456bbfc5b328ff74fcd0bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga588c20d32be8eda48a3755baba464dd3</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga33d7cece1203eab3cdbbb982fcacd608</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae07a08fd0165093a4a120ab5ab30e3f8</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaea1b22b024fc727899cb356c8301df10</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gabca7e8dbfe73be43c64c517621f5177e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga060fc6f6318d3631ac5a033cb8138458</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator%=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gacb3b8f598053bbbde7cdfe60fe2ef879</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator&amp;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga75df8592292ff5ec40244d5fa6a26427</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator^=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga34d5f252a0f67b144c564b8c2591136c</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt; &amp;</type>
      <name>operator|=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gabdc13f31b8591f91da4f7d1d5956b80d</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator~</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gaaa7d16f0cab60097e45cd6ac53bd6883</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga2602e05148463d58dcf1cd4413aae120</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bigunsignedint&lt; k &gt;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga91333533e6a75129f0c4e5b5e047856d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga65605f984d47febd539f325e213ea8eb</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga609734cdd317cf13ceae75369b7725c3</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga5d1ba34e71ae213e710fabd1fb200c58</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga4a02b0f85e2a0c310392d2e786314233</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>gae5481e0b5ad21c8cd79c5c5bdf411578</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00411.html</anchorfile>
      <anchor>ga84c245fe6f331cc855c4990cc35166d6</anchor>
      <arglist>(const bigunsignedint&lt; k &gt; &amp;x) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>FloatCmp</name>
    <title>FloatCmp</title>
    <filename>a00412.html</filename>
    <class kind="struct">Dune::FloatCmp::EpsilonType</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; std::vector&lt; T, A &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::EpsilonType&lt; FieldVector&lt; T, n &gt; &gt;</class>
    <class kind="struct">Dune::FloatCmp::DefaultEpsilon</class>
    <class kind="class">Dune::FloatCmpOps</class>
    <member kind="enumeration">
      <type></type>
      <name>CmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga4aeb759ed9de8b477a155492aeb2789b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeWeak</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789bacfb0348876cc64404ec31a6ca4b889ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>relativeStrong</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba244e679dffd35be3f0b6cdacd4cd53b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>absolute</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789badaf8946c7ffe8f697b16515f9d880d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultCmpStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga4aeb759ed9de8b477a155492aeb2789ba07502cff1e6a0857c51bec553f241697</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga8507e971c45243aed2c4de1b3736ca04</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardZero</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a01b681db891f7b67fa52a4c2193eea3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>towardInf</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0ba1a9b8cce0034f6b0a6bef4b1eb670</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>downward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a6074c993d9019e8a31f30649602e21b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>upward</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a0e10271b704ebf42395156318e3442bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>defaultRoundingStyle</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gga8507e971c45243aed2c4de1b3736ca04a9d0bc0cf3b15252ab74e9cbeddc805c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>eq</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga50c93e693f102298c61ecb14758f8d5b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ne</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga1d1eabc465f54e3c3dc8dc38189d0ddd</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>gt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae7ebcba7fc2fdf4497eacc57f4971eda</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>lt</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gacca725b16b35b04c4eea0c4ee21757de</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ge</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae8eb5c5d458b2556d5d685bb65161aef</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>le</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>gae9bad71c0f79d8f287fa419dd8bd565b</anchor>
      <arglist>(const T &amp;first, const T &amp;second, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, style &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>round</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga510d97be4644ccab5db0b674d79633c6</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <member kind="function">
      <type>I</type>
      <name>trunc</name>
      <anchorfile>a00412.html</anchorfile>
      <anchor>ga78eaf86b21236f5c55336724e911da08</anchor>
      <arglist>(const T &amp;val, typename EpsilonType&lt; T &gt;::Type epsilon=DefaultEpsilon&lt; T, cstyle &gt;::value())</arglist>
    </member>
    <docanchor file="a00412.html" title="How to compare floats">How_to_compare</docanchor>
    <docanchor file="a00412.html" title="Interface">Interface</docanchor>
  </compound>
  <compound kind="group">
    <name>DebugOut</name>
    <title>Debug output</title>
    <filename>a00413.html</filename>
    <subgroup>StdStreams</subgroup>
    <file>debugstream.hh</file>
    <class kind="struct">Dune::greater_or_equal</class>
    <class kind="struct">Dune::common_bits</class>
    <class kind="class">Dune::DebugStreamError</class>
    <class kind="class">Dune::StreamWrap</class>
    <class kind="class">Dune::DebugStreamState</class>
    <class kind="class">Dune::DebugStream</class>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>DebugLevel</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga7b78ef57d1b77933ab277ebe66c79d94</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gga2d909b8d182854d2d5d9e5d6f4452767ad6324c657abd3cf8771e77b98987500b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gga2d909b8d182854d2d5d9e5d6f4452767ad6324c657abd3cf8771e77b98987500b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>StreamWrap</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga06e3c89ca78a336ab9c5d2d13fbb7d86</anchor>
      <arglist>(std::ostream &amp;_out)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga0f2ab6645431b2552d1d7732583f3a72</anchor>
      <arglist>(std::ostream &amp;out=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaa64698be61f444f86487e2a548ba94ac</anchor>
      <arglist>(DebugStreamState &amp;master, std::ostream &amp;fallback=std::cerr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DebugStream</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaa40005d8956e1d61d55f6f169fb70441</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga1e6a448f92df51f7414cd4b8afeee9a5</anchor>
      <arglist>(const T data)</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga20a49ab839757180aaf025616f0d3093</anchor>
      <arglist>(const int data)</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3aefb2a7c669943437210f98a44aa27e</anchor>
      <arglist>(std::ostream &amp;(*f)(std::ostream &amp;))</arglist>
    </member>
    <member kind="function">
      <type>DebugStream &amp;</type>
      <name>flush</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3f2f0137b862675f9ec2c1e8efbcaa51</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>push</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga72506e0bf5c91c9f2fb661bd2eae2027</anchor>
      <arglist>(bool b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pop</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3fcdade7b18e0d6cbd46c9e8cd051a35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>active</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga474e32959c2a7a9a7e143f6e0b93228b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>attach</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga27a2eade67505c3bf1c01b48731c355c</anchor>
      <arglist>(std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>detach</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga27c3774a0fd87899ddf215dc1d3b44e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>tie</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga6add8418613c3cfaa0ae74bbee8c1820</anchor>
      <arglist>(DebugStreamState &amp;to)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>untie</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga17bdd177c2a2d177ee1c4646f9bd463f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga0133cfa4f3c689ee46d56d409bf53c10</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>out</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga3eaed1d890bb1bc7ba0593b1565d5fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StreamWrap *</type>
      <name>next</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>gaf0931b582e183cb17963d23d7598ae23</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>StreamWrap *</type>
      <name>current</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga8a430d62e0ab862fbbdf6177d64273bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_active</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga4ca51511bad76b44cdd79716fdc5ad39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>_tied</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga82ee54f4b88fb895510ed6d4cc92c02d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>_tied_streams</name>
      <anchorfile>a00413.html</anchorfile>
      <anchor>ga654bf28c5bd8a705856cd19f4bedfa4e</anchor>
      <arglist></arglist>
    </member>
    <docanchor file="a00413.html" title="Applications">DebugAppl</docanchor>
  </compound>
  <compound kind="group">
    <name>DenseMatVec</name>
    <title>Dense Matrix and Vector Template Library</title>
    <filename>a00414.html</filename>
    <file>densematrix.hh</file>
    <file>densevector.hh</file>
    <file>dynmatrix.hh</file>
    <file>dynvector.hh</file>
    <file>fmatrix.hh</file>
    <file>fvector.hh</file>
    <file>scalarmatrixview.hh</file>
    <file>scalarvectorview.hh</file>
    <class kind="struct">Dune::DenseMatrixAssigner</class>
    <class kind="class">Dune::FMatrixError</class>
    <class kind="class">Dune::DenseMatrix</class>
    <class kind="class">Dune::DenseIterator</class>
    <class kind="class">Dune::DenseVector</class>
    <class kind="class">Dune::DiagonalMatrix</class>
    <class kind="struct">Dune::FieldTraits&lt; DiagonalMatrix&lt; K, n &gt; &gt;</class>
    <class kind="class">Dune::DiagonalMatrixWrapper</class>
    <class kind="class">Dune::DiagonalRowVectorConst</class>
    <class kind="class">Dune::DiagonalRowVector</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::const_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVector&lt; K, n &gt; &gt;</class>
    <class kind="struct">Dune::mutable_reference&lt; DiagonalRowVectorConst&lt; K, n &gt; &gt;</class>
    <class kind="class">Dune::ContainerWrapperIterator</class>
    <class kind="struct">Dune::DenseMatrixAssigner&lt; DenseMatrix, DiagonalMatrix&lt; field, N &gt; &gt;</class>
    <class kind="class">Dune::DynamicMatrix</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicMatrix&lt; K &gt; &gt;</class>
    <class kind="class">Dune::DynamicVector</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; DynamicVector&lt; K, Allocator &gt; &gt;</class>
    <class kind="class">Dune::FieldMatrix</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldMatrix&lt; K, ROWS, COLS &gt; &gt;</class>
    <class kind="class">Dune::FieldVector</class>
    <class kind="struct">Dune::DenseMatVecTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::FieldTraits&lt; FieldVector&lt; K, SIZE &gt; &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE &gt;, SIZE &gt;</class>
    <class kind="struct">Dune::IsFieldVectorSizeCorrect&lt; FieldVector&lt; T, SIZE1 &gt;, SIZE &gt;</class>
    <class kind="class">Dune::FMatrixPrecision</class>
    <member kind="typedef">
      <type>K</type>
      <name>value_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gadcf811f77d0dbfbbfbebefe63d8c43c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87d01fed9cbade66ddcb30e6e7132a9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac9eb032eb8b34f1bc84b1e400d059ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga09481dc4c7c3f45b0579995d43476372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>row_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf1a6e61bc81a8a9804fe0254a561ae6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9b9094e6d6e43fb46710781109bfdb94</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type</type>
      <name>row_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga13447d3a2908e8ad336a0eda843bfaf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>const_row_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf180f652fdac3be0ff7b8524113fe6a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type</type>
      <name>const_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8f7c8db5c38abf29d6c1f8bd83443615</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type</type>
      <name>const_row_reference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3403ca2666d15b112cf12fafd1767e8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, reference, reference &gt;</type>
      <name>Iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga639aa5335c30cc8ee2417a333593de58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga458245ddfdee1ffaaf6c11ec6ae42067</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>RowIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf5c630b737a8f3392ad4fe1dad9dcc57</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>row_type::Iterator</type>
      <name>ColIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab64ac4c28d3fcda495eba25241fb9e79</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; const WrapperType, const_reference, const_reference &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga315d0cd528bf70e6654a62695b5d7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8de8ccb891ad1c57b0484806dbe73b17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>ConstRowIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1251d019144b87ca59778aad4dc8f62c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const_row_type::ConstIterator</type>
      <name>ConstColIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2a03765b476586f5023fc291d24bb267</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::field_type</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga06947d572d7c28aab71c731e41de6854</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldTraits&lt; K &gt;::real_type</type>
      <name>real_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaeaa44fc39dd6d14d3c8b05c45ae146fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2753d389d952f80aa7ac04f6088153c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gade7df9db3abf92abcd528582291155fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad3922c94874ab3a70ac449a6ba3ccecb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaed9a3f6117dd8f51703a82e99d7aae45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6177e4e050f2433f1d3428e1f8b7559e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>field_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab8168295c4fb89c606477cf28586535c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>K</type>
      <name>block_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf792a185c9621199110a9542ef08a938</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac3ddede43a63f4059d5d79faf65a31b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVector&lt; K, n &gt;, K, K &amp; &gt;</type>
      <name>Iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga572251fde21884c8131c3191528f4d18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Iterator</type>
      <name>iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1f7d8c693e84ad19fd9e19e414528bd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa83d97fc3470edc150a3f1d0cb10628e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConstIterator</type>
      <name>const_iterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4cf901448080a39815a56eb5ef8b2fef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabc526795104d73a60982e4e56d97f9e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVectorConst&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga249ab0cf1a399fb2ddadbeaa51150721</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga28c984d0ebcafd7c2d413905dedad07d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DiagonalRowVector&lt; K, n &gt;</type>
      <name>type</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6c0dc6df097a09a2706166b882e4b7a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4de9d4f3d6e583bae9bc9721d96827eab3693825fe3059b3704931fe953de2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4ac66d9560e84f7a75b4b709a2a617be3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4a471b1a78929ef5c6c30e2382660d2fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4de9d4f3d6e583bae9bc9721d96827eab3693825fe3059b3704931fe953de2b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>rows</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4ac66d9560e84f7a75b4b709a2a617be3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>cols</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggae4ea3c65ab182a973b2df793fb166ec4a471b1a78929ef5c6c30e2382660d2fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga60fecb5782019c6a86a0d4b55635332da6b3b5d6bf1c5e5a892662f36f145ceeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>blocklevel</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gga6d5cb3936b8f70953478ee190a48955aa26cd4f000c9ccd215a6f924e745d3356</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ggaec8ea60a6809d965620d55797178da81a404d3a335a974912f1c0411fd2b19882</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga46978987490dbf404514b63b984be43d</anchor>
      <arglist>(std::ostream &amp;s, const DenseMatrix&lt; MAT &gt; &amp;a)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>size</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38a3734ba11bfb7fbd4732e5228e84a1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa7102faf22aad2b37cc47d75057202cd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga56a7618c84b30f163c77fd553be9e054</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac2bf1d100df6d7f3d03f0998efc2bcb0</anchor>
      <arglist>(const FieldVector&lt; K, n &gt; &amp;diag)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrix</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab5ab7d914659ca7d764da19e101e35ac</anchor>
      <arglist>(std::initializer_list&lt; K &gt; const &amp;l)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1b4eb68ab278eed1b4e55dacea248870</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga907d7c1430e781b523203654085578b5</anchor>
      <arglist>(const DiagonalMatrix&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaee04e979459a18266f295fd99e3bb691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga94714f2dde399fa154e52382c4d3cda8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad89bc42c802d958671501491587c0f38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacd2841f9061763615a3bce3a01dd824c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga88e4d37962ccbd1b73bbe2aa879992f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7014752ec03514e5ebee42e165aadf01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gafa0b37bcc31038479dd5e90317fdd82d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga04b3f46e85cf5ce92eb4b753943d2073</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gadc88750845bd9743902b9246043d4f97</anchor>
      <arglist>(const DiagonalMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabe1968feb8b539d9649aa69ea6f028de</anchor>
      <arglist>(const DiagonalMatrix &amp;y)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator+=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf9c5b000b3fc0e2cc416781c6846e6c7</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator-=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaedf6b0b5e4ca3b21160a2da6c9959a68</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator*=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf7d4ed530caa73e40681138164a99fac</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalMatrix &amp;</type>
      <name>operator/=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac119d61f5a9bf9c81ecdbc6c4f449576</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaef1633372bfdca4c3bc4129b2fa56ef1</anchor>
      <arglist>(const DiagonalMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87068aa84d9da6a366d6c67604f85af1</anchor>
      <arglist>(const DiagonalMatrix &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6fa5eec63f549ecc9dd9dc176ce63740</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa717728d4d27dec2e6ce372221dddd01</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga62c08731942334e813a6a1aa3985ff38</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga603ceeb6fa1346b10916036adbe35f1b</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>umhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaccd611007f93912d4c4158385fe3b7a4</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8c221229831d9e57ce34a1f4178539d1</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga52c9ef16affc5021704a36197681bb35</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>mmhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga061f3427164b2ba7ff5a846351448f17</anchor>
      <arglist>(const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac78b1e58e7f010270d0565f2a921d08b</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmtv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaa5e5c43395e9abeddd0a9838c14aa06</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>usmhv</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1ccf762bbe7f73d0837307eef4ebd450</anchor>
      <arglist>(const typename FieldTraits&lt; Y &gt;::field_type &amp;alpha, const X &amp;x, Y &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>frobenius_norm</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6fc0a92462ebff6e360c1300d768bb99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>frobenius_norm2</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa557f09b33880f4b4d83798509433799</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>infinity_norm</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac7fbb06a8e8a20068533352eba7d89e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>infinity_norm_real</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga61e3e67970d81f5801a79c2e453080a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>solve</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3c2b067eb64651085f02d5b7c28b2e5b</anchor>
      <arglist>(V &amp;x, const V &amp;b) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invert</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab189c94bae009606e2fef2e1ac586b83</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>K</type>
      <name>determinant</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae0ee428fe48195ee28b514b3092cca38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3d22ae04806049201ad022e7ce7f6024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_type</type>
      <name>M</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga1ba6f480961f5cf42416f9608af1448d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2e350317ef431781d40c775f218db758</anchor>
      <arglist>(size_type i, size_type j) const</arglist>
    </member>
    <member kind="function">
      <type>reference</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaba6942dfc228d0ea47d50f1615342d19</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const_reference</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga44e8e6c2bcff6c2ce10f3eab0b9b18d7</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga96b90cfedbd58f16564437a2e855787e</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga493779b8edaa825f6ab32382912ecdfb</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>const FieldVector&lt; K, n &gt; &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab9eb1e695cfd7cd0002c3e178e33d5cd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; K, n &gt; &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae674bf3d7093a75c2bdcb231ec084e1a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaec4b856260bbe814628142729127c5d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga6207194fb0de60699bed536aa655896f</anchor>
      <arglist>(const DiagonalMatrixType *mat)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga946866a34f2a843eed8ddbffa1c9a9f6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>row_type *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa97cbfbcf81ba3ddbe09a9c4e39a7e30</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa8ff4d2d7d2f8d66275fa39a1854e883</anchor>
      <arglist>(const DiagonalMatrixWrapper &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVectorConst</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad49ae9729b45e967f0bd6cc38614b0a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVectorConst</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5050d4c2fc205f1f8833e446b1da6a9c</anchor>
      <arglist>(K *p, int col)</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7063cafb858f9f338989a6a568b79dce</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>identical</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga4eecc2e9db4308fb75895910d62cce10</anchor>
      <arglist>(const DiagonalRowVectorConst&lt; K, n &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga45be74b160bd2711a82493e8a6a120b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad2332579a4fac24ca75ea96793853584</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga29838080165b9cf9895182df583fbe61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaebf1ad8b40eb68c95b18ca7b37ecf2b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9cdb480af4da23f9dd136df870224687</anchor>
      <arglist>(const DiagonalRowVectorConst &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>N</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gab4b9ce314796b731b411aed64280c67e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>dim</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0b810008a215372152ad626668d61c77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rowIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7ff9628fcc62fe7cddc84ed440bd0928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const K &amp;</type>
      <name>diagonal</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gabacfd872748c449bcd96bfbf4d2d26b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>size_type</type>
      <name>realIndex</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c630492b619b394b9bde9e322db3c62</anchor>
      <arglist>([[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>K *</type>
      <name>pointer</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7c57cb95789100a313f5d9463fa6746f</anchor>
      <arglist>([[maybe_unused]] size_type i) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiagonalRowVectorConst *</type>
      <name>operator&amp;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac258afffbcdec3f2611706beae86f1ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga9a0a07583b2e5b6a51ae11b8bfcbd1bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DiagonalRowVector</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3986b9fff8b3c16a866c2406651d7422</anchor>
      <arglist>(K *p, int col)</arglist>
    </member>
    <member kind="function">
      <type>DiagonalRowVector &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8f34f0cbc88be845663576b3f2f17c87</anchor>
      <arglist>(const K &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>K &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3f108f3e315b748a428e2b52553f7d94</anchor>
      <arglist>([[maybe_unused]] size_type i)</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga8b9c13d9525660d7fc2dc176e3e97790</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac174414c1c1c7f868b9150feb3a0606f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeEnd</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5f082c9c42c9fa73f437d6431e77731d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>beforeBegin</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3e1a29732b794c3a874eb8e3562d4829</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>DiagonalRowVector *</type>
      <name>operator&amp;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gad6d7c8c6e0ef12c5725580bc4a30b235</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga872742fba25446c6752c40ab88e6cfba</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38dbfe91ed8a1a8630dbfa9df4b99fff</anchor>
      <arglist>(CW containerWrapper, int position)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga3ef8e56f47d0d37a9490bd035c83c7eb</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ContainerWrapperIterator</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacf5d64531c6d47f667d668c02aadcc03</anchor>
      <arglist>(const MyType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ContainerWrapperIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga64dfca582bd5626a5950370e78fd12ce</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>operator-&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga800b2225513a54e8c950dc3cd05a969e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf1fbe0db5c5f0273e594cb909a5c05f1</anchor>
      <arglist>(const MyType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>dereference</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga82f913f79ccfbcd35694f89d780801c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga220bff72fe98ed85415cf4f288f8f430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>decrement</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaadc6eaf9a670b55fcdd740f600178ac</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>R</type>
      <name>elementAt</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga57fa166ff95ca35bb3afd5e89032cbef</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>advance</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga87e16c8e8f21a72d2451398ef906e2a9</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>distanceTo</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5d290606b2f6bcfd426fc5f5a98243eb</anchor>
      <arglist>(OtherContainerWrapperIteratorType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>std::ptrdiff_t</type>
      <name>index</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaab7ef91d43ee3ba94aebb3783ac63e70</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gacdc8dd0929e24775063d1bae351a6741</anchor>
      <arglist>(DenseMatrix &amp;denseMatrix, DiagonalMatrix&lt; field, N &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaf26a8b04e2b33adf0ddc79868ad2b58d</anchor>
      <arglist>(std::ostream &amp;s, const DenseVector&lt; V &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga5fd7ba8e53d3022e0cfe8f94ed6c8ff4</anchor>
      <arglist>(std::istream &amp;in, DynamicVector&lt; K, Allocator &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::istream &amp;</type>
      <name>operator&gt;&gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2f859ab39b4bf4fc0164e49deb986ccb</anchor>
      <arglist>(std::istream &amp;in, FieldVector&lt; K, SIZE &gt; &amp;v)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>K *</type>
      <name>p_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga7fdbefcb056f8f38dd2bd91840aeb9e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>row_</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga38be35b1190cff72ee6a1c7f9e12bcb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; const MyType, reference, reference &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gae5c2895dac94530f6a361dd95b99e023</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; const MyType, const_reference, const_reference &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga2076846ca5fa9e66b8330e79de0fc823</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac6afa6f8fcd18e637a6c19defef4a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; DiagonalRowVectorConst&lt; K, n &gt;, const K, const K &amp; &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaaac591e159e5002652b8fe8ee74aad00</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>DiagonalMatrixWrapper</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gac6afa6f8fcd18e637a6c19defef4a7fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; DiagonalRowVector&lt; K, n &gt;, K, K &amp; &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga845250c07881e349f674401da1ed724b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; CW, typename mutable_reference&lt; T &gt;::type, typename mutable_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaacc10491444d2bcc379b214a08f6a876</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>ContainerWrapperIterator&lt; CW, typename const_reference&lt; T &gt;::type, typename const_reference&lt; R &gt;::type &gt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>ga0546bde670c75bae25ccc5a5dc51eb53</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00414.html</anchorfile>
      <anchor>gaa85c3f5efb63c4b5480eb4c558697b59</anchor>
      <arglist>(std::ostream &amp;s, const DiagonalMatrix&lt; K, n &gt; &amp;a)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Exceptions</name>
    <title>Exception handling</title>
    <filename>a00415.html</filename>
    <file>exceptions.hh</file>
    <class kind="class">Dune::Exception</class>
    <class kind="struct">Dune::ExceptionHook</class>
    <class kind="class">Dune::IOError</class>
    <class kind="class">Dune::MathError</class>
    <class kind="class">Dune::RangeError</class>
    <class kind="class">Dune::NotImplemented</class>
    <class kind="class">Dune::SystemError</class>
    <class kind="class">Dune::OutOfMemoryError</class>
    <class kind="class">Dune::InvalidStateException</class>
    <class kind="class">Dune::ParallelError</class>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_THROW</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad7fce127d6eaabe773adbc409514f21e</anchor>
      <arglist>(E, m)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Exception</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga01c6ef86d8728e10ff8b61fdca89b34f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>message</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga63defda88a6437cc9a3dbda91346177f</anchor>
      <arglist>(const std::string &amp;msg)</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>what</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gad513d0dc7eb0ba16e634b4048409c417</anchor>
      <arglist>() const noexcept override</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga297201b53f24b1d4758c1e8fd94970bd</anchor>
      <arglist>(ExceptionHook *hook)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>clearHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>ga4c7f953a47e9ce57ad658f553db83e8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~ExceptionHook</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gac5b2708f8a37c9a4ebb890e4a1545c1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>operator()</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gab7d05055167bdb067cce622f051cb551</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00415.html</anchorfile>
      <anchor>gae09dcfbbe07912030b1413ad5ee706c6</anchor>
      <arglist>(std::ostream &amp;stream, const Exception &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>GenericIterator</name>
    <title>GenericIterator</title>
    <filename>a00416.html</filename>
    <class kind="class">Dune::GenericIterator</class>
  </compound>
  <compound kind="group">
    <name>IteratorFacades</name>
    <title>Iterator facades</title>
    <filename>a00417.html</filename>
    <subgroup>GenericIterator</subgroup>
    <class kind="class">Dune::ForwardIteratorFacade</class>
    <class kind="class">Dune::BidirectionalIteratorFacade</class>
    <class kind="class">Dune::RandomAccessIteratorFacade</class>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gad89f7fc265d9bd63c5b5a8da6748d8af</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga1369bc3ae1876892c6567eff7987620f</anchor>
      <arglist>(const ForwardIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const ForwardIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if&lt; std::is_convertible&lt; T2, T1 &gt;::value, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga0a147b2ec114b90e57366216029b40bc</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gace8cd0fee28b999a64ce7a75ca582cae</anchor>
      <arglist>(const BidirectionalIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const BidirectionalIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator==</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga639a6e346454c1d6635f21ea15af4032</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator!=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga78d64b70022a4945cb797908fb3f6d65</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gaa5760aff14000ebe9042e042b31db949</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&lt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadf0c29cb2d498e30122d48b15db41f7f</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga4cd2214e489cbe140c0394a24f7d77fa</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, bool &gt;::type</type>
      <name>operator&gt;=</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>gadd0f438316b237180be4c98e915da261</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>EnableIfInterOperable&lt; T1, T2, D &gt;::type</type>
      <name>operator-</name>
      <anchorfile>a00417.html</anchorfile>
      <anchor>ga567e9701961fedd3a613c9f6d3b68b5d</anchor>
      <arglist>(const RandomAccessIteratorFacade&lt; T1, V1, R1, D &gt; &amp;lhs, const RandomAccessIteratorFacade&lt; T2, V2, R2, D &gt; &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>ParallelCommunication</name>
    <title>Parallel Communication</title>
    <filename>a00418.html</filename>
    <subgroup>Common_Parallel</subgroup>
    <file>communication.hh</file>
    <file>communication.hh</file>
    <file>mpicommunication.hh</file>
    <file>mpidata.hh</file>
    <file>mpiguard.hh</file>
    <file>mpihelper.hh</file>
    <file>mpipack.hh</file>
    <file>mpitraits.hh</file>
    <class kind="class">Dune::ParallelError</class>
    <class kind="class">Dune::Communication</class>
    <class kind="class">Dune::Communication&lt; MPI_Comm &gt;</class>
    <class kind="class">Dune::MPIGuardError</class>
    <class kind="class">Dune::MPIGuard</class>
    <class kind="class">Dune::MPIHelper</class>
  </compound>
  <compound kind="group">
    <name>Common_Parallel</name>
    <title>Parallel Computing based on Indexsets</title>
    <filename>a00419.html</filename>
    <file>communicator.hh</file>
    <file>indexset.hh</file>
    <file>indicessyncer.hh</file>
    <file>parallel/interface.hh</file>
    <file>localindex.hh</file>
    <file>plocalindex.hh</file>
    <file>remoteindices.hh</file>
    <file>selection.hh</file>
    <file>variablesizecommunicator.hh</file>
    <class kind="struct">Dune::SizeOne</class>
    <class kind="struct">Dune::VariableSize</class>
    <class kind="struct">Dune::CommPolicy</class>
    <class kind="class">Dune::BufferedCommunicator</class>
    <class kind="class">Dune::IndexPair</class>
    <class kind="struct">Dune::MPITraits</class>
    <class kind="class">Dune::InvalidIndexSetState</class>
    <class kind="class">Dune::GlobalLookupIndexSet</class>
    <class kind="class">Dune::ParallelIndexSet</class>
    <class kind="class">Dune::ParallelIndexSet::iterator</class>
    <class kind="struct">Dune::LocalIndexComparator</class>
    <class kind="struct">Dune::IndexSetSortFunctor</class>
    <class kind="class">Dune::IndicesSyncer</class>
    <class kind="class">Dune::Interface</class>
    <class kind="class">Dune::LocalIndex</class>
    <class kind="class">Dune::ParallelLocalIndex</class>
    <class kind="struct">Dune::LocalIndexComparator&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <class kind="class">Dune::MPITraits&lt; ParallelLocalIndex&lt; T &gt; &gt;</class>
    <class kind="class">Dune::MPITraits&lt; IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &gt;</class>
    <class kind="class">Dune::RemoteIndices</class>
    <class kind="class">Dune::RemoteIndex</class>
    <class kind="class">Dune::RemoteIndexListModifier</class>
    <class kind="class">Dune::CollectiveIterator</class>
    <class kind="class">Dune::OwnerOverlapCopyCommunication</class>
    <class kind="class">Dune::SelectionIterator</class>
    <class kind="class">Dune::UncachedSelection</class>
    <class kind="class">Dune::Selection</class>
    <class kind="class">Dune::VariableSizeCommunicator</class>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac7ba161114dcda480ec1e03fade5d887</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga43eed1b88f2bc2e0b683465638df39fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TG</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac025d93d84144d1ab5bcddfbc1760d53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TL</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga80f93e9c02b5f29b011140b3a87d39af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair&lt; GlobalIndex, LocalIndex &gt;</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gafa0d2c4698da918525f35e3f5b74f1d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ArrayList&lt; IndexPair, N &gt;::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2d339136484321658ecf88e2e4dfa28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>I</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7b244f68738204004286a1e6833ef95f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex</type>
      <name>LocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8b7de52f424abbff8027cd528e1f0c58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf66c2a53e3745f2eb80a457f3358e484</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga581c7a4200df70547189e64988a72e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IndexPair&lt; typename I::GlobalIndex, typename I::LocalIndex &gt;</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga568f6b5fd92dc6df720467dbd99f4c90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa1e45a96ec6d391e816cf3a6ecd3ba71</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::IndexPair</type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae01c9c9d98e213ba18897c0fc69dba78</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::GlobalIndex</type>
      <name>GlobalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga44992bb99b3f3f3d7c9badb9c7ff74c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ParallelIndexSet::LocalIndex::Attribute</type>
      <name>Attribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6087c4c3aa666ff87aa4ea4b9876646a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::RemoteIndices&lt; ParallelIndexSet &gt;</type>
      <name>RemoteIndices</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d307cac53327747eab59d2c3bae34ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ParallelIndexSetState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1b1dd66b80964351e68f44bddb32593e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUND</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea30f779eddf23499c322b692257ae7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESIZE</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea2fbc0ce9b92442e69a405a452f2ef416</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arraySize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ggadb29d8d416b503757d405f85055c6bc0a7f95f052a4180cbaae53571e19da4d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>LocalIndexState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4f24bf6f596bf963429e084ecf3a0835</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VALID</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835a10e7469c306a6a1cc9c8c89ce65b09f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DELETED</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga4f24bf6f596bf963429e084ecf3a0835ab8c498280a429843d8eaa93ddfb8fb02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>arraySize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ggadb29d8d416b503757d405f85055c6bc0a7f95f052a4180cbaae53571e19da4d02</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GROUND</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea30f779eddf23499c322b692257ae7116</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RESIZE</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gga1b1dd66b80964351e68f44bddb32593ea2fbc0ce9b92442e69a405a452f2ef416</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7fcd5b444a9e60cfdc21f7d0cfd22250</anchor>
      <arglist>(std::ostream &amp;os, const IndexPair&lt; TG, TL &gt; &amp;pair)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7795b290702a59497007270c46e2b8c6</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3a50aa86c8ff96eee7ef68200531326d</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0d9a1c3873a538aa66c22b03b406db87</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0bc63043e58d66643b64cbd6b08dfb82</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6cdf9614911aa5cd70ed58663de013c2</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5c5245f4fd0352faad94ca8e9c1f6c6f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga239e646b27f7f35ac944aebb59380913</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadf0b39a244a69d9e7f71811f960a5728</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga912a9eba5f4d34e7e50ef4335b7ba108</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab4b337bd4e613e88381306db889e811f</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad6d5923b72e3214d9f20349b722ea874</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7d670d228f6635f587d21ef117951fd9</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8e4caa12b6c34752c7bc2f01361d3a63</anchor>
      <arglist>(const GlobalIndex &amp;global, const LocalIndex &amp;local)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga73eb42aaa0a54d593d6f537960446d7a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabc5975873aa790a0f3caf5b8c185a1d1</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIndex &amp;</type>
      <name>global</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6ada98944af4bbe180fa595a1d83e245</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndex &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5059e229ed1368fe8aa963f2d47ad6bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const LocalIndex &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9a5c24ac328f8ec0c3004759e96de295</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setLocal</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga98503056ecd6fa927cd9189fa41f91a2</anchor>
      <arglist>(int index)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>iterator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad581672da5ad6ee90838ab86d76987c7</anchor>
      <arglist>(ParallelIndexSet&lt; TG, TL, N &gt; &amp;indexSet, const Father &amp;father)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaab9080b900ad0b31e35b9c0654a763b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const ParallelIndexSetState &amp;</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad7fbeef92f1ee69893d2efcb908e133b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga10a18b0bbba6cbda15a58d7a2ede111f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga314b28a2ac2171f330979eb82c7d48fc</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>add</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa0be4f42ade95057bcb960cafc5e0503</anchor>
      <arglist>(const GlobalIndex &amp;global, const LocalIndex &amp;local)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAsDeleted</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8967dfc42b1855566b7f9a3557f89005</anchor>
      <arglist>(const iterator &amp;position)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endResize</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaadfad947098175e885aa7fd6c5b490a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga34979e144d86dce0cc4e02396a93c140</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9e5e21839535b80fe5e8dc646311feb1</anchor>
      <arglist>(const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>exists</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga21770fef689d2ea8d39eb0e5406f528f</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga501e4895ae57ac9d1203d0a06e5da7ee</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>at</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga785a7eb308c9711cd42ca482b8acd8d3</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5250fda08ab9b507082ed3ed56f1c419</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga56f46f24d39e108bf4ba9c47850c280d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7089f5da6696016802dea2b69a41d264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5aa8fe134aa2ba4f58df512d89e0b3f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>renumberLocal</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d85acf860530070eb101872811f1fc4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seqNo</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac89a8dd444edd8b31795cff2a6cceca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2709e2fa108db124ec66dd46c515c005</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac377e14b5944471054bdb0012008393b</anchor>
      <arglist>(std::ostream &amp;os, const ParallelIndexSet&lt; TG, TL, N &gt; &amp;indexSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf0a14b66fc635c8a66f4346aa1828a88</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset, std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3f3a1d9e4b1a841d77ce3730de247c90</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GlobalLookupIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab501ff12c926340ba45b83cdd7b03d4e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair &amp;</type>
      <name>operator[]</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga49fe17ace8f5d66d985e85dc164ab10b</anchor>
      <arglist>(const GlobalIndex &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const IndexPair *</type>
      <name>pair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga08233ec627b179cc5d07a0e1cd61fec8</anchor>
      <arglist>(const std::size_t &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5ff81c8db1ab0bcaa8dfd4143b2553c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3295a37933fa3765b4df1b234c08644b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>seqNo</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4bbd0e5717acc8a228930efddec0d9b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabad98ca1db16608ebe19e78d5e7baf63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>compare</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga36eca44db71c6631922d8fd76802cee7</anchor>
      <arglist>([[maybe_unused]] const T &amp;t1, [[maybe_unused]] const T &amp;t2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2e9e10ec7895128f5107668eef5d2842</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;i1, const IndexPair&lt; TG, TL &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndicesSyncer</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8b032138e767af75563f7eab24eae18c</anchor>
      <arglist>(ParallelIndexSet &amp;indexSet, RemoteIndices &amp;remoteIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac6edb7facf4c4407f74982989e5f9980</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>sync</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gacf6bdea6809d17b74c69c255b7f4a233</anchor>
      <arglist>(T1 &amp;numberer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MessageInformation</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaed2d8f8eb828f89880dd0c34a11ae486</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>operator()</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga128f76054fe83a7351b52169509fb133</anchor>
      <arglist>([[maybe_unused]] const GlobalIndex &amp;global)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterators</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga00b953618afeea2b679aa8e98e941c04</anchor>
      <arglist>(RemoteIndexList &amp;remoteIndices, GlobalIndexList &amp;globalIndices, BoolList &amp;booleans)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterators</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga067105d3d09142a3273fea7f895b3ebc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Iterators &amp;</type>
      <name>operator++</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5db541e35522db17c6177279d1d3895c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insert</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gafbf0952ffd570eeacfd1bcc119a0cedc</anchor>
      <arglist>(const RemoteIndex &amp;index, const std::pair&lt; GlobalIndex, Attribute &gt; &amp;global)</arglist>
    </member>
    <member kind="function">
      <type>RemoteIndex &amp;</type>
      <name>remoteIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaeaebdfb95678aced9bda71667452ad9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; GlobalIndex, Attribute &gt; &amp;</type>
      <name>globalIndexPair</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga69ed81a421ba1c5d5922d19311ecf8e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Attribute &amp;</type>
      <name>attribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa610ee6661d57d409b9196cbcf1919dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isOld</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga25553194e198f2c97f676004c4f42881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8eecdeb0c362c0ab465367fb5ccdc6f5</anchor>
      <arglist>(RemoteIndexList &amp;remoteIndices, GlobalIndexList &amp;globalIndices, BoolList &amp;booleans)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNotAtEnd</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab0fcc7b81391c31167126e7e965c45b6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isAtEnd</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3d40d4c4f5a210f3a412979934b9d3d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf61fa30bf15e87a0f910b9068f775067</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae5b7bd4e69ee01360e666f12913c1459</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i1, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga058ac87cbdd5c6c4bf3166e8f55efa30</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga94296b1fafb04cd392611a43968df582</anchor>
      <arglist>(const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1, const std::pair&lt; TG, TA &gt; &amp;i2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga300a4a465d5bb251de3953c682d314cb</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga114537d071365593e8ec0ac11de6ac31</anchor>
      <arglist>(const std::pair&lt; TG, TA &gt; &amp;i2, const IndexPair&lt; TG, ParallelLocalIndex&lt; TA &gt; &gt; &amp;i1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>storeGlobalIndicesOfRemoteIndices</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac603bb313a217401041e4afc6fe4fa3a</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, const RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>repairLocalIndexPointers</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33d784101a8baf32ce462c484a90674c</anchor>
      <arglist>(std::map&lt; int, SLList&lt; std::pair&lt; typename T::GlobalIndex, typename T::LocalIndex::Attribute &gt;, A &gt; &gt; &amp;globalMap, RemoteIndices&lt; T, A1 &gt; &amp;remoteIndices, const T &amp;indexSet)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6f6a56e79b01b4bd4385c81502559be3</anchor>
      <arglist>(std::ostream &amp;os, const ParallelLocalIndex&lt; T &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga3f656ae09bca24998c26b42304a9d1b2</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga773d38fd187016eb6fef134776f7d761</anchor>
      <arglist>(const ParallelLocalIndex&lt; T &gt; &amp;p1, const ParallelLocalIndex&lt; T &gt; &amp;p2)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gadff1176482f8b02fb98cc4e08695a2ce</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndex&lt; T1, T2 &gt; &amp;index)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4298476f0be2dd2f85d9fb856ff228a1</anchor>
      <arglist>(std::ostream &amp;os, const RemoteIndices&lt; T, A &gt; &amp;indices)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>buildInterface</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga05121b68560835efae0092c6a9078e78</anchor>
      <arglist>(const R &amp;remoteIndices, const T1 &amp;sourceFlags, const T2 &amp;destFlags, Op &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>MPI_Comm</type>
      <name>communicator</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9bd9ed165844afe33fa8fbccfa4575f8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const InformationMap &amp;</type>
      <name>interfaces</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7cc155572e8fc3567e9db0dbd6e71d2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>InformationMap &amp;</type>
      <name>interfaces</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga437c4911cec3efce1a7bdbe8c514beb4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga427e4574b1e457bbd5b28f8e817c407b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1f0752f49661af9d5bacb90c8910342d</anchor>
      <arglist>(const R &amp;remoteIndices, const T1 &amp;sourceFlags, const T2 &amp;destFlags)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>strip</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5a5a3a7322debca8f959d0f76165806</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad50cd798f6e309875ac63ede115d5691</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Interface</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaab6892f43cc3663b905883124213e8eb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::size_t &amp;</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae0ef0e636fb6deeca4abc05240f74289</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::size_t</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0515e9338e8c8686b4791a50b5e3b036</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndex &amp;</type>
      <name>operator=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7c8ea096790c7ac11677cae3f70659f0</anchor>
      <arglist>(std::size_t index)</arglist>
    </member>
    <member kind="function">
      <type>LocalIndexState</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa2f125895bda6b0c9d9cf8d8aa7e6946</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae134fe3358bd66ec666029d570bdb5c1</anchor>
      <arglist>(LocalIndexState state)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac704d4292815f9acba45ee00a37fc77b</anchor>
      <arglist>(const Attribute &amp;attribute, bool isPublic)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaed09c9747cc10feff6d76487117409e1</anchor>
      <arglist>(size_t localIndex, const Attribute &amp;attribute, bool isPublic=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ParallelLocalIndex</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae17e1ae024e8ef0dc1532125ae0296e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Attribute</type>
      <name>attribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaee488b2250ba0a999ebfc6231d3cbd96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAttribute</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33792062116e47a94116e36fb9d54ca4</anchor>
      <arglist>(const Attribute &amp;attribute)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>local</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga4b260e0b49fdbdeec3c139fcfcc03518</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator size_t</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1be72bf75dc8899d1065b0540f17d18b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ParallelLocalIndex&lt; Attribute &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8f021b0913f65c10de19b9d9084800ef</anchor>
      <arglist>(size_t index)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPublic</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga2554ad11aabc31785663a4f396030d9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalIndexState</type>
      <name>state</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9ee41fe1d95778d467110d8a7eb87f22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setState</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga803d70f66ccc5cc004e30f734bbd3cc8</anchor>
      <arglist>(const LocalIndexState &amp;state)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static MPI_Datatype</type>
      <name>getType</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga841c70a0d146199e4a88408895390856</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga14017845409e8d7c054caea5f8881e1c</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga7668f14afb7dc833db63b46ae0d9a5e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga734b64cf72aa789e44465b669ab9222c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>free</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa67d894e44e69f61d2e547d526230cd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Selection</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaf850420ce20615038f0a4a0ef241058d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad305c289f49e9910203af2456c4f068b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga12176ea64b01c47d9d72cde7eb918a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setIndexSet</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga514215f2f4fbb39b9e8cf2b8ebbf5dce</anchor>
      <arglist>(const ParallelIndexSet &amp;indexset)</arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>publish</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga33a819e22b0d3a4540505de7694bfa01</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>pairs</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga54eb54f050784a2edf79b2d54527af7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>MPITraits&lt; IndexPair&lt; TG, TL &gt; &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gac56f63a1893eb6178552c12f89661016</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GlobalLookupIndexSet&lt; ParallelIndexSet&lt; TG, TL, N &gt; &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga9c2e5b70801cc1d46e6d7235e28c4958</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ParallelIndexSet&lt; GlobalIndex, LocalIndex, N &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga70a8db32087cd2158f8057483bafaeff</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IndicesSyncer&lt; T &gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa0f037d069f3afd0dea7ed07bc56b9f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gab3241ebfbe7018e35320ef06078709c3</anchor>
      <arglist>(std::ostream &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga5c51c63883c3a48dece4440c372d5c53</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga6d384efb29a28c8ae7422e774a464249</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gad03fd1605e39f81e9440cd1547b3066c</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga8824a6d5aef509230254e252dd016258</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga0e707b10e159a91b2d6059cfda435845</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga99b7c1f22d09887b6899092b83bbdff8</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const IndexPair&lt; TG, TL &gt; &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator==</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gae169ffa0362f8e9b1b24666dacb12d1c</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator!=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga15c6ed646bed8a062721d88ba58effaf</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gabdce1156ece87043775b414ad9dbc06b</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga1d24c026726a7289f280e48ecd9911b2</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>ga61ff63328a975bd024f4e0b3d075f28d</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a00419.html</anchorfile>
      <anchor>gaa5849b4f276e6bf502389ecbd4d9c189</anchor>
      <arglist>(const IndexPair&lt; TG, TL &gt; &amp;, const TG &amp;)</arglist>
    </member>
    <docanchor file="a00419.html" title="Parallel Index Sets">IndexSet</docanchor>
    <docanchor file="a00419.html" title="Remote Index Information">remote</docanchor>
    <docanchor file="a00419.html" title="Communication">comm</docanchor>
  </compound>
  <compound kind="group">
    <name>SIMD</name>
    <title>Vectorization</title>
    <filename>a00420.html</filename>
    <subgroup>SIMDApp</subgroup>
    <subgroup>SIMDLib</subgroup>
    <subgroup>SIMDAbstract</subgroup>
  </compound>
  <compound kind="group">
    <name>SIMDApp</name>
    <title>Application Developer&apos;s Interface</title>
    <filename>a00421.html</filename>
    <subgroup>SIMDStandard</subgroup>
    <subgroup>SIMDVc</subgroup>
  </compound>
  <compound kind="group">
    <name>SIMDLib</name>
    <title>Library Developer&apos;s Interface</title>
    <filename>a00422.html</filename>
    <file>simd/interface.hh</file>
    <file>io.hh</file>
    <member kind="typedef">
      <type>typename Overloads::ScalarType&lt; std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Scalar</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf7f6f3418836afcdb2c033509fd2eb91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename Overloads::RebindType&lt; std::decay_t&lt; S &gt;, std::decay_t&lt; V &gt; &gt;::type</type>
      <name>Rebind</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga8d4752fe47def6075b211544a932c709</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gac6a0cf43eb7664581bd8a6954d7ff305</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaca5433c99a350b973623f94491e43a86</anchor>
      <arglist>(std::size_t l, V &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gab5615170452d6ad3d87596cafef62f7c</anchor>
      <arglist>(U &amp;&amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>broadcast</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa0d1652bc61cae3351079ca5510e8d4f</anchor>
      <arglist>(S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1a04d18cec7c2f206e9de49926bfe5a8</anchor>
      <arglist>(M &amp;&amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaed055bc5f93bbb34cee35cdcba278b3d</anchor>
      <arglist>(bool mask, const V &amp;ifTrue, const V &amp;ifFalse)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaa6c890aa2ed0432984358e6e0b487b3f</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gafa18ecd1517a0f3c3ae83c6a6b5e1559</anchor>
      <arglist>(const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17639369fac8b6c516ebf2125849d0f4</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga54577fa7b2752b55d6efd05878ca1e24</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaaee5c9c3caa23996397af767ca52845e</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf404687904c5a04c3ab453b9b19c1562</anchor>
      <arglist>(const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>max</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga88727c2f832123b04cd014d1d6c5f746</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Scalar&lt; V &gt;</type>
      <name>min</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga17a41b619cc1d658d70bc4b643ac778d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga3e3f45a22ca7244829e9adf246ac4a9d</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga19a63bc3591ee6c8fd5706c9be4380bf</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gaf74d4b9a4722c8de326046b89e2acef7</anchor>
      <arglist>(const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="typedef">
      <type>Rebind&lt; bool, V &gt;</type>
      <name>Mask</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>gad41c8f8908cdade89370a34de31ace54</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>lanes</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga1cb6eae7fc34d3c9258a35eb318f6e18</anchor>
      <arglist>(const V &amp;)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>vio</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga5f024733517533308b22bd0b9a5e0820</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>io</name>
      <anchorfile>a00422.html</anchorfile>
      <anchor>ga47000d8c79bf7ab0548867bc01a56cac</anchor>
      <arglist>(const V &amp;v)</arglist>
    </member>
    <docanchor file="a00422.html" title="Understanding SIMD types">understand_simd</docanchor>
    <docanchor file="a00422.html" title="Type promotion issues">SIMDLibPromoWarn</docanchor>
    <docanchor file="a00422.html" title="Limitations of the Abstraction Layer">simd_abstraction_limit</docanchor>
  </compound>
  <compound kind="group">
    <name>SIMDAbstract</name>
    <title>Abstraction Developer&apos;s Interface</title>
    <filename>a00423.html</filename>
    <file>base.hh</file>
    <file>defaults.hh</file>
    <class kind="struct">Dune::Simd::Overloads::ADLTag</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; i &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ADLTag&lt; 0 &gt;</class>
    <class kind="struct">Dune::Simd::Overloads::ScalarType</class>
    <class kind="struct">Dune::Simd::Overloads::RebindType</class>
    <class kind="struct">Dune::Simd::Overloads::LaneCount</class>
    <member kind="function">
      <type>decltype(auto)</type>
      <name>lane</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga172c6bee6a07fdaf412ca0771084d117</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, std::size_t l, V v)=delete</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga2d92cc23bb0b95ca627fa2560c2f9006</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const V &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>constexpr V</type>
      <name>implCast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaacc1dbc07ddc0fd6b237ca18e213c3be</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, const U &amp;u)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>broadcast</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac82cb295f767f7aece888fd9216db1b3</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, MetaType&lt; V &gt;, S s)</arglist>
    </member>
    <member kind="function">
      <type>V</type>
      <name>cond</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gacd3b3b8cae27c30aa73e855afbe904d7</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask&lt; V &gt; &amp;mask, const V &amp;ifTrue, const V &amp;ifFalse)=delete</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gafb35651a7a1777d932462357552bb90c</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gab9dde84db30133b70a28c0b89399bc71</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v1, const V &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gae87036ad8322cb0064cdd3bfad16ca69</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)=delete</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allTrue</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6850149b7bbe8eff67835ecfd8471f7d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>anyFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gaa272813526339482ae077b1a0e52a01e</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>allFalse</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga537e92d4cfd4637707852c7f93c73c74</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const Mask &amp;mask)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>max</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga6be36412c4ee50b1e5023f43e85a53ec</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>min</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga45f575aad94606a1a2afa3698abcee72</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>Mask&lt; V &gt;</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga739860dc7b3d5e5bffd0af618aa07f20</anchor>
      <arglist>(ADLTag&lt; 0, std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>mask</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>gac968f40d2358486033fdc31464a2df7f</anchor>
      <arglist>(ADLTag&lt; 0, !std::is_same&lt; V, Mask&lt; V &gt; &gt;::value &gt;, const V &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskOr</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga8ae87f60e149f0ab44b71fc6624da25d</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>maskAnd</name>
      <anchorfile>a00423.html</anchorfile>
      <anchor>ga77595bdf5b1cfe2377baa16cc52b1cee</anchor>
      <arglist>(ADLTag&lt; 0 &gt;, const V1 &amp;v1, const V2 &amp;v2)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>SIMDStandard</name>
    <title>SIMD Abstraction Implementation for standard types</title>
    <filename>a00424.html</filename>
    <file>standard.hh</file>
  </compound>
  <compound kind="group">
    <name>SIMDVc</name>
    <title>SIMD Abstraction Implementation for Vc</title>
    <filename>a00425.html</filename>
    <file>simd/vc.hh</file>
    <docanchor file="a00425.html" title="Restrictions">SIMDVcRestrictions</docanchor>
  </compound>
  <compound kind="group">
    <name>StdStreams</name>
    <title>Standard Debug Streams</title>
    <filename>a00426.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_MINIMAL_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga3a5303f96d33ae7299d9acd71b736998</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERY_VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga08d48df3a7a0e3bd9c0425aba8004488</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; VERBOSE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DVerbType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga65d14f278ea400db87ffb6a4bc7ed7b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; INFO_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DInfoType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab41f4590c73d6408c89475e28bf18a8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; WARN_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DWarnType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20379ab9c4472509d420e98659683fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; GRAVE_DEBUG_LEVEL, MINIMAL_DEBUG_LEVEL &gt;</type>
      <name>DGraveType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga70e0eedd6c7f613d6e9608fabb4d240d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DebugStream&lt; 1 &gt;</type>
      <name>DErrType</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga768c0b513889d713fd0017ef7ae35056</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>MINIMAL_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga2c074d4df6d5fa8fbe8b4e9d44b35df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERY_VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga490cf91178ed464c3eff5871b4b03c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DVVerbType</type>
      <name>dvverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga20bcb085658a3b88393e47a1d36d667c</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>VERBOSE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gabdcf3b4c1aefae00afd3ecaf84f755bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DVerbType</type>
      <name>dverb</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab8900dadc584357856d4f6cc06324cea</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>INFO_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaabd88387e7eb826323b9f7d3a53a283e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DInfoType</type>
      <name>dinfo</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gab5d2fce8ed49f95067d9b5b54d6f5def</anchor>
      <arglist>(std::cout)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>WARN_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gaed2aba7a7e55b026716d5027406566a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DWarnType</type>
      <name>dwarn</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4bff1feeab1e96f08aca7796cc69b4ea</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const DebugLevel</type>
      <name>GRAVE_DEBUG_LEVEL</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga4fc828eb9bb6c6b6143034b9211d2b72</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>DGraveType</type>
      <name>dgrave</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>ga765267750e6b2718fa718ab5f9fa1ed9</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
    <member kind="variable">
      <type>DErrType</type>
      <name>derr</name>
      <anchorfile>a00426.html</anchorfile>
      <anchor>gacaa61db1e034d693335d33d3919ba9ca</anchor>
      <arglist>(std::cerr)</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>modules</name>
    <title>Modules</title>
    <filename>a04323.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>dune-common Automatic Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="Modules">mods</docanchor>
  </compound>
</tagfile>
