<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.9.1" doxygen_gitid="ef9b20ac7f8a8621fcfc299f8bd0b80422390f4b">
  <compound kind="file">
    <name>adaptcallback.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00218.html</filename>
    <class kind="class">Dune::AdaptDataHandleInterface</class>
    <class kind="class">Dune::AdaptDataHandle</class>
    <class kind="class">Dune::CombinedAdaptProlongRestrict</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>agrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00476.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00218" name="adaptcallback.hh" local="no" imported="no">dune/grid/common/adaptcallback.hh</includes>
    <includes id="a00314" name="sizecache.hh" local="no" imported="no">dune/grid/common/sizecache.hh</includes>
    <includes id="a00482" name="albertaheader.hh" local="yes" imported="no">albertaheader.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a06645" name="albertagrid/capabilities.hh" local="no" imported="no">dune/grid/albertagrid/capabilities.hh</includes>
    <includes id="a06633" name="albertagrid/backuprestore.hh" local="no" imported="no">dune/grid/albertagrid/backuprestore.hh</includes>
    <includes id="a00491" name="coordcache.hh" local="no" imported="no">dune/grid/albertagrid/coordcache.hh</includes>
    <includes id="a06714" name="albertagrid/gridfamily.hh" local="no" imported="no">dune/grid/albertagrid/gridfamily.hh</includes>
    <includes id="a00539" name="level.hh" local="no" imported="no">dune/grid/albertagrid/level.hh</includes>
    <includes id="a06741" name="albertagrid/intersection.hh" local="no" imported="no">dune/grid/albertagrid/intersection.hh</includes>
    <includes id="a06750" name="albertagrid/intersectioniterator.hh" local="no" imported="no">dune/grid/albertagrid/intersectioniterator.hh</includes>
    <includes id="a06654" name="albertagrid/datahandle.hh" local="no" imported="no">dune/grid/albertagrid/datahandle.hh</includes>
    <includes id="a06684" name="albertagrid/entityseed.hh" local="no" imported="no">dune/grid/albertagrid/entityseed.hh</includes>
    <includes id="a06735" name="albertagrid/indexsets.hh" local="yes" imported="no">indexsets.hh</includes>
    <includes id="a06693" name="albertagrid/geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a06675" name="albertagrid/entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a00524" name="hierarchiciterator.hh" local="yes" imported="no">hierarchiciterator.hh</includes>
    <includes id="a00575" name="treeiterator.hh" local="yes" imported="no">treeiterator.hh</includes>
    <includes id="a00542" name="leveliterator.hh" local="yes" imported="no">leveliterator.hh</includes>
    <includes id="a00536" name="leafiterator.hh" local="yes" imported="no">leafiterator.hh</includes>
    <includes id="a00479" name="albertagrid.cc" local="yes" imported="no">albertagrid.cc</includes>
    <includes id="a00581" name="undefine-3.0.hh" local="no" imported="no">dune/grid/albertagrid/undefine-3.0.hh</includes>
    <class kind="class">Dune::AlbertaGrid</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>_ALBERTA_H_</name>
      <anchorfile>a00476.html</anchorfile>
      <anchor>a1067446415cacb23802d0f38ff2017d7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00479.html</filename>
    <includes id="a00515" name="geometry.cc" local="yes" imported="no">geometry.cc</includes>
    <includes id="a00512" name="entity.cc" local="yes" imported="no">entity.cc</includes>
    <includes id="a00533" name="intersection.cc" local="yes" imported="no">intersection.cc</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTAGRID_CC</name>
      <anchorfile>a00479.html</anchorfile>
      <anchor>a53133f6d063b9eb2237193ae58eef706</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkAlbertaDimensions</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a9add90da0373ad65d2bb698209911981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static void *</type>
      <name>adaptationDataHandler_</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae8607628dd0ee8dfb96046221b374752</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00584.html</filename>
    <includes id="a00476" name="agrid.hh" local="yes" imported="no">albertagrid/agrid.hh</includes>
    <includes id="a06708" name="albertagrid/gridfactory.hh" local="yes" imported="no">albertagrid/gridfactory.hh</includes>
    <includes id="a06786" name="albertagrid/structuredgridfactory.hh" local="yes" imported="no">albertagrid/structuredgridfactory.hh</includes>
    <includes id="a06771" name="albertagrid/persistentcontainer.hh" local="yes" imported="no">albertagrid/persistentcontainer.hh</includes>
  </compound>
  <compound kind="file">
    <name>albertaheader.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00482.html</filename>
    <member kind="define">
      <type>#define</type>
      <name>DIM_OF_WORLD</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a362e6794dc8da37bca88774ed43b8e54</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALBERTA</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a4cbe74d935d2e31c4b35398e93623f70</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>ALBERTA_DEBUG</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a8b7e159f2d6cd4970d240f9748cd2d2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MAX_NOT_DEFINED_</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a4b7aa45c1743bf41ef31a987fcd0f372</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_MIN_NOT_DEFINED_</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a7d0dab8defd85e01c2f14a68a40b4f32</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>_ABS_NOT_DEFINED_</name>
      <anchorfile>a00482.html</anchorfile>
      <anchor>a0c6debd1ce74543115f35b5661f4f48b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertareader.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00485.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00548" name="macrodata.hh" local="no" imported="no">dune/grid/albertagrid/macrodata.hh</includes>
    <class kind="class">Dune::AlbertaReader</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>algebra.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00488.html</filename>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, 3 &gt;</type>
      <name>vectorProduct</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ac9ec1689c4568d01644db2bfee5947f6</anchor>
      <arglist>(const FieldVector&lt; K, 3 &gt; &amp;u, const FieldVector&lt; K, 3 &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a98df257ae8b8275f40f1d10e6c939542</anchor>
      <arglist>([[maybe_unused]] const FieldMatrix&lt; K, 0, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>afc60da48ba5f2c2004ed04c7b82c0348</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ac94d97a6c966088af621ff3215125ab8</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a0c69724eeab70701d1104137cef01693</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a81beb9f173349a78b42547a5fe103355</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 3 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a0a2b233c25e9dbc55a5671d0b2225d19</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a8a2ac848ea222d8ddc7860b8c2348460</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a376a2bb46f272e0b676174c4e0432598</anchor>
      <arglist>([[maybe_unused]] const FieldMatrix&lt; K, 0, m &gt; &amp;matrix, [[maybe_unused]] FieldMatrix&lt; K, m, 0 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a74e11a373cb5034654a0014c09aed9a5</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a365df9ca0786933adddf610931f50ebb</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, m &gt; &amp;matrix, FieldMatrix&lt; K, m, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>adfb3a843fe4f2ab42b4243e5d307cd12</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a2c7c32c5be01d881c2a7e854bb16ce4a</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, m &gt; &amp;matrix, FieldMatrix&lt; K, m, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a80ef0155e5a1707187ac43a86b4e3295</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>amirameshreader.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/amiramesh/</path>
    <filename>a00620.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
  </compound>
  <compound kind="file">
    <name>amirameshreader.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00629.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
  </compound>
  <compound kind="file">
    <name>amirameshwriter.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/amiramesh/</path>
    <filename>a00623.html</filename>
  </compound>
  <compound kind="file">
    <name>amirameshwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00632.html</filename>
    <class kind="class">Dune::AmiraMeshWriter</class>
    <class kind="class">Dune::LevelAmiraMeshWriter</class>
    <class kind="class">Dune::LeafAmiraMeshWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>b64enc.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00782.html</filename>
    <class kind="struct">Dune::b64chunk</class>
    <namespace>Dune</namespace>
    <member kind="variable">
      <type>const char</type>
      <name>base64table</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0f8eaefa183de6150378561ac93d210a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>base64table</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0f8eaefa183de6150378561ac93d210a</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/backuprestore.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06633.html</filename>
    <includes id="a06636" name="common/backuprestore.hh" local="no" imported="no">dune/grid/common/backuprestore.hh</includes>
    <class kind="struct">Dune::BackupRestoreFacility&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/backuprestore.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06636.html</filename>
    <class kind="class">Dune::BackupRestoreFacility</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; const Grid &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/backuprestore.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06639.html</filename>
    <includes id="a06636" name="common/backuprestore.hh" local="no" imported="no">dune/grid/common/backuprestore.hh</includes>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <class kind="class">Dune::GeoGrid::BackupRestoreFacilities</class>
    <class kind="class">Dune::GeoGrid::BackupRestoreFacilities&lt; Grid, true &gt;</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgrid/backuprestore.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a06642.html</filename>
    <includes id="a06636" name="common/backuprestore.hh" local="no" imported="no">dune/grid/common/backuprestore.hh</includes>
    <includes id="a00899" name="yaspgrid.hh" local="no" imported="no">dune/grid/yaspgrid.hh</includes>
    <class kind="struct">Dune::MaybeHaveOrigin</class>
    <class kind="struct">Dune::MaybeHaveOrigin&lt; Dune::EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt;</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>YASPGRID_BACKUPRESTORE_FORMAT_VERSION</name>
      <anchorfile>a06642.html</anchorfile>
      <anchor>a87571fd064b7c7701c46e2b8c0487891</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basic.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00635.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>basic.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00638.html</filename>
    <includes id="a00743" name="entitykey.hh" local="no" imported="no">dune/grid/io/file/dgfparser/entitykey.hh</includes>
    <includes id="a00716" name="dgfexception.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfexception.hh</includes>
    <class kind="class">Dune::dgf::BasicBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
    <member kind="function">
      <type>void</type>
      <name>makeupcase</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>abb5725b92483f9a9581a95eba48de26b</anchor>
      <arglist>(std ::string &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>basicwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00785.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <includes id="a00809" name="functionwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/functionwriter.hh</includes>
    <includes id="a00815" name="pvtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/pvtuwriter.hh</includes>
    <includes id="a00842" name="vtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtuwriter.hh</includes>
    <class kind="class">Dune::VTK::BasicWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>boundarydom.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00641.html</filename>
    <includes id="a00644" name="boundarydom.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/boundarydom.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>boundarydom.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00644.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <class kind="struct">Dune::dgf::DomainData</class>
    <class kind="struct">Dune::dgf::Domain</class>
    <class kind="class">Dune::dgf::BoundaryDomBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>boundaryiterators.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00788.html</filename>
    <includes id="a00797" name="corner.hh" local="no" imported="no">dune/grid/io/file/vtk/corner.hh</includes>
    <includes id="a00800" name="corneriterator.hh" local="no" imported="no">dune/grid/io/file/vtk/corneriterator.hh</includes>
    <includes id="a00809" name="functionwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/functionwriter.hh</includes>
    <class kind="class">Dune::VTK::BoundaryIterator</class>
    <class kind="class">Dune::VTK::IntersectionIndexSet</class>
    <class kind="class">Dune::VTK::NonConformingBoundaryIteratorFactory</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>boundaryprojection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00221.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a00764" name="gmshreader.hh" local="no" imported="no">dune/grid/io/file/gmshreader.hh</includes>
    <class kind="struct">Dune::DuneBoundaryProjection</class>
    <class kind="class">Dune::BoundaryProjectionWrapper</class>
    <class kind="class">Dune::BoundarySegmentWrapper</class>
    <class kind="struct">Dune::CircleBoundaryProjection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>boundaryseg.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00647.html</filename>
    <includes id="a00650" name="boundaryseg.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/boundaryseg.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>boundaryseg.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00650.html</filename>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::BoundarySegBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>boundarysegment.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00224.html</filename>
    <class kind="class">Dune::BoundarySegmentBackupRestore</class>
    <class kind="struct">Dune::BoundarySegment</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>boundarywriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00791.html</filename>
    <includes id="a00785" name="basicwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/basicwriter.hh</includes>
    <includes id="a00788" name="boundaryiterators.hh" local="no" imported="no">dune/grid/io/file/vtk/boundaryiterators.hh</includes>
    <includes id="a00818" name="skeletonfunction.hh" local="no" imported="no">dune/grid/io/file/vtk/skeletonfunction.hh</includes>
    <class kind="class">Dune::VTK::NonConformingBoundaryWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>cachedcoordfunction.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00431.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a00437" name="coordfunctioncaller.hh" local="no" imported="no">dune/grid/geometrygrid/coordfunctioncaller.hh</includes>
    <includes id="a06777" name="utility/persistentcontainer.hh" local="no" imported="no">dune/grid/utility/persistentcontainer.hh</includes>
    <class kind="class">Dune::GeoGrid::CoordCache</class>
    <class kind="class">Dune::CachedCoordFunction</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/capabilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06645.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHierarchicIndexSet&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
  </compound>
  <compound kind="file">
    <name>common/capabilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06648.html</filename>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType</class>
    <class kind="struct">Dune::Capabilities::isCartesian</class>
    <class kind="struct">Dune::Capabilities::hasEntity</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator</class>
    <class kind="struct">Dune::Capabilities::hasGeometry</class>
    <class kind="struct">Dune::Capabilities::canCommunicate</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
    <class kind="struct">Dune::Capabilities::threadSafe</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::isCartesian&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::threadSafe&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe&lt; const Grid &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/capabilities.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06651.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::threadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHostEntity&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHostEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="class">Dune::Capabilities::CodimCache</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
  </compound>
  <compound kind="file">
    <name>common.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00794.html</filename>
    <class kind="struct">Dune::VTK::PrintType</class>
    <class kind="struct">Dune::VTK::PrintType&lt; unsigned char &gt;</class>
    <class kind="struct">Dune::VTK::PrintType&lt; signed char &gt;</class>
    <class kind="struct">Dune::VTK::PrintType&lt; char &gt;</class>
    <class kind="class">Dune::VTK::FieldInfo</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
    <member kind="enumeration">
      <type></type>
      <name>OutputType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ascii</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8a21edb20202b6eaae84d2a13937efda27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>base64</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8ac373bd09607ef8537181b4cd476db211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appendedraw</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8a8d9882e8146514d4b8e3b1e69239aaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appendedbase64</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8ab582a7ce6102d5a4f413d930d44f2a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataMode</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312a293015461843c4dee42c41191a82f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonconforming</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312aad7b0e41ffa9e0f8000ecee2b36bd91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GeometryType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faa73937549503da3b2e8acd20e667f041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>line</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa0ccb47e66e9e878460066ff83b95ce44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>triangle</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faef7040fbdcd298cfe28bd275bc3c344c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polygon</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faf3c7b04406fb9a5407c4c3ae5ad1ef1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quadrilateral</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa93b095b5c9bda1d364e6e7bf636229e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tetrahedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fad0a3de136ec998196fef52bf33370fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexahedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fae59e8366bab2005e87da6ba5cbea66fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prism</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fad5d0ae3dd1aa17ac4f92e5fe35867c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pyramid</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa234c09b720019d3750ad7506608c4fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polyhedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa6245fd8594b847416946701d85c7ebb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polyData</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4a109b9e75c1921dd6b8df25eedea009be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unstructuredGrid</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4a2967b7a61021e24289adcd0b7d60bd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Precision</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a1a23264dcb4d2ffc9b85507ffa2741af</anchor>
      <arglist></arglist>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa0241adbbd83925f051b694d40f02747f">int32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa5f423e669d0a8f4ab7c4c3e6da27161a">uint8</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa3de84ad0700f2a1571f633d399e1900e">uint32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afad33ec2b0bbea6d471a4706cea030e1e3">float32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afafb7fa22ede616c04c68a7663d0f81e92">float64</enumvalue>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>geometryType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a61dcce1ca0a60b52e4021bcd09db1dad</anchor>
      <arglist>(const Dune::GeometryType &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>renumber</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a2efc42a6a41effe62a8ea3560a5b8a8d</anchor>
      <arglist>(const Dune::GeometryType &amp;t, int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>renumber</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>abe32a5b3a9cda5294c113258e3bc174f</anchor>
      <arglist>(const T &amp;t, int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getEndiannessString</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a8bce02a1111502dd0245e7888a532fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a48c0538f36588dc8d46cdd54163cdcd1</anchor>
      <arglist>(Precision p)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>typeSize</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a559af2a4ab217c95a0b9738920cf9391</anchor>
      <arglist>(Precision p)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>coordcache.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00491.html</filename>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <includes id="a00500" name="dofadmin.hh" local="no" imported="no">dune/grid/albertagrid/dofadmin.hh</includes>
    <includes id="a00503" name="dofvector.hh" local="no" imported="no">dune/grid/albertagrid/dofvector.hh</includes>
    <class kind="class">Dune::Alberta::CoordCache</class>
    <class kind="class">Dune::Alberta::CoordCache::LocalCaching</class>
    <class kind="struct">Dune::Alberta::CoordCache::Interpolation</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>coordfunction.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00434.html</filename>
    <class kind="class">Dune::AnalyticalCoordFunctionInterface</class>
    <class kind="class">Dune::AnalyticalCoordFunction</class>
    <class kind="class">Dune::DiscreteCoordFunctionInterface</class>
    <class kind="class">Dune::DiscreteCoordFunction</class>
    <class kind="struct">Dune::GeoGrid::isCoordFunctionInterface</class>
    <class kind="struct">Dune::GeoGrid::isDiscreteCoordFunctionInterface</class>
    <class kind="struct">Dune::GeoGrid::AdaptCoordFunction</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>coordfunctioncaller.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00437.html</filename>
    <includes id="a00455" name="hostcorners.hh" local="no" imported="no">dune/grid/geometrygrid/hostcorners.hh</includes>
    <includes id="a00434" name="coordfunction.hh" local="no" imported="no">dune/grid/geometrygrid/coordfunction.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>coordinates.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00155.html</filename>
    <class kind="class">Dune::EquidistantCoordinates</class>
    <class kind="class">Dune::EquidistantOffsetCoordinates</class>
    <class kind="class">Dune::TensorProductCoordinates</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Yasp</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ae5cc7b42420505a8484774dcd6df6538</anchor>
      <arglist>(std::ostream &amp;s, EquidistantCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a3ef78eb9a547d8401cc2b452429e3598</anchor>
      <arglist>(std::ostream &amp;s, EquidistantOffsetCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a4b79ad3b0e1489f0ac98c284bbb8956b</anchor>
      <arglist>(std::ostream &amp;s, TensorProductCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkIfMonotonous</name>
      <anchorfile>a00954.html</anchorfile>
      <anchor>a33c1f696f7736c183ec2af79ab5e0ce8</anchor>
      <arglist>(const std::array&lt; std::vector&lt; ctype &gt;, dim &gt; &amp;coords)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>corner.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00797.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <class kind="class">Dune::VTK::Corner</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>corneriterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00800.html</filename>
    <includes id="a00797" name="corner.hh" local="no" imported="no">dune/grid/io/file/vtk/corner.hh</includes>
    <class kind="class">Dune::VTK::CornerIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>cornerstorage.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00440.html</filename>
    <includes id="a00437" name="coordfunctioncaller.hh" local="no" imported="no">dune/grid/geometrygrid/coordfunctioncaller.hh</includes>
    <class kind="class">Dune::GeoGrid::CoordVector&lt; mydim, Grid, false &gt;</class>
    <class kind="class">Dune::GeoGrid::CoordVector&lt; mydim, Grid, true &gt;</class>
    <class kind="class">Dune::GeoGrid::IntersectionCoordVector</class>
    <class kind="class">Dune::GeoGrid::CornerStorage</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>cube.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00653.html</filename>
    <includes id="a00656" name="cube.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/cube.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>cube.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00656.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::CubeBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dataarraywriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00803.html</filename>
    <includes id="a00821" name="streams.hh" local="no" imported="no">dune/grid/io/file/vtk/streams.hh</includes>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <class kind="class">Dune::VTK::DataArrayWriter</class>
    <class kind="class">Dune::VTK::AsciiDataArrayWriter</class>
    <class kind="class">Dune::VTK::BinaryDataArrayWriter</class>
    <class kind="class">Dune::VTK::AppendedRawDataArrayWriter</class>
    <class kind="class">Dune::VTK::AppendedBase64DataArrayWriter</class>
    <class kind="class">Dune::VTK::NakedBase64DataArrayWriter</class>
    <class kind="class">Dune::VTK::NakedRawDataArrayWriter</class>
    <class kind="class">Dune::VTK::DataArrayWriterFactory</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/datahandle.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06654.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00482" name="albertaheader.hh" local="no" imported="no">dune/grid/albertagrid/albertaheader.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00566" name="refinement.hh" local="no" imported="no">dune/grid/albertagrid/refinement.hh</includes>
    <class kind="class">Dune::Alberta::AdaptRestrictProlongHandler</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/datahandle.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06657.html</filename>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a06681" name="geometrygrid/entity.hh" local="no" imported="no">dune/grid/geometrygrid/entity.hh</includes>
    <class kind="class">Dune::GeoGrid::CommDataHandle</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>datahandleif.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00236.html</filename>
    <class kind="class">Dune::MessageBufferIF</class>
    <class kind="class">Dune::CommDataHandleIF</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>declaration.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00446.html</filename>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>defaultgridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00239.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06729" name="common/gridview.hh" local="no" imported="no">dune/grid/common/gridview.hh</includes>
    <class kind="struct">Dune::DefaultLevelGridViewTraits</class>
    <class kind="struct">Dune::DefaultLevelGridViewTraits::Codim</class>
    <class kind="struct">Dune::DefaultLevelGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::DefaultLevelGridView</class>
    <class kind="struct">Dune::DefaultLevelGridView::Codim</class>
    <class kind="struct">Dune::DefaultLeafGridViewTraits</class>
    <class kind="struct">Dune::DefaultLeafGridViewTraits::Codim</class>
    <class kind="struct">Dune::DefaultLeafGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::DefaultLeafGridView</class>
    <class kind="struct">Dune::DefaultLeafGridView::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgf2dgf.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/utils/</path>
    <filename>a00758.html</filename>
    <includes id="a00737" name="dgfwriter.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfwriter.hh</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00758.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dgfexception.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00716.html</filename>
    <class kind="class">Dune::DGFException</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgfgeogrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00719.html</filename>
    <includes id="a00587" name="geometrygrid.hh" local="no" imported="no">dune/grid/geometrygrid.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfparser.hh</includes>
    <includes id="a06783" name="io/file/dgfparser/blocks/projection.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/projection.hh</includes>
    <includes id="a00872" name="hostgridaccess.hh" local="no" imported="no">dune/grid/utility/hostgridaccess.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <class kind="class">Dune::DGFCoordFunction</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, false &gt;</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, true &gt;</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, DGFCoordFunction&lt; dimD, dimR &gt;, false &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgfgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00722.html</filename>
    <includes id="a00716" name="dgfexception.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfexception.hh</includes>
    <includes id="a00752" name="macrogrid.hh" local="no" imported="no">dune/grid/io/file/dgfparser/macrogrid.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <class kind="struct">Dune::DGFGridFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgfidentitygrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00725.html</filename>
    <includes id="a00590" name="identitygrid.hh" local="no" imported="no">dune/grid/identitygrid.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfparser.hh</includes>
    <includes id="a00872" name="hostgridaccess.hh" local="no" imported="no">dune/grid/utility/hostgridaccess.hh</includes>
    <class kind="struct">Dune::DGFGridFactory&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgfoned.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00728.html</filename>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00848" name="onedgrid.hh" local="no" imported="no">dune/grid/onedgrid.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="yes" imported="no">dgfparser.hh</includes>
    <class kind="struct">Dune::DGFGridInfo&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; OneDGrid &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/dgfparser.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06660.html</filename>
    <includes id="a06666" name="albertagrid/dgfparser.hh" local="no" imported="no">dune/grid/albertagrid/dgfparser.hh</includes>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTA_SURFACE_GRID</name>
      <anchorfile>a06660.html</anchorfile>
      <anchor>aec7bdbbda2f56be9653cc7c42632653b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io/file/dgfparser/dgfparser.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a06663.html</filename>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfparser.hh</includes>
    <includes id="a00644" name="boundarydom.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/boundarydom.hh</includes>
    <class kind="class">Dune::DGFPrintInfo</class>
    <namespace>Dune</namespace>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>dgfid</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a03a08fe7daf28835f1dbf203d777c47e</anchor>
      <arglist>(&quot;DGF&quot;)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/dgfparser.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06666.html</filename>
    <includes id="a00584" name="albertagrid.hh" local="no" imported="no">dune/grid/albertagrid.hh</includes>
    <includes id="a06708" name="albertagrid/gridfactory.hh" local="no" imported="no">dune/grid/albertagrid/gridfactory.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfparser.hh</includes>
    <includes id="a06783" name="io/file/dgfparser/blocks/projection.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/projection.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <class kind="struct">Dune::DGFGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>io/file/dgfparser/dgfparser.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a06672.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a00716" name="dgfexception.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfexception.hh</includes>
    <includes id="a00743" name="entitykey.hh" local="no" imported="no">dune/grid/io/file/dgfparser/entitykey.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <includes id="a00749" name="gridptr.hh" local="no" imported="no">dune/grid/io/file/dgfparser/gridptr.hh</includes>
    <includes id="a00752" name="macrogrid.hh" local="no" imported="no">dune/grid/io/file/dgfparser/macrogrid.hh</includes>
    <includes id="a00722" name="dgfgridfactory.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfgridfactory.hh</includes>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <includes id="a00644" name="boundarydom.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/boundarydom.hh</includes>
    <includes id="a00650" name="boundaryseg.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/boundaryseg.hh</includes>
    <includes id="a00656" name="cube.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/cube.hh</includes>
    <includes id="a00662" name="dim.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/dim.hh</includes>
    <includes id="a00668" name="general.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/general.hh</includes>
    <includes id="a00674" name="gridparameter.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/gridparameter.hh</includes>
    <includes id="a00680" name="interval.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/interval.hh</includes>
    <includes id="a00686" name="periodicfacetrans.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/periodicfacetrans.hh</includes>
    <includes id="a00689" name="polygon.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/polygon.hh</includes>
    <includes id="a00692" name="polyhedron.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/polyhedron.hh</includes>
    <includes id="a06783" name="io/file/dgfparser/blocks/projection.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/projection.hh</includes>
    <includes id="a00701" name="simplex.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/simplex.hh</includes>
    <includes id="a00707" name="simplexgeneration.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/simplexgeneration.hh</includes>
    <includes id="a00713" name="vertex.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/vertex.hh</includes>
    <class kind="struct">Dune::DGFGridInfo</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>io/file/dgfparser.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a06669.html</filename>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="yes" imported="no">dgfparser/dgfparser.hh</includes>
    <includes id="a06666" name="albertagrid/dgfparser.hh" local="no" imported="no">dune/grid/albertagrid/dgfparser.hh</includes>
    <includes id="a00734" name="dgfug.hh" local="yes" imported="no">dgfparser/dgfug.hh</includes>
    <includes id="a00728" name="dgfoned.hh" local="yes" imported="no">dgfparser/dgfoned.hh</includes>
    <includes id="a00740" name="dgfyasp.hh" local="yes" imported="no">dgfparser/dgfyasp.hh</includes>
    <includes id="a00719" name="dgfgeogrid.hh" local="yes" imported="no">dgfparser/dgfgeogrid.hh</includes>
    <includes id="a00725" name="dgfidentitygrid.hh" local="yes" imported="no">dgfparser/dgfidentitygrid.hh</includes>
  </compound>
  <compound kind="file">
    <name>dgfug.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00731.html</filename>
    <includes id="a00734" name="dgfug.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfug.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dgfug.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00734.html</filename>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00851" name="uggrid.hh" local="no" imported="no">dune/grid/uggrid.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="yes" imported="no">dgfparser.hh</includes>
    <includes id="a00674" name="gridparameter.hh" local="yes" imported="no">blocks/gridparameter.hh</includes>
    <class kind="struct">Dune::dgf::UGGridParameterBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dgfwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00737.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00308" name="rangegenerators.hh" local="no" imported="no">dune/grid/common/rangegenerators.hh</includes>
    <class kind="class">Dune::DGFWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>dgfyasp.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00740.html</filename>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00899" name="yaspgrid.hh" local="no" imported="no">dune/grid/yaspgrid.hh</includes>
    <includes id="a06672" name="io/file/dgfparser/dgfparser.hh" local="yes" imported="no">dgfparser.hh</includes>
    <class kind="class">Dune::dgf::YaspGridParameterBlock</class>
    <class kind="struct">Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dim.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00659.html</filename>
    <includes id="a00662" name="dim.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/dim.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dim.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00662.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::DimBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>dofadmin.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00500.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <class kind="class">Dune::Alberta::DofAccess</class>
    <class kind="class">Dune::Alberta::HierarchyDofNumbering</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>dofvector.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00503.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00566" name="refinement.hh" local="no" imported="no">dune/grid/albertagrid/refinement.hh</includes>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; int &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; signed char &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; unsigned char &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; Real &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; GlobalVector &gt;</class>
    <class kind="class">Dune::Alberta::DofVectorPointer</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a32f1dea9b87299c0e24ab46760391400</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ad67366c3c67a2ca2e728b4276e37324e</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>aca064a9bc66806f78ea771e804e5582d</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>elementinfo.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00506.html</filename>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>elementinfo.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00509.html</filename>
    <includes id="a00518" name="geometrycache.hh" local="no" imported="no">dune/grid/albertagrid/geometrycache.hh</includes>
    <includes id="a00551" name="macroelement.hh" local="no" imported="no">dune/grid/albertagrid/macroelement.hh</includes>
    <class kind="class">Dune::Alberta::ElementInfo</class>
    <class kind="struct">Dune::Alberta::ElementInfo::Instance</class>
    <class kind="class">Dune::Alberta::ElementInfo::Stack</class>
    <class kind="struct">Dune::Alberta::ElementInfo::Seed</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>entity.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00512.html</filename>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTA_ENTITY_CC</name>
      <anchorfile>a00512.html</anchorfile>
      <anchor>a52a3d21da8af78e4568aaed1c24da792</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/entity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06675.html</filename>
    <includes id="a06678" name="common/entity.hh" local="no" imported="no">dune/grid/common/entity.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a06684" name="albertagrid/entityseed.hh" local="no" imported="no">dune/grid/albertagrid/entityseed.hh</includes>
    <includes id="a06693" name="albertagrid/geometry.hh" local="no" imported="no">dune/grid/albertagrid/geometry.hh</includes>
    <class kind="class">Dune::AlbertaGridEntity</class>
    <class kind="struct">Dune::AlbertaGridEntity::Codim</class>
    <class kind="class">Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;</class>
    <class kind="struct">Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/entity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06678.html</filename>
    <includes id="a06702" name="common/grid.hh" local="yes" imported="no">grid.hh</includes>
    <includes id="a00308" name="rangegenerators.hh" local="yes" imported="no">rangegenerators.hh</includes>
    <class kind="class">Dune::Entity</class>
    <class kind="class">Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;</class>
    <class kind="struct">Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;::Codim</class>
    <class kind="class">Dune::EntityDefaultImplementation</class>
    <class kind="class">Dune::EntityDefaultImplementation&lt; 0, dim, GridImp, EntityImp &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/entity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06681.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a00440" name="cornerstorage.hh" local="no" imported="no">dune/grid/geometrygrid/cornerstorage.hh</includes>
    <class kind="class">Dune::GeoGrid::EntityBase&lt; codim, Grid, false &gt;</class>
    <class kind="class">Dune::GeoGrid::EntityBase&lt; codim, Grid, true &gt;</class>
    <class kind="class">Dune::GeoGrid::Entity</class>
    <class kind="class">Dune::GeoGrid::Entity&lt; 0, dim, Grid &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>entitycommhelper.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00857.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <class kind="struct">Dune::EntityCommHelper&lt; InteriorBorder_InteriorBorder_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; InteriorBorder_All_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; Overlap_OverlapFront_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; Overlap_All_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; All_All_Interface &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>entityiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00245.html</filename>
    <class kind="class">Dune::EntityIterator</class>
    <class kind="struct">std::iterator_traits&lt; Dune::EntityIterator&lt; codim, Grid, IteratorImp &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>entitykey.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00743.html</filename>
    <includes id="a00716" name="dgfexception.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfexception.hh</includes>
    <includes id="a00746" name="entitykey_inline.hh" local="yes" imported="no">entitykey_inline.hh</includes>
    <class kind="struct">Dune::DGFEntityKey</class>
    <class kind="struct">Dune::ElementFaceUtil</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>entitykey_inline.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00746.html</filename>
    <includes id="a00743" name="entitykey.hh" local="no" imported="no">dune/grid/io/file/dgfparser/entitykey.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/entityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06684.html</filename>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <class kind="class">Dune::AlbertaGridEntitySeed&lt; codim, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridEntitySeed&lt; 0, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/entityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06687.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::EntitySeed</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/entityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06690.html</filename>
    <includes id="a06687" name="common/entityseed.hh" local="no" imported="no">dune/grid/common/entityseed.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <class kind="class">Dune::GeoGrid::EntitySeed&lt; codim, Grd, false &gt;</class>
    <class kind="class">Dune::GeoGrid::EntitySeed&lt; codim, Grd, true &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>exceptions.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00251.html</filename>
    <class kind="class">Dune::GridError</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>function.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00806.html</filename>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <class kind="class">Dune::VTKFunction</class>
    <class kind="class">Dune::P0VTKFunction</class>
    <class kind="class">Dune::P1VTKFunction</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>functionwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00809.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <includes id="a00803" name="dataarraywriter.hh" local="no" imported="no">dune/grid/io/file/vtk/dataarraywriter.hh</includes>
    <includes id="a00815" name="pvtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/pvtuwriter.hh</includes>
    <includes id="a00842" name="vtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtuwriter.hh</includes>
    <class kind="class">Dune::VTK::FunctionWriterBase</class>
    <class kind="class">Dune::VTK::VTKFunctionWriter</class>
    <class kind="class">Dune::VTK::CoordinatesWriter</class>
    <class kind="class">Dune::VTK::ConformingConnectivityWriter</class>
    <class kind="class">Dune::VTK::NonConformingConnectivityWriter</class>
    <class kind="class">Dune::VTK::OffsetsWriter</class>
    <class kind="class">Dune::VTK::TypesWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>general.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00665.html</filename>
    <includes id="a00668" name="general.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/general.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>general.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00668.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::GeneralBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>geometry.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00515.html</filename>
    <includes id="a00488" name="algebra.hh" local="no" imported="no">dune/grid/albertagrid/algebra.hh</includes>
    <includes id="a06693" name="albertagrid/geometry.hh" local="no" imported="no">dune/grid/albertagrid/geometry.hh</includes>
    <includes id="a00566" name="refinement.hh" local="no" imported="no">dune/grid/albertagrid/refinement.hh</includes>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::GeoInFatherCoordReader</class>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::FaceCoordReader</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTA_GEOMETRY_CC</name>
      <anchorfile>a00515.html</anchorfile>
      <anchor>a085bbe8bddf730dd71a187dceae4e610</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/geometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06693.html</filename>
    <includes id="a06696" name="common/geometry.hh" local="no" imported="no">dune/grid/common/geometry.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <class kind="struct">Dune::AlbertaGridCoordinateReader</class>
    <class kind="class">Dune::AlbertaGridGeometry</class>
    <class kind="class">Dune::AlbertaGridGlobalGeometry</class>
    <class kind="class">Dune::AlbertaGridGlobalGeometry&lt; dim, cdim, const AlbertaGrid&lt; dim, cdim &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridLocalGeometryProvider</class>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/geometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06696.html</filename>
    <class kind="class">Dune::Geometry</class>
    <class kind="class">Dune::GeometryDefaultImplementation</class>
    <class kind="class">Dune::GeometryDefaultImplementation&lt; 0, cdim, GridImp, GeometryImp &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ab0aca997f2038524be12174596d09262</anchor>
      <arglist>(const Geometry&lt; mydim, cdim, GridImp, GeometryImp &gt; &amp;geo) -&gt; decltype(referenceElement(geo, geo.impl()))</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometrygrid/geometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06699.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a00440" name="cornerstorage.hh" local="no" imported="no">dune/grid/geometrygrid/cornerstorage.hh</includes>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType</class>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 1 &gt;</class>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 0 &gt;</class>
    <class kind="struct">Dune::GeoGrid::GeometryTraits</class>
    <class kind="struct">Dune::GeoGrid::GeometryTraits::CornerStorage</class>
    <class kind="struct">Dune::GeoGrid::GeometryTraits::hasSingleGeometryType</class>
    <class kind="class">Dune::GeoGrid::Geometry</class>
    <class kind="struct">Dune::GeoGrid::Geometry::Mapping</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>geometrycache.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00518.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00488" name="algebra.hh" local="no" imported="no">dune/grid/albertagrid/algebra.hh</includes>
    <class kind="class">Dune::Alberta::GeometryCache</class>
    <class kind="struct">Dune::Alberta::GeometryCacheProxy</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00587.html</filename>
    <includes id="a06705" name="geometrygrid/grid.hh" local="no" imported="no">dune/grid/geometrygrid/grid.hh</includes>
    <includes id="a06774" name="geometrygrid/persistentcontainer.hh" local="no" imported="no">dune/grid/geometrygrid/persistentcontainer.hh</includes>
  </compound>
  <compound kind="file">
    <name>geometryreference.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00521.html</filename>
    <includes id="a06696" name="common/geometry.hh" local="no" imported="no">dune/grid/common/geometry.hh</includes>
    <class kind="class">Dune::GeometryReference</class>
    <class kind="class">Dune::LocalGeometryReference</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>globalindexset.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00860.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <class kind="class">Dune::GlobalIndexSet</class>
    <class kind="struct">Dune::GlobalIndexSet::SubPartitionTypeProvider</class>
    <class kind="struct">Dune::GlobalIndexSet::SubPartitionTypeProvider&lt; Entity, 0 &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gmsh2dgf.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/utils/</path>
    <filename>a00761.html</filename>
    <includes id="a00764" name="gmshreader.hh" local="no" imported="no">dune/grid/io/file/gmshreader.hh</includes>
    <includes id="a00737" name="dgfwriter.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfwriter.hh</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00761.html</anchorfile>
      <anchor>a0ddf1224851353fc92bfbff6f499fa97</anchor>
      <arglist>(int argc, char *argv[])</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gmshreader.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00764.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <class kind="struct">Dune::GmshReaderOptions</class>
    <class kind="class">Dune::GmshReaderParser</class>
    <class kind="class">Dune::GmshReader</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gmshwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00767.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <class kind="class">Dune::GmshWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gnuplot.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/gnuplot/</path>
    <filename>a00770.html</filename>
    <includes id="a00773" name="gnuplot.hh" local="yes" imported="no">../gnuplot.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gnuplot.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00773.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00770" name="gnuplot.cc" local="yes" imported="no">gnuplot/gnuplot.cc</includes>
    <class kind="class">Dune::GnuplotWriter</class>
    <class kind="class">Dune::LeafGnuplotWriter</class>
    <class kind="class">Dune::LevelGnuplotWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/grid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06702.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00251" name="exceptions.hh" local="no" imported="no">dune/grid/common/exceptions.hh</includes>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a06729" name="common/gridview.hh" local="no" imported="no">dune/grid/common/gridview.hh</includes>
    <includes id="a00239" name="defaultgridview.hh" local="no" imported="no">dune/grid/common/defaultgridview.hh</includes>
    <includes id="a06687" name="common/entityseed.hh" local="no" imported="no">dune/grid/common/entityseed.hh</includes>
    <includes id="a06696" name="common/geometry.hh" local="yes" imported="no">geometry.hh</includes>
    <includes id="a06678" name="common/entity.hh" local="yes" imported="no">entity.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="yes" imported="no">intersection.hh</includes>
    <includes id="a06753" name="common/intersectioniterator.hh" local="yes" imported="no">intersectioniterator.hh</includes>
    <includes id="a00245" name="entityiterator.hh" local="yes" imported="no">entityiterator.hh</includes>
    <includes id="a00281" name="indexidset.hh" local="yes" imported="no">indexidset.hh</includes>
    <class kind="class">Dune::Grid</class>
    <class kind="struct">Dune::Grid::Codim</class>
    <class kind="struct">Dune::Grid::Codim::Partition</class>
    <class kind="class">Dune::GridDefaultImplementation</class>
    <class kind="struct">Dune::GridTraits</class>
    <class kind="struct">Dune::GridTraits::Codim</class>
    <class kind="struct">Dune::GridTraits::Codim::Partition</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; Grid&lt; dim, dimworld, ct, GridFamily &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; GridDefaultImplementation&lt; dim, dimworld, ct, GridFamily &gt;, cdim &gt;</class>
    <class kind="struct">Dune::MakeableInterfaceObject</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga905f92edbd804596d2735d3045a3cc30</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga54897a506a84f9b94f0acc75b176b0cd</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometrygrid/grid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06705.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06639" name="geometrygrid/backuprestore.hh" local="no" imported="no">dune/grid/geometrygrid/backuprestore.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a06657" name="geometrygrid/datahandle.hh" local="no" imported="no">dune/grid/geometrygrid/datahandle.hh</includes>
    <includes id="a06717" name="geometrygrid/gridfamily.hh" local="no" imported="no">dune/grid/geometrygrid/gridfamily.hh</includes>
    <includes id="a00458" name="identity.hh" local="no" imported="no">dune/grid/geometrygrid/identity.hh</includes>
    <includes id="a06774" name="geometrygrid/persistentcontainer.hh" local="no" imported="no">dune/grid/geometrygrid/persistentcontainer.hh</includes>
    <class kind="class">Dune::DefaultCoordFunction</class>
    <class kind="class">Dune::GeometryGrid</class>
    <class kind="struct">Dune::GeometryGrid::Codim</class>
    <class kind="struct">Dune::GeometryGrid::Codim::Partition</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gridenums.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00260.html</filename>
    <namespace>Dune</namespace>
    <member kind="enumeration">
      <type></type>
      <name>PartitionType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabd89b77709db1d9e56bb17cd0aa44c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da1cdad324759fb0e56c7f035d91f7e4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BorderEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da5886f9fc2fac0eb986874fb2e682fb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3daec5e1e5ba1c055301aae842f46640850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrontEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da0eb7fb9965359955e50690291d9f6d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GhostEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da4db612fa448bc15ef7581235c17e17ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gae799a4296824c1d4ae0d82e71287b722</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_InteriorBorder_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a8b8e3364d9c34ed2e31f038479012f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a05cadca133ee23c967950c19bcbe4b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_OverlapFront_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a63cd8ac44d5a4cbb8cd1a4176e6b2965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a41fd52a5f00a85c7df011f9c532ed98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a22b151c5173503a7f39a3bd93ed6300d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PartitionIteratorType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gaa5b9e8102d7f70f3f4178182629d98b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Interior_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a842081c435caefdae9580c93720e35b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a8da384ab42a2918b7cf88220328cff19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a906b14970777b3ed8927c95029f6158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapFront_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a5fc7e992b7cd9112ef84af4daa417a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a3026c69cd558fe3687c11f45966905e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ghost_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a90c5b1d5dc07ddecbf0fc09db7544216</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CommunicationDirection</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacf00ef51e7964e5797de12e1bdf8d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a16096429617fc1e0db063aa7d0539703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a109be42b107eef1f3de8fdcf3df59dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>PartitionName</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga93b58eeb427bbeafe9bd7d460a1603cc</anchor>
      <arglist>(PartitionType type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacac688b252435fccd21c3199ffaaf076</anchor>
      <arglist>(std::ostream &amp;out, const PartitionType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabe3ea0bc4acb9ad23a40a4761a0f72ad</anchor>
      <arglist>(std::ostream &amp;out, const InterfaceType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga9641e43de5a57f7c1a2345cfdcef3d33</anchor>
      <arglist>(std::ostream &amp;out, const PartitionIteratorType &amp;type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/gridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06708.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00476" name="agrid.hh" local="no" imported="no">dune/grid/albertagrid/agrid.hh</includes>
    <class kind="class">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::Codim</class>
    <class kind="class">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::ProjectionFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/gridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06711.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::GridFactoryInterface</class>
    <class kind="struct">Dune::GridFactoryInterface::Codim</class>
    <class kind="class">Dune::GridFactory</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_FUNCTION_HH_SILENCE_DEPRECATION</name>
      <anchorfile>a06711.html</anchorfile>
      <anchor>aad7f760c317e0d3c4fefbfa4a05374fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/gridfamily.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06714.html</filename>
    <includes id="a06678" name="common/entity.hh" local="no" imported="no">dune/grid/common/entity.hh</includes>
    <includes id="a06696" name="common/geometry.hh" local="no" imported="no">dune/grid/common/geometry.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a06753" name="common/intersectioniterator.hh" local="no" imported="no">dune/grid/common/intersectioniterator.hh</includes>
    <includes id="a00245" name="entityiterator.hh" local="no" imported="no">dune/grid/common/entityiterator.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a06726" name="albertagrid/gridview.hh" local="no" imported="no">dune/grid/albertagrid/gridview.hh</includes>
    <includes id="a00521" name="geometryreference.hh" local="no" imported="no">dune/grid/albertagrid/geometryreference.hh</includes>
    <class kind="struct">Dune::AlbertaGridFamily</class>
    <class kind="struct">Dune::AlbertaGridFamily::Traits</class>
    <class kind="struct">Dune::AlbertaGridFamily::Traits::Codim</class>
    <class kind="struct">Dune::AlbertaGridFamily::Traits::Codim::Partition</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/gridfamily.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06717.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <includes id="a06681" name="geometrygrid/entity.hh" local="no" imported="no">dune/grid/geometrygrid/entity.hh</includes>
    <includes id="a06690" name="geometrygrid/entityseed.hh" local="no" imported="no">dune/grid/geometrygrid/entityseed.hh</includes>
    <includes id="a06699" name="geometrygrid/geometry.hh" local="no" imported="no">dune/grid/geometrygrid/geometry.hh</includes>
    <includes id="a06732" name="geometrygrid/gridview.hh" local="no" imported="no">dune/grid/geometrygrid/gridview.hh</includes>
    <includes id="a06747" name="geometrygrid/intersection.hh" local="no" imported="no">dune/grid/geometrygrid/intersection.hh</includes>
    <includes id="a06756" name="geometrygrid/intersectioniterator.hh" local="no" imported="no">dune/grid/geometrygrid/intersectioniterator.hh</includes>
    <includes id="a00467" name="iterator.hh" local="no" imported="no">dune/grid/geometrygrid/iterator.hh</includes>
    <includes id="a00461" name="idset.hh" local="no" imported="no">dune/grid/geometrygrid/idset.hh</includes>
    <includes id="a06738" name="geometrygrid/indexsets.hh" local="no" imported="no">dune/grid/geometrygrid/indexsets.hh</includes>
    <class kind="class">Dune::GeoGrid::ExportParams</class>
    <class kind="struct">Dune::GeoGrid::GridFamily</class>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits</class>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits::Codim</class>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits::Codim::Partition</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>gridinfo-gmsh-main.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00863.html</filename>
    <includes id="a00764" name="gmshreader.hh" local="no" imported="no">dune/grid/io/file/gmshreader.hh</includes>
    <includes id="a06723" name="utility/gridinfo.hh" local="no" imported="no">dune/grid/utility/gridinfo.hh</includes>
  </compound>
  <compound kind="file">
    <name>common/gridinfo.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06720.html</filename>
    <includes id="a06702" name="common/grid.hh" local="yes" imported="no">grid.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>gridinfo</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga24b86a9e333c8b8aaaa95acd627327b3</anchor>
      <arglist>(const G &amp;grid, std::string prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridlevellist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga7590ed575bdde97f4488d05b343398cf</anchor>
      <arglist>(const G &amp;grid, int level, std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridleaflist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>gab8979891c5f4fce47692eaf01cd4b985</anchor>
      <arglist>(const G &amp;grid, std::string prefix)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>utility/gridinfo.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a06723.html</filename>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <class kind="struct">Dune::EntityInfo</class>
    <class kind="struct">Dune::GridViewInfoGTCompare</class>
    <class kind="struct">Dune::GridViewInfo</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>fillGridViewInfoSerial</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a4217251cdcb94f8bf2db77f8eafe0323</anchor>
      <arglist>(const GV &amp;gv, GridViewInfo&lt; typename GV::ctype &gt; &amp;gridViewInfo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gridparameter.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00671.html</filename>
    <includes id="a00674" name="gridparameter.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/gridparameter.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>gridparameter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00674.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::GridParameterBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>gridptr.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00749.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00305" name="partitionset.hh" local="no" imported="no">dune/grid/common/partitionset.hh</includes>
    <includes id="a00308" name="rangegenerators.hh" local="no" imported="no">dune/grid/common/rangegenerators.hh</includes>
    <includes id="a00716" name="dgfexception.hh" local="no" imported="no">dune/grid/io/file/dgfparser/dgfexception.hh</includes>
    <includes id="a00743" name="entitykey.hh" local="no" imported="no">dune/grid/io/file/dgfparser/entitykey.hh</includes>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <includes id="a00764" name="gmshreader.hh" local="no" imported="no">dune/grid/io/file/gmshreader.hh</includes>
    <class kind="struct">Dune::GridPtr</class>
    <class kind="class">Dune::GridPtr::mygrid_ptr</class>
    <class kind="struct">Dune::GridPtr::DataHandle</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>gridtype.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00866.html</filename>
  </compound>
  <compound kind="file">
    <name>albertagrid/gridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06726.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06729" name="common/gridview.hh" local="no" imported="no">dune/grid/common/gridview.hh</includes>
    <includes id="a06750" name="albertagrid/intersectioniterator.hh" local="no" imported="no">dune/grid/albertagrid/intersectioniterator.hh</includes>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits</class>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits::Codim</class>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::AlbertaLevelGridView</class>
    <class kind="struct">Dune::AlbertaLevelGridView::Codim</class>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits</class>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits::Codim</class>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::AlbertaLeafGridView</class>
    <class kind="struct">Dune::AlbertaLeafGridView::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/gridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06729.html</filename>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a00308" name="rangegenerators.hh" local="no" imported="no">dune/grid/common/rangegenerators.hh</includes>
    <class kind="class">Dune::GridView</class>
    <class kind="struct">Dune::GridView::Codim</class>
    <class kind="struct">Dune::GridView::Codim::Partition</class>
    <class kind="struct">Dune::GridView::DeprecatedMethodEmptyFuture</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/gridview.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06732.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06729" name="common/gridview.hh" local="no" imported="no">dune/grid/common/gridview.hh</includes>
    <includes id="a06657" name="geometrygrid/datahandle.hh" local="no" imported="no">dune/grid/geometrygrid/datahandle.hh</includes>
    <includes id="a06738" name="geometrygrid/indexsets.hh" local="no" imported="no">dune/grid/geometrygrid/indexsets.hh</includes>
    <includes id="a06747" name="geometrygrid/intersection.hh" local="no" imported="no">dune/grid/geometrygrid/intersection.hh</includes>
    <includes id="a06756" name="geometrygrid/intersectioniterator.hh" local="no" imported="no">dune/grid/geometrygrid/intersectioniterator.hh</includes>
    <includes id="a00467" name="iterator.hh" local="no" imported="no">dune/grid/geometrygrid/iterator.hh</includes>
    <class kind="class">Dune::GeoGrid::GridViewTraits</class>
    <class kind="struct">Dune::GeoGrid::GridViewTraits::Codim</class>
    <class kind="struct">Dune::GeoGrid::GridViewTraits::Codim::Partition</class>
    <class kind="class">Dune::GeoGrid::GridView</class>
    <class kind="struct">Dune::GeoGrid::GridView::Codim</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchiciterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00524.html</filename>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00245" name="entityiterator.hh" local="no" imported="no">dune/grid/common/entityiterator.hh</includes>
    <class kind="class">Dune::AlbertaGridHierarchicIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hierarchicsearch.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00869.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <class kind="class">Dune::HierarchicSearch</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>hostcorners.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00455.html</filename>
    <includes id="a06678" name="common/entity.hh" local="no" imported="no">dune/grid/common/entity.hh</includes>
    <class kind="class">Dune::GeoGrid::HostCorners</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>hostgridaccess.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00872.html</filename>
    <includes id="a06747" name="geometrygrid/intersection.hh" local="no" imported="no">dune/grid/geometrygrid/intersection.hh</includes>
    <class kind="struct">Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;::Codim</class>
    <class kind="struct">Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;</class>
    <class kind="struct">Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00458.html</filename>
    <includes id="a00434" name="coordfunction.hh" local="no" imported="no">dune/grid/geometrygrid/coordfunction.hh</includes>
    <class kind="class">Dune::IdenticalCoordFunction</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00590.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00599" name="identitygridgeometry.hh" local="yes" imported="no">identitygrid/identitygridgeometry.hh</includes>
    <includes id="a00593" name="identitygridentity.hh" local="yes" imported="no">identitygrid/identitygridentity.hh</includes>
    <includes id="a00596" name="identitygridentityseed.hh" local="yes" imported="no">identitygrid/identitygridentityseed.hh</includes>
    <includes id="a00608" name="identitygridintersectioniterator.hh" local="yes" imported="no">identitygrid/identitygridintersectioniterator.hh</includes>
    <includes id="a00617" name="identitygridleveliterator.hh" local="yes" imported="no">identitygrid/identitygridleveliterator.hh</includes>
    <includes id="a00614" name="identitygridleafiterator.hh" local="yes" imported="no">identitygrid/identitygridleafiterator.hh</includes>
    <includes id="a00602" name="identitygridhierarchiciterator.hh" local="yes" imported="no">identitygrid/identitygridhierarchiciterator.hh</includes>
    <includes id="a00605" name="identitygridindexsets.hh" local="yes" imported="no">identitygrid/identitygridindexsets.hh</includes>
    <class kind="struct">Dune::IdentityGridFamily</class>
    <class kind="class">Dune::IdentityGrid</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridentity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00593.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::IdentityGridEntity</class>
    <class kind="class">Dune::IdentityGridEntity&lt; 0, dim, GridImp &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridentityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00596.html</filename>
    <class kind="class">Dune::IdentityGridEntitySeed</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridgeometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00599.html</filename>
    <includes id="a06696" name="common/geometry.hh" local="no" imported="no">dune/grid/common/geometry.hh</includes>
    <class kind="class">Dune::IdentityGridGeometry</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridhierarchiciterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00602.html</filename>
    <class kind="class">Dune::IdentityGridHierarchicIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridindexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00605.html</filename>
    <includes id="a00281" name="indexidset.hh" local="no" imported="no">dune/grid/common/indexidset.hh</includes>
    <class kind="class">Dune::IdentityGridLevelIndexSet</class>
    <class kind="class">Dune::IdentityGridLeafIndexSet</class>
    <class kind="class">Dune::IdentityGridGlobalIdSet</class>
    <class kind="class">Dune::IdentityGridLocalIdSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridintersectioniterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00608.html</filename>
    <includes id="a00611" name="identitygridintersections.hh" local="yes" imported="no">identitygridintersections.hh</includes>
    <includes id="a00593" name="identitygridentity.hh" local="yes" imported="no">identitygridentity.hh</includes>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <class kind="class">Dune::IdentityGridLeafIntersectionIterator</class>
    <class kind="class">Dune::IdentityGridLevelIntersectionIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridintersections.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00611.html</filename>
    <includes id="a00614" name="identitygridleafiterator.hh" local="yes" imported="no">identitygridleafiterator.hh</includes>
    <includes id="a00593" name="identitygridentity.hh" local="no" imported="no">dune/grid/identitygrid/identitygridentity.hh</includes>
    <class kind="class">Dune::IdentityGridLeafIntersection</class>
    <class kind="class">Dune::IdentityGridLevelIntersection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridleafiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00614.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <class kind="class">Dune::IdentityGridLeafIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>identitygridleveliterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/identitygrid/</path>
    <filename>a00617.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <class kind="class">Dune::IdentityGridLevelIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>idset.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00461.html</filename>
    <includes id="a00281" name="indexidset.hh" local="no" imported="no">dune/grid/common/indexidset.hh</includes>
    <class kind="class">Dune::GeoGrid::IdSet</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>indexidset.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00281.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::IndexSet</class>
    <class kind="struct">Dune::IndexSet::Codim</class>
    <class kind="class">Dune::IndexSetDefaultImplementation</class>
    <class kind="class">Dune::IdSet</class>
    <class kind="struct">Dune::IdSet::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>indexsets.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00527.html</filename>
    <includes id="a06735" name="albertagrid/indexsets.hh" local="no" imported="no">dune/grid/albertagrid/indexsets.hh</includes>
    <includes id="a00476" name="agrid.hh" local="no" imported="no">dune/grid/albertagrid/agrid.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/indexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06735.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00281" name="indexidset.hh" local="no" imported="no">dune/grid/common/indexidset.hh</includes>
    <includes id="a00530" name="indexstack.hh" local="no" imported="no">dune/grid/albertagrid/indexstack.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00500" name="dofadmin.hh" local="no" imported="no">dune/grid/albertagrid/dofadmin.hh</includes>
    <includes id="a00503" name="dofvector.hh" local="no" imported="no">dune/grid/albertagrid/dofvector.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a06714" name="albertagrid/gridfamily.hh" local="no" imported="no">dune/grid/albertagrid/gridfamily.hh</includes>
    <class kind="class">Dune::AlbertaGridHierarchicIndexSet</class>
    <class kind="class">Dune::AlbertaGridHierarchicIndexSet::InitEntityNumber</class>
    <class kind="class">Dune::AlbertaGridIndexSet</class>
    <class kind="class">Dune::AlbertaGridIdSet</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
    <member kind="typedef">
      <type>Dune::IndexStack&lt; int, 100000 &gt;</type>
      <name>IndexStack</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1347de0929889ac7902b4b0840febe38</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>geometrygrid/indexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06738.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00281" name="indexidset.hh" local="no" imported="no">dune/grid/common/indexidset.hh</includes>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <class kind="class">Dune::GeoGrid::IndexSet</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>indexstack.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00530.html</filename>
    <class kind="class">Dune::IndexStack</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>intersection.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00533.html</filename>
    <includes id="a06741" name="albertagrid/intersection.hh" local="no" imported="no">dune/grid/albertagrid/intersection.hh</includes>
    <class kind="struct">Dune::AlbertaGridIntersectionBase::GlobalCoordReader</class>
    <class kind="struct">Dune::AlbertaGridIntersectionBase::LocalCoordReader</class>
    <namespace>Dune</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTA_INTERSECTION_CC</name>
      <anchorfile>a00533.html</anchorfile>
      <anchor>a8d4a192c9f43ac0db61703b46cb6a297</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/intersection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06741.html</filename>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <includes id="a00572" name="transformation.hh" local="no" imported="no">dune/grid/albertagrid/transformation.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a06693" name="albertagrid/geometry.hh" local="no" imported="no">dune/grid/albertagrid/geometry.hh</includes>
    <class kind="class">Dune::AlbertaGridIntersectionBase</class>
    <class kind="class">Dune::AlbertaGridLeafIntersection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/intersection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06744.html</filename>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::Intersection</class>
    <class kind="class">Dune::IntersectionDefaultNormalVectors</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/intersection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06747.html</filename>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <includes id="a00440" name="cornerstorage.hh" local="no" imported="no">dune/grid/geometrygrid/cornerstorage.hh</includes>
    <class kind="class">Dune::GeoGrid::Intersection</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/intersectioniterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06750.html</filename>
    <includes id="a06753" name="common/intersectioniterator.hh" local="no" imported="no">dune/grid/common/intersectioniterator.hh</includes>
    <includes id="a06741" name="albertagrid/intersection.hh" local="no" imported="no">dune/grid/albertagrid/intersection.hh</includes>
    <class kind="class">Dune::AlbertaGridLeafIntersectionIterator</class>
    <class kind="struct">Dune::AlbertaGridLeafIntersectionIterator::Begin</class>
    <class kind="struct">Dune::AlbertaGridLeafIntersectionIterator::End</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>common/intersectioniterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a06753.html</filename>
    <includes id="a06744" name="common/intersection.hh" local="no" imported="no">dune/grid/common/intersection.hh</includes>
    <class kind="class">Dune::IntersectionIterator</class>
    <class kind="struct">std::iterator_traits&lt; Dune::IntersectionIterator&lt; GridImp, IntersectionIteratorImp, IntersectionImp &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/intersectioniterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06756.html</filename>
    <includes id="a06747" name="geometrygrid/intersection.hh" local="no" imported="no">dune/grid/geometrygrid/intersection.hh</includes>
    <class kind="class">Dune::GeoGrid::IntersectionIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>interval.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00677.html</filename>
    <includes id="a00680" name="interval.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/interval.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>interval.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00680.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="struct">Dune::dgf::IntervalBlock</class>
    <class kind="struct">Dune::dgf::IntervalBlock::Interval</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>ae7864ae46a8cd05b47abaa6f6ab38123</anchor>
      <arglist>(std::ostream &amp;out, const IntervalBlock::Interval &amp;interval)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>iterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a00467.html</filename>
    <includes id="a06651" name="geometrygrid/capabilities.hh" local="no" imported="no">dune/grid/geometrygrid/capabilities.hh</includes>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <includes id="a06681" name="geometrygrid/entity.hh" local="no" imported="no">dune/grid/geometrygrid/entity.hh</includes>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Interior_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, InteriorBorder_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Overlap_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, OverlapFront_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, All_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Ghost_Partition, Grid &gt;</class>
    <class kind="class">Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, false &gt;</class>
    <class kind="class">Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, true &gt;</class>
    <class kind="class">Dune::GeoGrid::HierarchicIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::GeoGrid</namespace>
  </compound>
  <compound kind="file">
    <name>leafiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00536.html</filename>
    <includes id="a00245" name="entityiterator.hh" local="no" imported="no">dune/grid/common/entityiterator.hh</includes>
    <includes id="a00575" name="treeiterator.hh" local="no" imported="no">dune/grid/albertagrid/treeiterator.hh</includes>
    <class kind="class">Dune::AlbertaGridLeafIterator</class>
    <class kind="class">Dune::AlbertaGridLeafIterator&lt; codim, Ghost_Partition, GridImp &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>level.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00539.html</filename>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <includes id="a00500" name="dofadmin.hh" local="no" imported="no">dune/grid/albertagrid/dofadmin.hh</includes>
    <includes id="a00503" name="dofvector.hh" local="no" imported="no">dune/grid/albertagrid/dofvector.hh</includes>
    <class kind="class">Dune::AlbertaGridLevelProvider</class>
    <class kind="class">Dune::AlbertaGridLevelProvider::SetLocal</class>
    <class kind="class">Dune::AlbertaGridLevelProvider::CalcMaxLevel</class>
    <class kind="struct">Dune::AlbertaGridLevelProvider::Interpolation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>leveliterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00542.html</filename>
    <includes id="a00245" name="entityiterator.hh" local="no" imported="no">dune/grid/common/entityiterator.hh</includes>
    <includes id="a00575" name="treeiterator.hh" local="no" imported="no">dune/grid/albertagrid/treeiterator.hh</includes>
    <class kind="class">Dune::AlbertaGridLevelIterator</class>
    <class kind="class">Dune::AlbertaGridLevelIterator&lt; codim, Ghost_Partition, GridImp &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>macrodata.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00545.html</filename>
    <includes id="a00251" name="exceptions.hh" local="no" imported="no">dune/grid/common/exceptions.hh</includes>
    <includes id="a00548" name="macrodata.hh" local="no" imported="no">dune/grid/albertagrid/macrodata.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>macrodata.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00548.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00488" name="algebra.hh" local="no" imported="no">dune/grid/albertagrid/algebra.hh</includes>
    <includes id="a00482" name="albertaheader.hh" local="no" imported="no">dune/grid/albertagrid/albertaheader.hh</includes>
    <class kind="class">Dune::Alberta::MacroData</class>
    <class kind="struct">Dune::Alberta::MacroData::Library</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>macroelement.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00551.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <class kind="struct">Dune::Alberta::MacroElement</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>macrogrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00752.html</filename>
    <includes id="a00755" name="parser.hh" local="no" imported="no">dune/grid/io/file/dgfparser/parser.hh</includes>
    <class kind="class">Dune::MacroGrid</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>doxygen/mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/doc/doxygen/</path>
    <filename>a06759.html</filename>
  </compound>
  <compound kind="file">
    <name>recipes/mainpage.txt</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/doc/recipes/</path>
    <filename>a06762.html</filename>
  </compound>
  <compound kind="file">
    <name>mapper.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00299.html</filename>
    <class kind="class">Dune::Mapper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>mcmgmapper.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00302.html</filename>
    <includes id="a00299" name="mapper.hh" local="yes" imported="no">mapper.hh</includes>
    <class kind="class">Dune::MultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LeafMultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LevelMultipleCodimMultipleGeomTypeMapper</class>
    <namespace>Dune</namespace>
    <member kind="typedef">
      <type>std::function&lt; size_t(GeometryType, int)&gt;</type>
      <name>MCMGLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gad8aa4cc3c8ae1053f70788625f0b5857</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga2e82df0d1c8ad3e2db3a7c765c431b72</anchor>
      <arglist>(Codim&lt; codim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga08aae36ce3194378c4aafa398bfdec70</anchor>
      <arglist>(Dim&lt; dim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgElementLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga3f08c3fdd04f64bac3140926732b4b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgVertexLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gae9caf92c46fedd5287c5e011dcbdd3b5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>meshpointer.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00554.html</filename>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>meshpointer.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00557.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00548" name="macrodata.hh" local="no" imported="no">dune/grid/albertagrid/macrodata.hh</includes>
    <includes id="a06780" name="albertagrid/projection.hh" local="no" imported="no">dune/grid/albertagrid/projection.hh</includes>
    <class kind="class">Dune::Alberta::MeshPointer</class>
    <class kind="class">Dune::Alberta::MeshPointer::MacroIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>misc.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00560.html</filename>
    <includes id="a00482" name="albertaheader.hh" local="no" imported="no">dune/grid/albertagrid/albertaheader.hh</includes>
    <class kind="class">Dune::AlbertaError</class>
    <class kind="class">Dune::AlbertaIOError</class>
    <class kind="class">Dune::Alberta::GlobalSpace</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 0, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::FillFlags</class>
    <class kind="struct">Dune::Alberta::RefinementEdge</class>
    <class kind="struct">Dune::Alberta::RefinementEdge&lt; 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Dune2AlbertaNumbering</class>
    <class kind="struct">Dune::Alberta::Dune2AlbertaNumbering&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; dim, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; 1, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; 3, 2 &gt;</class>
    <class kind="class">Dune::Alberta::NumberingMap</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::Twist</class>
    <class kind="struct">Dune::Alberta::Twist&lt; dim, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; 1, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; dim, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; 2, 2 &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
    <member kind="define">
      <type>#define</type>
      <name>DUNE_ALBERTA_CACHE_COORDINATES</name>
      <anchorfile>a00560.html</anchorfile>
      <anchor>ac7a758bde399b9ddaa1d7efc4d08c19a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL</type>
      <name>Real</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a86b942cdffce80f98973c987ea6246da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_B</type>
      <name>LocalVector</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a507da1d491ffc23d26a668371592cea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_D</type>
      <name>GlobalVector</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>af1650cccce3ce5a4c8ab8eb240d3c58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_DD</type>
      <name>GlobalMatrix</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a3982ba26d2ca1b978ad5dfc99225babc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA AFF_TRAFO</type>
      <name>AffineTransformation</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a3a811627cd147103ac01aa962c25a98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA MESH</type>
      <name>Mesh</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a177e94fd8d51ddcd47f3fa3f7add13b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA EL</type>
      <name>Element</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a738666cf4bcd352ecee6a5dc484bb92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA BNDRY_TYPE</type>
      <name>BoundaryId</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a763532db520e16a3ea6d45e06f6acf53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U_CHAR</type>
      <name>ElementType</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae4208ed076c295f716febf9bbecb7eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA FE_SPACE</type>
      <name>DofSpace</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ab91172fc7cfde36bfa7dc9be768e71c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>acff75bf43c12bbb2ccaa33cc3ba0f385</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memCAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a4145abe871ba99fcd65272c451140ba8</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memReAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae736c05b749416fe30934406d0cd9beb</anchor>
      <arglist>(Data *ptr, size_t oldSize, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memFree</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1cd9e29864c4d60bb638421fafe4b21d</anchor>
      <arglist>(Data *ptr, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyTwist</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a17ad1f259da15d8dc2fb02ddff20c24f</anchor>
      <arglist>(int twist, int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyInverseTwist</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1419951e5bb7d86001f1e3b09ba8f6ae</anchor>
      <arglist>(int twist, int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimWorld</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>acc4a01c16d41d4e3e6e5d058b86376ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>meshRefined</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>aa5da9b62cec15c9358c9a588a2e47e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>meshCoarsened</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>af15315ba707766140aa520c2b4aac497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>InteriorBoundary</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a786cfa45de7b3e49635a43ad99326681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DirichletBoundary</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ab69512acf0aeb91b093af2ef4ce2de4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doc/doxygen/modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/doc/doxygen/</path>
    <filename>a06765.html</filename>
  </compound>
  <compound kind="file">
    <name>dune/grid/modules.txt</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a06768.html</filename>
  </compound>
  <compound kind="file">
    <name>multiindex.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00875.html</filename>
    <class kind="class">Dune::FactoryUtilities::MultiIndex</class>
    <namespace>Dune</namespace>
    <namespace>Dune::FactoryUtilities</namespace>
  </compound>
  <compound kind="file">
    <name>onedgrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00848.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <class kind="struct">Dune::OneDGridFamily</class>
    <class kind="class">Dune::OneDGrid</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; OneDGrid, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; OneDGrid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; OneDGrid &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
    <member kind="typedef">
      <type>AxisAlignedCubeGeometry&lt; double, mydim, coorddim &gt;</type>
      <name>OneDGridGeometry</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a95dfaabfd00063ad5bd988583a6629c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parmetisgridpartitioner.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00878.html</filename>
    <includes id="a00860" name="globalindexset.hh" local="no" imported="no">dune/grid/utility/globalindexset.hh</includes>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <includes id="a00308" name="rangegenerators.hh" local="no" imported="no">dune/grid/common/rangegenerators.hh</includes>
  </compound>
  <compound kind="file">
    <name>parser.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/</path>
    <filename>a00755.html</filename>
    <includes id="a00743" name="entitykey.hh" local="no" imported="no">dune/grid/io/file/dgfparser/entitykey.hh</includes>
    <class kind="struct">Dune::DGFBoundaryParameter</class>
    <class kind="class">Dune::DuneGridFormatParser</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>partitioning.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00167.html</filename>
    <class kind="class">Dune::YLoadBalance</class>
    <class kind="class">Dune::YLoadBalanceDefault</class>
    <class kind="class">Dune::YLoadBalancePowerD</class>
    <class kind="class">Dune::YaspFixedSizePartitioner</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>partitionset.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00305.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <class kind="struct">Dune::PartitionSet</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Partitions</namespace>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Interior</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a819a107a31ef27ef8fb96bd4f0293499</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Border</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a35269dd45107decfaa18bcdbbbfdee54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Overlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a67f9a78701aa72f9f4886a60ea3d54e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Front</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a41cd6cf71a28a82f0bb64f2c141b63c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Ghost</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad5d419a9a7677c67d9f4b5adf9f7e42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorder</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a0f2a664762b0085418afbf32f37abccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorderOverlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ada242b3d12c48d8b29ea67ed233a23cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorderOverlapFront</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>adc4235a043fdeec47a156ff90b0502af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>All</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a0373c95b5fd8584adb547b79ae42062f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Interior</type>
      <name>interior</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>af39b89b2239cd60e67d1a45de71213e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Border</type>
      <name>border</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a7ace900600d4eaf40626e68237d70b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Overlap</type>
      <name>overlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a007ce60f383ed3ed9162055da65ce905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Front</type>
      <name>front</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad9489ba36997b7037af38158600d3f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Ghost</type>
      <name>ghost</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a36e6d3125f6bdda6488c873124dec872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorder</type>
      <name>interiorBorder</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad531da03bde889c2e7db8a87d4017cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorderOverlap</type>
      <name>interiorBorderOverlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ae8bc465a17c4ea80baaabf3bc8d2b97e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorderOverlapFront</type>
      <name>interiorBorderOverlapFront</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a4dd92bd13a3fad78c24a5440f79a2f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr All</type>
      <name>all</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a1db4b787d5e75e6a56002e915d5a5c92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>periodicfacetrans.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00683.html</filename>
    <includes id="a00686" name="periodicfacetrans.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/periodicfacetrans.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>periodicfacetrans.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00686.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="struct">Dune::dgf::PeriodicFaceTransformationBlock</class>
    <class kind="class">Dune::dgf::PeriodicFaceTransformationBlock::Matrix</class>
    <class kind="struct">Dune::dgf::PeriodicFaceTransformationBlock::AffineTransformation</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>a01f2a15383a88901742abfa93e3ed88b</anchor>
      <arglist>(std::ostream &amp;out, const PeriodicFaceTransformationBlock::AffineTransformation &amp;trafo)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/persistentcontainer.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06771.html</filename>
    <includes id="a06777" name="utility/persistentcontainer.hh" local="no" imported="no">dune/grid/utility/persistentcontainer.hh</includes>
    <includes id="a00887" name="persistentcontainervector.hh" local="no" imported="no">dune/grid/utility/persistentcontainervector.hh</includes>
    <class kind="class">Dune::PersistentContainer&lt; AlbertaGrid&lt; dim, dimworld &gt;, T &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>geometrygrid/persistentcontainer.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/geometrygrid/</path>
    <filename>a06774.html</filename>
    <includes id="a00446" name="declaration.hh" local="no" imported="no">dune/grid/geometrygrid/declaration.hh</includes>
    <includes id="a06777" name="utility/persistentcontainer.hh" local="no" imported="no">dune/grid/utility/persistentcontainer.hh</includes>
    <includes id="a00890" name="persistentcontainerwrapper.hh" local="no" imported="no">dune/grid/utility/persistentcontainerwrapper.hh</includes>
    <class kind="class">Dune::PersistentContainer&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, T &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>utility/persistentcontainer.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a06777.html</filename>
    <includes id="a00884" name="persistentcontainermap.hh" local="no" imported="no">dune/grid/utility/persistentcontainermap.hh</includes>
    <class kind="class">Dune::PersistentContainer</class>
    <class kind="class">Dune::PersistentContainer&lt; const Grid, T &gt;</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a06777.html</anchorfile>
      <anchor>a1baab0a2f4a49aa445373dee197c5488</anchor>
      <arglist>(Dune::PersistentContainer&lt; G, T &gt; &amp;a, Dune::PersistentContainer&lt; G, T &gt; &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>persistentcontainerinterface.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00881.html</filename>
    <class kind="class">Dune::PersistentContainerInterface</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>persistentcontainermap.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00884.html</filename>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <class kind="class">Dune::PersistentContainerMap</class>
    <class kind="class">Dune::PersistentContainerMap::IteratorWrapper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>persistentcontainervector.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00887.html</filename>
    <class kind="class">Dune::PersistentContainerVector</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>persistentcontainerwrapper.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00890.html</filename>
    <includes id="a00872" name="hostgridaccess.hh" local="no" imported="no">dune/grid/utility/hostgridaccess.hh</includes>
    <includes id="a06777" name="utility/persistentcontainer.hh" local="no" imported="no">dune/grid/utility/persistentcontainer.hh</includes>
    <class kind="class">Dune::PersistentContainerWrapper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>pointiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00812.html</filename>
    <includes id="a00797" name="corner.hh" local="no" imported="no">dune/grid/io/file/vtk/corner.hh</includes>
    <includes id="a00800" name="corneriterator.hh" local="no" imported="no">dune/grid/io/file/vtk/corneriterator.hh</includes>
    <class kind="class">Dune::VTK::PointIterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>polygon.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00689.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="struct">Dune::dgf::PolygonBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>polyhedron.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00692.html</filename>
    <includes id="a00689" name="polygon.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/polygon.hh</includes>
    <class kind="struct">Dune::dgf::PolyhedronBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>printgrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00776.html</filename>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>void</type>
      <name>printGrid</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a404bf57dcdbc6881d6d7bd4258a05416</anchor>
      <arglist>(const GridType &amp;grid, const Dune::MPIHelper &amp;helper, std::string output_file=&quot;printgrid&quot;, int size=2000, bool execute_plot=true, bool png=true, bool local_corner_indices=true, bool local_intersection_indices=true, bool outer_normals=true)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>projection.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00695.html</filename>
    <includes id="a06783" name="io/file/dgfparser/blocks/projection.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/projection.hh</includes>
    <class kind="struct">Dune::dgf::Expr::ConstantExpression</class>
    <class kind="struct">Dune::dgf::Expr::VariableExpression</class>
    <class kind="struct">Dune::dgf::Expr::FunctionCallExpression</class>
    <class kind="struct">Dune::dgf::Expr::VectorExpression</class>
    <class kind="struct">Dune::dgf::Expr::BracketExpression</class>
    <class kind="struct">Dune::dgf::Expr::MinusExpression</class>
    <class kind="struct">Dune::dgf::Expr::NormExpression</class>
    <class kind="struct">Dune::dgf::Expr::SqrtExpression</class>
    <class kind="struct">Dune::dgf::Expr::SinExpression</class>
    <class kind="struct">Dune::dgf::Expr::CosExpression</class>
    <class kind="struct">Dune::dgf::Expr::PowerExpression</class>
    <class kind="struct">Dune::dgf::Expr::SumExpression</class>
    <class kind="struct">Dune::dgf::Expr::DifferenceExpression</class>
    <class kind="struct">Dune::dgf::Expr::ProductExpression</class>
    <class kind="struct">Dune::dgf::Expr::QuotientExpression</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
    <namespace>Dune::dgf::Expr</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>a0404555c6f1763aa0e2c532e9c2a5c8e</anchor>
      <arglist>(std::ostream &amp;out, const ProjectionBlock::Token &amp;token)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>albertagrid/projection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06780.html</filename>
    <includes id="a00221" name="boundaryprojection.hh" local="no" imported="no">dune/grid/common/boundaryprojection.hh</includes>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <class kind="class">Dune::Alberta::DuneBoundaryProjection</class>
    <class kind="class">Dune::Alberta::ProjectionFactoryInterface</class>
    <class kind="class">Dune::Alberta::ProjectionFactory</class>
    <class kind="class">Dune::Alberta::DuneGlobalBoundaryProjectionFactory</class>
    <class kind="struct">Dune::Alberta::BasicNodeProjection</class>
    <class kind="class">Dune::Alberta::NodeProjection</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>io/file/dgfparser/blocks/projection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a06783.html</filename>
    <includes id="a00221" name="boundaryprojection.hh" local="no" imported="no">dune/grid/common/boundaryprojection.hh</includes>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::ProjectionBlock</class>
    <class kind="struct">Dune::dgf::ProjectionBlock::Expression</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>a0404555c6f1763aa0e2c532e9c2a5c8e</anchor>
      <arglist>(std::ostream &amp;out, const ProjectionBlock::Token &amp;token)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>psurfaceboundary.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/amiramesh/</path>
    <filename>a00626.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
  </compound>
  <compound kind="file">
    <name>pvtuwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00815.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <class kind="class">Dune::VTK::PVTUWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>rangegenerators.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00308.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00305" name="partitionset.hh" local="no" imported="no">dune/grid/common/partitionset.hh</includes>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>recipe-integration.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/doc/recipes/</path>
    <filename>a00146.html</filename>
    <includes id="a00899" name="yaspgrid.hh" local="no" imported="no">dune/grid/yaspgrid.hh</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00146.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>recipe-iterate-over-grid.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/doc/recipes/</path>
    <filename>a00149.html</filename>
    <includes id="a00899" name="yaspgrid.hh" local="no" imported="no">dune/grid/yaspgrid.hh</includes>
    <member kind="function">
      <type>int</type>
      <name>main</name>
      <anchorfile>a00149.html</anchorfile>
      <anchor>a3c04138a5bfe5d72780bb7e82a18e627</anchor>
      <arglist>(int argc, char **argv)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>refinement.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00566.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <class kind="class">Dune::Alberta::Patch</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 1 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 2 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 3 &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Alberta</namespace>
  </compound>
  <compound kind="file">
    <name>scsgmapper.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00311.html</filename>
    <includes id="a00299" name="mapper.hh" local="yes" imported="no">mapper.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <class kind="class">Dune::SingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LeafSingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LevelSingleCodimSingleGeomTypeMapper</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>simplex.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00698.html</filename>
    <includes id="a00701" name="simplex.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/simplex.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>simplex.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00701.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::SimplexBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>simplexgeneration.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00704.html</filename>
    <includes id="a00707" name="simplexgeneration.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/simplexgeneration.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>simplexgeneration.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00707.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::SimplexGenerationBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>sizecache.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/common/</path>
    <filename>a00314.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <class kind="class">Dune::SizeCache</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>skeletonfunction.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00818.html</filename>
    <includes id="a00809" name="functionwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/functionwriter.hh</includes>
    <includes id="a00815" name="pvtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/pvtuwriter.hh</includes>
    <includes id="a00842" name="vtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtuwriter.hh</includes>
    <class kind="struct">Dune::VTK::SkeletonFunctionTraits</class>
    <class kind="class">Dune::VTK::SkeletonFunctionInterface</class>
    <class kind="class">Dune::VTK::SkeletonFunctionWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>starcdreader.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00779.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <class kind="class">Dune::StarCDReader</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>streams.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00821.html</filename>
    <includes id="a00782" name="b64enc.hh" local="no" imported="no">dune/grid/io/file/vtk/b64enc.hh</includes>
    <class kind="class">Dune::Base64Stream</class>
    <class kind="class">Dune::RawStream</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>albertagrid/structuredgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a06786.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00875" name="multiindex.hh" local="no" imported="no">dune/grid/utility/multiindex.hh</includes>
    <includes id="a06789" name="utility/structuredgridfactory.hh" local="no" imported="no">dune/grid/utility/structuredgridfactory.hh</includes>
    <class kind="class">Dune::StructuredGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>utility/structuredgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a06789.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00875" name="multiindex.hh" local="no" imported="no">dune/grid/utility/multiindex.hh</includes>
    <class kind="class">Dune::StructuredGridFactory</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>structuredyaspgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00170.html</filename>
    <includes id="a06789" name="utility/structuredgridfactory.hh" local="no" imported="no">dune/grid/utility/structuredgridfactory.hh</includes>
    <class kind="class">Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="class">Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>subsamplingvtkwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00824.html</filename>
    <includes id="a00839" name="vtkwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtkwriter.hh</includes>
    <includes id="a00842" name="vtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtuwriter.hh</includes>
    <class kind="class">Dune::SubsamplingVTKWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>tensorgridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00893.html</filename>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00899" name="yaspgrid.hh" local="no" imported="no">dune/grid/yaspgrid.hh</includes>
    <includes id="a00875" name="multiindex.hh" local="no" imported="no">dune/grid/utility/multiindex.hh</includes>
    <class kind="class">Dune::TensorGridFactory</class>
    <class kind="class">Dune::TensorGridFactoryCreator</class>
    <class kind="class">Dune::TensorGridFactoryCreator&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>torus.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00182.html</filename>
    <includes id="a00251" name="exceptions.hh" local="no" imported="no">dune/grid/common/exceptions.hh</includes>
    <includes id="a00167" name="partitioning.hh" local="yes" imported="no">partitioning.hh</includes>
    <class kind="class">Dune::Torus</class>
    <class kind="class">Dune::Torus::ProcListIterator</class>
    <namespace>Dune</namespace>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>adbcd9c9928bb5c66940cd3e96486373c</anchor>
      <arglist>(std::ostream &amp;s, const Torus&lt; CollectiveCommunication, d &gt; &amp;t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transformation.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00572.html</filename>
    <includes id="a00560" name="misc.hh" local="no" imported="no">dune/grid/albertagrid/misc.hh</includes>
    <class kind="class">Dune::AlbertaTransformation</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>treeiterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00575.html</filename>
    <includes id="a00509" name="elementinfo.hh" local="no" imported="no">dune/grid/albertagrid/elementinfo.hh</includes>
    <includes id="a00557" name="meshpointer.hh" local="no" imported="no">dune/grid/albertagrid/meshpointer.hh</includes>
    <class kind="class">Dune::AlbertaMarkerVector</class>
    <class kind="struct">Dune::AlbertaMarkerVector::MarkSubEntities::Codim</class>
    <class kind="class">Dune::AlbertaGridTreeIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>uggrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00851.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a00854" name="uggridfactory.hh" local="yes" imported="no">uggrid/uggridfactory.hh</includes>
    <class kind="struct">Dune::UGGridFamily</class>
    <class kind="class">Dune::UGGrid</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, 0 &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, dim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
    <member kind="define">
      <type>#define</type>
      <name>FOR_DUNE</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>ad24a25fadd146e4351a104dc96eb1b01</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UG_DIM_2</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>abc5ccf5667517aa13de6dfbb5b078aec</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UG_DIM</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a858c8133641031e590c5c07a19b2e6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UGTYPES_H</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a915570cf23bdb2df819b67baecb634c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__HEAPS__</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a8aadffd9af618a7e5840b15fd12d9cb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__UGENV__</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a3e94058bce38e26cf760cf315c173c22</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>__DEVICESH__</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a67ce36ca36b8c8030a8d00aa2e1906cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UG_DIM_3</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a3b824cdfbc66d4a091eaeb1318622e1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>UG_DIM</name>
      <anchorfile>a00851.html</anchorfile>
      <anchor>a858c8133641031e590c5c07a19b2e6d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CollectiveCommunication&lt; No_Comm &gt;</type>
      <name>UGCollectiveCommunication</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>aca0e244f2315c2955492bfa4c7804ae7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>uggridfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/uggrid/</path>
    <filename>a00854.html</filename>
    <includes id="a00224" name="boundarysegment.hh" local="no" imported="no">dune/grid/common/boundarysegment.hh</includes>
    <includes id="a06711" name="common/gridfactory.hh" local="no" imported="no">dune/grid/common/gridfactory.hh</includes>
    <includes id="a00851" name="uggrid.hh" local="no" imported="no">dune/grid/uggrid.hh</includes>
    <class kind="class">Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;</class>
    <class kind="struct">Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;::Codim</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>undefine-2.0.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00578.html</filename>
  </compound>
  <compound kind="file">
    <name>undefine-3.0.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/albertagrid/</path>
    <filename>a00581.html</filename>
  </compound>
  <compound kind="file">
    <name>vertex.cc</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00710.html</filename>
    <includes id="a00713" name="vertex.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/vertex.hh</includes>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>vertex.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/dgfparser/blocks/</path>
    <filename>a00713.html</filename>
    <includes id="a00638" name="basic.hh" local="no" imported="no">dune/grid/io/file/dgfparser/blocks/basic.hh</includes>
    <class kind="class">Dune::dgf::VertexBlock</class>
    <namespace>Dune</namespace>
    <namespace>Dune::dgf</namespace>
  </compound>
  <compound kind="file">
    <name>vertexorderfactory.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/utility/</path>
    <filename>a00896.html</filename>
    <class kind="class">Dune::VertexOrderByIdFactory</class>
    <class kind="struct">Dune::VertexOrderByIdFactory::VertexOrder</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>volumeiterators.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00827.html</filename>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00797" name="corner.hh" local="no" imported="no">dune/grid/io/file/vtk/corner.hh</includes>
    <includes id="a00800" name="corneriterator.hh" local="no" imported="no">dune/grid/io/file/vtk/corneriterator.hh</includes>
    <includes id="a00809" name="functionwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/functionwriter.hh</includes>
    <includes id="a00812" name="pointiterator.hh" local="no" imported="no">dune/grid/io/file/vtk/pointiterator.hh</includes>
    <class kind="class">Dune::VTK::ConformingVolumeIteratorFactory</class>
    <class kind="class">Dune::VTK::NonConformingVolumeIteratorFactory</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>volumewriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00830.html</filename>
    <includes id="a00785" name="basicwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/basicwriter.hh</includes>
    <includes id="a00806" name="function.hh" local="no" imported="no">dune/grid/io/file/vtk/function.hh</includes>
    <includes id="a00809" name="functionwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/functionwriter.hh</includes>
    <includes id="a00827" name="volumeiterators.hh" local="no" imported="no">dune/grid/io/file/vtk/volumeiterators.hh</includes>
    <class kind="class">Dune::VTK::ConformingVolumeWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>vtk.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/</path>
    <filename>a00845.html</filename>
    <includes id="a00791" name="boundarywriter.hh" local="yes" imported="no">vtk/boundarywriter.hh</includes>
    <includes id="a00824" name="subsamplingvtkwriter.hh" local="yes" imported="no">vtk/subsamplingvtkwriter.hh</includes>
    <includes id="a00833" name="vtksequencewriter.hh" local="yes" imported="no">vtk/vtksequencewriter.hh</includes>
    <includes id="a00839" name="vtkwriter.hh" local="yes" imported="no">vtk/vtkwriter.hh</includes>
    <includes id="a00830" name="volumewriter.hh" local="yes" imported="no">vtk/volumewriter.hh</includes>
  </compound>
  <compound kind="file">
    <name>vtksequencewriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00833.html</filename>
    <includes id="a00836" name="vtksequencewriterbase.hh" local="no" imported="no">dune/grid/io/file/vtk/vtksequencewriterbase.hh</includes>
    <includes id="a00839" name="vtkwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtkwriter.hh</includes>
    <includes id="a00824" name="subsamplingvtkwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/subsamplingvtkwriter.hh</includes>
    <class kind="class">Dune::VTKSequenceWriter</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>vtksequencewriterbase.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00836.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <includes id="a00839" name="vtkwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtkwriter.hh</includes>
    <class kind="class">Dune::VTKSequenceWriterBase</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>vtkwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00839.html</filename>
    <includes id="a00302" name="mcmgmapper.hh" local="no" imported="no">dune/grid/common/mcmgmapper.hh</includes>
    <includes id="a00260" name="gridenums.hh" local="no" imported="no">dune/grid/common/gridenums.hh</includes>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <includes id="a00803" name="dataarraywriter.hh" local="no" imported="no">dune/grid/io/file/vtk/dataarraywriter.hh</includes>
    <includes id="a00806" name="function.hh" local="no" imported="no">dune/grid/io/file/vtk/function.hh</includes>
    <includes id="a00815" name="pvtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/pvtuwriter.hh</includes>
    <includes id="a00821" name="streams.hh" local="no" imported="no">dune/grid/io/file/vtk/streams.hh</includes>
    <includes id="a00842" name="vtuwriter.hh" local="no" imported="no">dune/grid/io/file/vtk/vtuwriter.hh</includes>
    <class kind="class">Dune::VTKWriter</class>
    <class kind="class">Dune::VTKWriter::VTKLocalFunction</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::FunctionWrapper</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::GlobalFunctionWrapper</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::VTKFunctionWrapper</class>
    <class kind="class">Dune::VTKWriter::CellIterator</class>
    <class kind="class">Dune::VTKWriter::VertexIterator</class>
    <class kind="class">Dune::VTKWriter::CornerIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>vtuwriter.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/io/file/vtk/</path>
    <filename>a00842.html</filename>
    <includes id="a00794" name="common.hh" local="no" imported="no">dune/grid/io/file/vtk/common.hh</includes>
    <includes id="a00803" name="dataarraywriter.hh" local="no" imported="no">dune/grid/io/file/vtk/dataarraywriter.hh</includes>
    <class kind="class">Dune::VTK::VTUWriter</class>
    <namespace>Dune</namespace>
    <namespace>Dune::VTK</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/</path>
    <filename>a00899.html</filename>
    <includes id="a06636" name="common/backuprestore.hh" local="no" imported="no">dune/grid/common/backuprestore.hh</includes>
    <includes id="a06702" name="common/grid.hh" local="no" imported="no">dune/grid/common/grid.hh</includes>
    <includes id="a06648" name="common/capabilities.hh" local="no" imported="no">dune/grid/common/capabilities.hh</includes>
    <includes id="a00281" name="indexidset.hh" local="no" imported="no">dune/grid/common/indexidset.hh</includes>
    <includes id="a00236" name="datahandleif.hh" local="no" imported="no">dune/grid/common/datahandleif.hh</includes>
    <includes id="a00155" name="coordinates.hh" local="no" imported="no">dune/grid/yaspgrid/coordinates.hh</includes>
    <includes id="a00182" name="torus.hh" local="no" imported="no">dune/grid/yaspgrid/torus.hh</includes>
    <includes id="a00215" name="ygrid.hh" local="no" imported="no">dune/grid/yaspgrid/ygrid.hh</includes>
    <includes id="a00191" name="yaspgridgeometry.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridgeometry.hh</includes>
    <includes id="a00185" name="yaspgridentity.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridentity.hh</includes>
    <includes id="a00203" name="yaspgridintersection.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridintersection.hh</includes>
    <includes id="a00206" name="yaspgridintersectioniterator.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridintersectioniterator.hh</includes>
    <includes id="a00194" name="yaspgridhierarchiciterator.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridhierarchiciterator.hh</includes>
    <includes id="a00188" name="yaspgridentityseed.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridentityseed.hh</includes>
    <includes id="a00209" name="yaspgridleveliterator.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridleveliterator.hh</includes>
    <includes id="a00200" name="yaspgridindexsets.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridindexsets.hh</includes>
    <includes id="a00197" name="yaspgrididset.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgrididset.hh</includes>
    <includes id="a00212" name="yaspgridpersistentcontainer.hh" local="no" imported="no">dune/grid/yaspgrid/yaspgridpersistentcontainer.hh</includes>
    <includes id="a00170" name="structuredyaspgridfactory.hh" local="no" imported="no">dune/grid/yaspgrid/structuredyaspgridfactory.hh</includes>
    <includes id="a06642" name="yaspgrid/backuprestore.hh" local="no" imported="no">dune/grid/yaspgrid/backuprestore.hh</includes>
    <class kind="struct">Dune::YaspGridFamily</class>
    <class kind="class">Dune::YaspGrid</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isCartesian&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Capabilities</namespace>
    <member kind="typedef">
      <type>CollectiveCommunication&lt; MPI_Comm &gt;</type>
      <name>YaspCollectiveCommunication</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a40da26e5936a3d0e4224ae8cf6a6330a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ae3df34f7b610ec0f8d564e7e10de8d2e</anchor>
      <arglist>(std::ostream &amp;s, const YaspGrid&lt; d, CC &gt; &amp;grid)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>yaspgrid_dim_bits</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a47d82c4597a3245c5fa19240ae467d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>yaspgrid_level_bits</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a2ddc8e6630dbaa4fb81725387d035e7c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>yaspgridentity.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00185.html</filename>
    <class kind="class">Dune::YaspEntity</class>
    <class kind="class">Dune::YaspEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="struct">Dune::YaspEntity&lt; 0, dim, GridImp &gt;::Codim</class>
    <class kind="class">Dune::YaspEntity&lt; dim, dim, GridImp &gt;</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Yasp</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridentityseed.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00188.html</filename>
    <class kind="class">Dune::YaspEntitySeed</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridgeometry.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00191.html</filename>
    <class kind="class">Dune::YaspGeometry</class>
    <class kind="class">Dune::YaspGeometry&lt; mydim, mydim, GridImp &gt;</class>
    <class kind="class">Dune::YaspGeometry&lt; 0, cdim, GridImp &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridhierarchiciterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00194.html</filename>
    <class kind="class">Dune::YaspHierarchicIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgrididset.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00197.html</filename>
    <class kind="class">Dune::YaspGlobalIdSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridindexsets.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00200.html</filename>
    <class kind="class">Dune::YaspIndexSet</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridintersection.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00203.html</filename>
    <class kind="class">Dune::YaspIntersection</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridintersectioniterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00206.html</filename>
    <class kind="class">Dune::YaspIntersectionIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridleveliterator.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00209.html</filename>
    <class kind="class">Dune::YaspLevelIterator</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>yaspgridpersistentcontainer.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00212.html</filename>
    <includes id="a06777" name="utility/persistentcontainer.hh" local="no" imported="no">dune/grid/utility/persistentcontainer.hh</includes>
    <includes id="a00887" name="persistentcontainervector.hh" local="no" imported="no">dune/grid/utility/persistentcontainervector.hh</includes>
    <includes id="a00899" name="yaspgrid.hh" local="yes" imported="no">../yaspgrid.hh</includes>
    <class kind="class">Dune::YaspPersistentContainerIndex</class>
    <class kind="class">Dune::PersistentContainer&lt; YaspGrid&lt; dim, CoordCont &gt;, T &gt;</class>
    <namespace>Dune</namespace>
  </compound>
  <compound kind="file">
    <name>ygrid.hh</name>
    <path>C:/ID/cmake-build-release/dune-grid-prefix/src/dune-grid/dune/grid/yaspgrid/</path>
    <filename>a00215.html</filename>
    <class kind="class">Dune::YGridComponent</class>
    <class kind="class">Dune::YGridComponent::Iterator</class>
    <class kind="class">Dune::YGrid</class>
    <class kind="class">Dune::YGrid::Iterator</class>
    <class kind="class">Dune::YGridList</class>
    <class kind="struct">Dune::YGridList::Intersection</class>
    <class kind="class">Dune::YGridList::Iterator</class>
    <namespace>Dune</namespace>
    <namespace>Dune::Yasp</namespace>
    <member kind="function">
      <type>std::array&lt; int, d &gt;</type>
      <name>sizeArray</name>
      <anchorfile>a00954.html</anchorfile>
      <anchor>a42876f9b3603ca618b3f5fa44409a627</anchor>
      <arglist>(const std::array&lt; std::vector&lt; ct &gt;, d &gt; &amp;v)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a646977476ed08ee0a87ac20b1e3562d9</anchor>
      <arglist>(std::ostream &amp;s, YGridComponent&lt; Coordinates &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0184436d38874e153094f1aa630012b5</anchor>
      <arglist>(std::ostream &amp;s, typename YGridComponent&lt; Coordinates &gt;::Iterator &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ada57b0fd9328de17641ea3ce9f99c235</anchor>
      <arglist>(std::ostream &amp;s, const YGrid&lt; Coordinates &gt; &amp;e)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::AdaptCoordFunction</name>
    <filename>a03018.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>adapt</name>
      <anchorfile>a03018.html</anchorfile>
      <anchor>a70f6914f2dfb55be822b6de5c1749803</anchor>
      <arglist>(CoordFunctionInterface &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AdaptDataHandle</name>
    <filename>a02454.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::AdaptDataHandleInterface</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a02454.html</anchorfile>
      <anchor>a41b635bc7ef4bcefb25d4473f8b5075e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restrictLocal</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>ad856a63ee25eb8b77b521a703b9b5519</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongLocal</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a1e6c6dc1c3c0cecb451df8d608323a20</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AdaptDataHandle</name>
      <anchorfile>a02454.html</anchorfile>
      <anchor>af04f410ada8a6700e3e93549f12552cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImp</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>aa96df2052696c3d561e7dcc6f2ef27fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Impl &amp;</type>
      <name>asImp</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a91899046520c822a5261d90a64c180bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AdaptDataHandleInterface</name>
    <filename>a02458.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a8b34bb4a6dc82f3c68f2d5ef62ff223a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preCoarsening</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>af554af2dceed3e39393b4e516cd73a6d</anchor>
      <arglist>(const Entity &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postRefinement</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a2a6799af75d86dd840a405808cc647bd</anchor>
      <arglist>(const Entity &amp;father)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restrictLocal</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>ad856a63ee25eb8b77b521a703b9b5519</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongLocal</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a1e6c6dc1c3c0cecb451df8d608323a20</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImp</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>aa96df2052696c3d561e7dcc6f2ef27fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Impl &amp;</type>
      <name>asImp</name>
      <anchorfile>a02458.html</anchorfile>
      <anchor>a91899046520c822a5261d90a64c180bc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::AdaptRestrictProlongHandler</name>
    <filename>a01838.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>AdaptRestrictProlongHandler</name>
      <anchorfile>a01838.html</anchorfile>
      <anchor>a2caa6ccd47e4574bbbc379f71cc2dae1</anchor>
      <arglist>(Grid &amp;grid, RestrictProlongOperator &amp;rpOp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restrictLocal</name>
      <anchorfile>a01838.html</anchorfile>
      <anchor>a31f6d9b95dd911e985a39bbf4db9b804</anchor>
      <arglist>(const Patch &amp;patch, int i)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongLocal</name>
      <anchorfile>a01838.html</anchorfile>
      <anchor>a7be6366971e92fc1949f2f4aa00c66cb</anchor>
      <arglist>(const Patch &amp;patch, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::PeriodicFaceTransformationBlock::AffineTransformation</name>
    <filename>a03410.html</filename>
    <member kind="function">
      <type></type>
      <name>AffineTransformation</name>
      <anchorfile>a03410.html</anchorfile>
      <anchor>a8223943ff18f28136b565e60661ec0ec</anchor>
      <arglist>(int dimworld)</arglist>
    </member>
    <member kind="variable">
      <type>Matrix&lt; double &gt;</type>
      <name>matrix</name>
      <anchorfile>a03410.html</anchorfile>
      <anchor>a23b0d2da93ec582127601a000dfead79</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>shift</name>
      <anchorfile>a03410.html</anchorfile>
      <anchor>a5a19c0b680ed7231ccdac4510b6e20d8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaError</name>
    <filename>a02202.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGrid</name>
    <filename>a01774.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>GridDefaultImplementation&lt; dim, Alberta::dimWorld, Alberta::Real, AlbertaGridFamily&lt; dim, Alberta::dimWorld &gt; &gt;</base>
    <member kind="typedef">
      <type>AlbertaGridFamily&lt; dim, dimworld &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa21613caab199e0e975e28f95ddca033</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::ctype</type>
      <name>ctype</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a9a99e793a7de4b38d7bc44f1897cf257</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridFamily&lt; dim, dimworld &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a3e1c1ce84065159f62795a692275e1a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a4ccb2eebde82c5196e47c49fc64e4919</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa4ecb1654d67868ba2200473f6bb175f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HierarchicIndexSet</type>
      <name>HierarchicIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>abc9c3c9af385a5bf4e78359a4ecc583d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>adab719fa02921b7ada6dd75feb8fc054</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ae88b4124ede8f880e981b765eec53a76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>af89c6c19518dde38ec2794e1018b7845</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa11235bfad05381b4b8ce10bd2ed5fe5</anchor>
      <arglist>(const This &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a9818201ab2e9a5db620d18145b12c114</anchor>
      <arglist>(const This &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a6654bb8d09f680e9e31b349f528ac068</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa6f4498f1ee0fb3a2a8830a19c9abd34</anchor>
      <arglist>(const Alberta::MacroData&lt; dimension &gt; &amp;macroData, const std::shared_ptr&lt; DuneBoundaryProjection&lt; dimensionworld &gt; &gt; &amp;projection=std::shared_ptr&lt; DuneBoundaryProjection&lt; dimensionworld &gt; &gt;())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a0800f7f849f8441e5d94743935e79498</anchor>
      <arglist>(const Alberta::MacroData&lt; dimension &gt; &amp;macroData, const Alberta::ProjectionFactoryInterface&lt; Proj, Impl &gt; &amp;projectionFactory)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ac8ca5d9cc3c27884ffc5712aec1dbe47</anchor>
      <arglist>(const std::string &amp;macroGridFileName)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlbertaGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>af1a556fcf6c3fc5a4a4a42e25eedd01b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a57c3fe7334de066d8570f820fe018add</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a5cd9cce7e9974471ef5766514cd9272f</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a69f49ff50444eb58c6779c33d1d90e52</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa992ae65ed6b8a202e8816088a2ac911</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a921a1800befe6696a8821dfd7ae5d65c</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits ::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a32839d5113803e31749a5c20bed4a11b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits ::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>acf3a71878105376efaa8041c12e46fa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a46bf5962157643d181e4faed922b4e8a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a827086793b48bfd19c4bd8273153e837</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>abaadf97c0f47bc42ae6815fd9c0fbe7f</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a7e438177427259704bda1878d44a5ef7</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a9be1347d1b8a7e18ca3a1b80a09c8b00</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ad267e71cbebba7d1f603b7e54672978f</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a98643d34f57dcc1a0dfdb4bcd2b33418</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>accb9f2cc23d2af0bd7a802f94746635c</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a786975dfc559128ea7697196737748aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aeb50f54a3d6f3cc5237207450424677f</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>af81eb89e5becfa9014a61ae8e635c2d3</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ae8d3596ea42b440b8ac5cc7e9b479abc</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ac06dc1a62a73527c053ce49a2332f0c5</anchor>
      <arglist>(int refCount, AdaptDataHandleInterface&lt; This, DataHandle &gt; &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a78701c8637a9a616f332f81bf5e5e1c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a12ee20d3148406cea8f2e17c58c5959c</anchor>
      <arglist>(AdaptDataHandleInterface&lt; This, DataHandle &gt; &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>af7c8ebcdbeff4836343af5032e1caafc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a8ee81ae1ea1b5321f38141b90b83dbc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a9a69b9a46b1126d3953050ccaaad6183</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; EntitySeed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aee21e3836672bd45d4ac2306474e6379</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ac64dcefd9e3c5aaf8c3b12950bf4fd41</anchor>
      <arglist>(const std::string &amp;filename, ctype time) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readGrid</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a1be3cd49539f6fd64724b10f02a79720</anchor>
      <arglist>(const std::string &amp;filename, ctype &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>const HierarchicIndexSet &amp;</type>
      <name>hierarchicIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a50f0503bf10bcd1f7efb5f2bf74f5fbb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits ::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa545fb2d2c796f2ceacebb7e49f81242</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits ::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>abd929f65f9ab4daf7a11ae2907c89a7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>af24ea632bc3eece1ebe0abec76c0bc33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a85ac0d7402439f11683755c4cf97ec80</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ALBERTA MESH *</type>
      <name>getMesh</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a6bb7a0f524783bcdedc2b01d48e82425</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeshPointer &amp;</type>
      <name>meshPointer</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a661c25ec9b30a74e49cd46702c38d7d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofNumbering &amp;</type>
      <name>dofNumbering</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a273abd13c35d572c8fce203f57972811</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelProvider &amp;</type>
      <name>levelProvider</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a5946af8154a27e614aac3307bea3d6c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dune2alberta</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a3f5a7d3b54f3bd193bbc1f438c1de773</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2dune</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>acf8072a47747eed536724ce12d1b3175</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>generic2alberta</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a21868e4ed6643ed3932e737d56beccac</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2generic</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aaa72536b62f8615c854a2d74edf81202</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>const Alberta::GlobalVector &amp;</type>
      <name>getCoord</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a6bf84ca6b85002544a19876c18de9f2b</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGrid&lt; dim, dimworld &gt;::Traits ::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ae70249ce327c27edc012e86cdac0941c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGrid&lt; dim, dimworld &gt;::Traits ::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a32ee2306030bcf0690734815903d6769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::string</type>
      <name>typeName</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a266960d57e66b37b1a6a81eb9bab4e3e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTwist</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aac1aa03e1534ca87dffe8d7b227a5b19</anchor>
      <arglist>(const typename Traits::template Codim&lt; codim &gt;::Entity &amp;entity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTwist</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ae20b9c8eca2169e443153405b0deaf96</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTwistInInside</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a8b108d46425dc6dcc7d54eca8ef5a6fe</anchor>
      <arglist>(const typename Traits::LeafIntersection &amp;intersection)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>getTwistInOutside</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a6b40c1172d4591551ba2c0d2868df27c</anchor>
      <arglist>(const typename Traits::LeafIntersection &amp;intersection)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a38af23ca5e696b1f15d73928cd196fe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a87eb2a10c0af241f371035018d8ce7ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a65676b43f904294d19b143aae92ad00d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaLevelGridView</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ad6df11a4717669656e003451260d9929</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaLeafGridView</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a14e0d4b7346f9c8a85b318516af5eee3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a21eaad15f781aafe570b3f761c8781bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridHierarchicIterator</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ace073437fa8af8a5009e3e4d66e9d40a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GridFactory&lt; This &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa3fc70859364e09dfb28db6d54f43581</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DGFGridFactory&lt; This &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a8852246aa287cb1bb8486c6039ef6f57</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridIntersectionBase&lt; const This &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>ad82590aaa5a3bda5889ad9c30123e41c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridLeafIntersection&lt; const This &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>afd026c2d4efcb154d2faf05b657ef8c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaMarkerVector&lt; dim, dimworld &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>acc5987ea20c0d0b6df14e0de54821beb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>AlbertaMarkerVector&lt; dim, dimworld &gt;::MarkSubEntities&lt; true &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a248ed19a437e12881d6043dd06f37cae</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>AlbertaMarkerVector&lt; dim, dimworld &gt;::MarkSubEntities&lt; false &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a3e8b379616b7be5b13c4b3b44275127e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridIndexSet&lt; dim, dimworld &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aa10e342dc49335746dfcb634278fadcb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridHierarchicIndexSet&lt; dim, dimworld &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a6cd505ead28b0a68c1b2b0be9ef9b62f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Alberta::AdaptRestrictProlongHandler</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>a3e42a2c0654a7c61007b1637fe596f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>AlbertaGridLeafIntersectionIterator&lt; const This &gt;</name>
      <anchorfile>a01774.html</anchorfile>
      <anchor>aaf4ad0aea1aa6c14738a34ae51169d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridCoordinateReader</name>
    <filename>a01974.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a07d9de6265b5571a2b2ae9fdc81fa478</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a084d137a073a4dd3a133a9da8667d81e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>afd9ca667dfae10bf77f8cc87b6b076c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>Coordinate</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a9e863a96b4e21001a04fe940aac35aa1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridCoordinateReader</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a885a856b4415d40e5e726fd620b175ee</anchor>
      <arglist>(const GridImp &amp;grid, const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a370bd4d180a8f06c6442503b9ffdced2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinate</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>ab0ed9c8fcba7efe459a5fda11077d077</anchor>
      <arglist>(int i, Coordinate &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDeterminant</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a97461791ed0f4271625735eec02c4885</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>determinant</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>ad2484bf29b6a2d6f14359b8d73d01102</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a8d0b456db2647c0a8ba167bccd3675a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a6bc872dbdfe94756d1e05b6d819f74c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>a8c23c8437b0643135d62b2ae23e7680b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a01974.html</anchorfile>
      <anchor>ac18e8a405f4823bee47b6946bbedb6ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntity</name>
    <filename>a01938.html</filename>
    <templarg>codim</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; codim, dim, Grid, AlbertaGridEntity &gt;</base>
    <class kind="struct">Dune::AlbertaGridEntity::Codim</class>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a697267a15c5462db9c3c29ab9e8476d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a79f4916e40dcc065023c2a2d2afde648</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a28bb6d1cb338c9c70e882ad9a559e0ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ad8c21c2047f43674774b460e44a4f74d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a8fd0529d59ffcb67f934277ac409126f</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ae020fb9d9d5b9cafc7b66455845e13ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ac5e334d7e2ff1af01d42b1d3a622bb7a</anchor>
      <arglist>(const Grid &amp;grid, const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a487c34cba0b73f1a2b5c5857c861b159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a6cd30084d5600d0c8ec69b00c521c6aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a9878fcf9942ef2234465e6c07f63a293</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>adb2bfb358a334910bb9f1fad52dbdb8f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a6663266230f9e1feb8a52cdd822cdc3e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>aa2fa467dd753f8f8ef805bb5734f2555</anchor>
      <arglist>(unsigned int cd) const</arglist>
    </member>
    <member kind="function">
      <type>ALBERTA EL_INFO *</type>
      <name>getElInfo</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a161701093c610d270f9c34ecc342d5ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>aad45390d33610ebe22369bf3248d6924</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>adecea12da4bb07ddd417ccaf23c34118</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearElement</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a039ad2b19709c6a01b3641bcdd4c1faf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a529c84ec5b1f47d71c34e90798ec00dc</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a7feeee27fae1961207509aa4fcd8f4a5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a0cbd366ac3f3c4cc96c8d6b6630e4374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subEntity</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ad062f9d16284a5ed0c311050ab3eac0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a0cefdb112787e64191666fd9286bc00e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>aa2eb023da1fdfcc946fd82541401f2a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ab62d370712c5019edd297082a3658ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>ace7a80dc51c2d2987830b2a76b02305b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGrid&lt; dim, dimworld &gt;</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a7721cba2d26e39c92572ef13570c0231</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridEntity&lt; 0, dim, Grid &gt;</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a969bedd10ac6cc325585a1ce8d4b2545</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridHierarchicIterator&lt; Grid &gt;</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a1f4141ebab45476b387de1fd45bf1341</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01938.html</anchorfile>
      <anchor>a21eaad15f781aafe570b3f761c8781bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;</name>
    <filename>a01946.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; 0, dim, Grid, AlbertaGridEntity &gt;</base>
    <class kind="struct">Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;::Codim</class>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a03e7fa6d23a6bf5fa203cbdb5628e538</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a30f68d7b8c68632c39f41dfcbdb8b870</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a1540166127a80e7554859a3d1924734f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a8790590ef2e79d53eb25f336abf3b659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; 0 &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a0eec656bd3da135c6623af8688929843</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a157659d5b22689b95c5ce29e5c0fc71a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::AlbertaGridLeafIntersectionIterator&lt; Grid &gt;</type>
      <name>AlbertaGridLeafIntersectionIterator</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>af0be2815de9d08008844345d9ef0728f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridLeafIntersectionIterator</type>
      <name>AlbertaGridLevelIntersectionIterator</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>af70c4b60d11df11502a997bd64cf1e87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ab7009729cc0fac835fd1ae461ab37599</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a5a9c00ab45a9743cafa75453bbed101f</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a909cc5a32611a676246de70ddf244789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a366dde8c7faaa5262b4af5d4a339c87b</anchor>
      <arglist>(const Grid &amp;grid, const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a2f5fe551689e8abf2f2ab2c6f10ce03a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a7bf2de35961e501344c12cb75f66160d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ad4d62257c81801423af35736161987ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a8243f303e71c05505a69839067efe505</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a19fd04eb73512bdaa7c9caad887afc69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>aef05ee75585b0d6dfe0236f729f2fcae</anchor>
      <arglist>(unsigned int cd) const</arglist>
    </member>
    <member kind="function">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a3c497f6608d6f17a9e1d7aa94588fb89</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridLeafIntersectionIterator</type>
      <name>ileafbegin</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>af03c7455b586c112869f05d7fffde048</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridLeafIntersectionIterator</type>
      <name>ileafend</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>aaaf4879cef30aaca66b6a3980b8ae11d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridLevelIntersectionIterator</type>
      <name>ilevelbegin</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a9dd0b5c3c7df0b632b3a24ec16796094</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridLevelIntersectionIterator</type>
      <name>ilevelend</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ac51bdd616a2497697bf3cc669540872d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a1f860b777c192ef3f18687c006e178bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>father</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a2acae5fe712e428ad7e01a5bdfdfd51c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a641e209e4cf5f73116b1af03db2304ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a54662bb5cc3a81386216557bcbd5f16a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hbegin</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>adcfa24ffe054328ff46b3e22da388ebc</anchor>
      <arglist>(int maxlevel) const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hend</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>af479bcfeb1ec98482682caf1d888f1e1</anchor>
      <arglist>(int maxlevel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>af98ad8d5663bfdf894bfdaf630856510</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a883013c42292f25436cfe0f4ce063c37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundaryIntersections</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a66b88b02699a79db20cd2d4929db1623</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>afd678378b7ca49a5bb21a8e3cbf86489</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ad9a3182382790a443575927e13fd0766</anchor>
      <arglist>(const This &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>ALBERTA EL_INFO *</type>
      <name>getElInfo</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a301da5bd2b78138fc307f606fdecd86e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>aad8d23ebb6768d88037a6689e13f295f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clearElement</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a380233bb453a6fe9fae64cc93f2f7076</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setElement</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a23143c303dabcfc3815fd21749f50c6b</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a729bdabad51838f3c82b08b95c3d4c90</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ac453d411f572cac5c8cdbe11a9511af6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subEntity</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a6ee069ed08036ceaaeaaf62ef9070eca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a3777a67bbb72592ffe1c7c306f7aeeb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a70f8f35fa52c10c0c747c0ea2b311d4e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a885a80e85138a15b07759986e01816aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a7c98c08e16bcc8d5d7925e951da16ab8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>ab163d321f223d643b435e68f92ed41fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGrid&lt; dim, dimworld &gt;</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a7721cba2d26e39c92572ef13570c0231</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridLeafIntersection&lt; Grid &gt;</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>adf40094834f0a09b9b35035bc394af6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridHierarchicIterator&lt; Grid &gt;</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a1f4141ebab45476b387de1fd45bf1341</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01946.html</anchorfile>
      <anchor>a21eaad15f781aafe570b3f761c8781bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntityPointer</name>
    <filename>a02026.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntitySeed</name>
    <filename>a01954.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntitySeed&lt; 0, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01962.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a084583a95fc706f66339e9b05ac981c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a1dd4c7a9c9c13b7dfae4c3ab20f91b65</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a6ebce05df0f15ed0bf4cff87ea4c6f89</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementInfo::Seed</type>
      <name>Seed</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>ad97be61fd746a409fe7eb3fa0fdb4f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a0fd3343494b70041f399d4d528a2118d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntitySeed</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a97544d5b471e839d6156ae26989dfd1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntitySeed</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a44c1ebe7b20107abde225dccebb53915</anchor>
      <arglist>(const ElementInfo &amp;elementInfo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>aaa6eaddabede7c64f4d76926641b1e8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>elementInfo</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>afc58dfb33de3f9639427a9dd34c7bd9a</anchor>
      <arglist>(const MeshPointer &amp;mesh) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subEntity</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>ab43aaa21b9d13039a05b8296877f957c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a009c81b5abe8da9d3188e076f7502995</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a42887c8352b2e9b7a6c20eae8d6a777e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>a65564a6ae62c6fdd6ee747cca0bc21cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01962.html</anchorfile>
      <anchor>aadb468899531e09e0049e0b903fb051f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridEntitySeed&lt; codim, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01958.html</filename>
    <templarg>codim</templarg>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>abacca262b1c4053a1f86cab32d512a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a931df3cffbda6dafd5cd499bc08f24b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a3578bbf01834e5a14643e370afb4bc08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ElementInfo::Seed</type>
      <name>Seed</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>ac47ffac8a56e54a548360986418dff85</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a8cd8302570c7317993e4820928318bfb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntitySeed</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>aee0cf04767280d5f1711935143ab1449</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridEntitySeed</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a0c162c46d9b1a71029d2c545cca81141</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>af6c33ed968dacdb88ac8821d6fc93457</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>elementInfo</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a08d1825d594fca7b245ea5273cb689ff</anchor>
      <arglist>(const MeshPointer &amp;mesh) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subEntity</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>ae8a8af656211f195377481ef91af363e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a30f5a91acd34382eb4a6b9ac38d2c189</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a1f6a2bfe566e2101fe8f01069af37e60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a57634341ad8e9e9a0d31874383d60aae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01958.html</anchorfile>
      <anchor>a4ced6dc6755e571cc5aa27aeee9fcfb5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridFamily</name>
    <filename>a02050.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <class kind="struct">Dune::AlbertaGridFamily::Traits</class>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>GridImp</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>aaf161dc0ca65c0275026d14692362f54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>afb43694d0bbfb2067a375057e24a92e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridIndexSet&lt; dim, dimworld &gt;</type>
      <name>LevelIndexSetImp</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>a4fae702fb67a3b2bd6237b64737f81e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridIndexSet&lt; dim, dimworld &gt;</type>
      <name>LeafIndexSetImp</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>aec543235ac43930a7b556913466f4668</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridIdSet&lt; dim, dimworld &gt;</type>
      <name>IdSetImp</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>ad919afbff30acfb418fbcfdd29b6518e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>IdType</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>a8e7c6d47f84832534cf4c67d4b418a1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>a08c229a30e47095e5664e4bcf700ba78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a02050.html</anchorfile>
      <anchor>a90344b45f95806e71374f403b63ccd7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridGeometry</name>
    <filename>a01978.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a995254d35f0817ebdd4eec8e063c50d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydimension &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a636f8fc8152aa6f2e8ee953f39d85495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>abc2c556776be52d8f419e07016b61e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydimension, coorddimension &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ac52e063ae8aa99428ac032b28a885303</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, coorddimension, mydimension &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a69327e6c74890e77298c3d4f3f5cb1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGeometry</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>af646aff5fbe86db7f4b1785d687db440</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGeometry</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a527731505b70168428b51b89f7e887c5</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a1c4f632b6966e22d568e75ebdcce903d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ae3998f0cf9c1fdb629e64b7970f8cae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a327bcf8572e78a2913c444df8d2f60dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a828b0dc33734aac1a4fc2ae7164df42a</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a1ef3f722ebeeb704a9b59ad24b2eaf0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a98c08d31d04433530dc9fa400bed1981</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a52cae7bbbac315b4a66a93bb28f45b78</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a902c8af13db77741ebf7c75be4d09977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>af7636055e345de597c6168b0d756d237</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>aa29172d3f7f3f807dc459e48697391bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a28547ff1b3f904a8799766b1d1b4bddd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a887acb71c9fc59cdf3ea22b0dfc9314e</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a398d6d59b882e65372c95a5b69ccbf5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>adbe6d60006598fd2de9890714aaa3018</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ace2c05cc68c15467b1a754589e1a572d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ae657e5abdbc93e5182a145248f967686</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a87551f4f084090d354bf098c05af64cb</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>af8bb51c242bbc5e259b1018dc6f7ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ad5ae1e2124be63e15f671faa5010212d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>aba4ccbd39ec6a951cab3fd1d5bd2d991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a512b2c34b502f57be4a39f128c624778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridGlobalGeometry</name>
    <filename>a01982.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <base>Dune::AlbertaGridGeometry</base>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a995254d35f0817ebdd4eec8e063c50d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydimension &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a636f8fc8152aa6f2e8ee953f39d85495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>abc2c556776be52d8f419e07016b61e83</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydimension, coorddimension &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ac52e063ae8aa99428ac032b28a885303</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, coorddimension, mydimension &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a69327e6c74890e77298c3d4f3f5cb1ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGlobalGeometry</name>
      <anchorfile>a01982.html</anchorfile>
      <anchor>a0bbd15e40b23ee0c1666bb41efbade85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGlobalGeometry</name>
      <anchorfile>a01982.html</anchorfile>
      <anchor>a4391826b95976b1ae7e2ccb184515e69</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a52cae7bbbac315b4a66a93bb28f45b78</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a1c4f632b6966e22d568e75ebdcce903d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ae3998f0cf9c1fdb629e64b7970f8cae1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a327bcf8572e78a2913c444df8d2f60dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a828b0dc33734aac1a4fc2ae7164df42a</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a1ef3f722ebeeb704a9b59ad24b2eaf0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a98c08d31d04433530dc9fa400bed1981</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a902c8af13db77741ebf7c75be4d09977</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>af7636055e345de597c6168b0d756d237</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>aa29172d3f7f3f807dc459e48697391bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a28547ff1b3f904a8799766b1d1b4bddd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a887acb71c9fc59cdf3ea22b0dfc9314e</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a398d6d59b882e65372c95a5b69ccbf5f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>adbe6d60006598fd2de9890714aaa3018</anchor>
      <arglist>([[maybe_unused]] const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ace2c05cc68c15467b1a754589e1a572d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ae657e5abdbc93e5182a145248f967686</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a87551f4f084090d354bf098c05af64cb</anchor>
      <arglist>(std::ostream &amp;out) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>af8bb51c242bbc5e259b1018dc6f7ff5d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>ad5ae1e2124be63e15f671faa5010212d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>aba4ccbd39ec6a951cab3fd1d5bd2d991</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a01978.html</anchorfile>
      <anchor>a512b2c34b502f57be4a39f128c624778</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridGlobalGeometry&lt; dim, cdim, const AlbertaGrid&lt; dim, cdim &gt; &gt;</name>
    <filename>a01986.html</filename>
    <templarg>dim</templarg>
    <templarg>cdim</templarg>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a96b2eb280102135cb97b7bbf101c5566</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydimension &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a163cb1e9419ce48072a9125c89a30877</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>af46d3ce67eb19928f7f0070c875a8f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydimension, coorddimension &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>abcc2691d8e59fcc5682ae4a12b3f1dc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, coorddimension, mydimension &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>afce5b676188bc956de7e3bd6e0c2d257</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGlobalGeometry</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a72a399fef0ad59d2e792bc2bf83b7312</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridGlobalGeometry</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a525dd75f873e415a3222118185969315</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a1f96ed62f027abb161a36ebc827b0eb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a30b0e1c32987cecf2d009fceeb1e0893</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a0fb3d60ef1ed5068ffff566b28dbbbf1</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a90dd4ec1df4f1696c9983a12738cc388</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ab93f494890038169384e970f12c6de45</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>acb1848be3cad520dd950dad12b3e16d6</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ab4aafa3f5b800030790ce4dafc10a1e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ad7a3eb1e69a71e05281524f99b3d0635</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>af9914ccd38a338a2bd589237887afa9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ac40d24563ec1628ad45a5b87d812d91e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a3f2235a7afb15908f2d575c2d2f2fb1a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ab5130924ab3ead28156b8c470b9b54df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ac1cde241b2e79a4219d4b2d49e53b087</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>invalidate</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a203d82b90eb3594c4cb38453e4398060</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>build</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a34ed0d97df58af94ae2c0c682b0d8d5f</anchor>
      <arglist>(const CoordReader &amp;coordReader)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a8dea07a8a340fe144ef6a808bbda3f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>ada21931e9119abb2ee35722ad2f07507</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a1f171655ce8fca2a45b50fe33cefcd8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a01986.html</anchorfile>
      <anchor>a24e764966445cc8f401cb44c2cae1e27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridHierarchicIndexSet</name>
    <filename>a02030.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>IndexSet&lt; AlbertaGridFamily&lt; dim, dimworld &gt;, AlbertaGridHierarchicIndexSet&lt; dim, dimworld &gt;, int, std::array&lt; GeometryType, 1 &gt; &gt;</base>
    <class kind="class">Dune::AlbertaGridHierarchicIndexSet::InitEntityNumber</class>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a342ddeb9a0a75e6b82a5f46d51ada47c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridFamily&lt; dim, dimworld &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>ace4eceb5e42c55214d2073837f9fa5dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a101d9a1d566c9003d7fe78a10cd81310</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Types</type>
      <name>Types</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a940b7fbdde30bad8c2d63f19dfaf9f47</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a96d174ab76f1d35e4e18aede777b95c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::HierarchyDofNumbering&lt; dimension &gt;</type>
      <name>DofNumbering</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>abc59454fbdffd87d8cc38f82b8bc1550</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::IndexStack</type>
      <name>IndexStack</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a2462ebd742f5f8849768ebcd15b638b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a4b48dbf143b1d7b823584352bec4486d</anchor>
      <arglist>(const Entity &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a34d3c9c3cd6367b463e65decc879a557</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a02ee0273665d82e72c89ab90085e1dc8</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a4aa31c089a39e9161f4e76995f03a69e</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>accea96d78e03b481fdee5b9784709c4b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>ac835f2e1cf93a0b32c706f9706e794ab</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>ac8d76502cc7d6ae8f335a8ea83074dd0</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>ab9eb86af1446b95be071c7f073c62b16</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a6da41771e14eb2c4b077e762e15c9349</anchor>
      <arglist>(const Alberta::Element *element, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>preAdapt</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>af109289b05a26706c9ccc665d75534e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a9885a1d55c152ef74649bb35ff4a0355</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a7ca95ceedfdf0f168359dc37673d3dfb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a168e3c63d910dcf580ab6d318cdf952d</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a951f08b67b944b57c40957cd64dd8ac4</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a1c43f5022f4f02c900a7a3f1183bddc0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>ae8ad06bc74f37d7741558c6b3cdeca55</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGrid&lt; dim, dimworld &gt;</name>
      <anchorfile>a02030.html</anchorfile>
      <anchor>a7721cba2d26e39c92572ef13570c0231</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridHierarchicIterator</name>
    <filename>a01926.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a0d8fb96d0c5a78f0b476006b22a35997</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a9e1aecb66c11949dfc0770e40bc40f93</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>af6413b1a0cfea5859ff37a79810c3a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>abc4a157705eebb0fa979153add0504e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a435289c34bc0ca385bdac9cadd252502</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridHierarchicIterator</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a620f3c2e52cbfdffff360ab677d69c15</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridHierarchicIterator</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a0024ece206fd71ebb7bebb52a6925bce</anchor>
      <arglist>(const GridImp &amp;grid, const ElementInfo &amp;elementInfo, int maxLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridHierarchicIterator</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a9a95e0dc0e1ca53d33170b059ec48add</anchor>
      <arglist>(const GridImp &amp;grid, int actLevel, int maxLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridHierarchicIterator</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>aaa648adc02dcbed8f0cdeb62a634ada2</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>aed36525b470e45c47cd73efbbf0bb776</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a7200c112124283ec065fb7decc0161ae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>ae8df9156b1fd97be6b93bc8afe24cc17</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>afb718a6746a1d89b11f211d5f0c801cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a48e71d5d0138884d1d318edada697804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01926.html</anchorfile>
      <anchor>a31054a0562ad14be20260af09ea782c6</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridIdSet</name>
    <filename>a02034.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>IdSet&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGridIdSet&lt; dim, dimworld &gt;, unsigned int &gt;</base>
    <member kind="typedef">
      <type>Base::IdType</type>
      <name>IdType</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a7e0562b80803575071c0d3597ea236ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a6a6b9cba9c1caebc99e983923ed3a296</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a60508ffcb27855b98f7f5f9be4b645d9</anchor>
      <arglist>(const typename Grid::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a89a120fa5001ff839a41b7db10e96d9c</anchor>
      <arglist>(const typename Grid::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a98a74ae0e048d8fa6bde305f0a70c8fd</anchor>
      <arglist>(const typename Grid::template Codim&lt; codim &gt;::Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>ab46705eae779ab3254cc9a2a1f3aa8ab</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGrid&lt; dim, dimworld &gt;</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a7721cba2d26e39c92572ef13570c0231</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaGridIdSet&lt; dim, Alberta::dimWorld &gt;</name>
    <filename>a02034.html</filename>
    <base>IdSet&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGridIdSet&lt; dim, dimworld &gt;, unsigned int &gt;</base>
    <member kind="typedef">
      <type>Base::IdType</type>
      <name>IdType</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a7e0562b80803575071c0d3597ea236ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a6a6b9cba9c1caebc99e983923ed3a296</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a60508ffcb27855b98f7f5f9be4b645d9</anchor>
      <arglist>(const typename Grid::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a89a120fa5001ff839a41b7db10e96d9c</anchor>
      <arglist>(const typename Grid::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>a98a74ae0e048d8fa6bde305f0a70c8fd</anchor>
      <arglist>(const typename Grid::template Codim&lt; codim &gt;::Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02034.html</anchorfile>
      <anchor>ab46705eae779ab3254cc9a2a1f3aa8ab</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int subcodim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridIndexSet</name>
    <filename>a02038.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>IndexSet&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGridIndexSet&lt; dim, dimworld &gt;, int, std::array&lt; GeometryType, 1 &gt; &gt;</base>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>afa80ffba39739cc5564c82e810dc1bbc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a76d1711dbdcfbd2054c778607b530231</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Types</type>
      <name>Types</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a1443da8bc07b85c95348ce5fd7b0576a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a170773ddc8d8e6ec7e4024a8aa091900</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::HierarchyDofNumbering&lt; dimension &gt;</type>
      <name>DofNumbering</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a40831a40955c98f89f12187e0b1643a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridIndexSet</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a3f13d03d420d6b0057da933ed7c1a04f</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlbertaGridIndexSet</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>ab852d8bffccefc2737a9b72c36be96c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a40cd0d7b4c349af8273721ec49fbd293</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a358fe524072d4cd7b90d2230cb5df40b</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a5172ce33c546334d53cc3b337b1606e1</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>acd2ef34b5b45fed9db3ade2f79afa2a6</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>ac67e8e26cd42b822050a4ee458c5ecd0</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>a86f5807b03c7780d6827e765dd5b733e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>af065302d24ab1b112d89d770f3648309</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>ade6a5739ec6e21516c9549ba30897b6c</anchor>
      <arglist>(const Iterator &amp;begin, const Iterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02038.html</anchorfile>
      <anchor>ae5b1727d70fc99269765b989cab57a61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridIntersectionBase</name>
    <filename>a02142.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaGridIntersectionBase::GlobalCoordReader</class>
    <class kind="struct">Dune::AlbertaGridIntersectionBase::LocalCoordReader</class>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a4af56e147c81c55edf83f4f2f1d841b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>NormalVector</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3b0cea316d45029708802e64662978c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension-1 &gt;</type>
      <name>LocalCoordType</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5521f319a962423c00155d1dcd22d26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5c3b53c59a3bf0cd68c11f9bac673b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3c3ca4c5e323417734a863e9c1b7a505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab4b4a0efe1e7b651617d026761fe8258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>afe53a3155a4e8d4eb2c1ceffeb00633e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridIntersectionBase</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab512620be28a837ec64694f22c521d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridIntersectionBase</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>af1fed3d61fa6b0dcc390d9a55bc93027</anchor>
      <arglist>(const EntityImp &amp;entity, const int oppVertex)</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a74fb7fbf76e98e53ad9cc3f14657902f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aab9a41122c49b188fe1352204d3c885d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ae31f1d6faca61592ff3401af1f41e857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab72450e60e8ef1bfb07e8fe535472bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a67a94ef0fe7d98b6eeb1981d9b53bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abb04f92144d6115216dbfa7bdb4cf8ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3e3fb7a3300be5a775c93ad29749c45a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a0670e70c8bec9099d3fec655fca9dafb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5d9554e311ebc17a44f4f7477cab9c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>af71630757fb338022cd6ddbb838d9b66</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>outerNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a69054b44499ccec5d5b68ff60351b773</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aac4049ea55807274ead16d736b9201bb</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaTransformation</type>
      <name>transformation</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abfdedf9af6c1a2444567776cf0de66fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a837095422218d6a42a81b15e5021b20c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a248ab808edfc473661dc28c3db440d79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 1, 1 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ac2425aac6f566d0655a032eabde00575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 3, 3 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aa49e1266779745e052f8383a2f18c4e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a9c179a82c013fa8a79c00ad1d75ba055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a60dcd44c3035b6bec836f997495004ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>AlbertaGridEntity&lt; 0, dimension, Grid &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a1404d7a39bb2bf63bc4cb3869b4336bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aecff52cdf1855c6357f2df05b2cb2b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::LocalGeometryImpl</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a9d87fbb24af63a813145432cc995f8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>afd79afce990c1d592d0088169e1bb545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ElementInfo</type>
      <name>elementInfo_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a532c2ac050c76300f57d95b9ce9433ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>oppVertex_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a912637746b731eed0cbb903ce7bbfba9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaGridIntersectionBase&lt; GridImp &gt;</name>
    <filename>a02142.html</filename>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a4af56e147c81c55edf83f4f2f1d841b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>NormalVector</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3b0cea316d45029708802e64662978c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension-1 &gt;</type>
      <name>LocalCoordType</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5521f319a962423c00155d1dcd22d26d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5c3b53c59a3bf0cd68c11f9bac673b8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3c3ca4c5e323417734a863e9c1b7a505</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab4b4a0efe1e7b651617d026761fe8258</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>afe53a3155a4e8d4eb2c1ceffeb00633e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridIntersectionBase</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab512620be28a837ec64694f22c521d5c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridIntersectionBase</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>af1fed3d61fa6b0dcc390d9a55bc93027</anchor>
      <arglist>(const EntityImp &amp;entity, const int oppVertex)</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a74fb7fbf76e98e53ad9cc3f14657902f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aab9a41122c49b188fe1352204d3c885d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ae31f1d6faca61592ff3401af1f41e857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab72450e60e8ef1bfb07e8fe535472bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a67a94ef0fe7d98b6eeb1981d9b53bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abb04f92144d6115216dbfa7bdb4cf8ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3e3fb7a3300be5a775c93ad29749c45a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 1, 1 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ac2425aac6f566d0655a032eabde00575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 3, 3 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aa49e1266779745e052f8383a2f18c4e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a0670e70c8bec9099d3fec655fca9dafb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5d9554e311ebc17a44f4f7477cab9c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>af71630757fb338022cd6ddbb838d9b66</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>outerNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a69054b44499ccec5d5b68ff60351b773</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aac4049ea55807274ead16d736b9201bb</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaTransformation</type>
      <name>transformation</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abfdedf9af6c1a2444567776cf0de66fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a837095422218d6a42a81b15e5021b20c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a248ab808edfc473661dc28c3db440d79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a9c179a82c013fa8a79c00ad1d75ba055</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a60dcd44c3035b6bec836f997495004ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>AlbertaGridEntity&lt; 0, dimension, GridImp &gt;</type>
      <name>EntityImp</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a1404d7a39bb2bf63bc4cb3869b4336bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aecff52cdf1855c6357f2df05b2cb2b1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Grid::Traits::template Codim&lt; 1 &gt;::LocalGeometryImpl</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a9d87fbb24af63a813145432cc995f8ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>afd79afce990c1d592d0088169e1bb545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ElementInfo</type>
      <name>elementInfo_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a532c2ac050c76300f57d95b9ce9433ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>oppVertex_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a912637746b731eed0cbb903ce7bbfba9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLeafIntersection</name>
    <filename>a01930.html</filename>
    <templarg></templarg>
    <base>AlbertaGridIntersectionBase&lt; GridImp &gt;</base>
    <member kind="typedef">
      <type>This</type>
      <name>ImplementationType</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a831482f317e63d7f3114c0f803c9a0fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::NormalVector</type>
      <name>NormalVector</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a33805f4a5195336bf2b59eaba3f40939</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::LocalCoordType</type>
      <name>LocalCoordType</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>aa2a1cfb4605ca87fb7943688776fb65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>aa8da969286c30817675cef78d0606768</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a767671a50fb8f4d5a2690bc3f442d051</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>ad1dc0cf851272362dab84506e043d082</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a8bc4c2c08f044a02a1b554496ec5d65e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a4af56e147c81c55edf83f4f2f1d841b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersection</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>add39e6e12e71509a3e098c6151a4b443</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersection</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a568b342bec9a841eb82181b6eedd9146</anchor>
      <arglist>(const EntityImp &amp;entity, int n)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersection</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a0695e87a44248441f99c57359bc0ca3b</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>aa774887bf7ad8967b03d7b06926955d7</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a364c8634ac6dbdcd0b602e34fdd8fb62</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a57c9abecd88ecdb5e11c58e9cc847aa8</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>aa6ac17450e37c89bea48ba9625d2f471</anchor>
      <arglist>(const AlbertaGridLeafIntersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>next</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a361a791612eb9363673d3e22c61e851f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>outside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a0235dd5a9c37fb06ee9434f5db58325e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>aa029a1641747800debb1166ed5c0efc2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>abd90ef166b3eb921820df34cacf79aa1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a662dd644cf067827e067b3850400a7a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a00663e07bbb14febf119cb589bcf1b98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a897761494975f592bb59f2369d2b9e3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a6130aaebb6cf1cea54f39f383ee6cc9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twistInInside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a11153e640e5ce5598a4bb2f125ae0469</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twistInOutside</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>ad09b0d475f6e292ce05ab39471fea1ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a74fb7fbf76e98e53ad9cc3f14657902f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aab9a41122c49b188fe1352204d3c885d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ae31f1d6faca61592ff3401af1f41e857</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ab72450e60e8ef1bfb07e8fe535472bca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a67a94ef0fe7d98b6eeb1981d9b53bec0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abb04f92144d6115216dbfa7bdb4cf8ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a3e3fb7a3300be5a775c93ad29749c45a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 1, 1 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>ac2425aac6f566d0655a032eabde00575</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaGridIntersectionBase&lt; const AlbertaGrid&lt; 3, 3 &gt; &gt;::NormalVector</type>
      <name>centerIntegrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aa49e1266779745e052f8383a2f18c4e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a0670e70c8bec9099d3fec655fca9dafb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a5d9554e311ebc17a44f4f7477cab9c22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>af71630757fb338022cd6ddbb838d9b66</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>outerNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a69054b44499ccec5d5b68ff60351b773</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>aac4049ea55807274ead16d736b9201bb</anchor>
      <arglist>([[maybe_unused]] const LocalCoordType &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>AlbertaTransformation</type>
      <name>transformation</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>abfdedf9af6c1a2444567776cf0de66fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a837095422218d6a42a81b15e5021b20c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const ElementInfo &amp;</type>
      <name>elementInfo</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a248ab808edfc473661dc28c3db440d79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>ab116a640f9c4e442d7b38ab5896e20a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a973c660e1b68f3ba15544f01b49ece8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Base::EntityImp</type>
      <name>EntityImp</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a2569e0e3fcb2520ff213d36d2b3737a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Base::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a466537d3dbbc605b9b46a2303d82daef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Base::LocalGeometryImpl</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>abe2204217e98587a42f371c176204659</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Base::GlobalCoordReader</type>
      <name>GlobalCoordReader</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a6c29cee343df423d6862d314af9d37f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Base::LocalCoordReader</type>
      <name>LocalCoordReader</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a7c19412bb2f82f2e9bf2fd151f3df570</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>afd79afce990c1d592d0088169e1bb545</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ElementInfo</type>
      <name>elementInfo_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a532c2ac050c76300f57d95b9ce9433ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>oppVertex_</name>
      <anchorfile>a02142.html</anchorfile>
      <anchor>a912637746b731eed0cbb903ce7bbfba9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>AlbertaGridEntity&lt; 0, GridImp::dimension, GridImp &gt;</name>
      <anchorfile>a01930.html</anchorfile>
      <anchor>a5b9cc8aee67485f681fd52c70f36a471</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLeafIntersectionIterator</name>
    <filename>a01934.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaGridLeafIntersectionIterator::Begin</class>
    <class kind="struct">Dune::AlbertaGridLeafIntersectionIterator::End</class>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, AlbertaGridLeafIntersection&lt; GridImp &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a4a437c7053cb4f4bd33cd32744f54fc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersectionIterator</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a4a3352b72814c3be1fe25e2a41fc41dd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersectionIterator</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a107e2d1ef26c849962233546fd66d018</anchor>
      <arglist>(const EntityImp &amp;entity, Begin)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersectionIterator</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a5bfd8d985d1477097cb5c9a4690a4f0d</anchor>
      <arglist>(const EntityImp &amp;entity, End)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIntersectionIterator</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a7db4db9015bc606399ca74530d711cc2</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a4f75463eca18d65fdb7b7e7d2b451ed4</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Intersection &amp;</type>
      <name>dereference</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>acdd07969f0f0c1cfaf10535144488e9c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>aaa03e65c0682afab8808beea04c82627</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>aafa719a99dbaba53c550849e56019220</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01934.html</anchorfile>
      <anchor>a778a97bb49a593ea2109578eb14e3de9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLeafIterator</name>
    <filename>a02042.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <base>AlbertaGridTreeIterator&lt; codim, GridImp, true &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>a195446298684963c27970c4c7ed75eb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::MarkerVector</type>
      <name>MarkerVector</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>a24107f14f75bc7b7edf92dadfa4336bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>ad38044eee682ede2a007c96b93098d38</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>a1e980af146e5459f02b7e33b82391509</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>aa24642672bed6060a71e73f76cf28581</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *vec, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02042.html</anchorfile>
      <anchor>afe989faf70d2d6a08e84b8a9bb5db463</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLeafIterator&lt; codim, Ghost_Partition, GridImp &gt;</name>
    <filename>a02154.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <base>AlbertaGridTreeIterator&lt; codim, GridImp, true &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>a2a3a40ce9cd6d5c486334bc35e77d6d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::MarkerVector</type>
      <name>MarkerVector</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>ac81211207df0461a5569f22258a1e04a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>a5599e642a17817012bb818736c53f3ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>ad9104981d5e73134f40ad55df817e058</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLeafIterator</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>a45848ba334cedd1af53bf555bc08a857</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02154.html</anchorfile>
      <anchor>a32d516a138a8a61d956d8dc2bfa5a4e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLevelIterator</name>
    <filename>a02046.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <base>AlbertaGridTreeIterator&lt; codim, GridImp, false &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a71990bf4f6ac8f816125aa813296f4f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::MarkerVector</type>
      <name>MarkerVector</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a05f5816bd54b470bbb12ac2ade6ce4b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a33cc13993ae62be9cbad51198fb67f1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a755b32e2c422932d2992f6c7e091d92b</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a3cdc5cdce5aeb7f8cf4d71929d21d2b4</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *vec, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02046.html</anchorfile>
      <anchor>a80be16ce99c94519a8767f1906f8bfd1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLevelIterator&lt; codim, Ghost_Partition, GridImp &gt;</name>
    <filename>a02178.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <base>AlbertaGridTreeIterator&lt; codim, GridImp, false &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>ab24aa8c6e3d423f4a77aa67688ca0ff9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::MarkerVector</type>
      <name>MarkerVector</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>ac6049d3b72d881bf329ced64530243e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>a560eddbe254992cf2dba77b3a707248b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>af4606c5baae092734e9e5452ceb72297</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridLevelIterator</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>affdb3a9821238bfe6ce40d02f20c5e7a</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02178.html</anchorfile>
      <anchor>a5c5dec13759443cf274a42ada7e0004d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLevelProvider</name>
    <filename>a02158.html</filename>
    <templarg>dim</templarg>
    <class kind="class">Dune::AlbertaGridLevelProvider::CalcMaxLevel</class>
    <class kind="struct">Dune::AlbertaGridLevelProvider::Interpolation</class>
    <class kind="class">Dune::AlbertaGridLevelProvider::SetLocal</class>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dim &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>afb011803e892bf491f72ac7d4b43ba17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dim &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a192fa01694f2369e941a6db684aacd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::HierarchyDofNumbering&lt; dim &gt;</type>
      <name>DofNumbering</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>aae28775d26e3119490c918f7dcef2b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>operator()</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>aca9a80cda8f941e55539c6f5713b09d0</anchor>
      <arglist>(const Alberta::Element *element) const</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>operator()</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a5fa6cd40aded128df6c22b4d88ed0ddb</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a113b9ca8997039143da43019c0bf6102</anchor>
      <arglist>(const Alberta::Element *element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a11a4402051fc64bdc80e637084a7b632</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>maxLevel</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a7bba59dd7d1a72aab97b1f89ca8d3973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshPointer</type>
      <name>mesh</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a2c418c24a5ed6be0cce509e0c8f6600f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAllOld</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>af59e244f1fadef289343379d631fa23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a5cc37614bca2595acce8e78c9cad95b8</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>abb836b5b647cd879cbbd1014dcc95692</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaGridLevelProvider&lt; dimension &gt;</name>
    <filename>a02158.html</filename>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dim &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>afb011803e892bf491f72ac7d4b43ba17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dim &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a192fa01694f2369e941a6db684aacd98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::HierarchyDofNumbering&lt; dim &gt;</type>
      <name>DofNumbering</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>aae28775d26e3119490c918f7dcef2b28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>operator()</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>aca9a80cda8f941e55539c6f5713b09d0</anchor>
      <arglist>(const Alberta::Element *element) const</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>operator()</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a5fa6cd40aded128df6c22b4d88ed0ddb</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a113b9ca8997039143da43019c0bf6102</anchor>
      <arglist>(const Alberta::Element *element) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a11a4402051fc64bdc80e637084a7b632</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>maxLevel</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a7bba59dd7d1a72aab97b1f89ca8d3973</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshPointer</type>
      <name>mesh</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a2c418c24a5ed6be0cce509e0c8f6600f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markAllOld</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>af59e244f1fadef289343379d631fa23e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>a5cc37614bca2595acce8e78c9cad95b8</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a02158.html</anchorfile>
      <anchor>abb836b5b647cd879cbbd1014dcc95692</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLocalGeometryProvider</name>
    <filename>a01990.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::Codim</class>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::FaceCoordReader</class>
    <class kind="struct">Dune::AlbertaGridLocalGeometryProvider::GeoInFatherCoordReader</class>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a633b4c9fc07a2d1133f5f34391a88ca6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalElementGeometry</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>aaaa64ebd6e8245beac7249e1f6bcdfdc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalFaceGeometry</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a9931d41c646df33e29e81d2a7c068d8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const LocalElementGeometry &amp;</type>
      <name>geometryInFather</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>afbe12c95dbc2b3f45d0cc27dcc855e17</anchor>
      <arglist>(int child, const int orientation=1) const</arglist>
    </member>
    <member kind="function">
      <type>const LocalFaceGeometry &amp;</type>
      <name>faceGeometry</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a081574f5b75ad58fd388c1ff2fd300b1</anchor>
      <arglist>(int face, int twist=0) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const This &amp;</type>
      <name>instance</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>acb81494fadab9a0ef14b5ab03d5fee5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>ac7608c20553a437b9c2969379568646d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numChildren</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>aadb13dc0d17ff09181745d58cd09d7e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numFaces</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a91a7522a1c1ae7b2bdcdce18a3e8e0d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minFaceTwist</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a714ab44c030b293549ac46e4e600d784</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxFaceTwist</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>ac747a88b800e083b11e7d6b4c0f781af</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numFaceTwists</name>
      <anchorfile>a01990.html</anchorfile>
      <anchor>a33f4cfbf4280c6ac4cc4ca9db974d51f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridTreeIterator</name>
    <filename>a01922.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <templarg>leafIterator</templarg>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a9954e2f7ffb4199d9da0d15d03f75aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaMarkerVector&lt; dimension, dimensionworld &gt;</type>
      <name>MarkerVector</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a75caeec24974409fd9d7f60de2d6875e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac4789a7466606b79e709f3d24add837f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ad8571cf20941bdbbc7f134ae8177013d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a6769057e6df94ccfbbba44a8ed90a7cc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a2d0ba9b98267a4f31bb962e9023db235</anchor>
      <arglist>(const GridImp &amp;grid, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1fed21b03caf066bef3e25487a3b1e32</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *marker, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac6f73dec675a7306efd9a96fb3186cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>AlbertaGrid&lt; dimension, dimensionworld &gt;</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ae2ff62a796419d8b8d7039707b6d894c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaGridTreeIterator&lt; codim, GridImp, false &gt;</name>
    <filename>a01922.html</filename>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a9954e2f7ffb4199d9da0d15d03f75aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaMarkerVector&lt; dimension, dimensionworld &gt;</type>
      <name>MarkerVector</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a75caeec24974409fd9d7f60de2d6875e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac4789a7466606b79e709f3d24add837f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ad8571cf20941bdbbc7f134ae8177013d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a2d0ba9b98267a4f31bb962e9023db235</anchor>
      <arglist>(const GridImp &amp;grid, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1fed21b03caf066bef3e25487a3b1e32</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *marker, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a6769057e6df94ccfbbba44a8ed90a7cc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac6f73dec675a7306efd9a96fb3186cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaGridTreeIterator&lt; codim, GridImp, true &gt;</name>
    <filename>a01922.html</filename>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1d28f75877ed9cf91be51fa1ffe3ae98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MeshPointer::MacroIterator</type>
      <name>MacroIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a66615462ce7c654102f49460f4791462</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a9954e2f7ffb4199d9da0d15d03f75aa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MakeableInterfaceObject&lt; Entity &gt;</type>
      <name>EntityObject</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0b43d61429cf1a5929a76fc584018e4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityObject::ImplementationType</type>
      <name>EntityImp</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a59a618c8762606752d92cd38f3482468</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af541e1bcaa30c75a7a43532cb4688316</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaMarkerVector&lt; dimension, dimensionworld &gt;</type>
      <name>MarkerVector</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a75caeec24974409fd9d7f60de2d6875e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac4789a7466606b79e709f3d24add837f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ad8571cf20941bdbbc7f134ae8177013d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a2d0ba9b98267a4f31bb962e9023db235</anchor>
      <arglist>(const GridImp &amp;grid, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaGridTreeIterator</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1fed21b03caf066bef3e25487a3b1e32</anchor>
      <arglist>(const GridImp &amp;grid, const MarkerVector *marker, int travLevel)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a6769057e6df94ccfbbba44a8ed90a7cc</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a0587e3fd03b983ddfed68c15ee1796b2</anchor>
      <arglist>(const This &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a1e4e9dbe6c045d8ede15dbf721df265a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aa4965dc0b1f79fa7dc3ac41b9b86370b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ac6f73dec675a7306efd9a96fb3186cef</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>aca098f1b736adfc935c9b0c459e55f15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>a5bc5248bac9980e44e0a281727f1c488</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>ab49649a1abaccbd47871ad999f17b4a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>grid</name>
      <anchorfile>a01922.html</anchorfile>
      <anchor>af5c2d57c4bde72e4e08c626ffcd6fe71</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaIOError</name>
    <filename>a02206.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaLeafGridView</name>
    <filename>a02070.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaLeafGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ab19fd484f1bc53055e732e4590ef61daa41c2c575a3fa52fc0b7b25a7768d1753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaLeafGridViewTraits&lt; GridImp &gt;</type>
      <name>Traits</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a5bd39162e0c442a88ad02c4e6340b814</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a9ab4239f111ca67f398f8d5e3bbfebd6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a36b172ac6b2a7558a8e4783e094ebfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ad5e6d4e94f61dcaf29190f772ea11ff6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ac72e356610052dcfa8f0bcf7fc0e7481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a4f1213c9e5639b1a4b7266fa757cfeb1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ab19fd484f1bc53055e732e4590ef61daa41c2c575a3fa52fc0b7b25a7768d1753</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaLeafGridView</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a09ccd67691aae53f3d38163c86c3fc58</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a00f29780e6dd9b2b5370fc7c9e6ed7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>addde97dcdeedb2e27b2d0d6125658fcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a540450a238a25e541ebae75641d3afa2</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>aba8b0d6c7e9b5638328be7b7132f66d4</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a6c14b560beaf10399d20e0b0ece3a3d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>af82067f2b21ced2289e6823164770097</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>af14941f15af8aa4fea5c4d262b1520fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a9add616550d096af09f39e6c5657a47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ab9e1c0d9b3d2cba443567ad372cc1664</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>abe13469f26cf9fcea9ef079cd5467c34</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>aa38d4b3c1ee96ede4c4895bb8a049c9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a13c24b03da0b3730c3a1337f4226abe1</anchor>
      <arglist>([[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>ab6d78b0ac983ffec630379515bc0e37d</anchor>
      <arglist>([[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a02070.html</anchorfile>
      <anchor>a7784e593c80711878c76fbd8f76db794</anchor>
      <arglist>([[maybe_unused]] CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, [[maybe_unused]] InterfaceType iftype, [[maybe_unused]] CommunicationDirection dir) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLeafGridViewTraits</name>
    <filename>a02090.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>ab36be8c32999d2046f6a9586babbe799ad690fe4803cf714266e377015470e8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaLeafGridView&lt; GridImp &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>a96781544a93b29d0d43b02120789a3bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>a715d383675ab7c3756235ca270dc3f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LeafIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>a7cdfaf1129674509e7aa4970ade83bf2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LeafIntersection</type>
      <name>Intersection</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>aaa249f74e856362ff18d9cf58644ed14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LeafIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>a0d665d5d83ce4360be72d29c6cb5ea59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>a80f12b852198d4763e9e76c5b23308fd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02090.html</anchorfile>
      <anchor>ab36be8c32999d2046f6a9586babbe799ad690fe4803cf714266e377015470e8a2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaLevelGridView</name>
    <filename>a02066.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaLevelGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a6c1d16332dc5c96aa7916c4d9065dfcfa49d9af53aeedc7f147e2abac980843dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaLevelGridViewTraits&lt; GridImp &gt;</type>
      <name>Traits</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a844f39b2485413bc0f515a9ba0b14e23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a5644cdfcd02c4d03e0c182f67cc05887</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a35f042dcd9ba2510f2f989f36198a3be</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a03a2fc4a13aac16c21ec3bb4c600e040</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>ae925f39abdc67326b2350451bd055b0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a9857fc3e39b2f3beb2cd364b24761832</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a6c1d16332dc5c96aa7916c4d9065dfcfa49d9af53aeedc7f147e2abac980843dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaLevelGridView</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a5615ab6c37dfb300af80ec9d6c8af44a</anchor>
      <arglist>(const Grid &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>af2b2cac4f193a6d944bae009ef22e1b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a8dd1b0eae627fce6e0589b8d9d84a888</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a6db3ad571b6942893394a53affae824e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a05cd4ba28ae76db8501de6f7f0e4760e</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>ab85fd0a944388e017525bdf3d70ce6cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a4ef6ea03ec222c15486eeb4556305e0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>aa673d13658b8f0e313b1162f04e8a3ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>af6474a8c13762c72041eefee5033d70d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>afc57db26653283996266378c4f327ef9</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a3944cb8fc471d7b389115489a571e03f</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>aacfb16fa445bf0147bf41798d15006c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a6edaee08d5a6352897537edf0fa70b76</anchor>
      <arglist>([[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a39ba0c86500857e3bf03ee0976d58a9d</anchor>
      <arglist>([[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a02066.html</anchorfile>
      <anchor>a5fcc3eab0d1308af872a1065be876ccf</anchor>
      <arglist>([[maybe_unused]] CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, [[maybe_unused]] InterfaceType iftype, [[maybe_unused]] CommunicationDirection dir) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLevelGridViewTraits</name>
    <filename>a02074.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a120a848673d9b590399176aa333590c0aff7984cc3e3b4bf36afd91cf15825ea8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaLevelGridView&lt; GridImp &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a7fa42ced59bae2f06d8b8bcb848b40b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a76af0282df4b41366c49ee8f9b1aba9f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LevelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>af76d291ffe0f89847de8fd5393626b40</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LevelIntersection</type>
      <name>Intersection</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a2e9da50a729eb0830003bade7bb25ed9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LevelIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>acb7f4bf3cf25f9a865d966a5a0c4c781</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a42b60f50bad91168c7533409e816e350</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02074.html</anchorfile>
      <anchor>a120a848673d9b590399176aa333590c0aff7984cc3e3b4bf36afd91cf15825ea8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaMarkerVector</name>
    <filename>a02438.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="function">
      <type></type>
      <name>AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a1edc42f4d1799081c7b595190739188f</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>ac2f958844f8389e86533b1332d83f591</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a8af55ba818222d8c8061e28220fcc2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subEntityOnElement</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a4d4aaa93611ced5a7c02cc86a73cd0b9</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markSubEntities</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a55015cbdb01aa0b93d5a069810b1cdc1</anchor>
      <arglist>(const Iterator &amp;begin, const Iterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>aaa509f5c584751cbd9a7e51d9e244699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>up2Date</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a48fcd59e3b1e772ae98108857453dd9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>af43b693ee7f7d8594b96a6c83f784245</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AlbertaMarkerVector&lt; dim, Alberta::dimWorld &gt;</name>
    <filename>a02438.html</filename>
    <member kind="function">
      <type></type>
      <name>AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a1edc42f4d1799081c7b595190739188f</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>ac2f958844f8389e86533b1332d83f591</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AlbertaMarkerVector</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a8af55ba818222d8c8061e28220fcc2ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>subEntityOnElement</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a4d4aaa93611ced5a7c02cc86a73cd0b9</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markSubEntities</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a55015cbdb01aa0b93d5a069810b1cdc1</anchor>
      <arglist>(const Iterator &amp;begin, const Iterator &amp;end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>aaa509f5c584751cbd9a7e51d9e244699</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>up2Date</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>a48fcd59e3b1e772ae98108857453dd9b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a02438.html</anchorfile>
      <anchor>af43b693ee7f7d8594b96a6c83f784245</anchor>
      <arglist>(std::ostream &amp;out=std::cout) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaReader</name>
    <filename>a01786.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::GridFactory&lt; Grid &gt;</type>
      <name>GridFactory</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>aefb88a0836acdd2c64c3c5c23efc640f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>a44e67d32f8820399738f40659d2782f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaReader</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>aff229d1ff6d57927c9082004dc0fc738</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>readGrid</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>aff381d8a75d180257f81cf9e61bda888</anchor>
      <arglist>(const std::string &amp;fileName, GridFactory &amp;factory)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>adb0b74401e57de1c392686a8ceb56d4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a01786.html</anchorfile>
      <anchor>ac626ff8fe4c7400496f0a8e1fc36f729</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaTransformation</name>
    <filename>a02434.html</filename>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>aca8b17e8b013d08e75419ada08824606</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension &gt;</type>
      <name>WorldVector</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>abfd624d164e7651ffdab5a55df006068</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaTransformation</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>a3262dd337692ec88e750103a1d5b99a3</anchor>
      <arglist>(const Alberta::AffineTransformation *trafo=NULL)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>AlbertaTransformation</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>ac4030b083786e7631a508a56146fcebf</anchor>
      <arglist>(const GlobalSpace::Matrix &amp;matrix, const GlobalSpace::Vector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>WorldVector</type>
      <name>evaluate</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>afacc69783766498bb34ec4eb1ce4e5e2</anchor>
      <arglist>(const WorldVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>WorldVector</type>
      <name>evaluateInverse</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>aeefe0f44079889ff50a36b41a9d19cb6</anchor>
      <arglist>(const WorldVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02434.html</anchorfile>
      <anchor>a867cce6e98e548e1b38e3b9169c41ec1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AmiraMeshWriter</name>
    <filename>a03346.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>addGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a6a9dba7e45452b83a733c15f9e3e8c43</anchor>
      <arglist>(const GridView &amp;gridView, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a781d87465dff12975cf1d4da59c90b88</anchor>
      <arglist>(const GridType2 &amp;grid, int level, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLeafGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a07b645f86bc75e8fa7e14b6e20082db9</anchor>
      <arglist>(const GridType2 &amp;grid, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>aebd5dfa9d91b8afb8faf5ef76a41270c</anchor>
      <arglist>(const DataContainer &amp;data, const GridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a4abddbf0dc028c66df3b56eea592429a</anchor>
      <arglist>(const DataContainer &amp;data, const GridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a19e8169d7419363d2ef51cac4d374341</anchor>
      <arglist>(const std::string &amp;filename, bool ascii=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUniformData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a7dc8c510ed4e3f9845b5119054351fb8</anchor>
      <arglist>(const GridView &amp;gridView, const std::array&lt; unsigned int, dim &gt; &amp;n, const DataContainer &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeSurfaceGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a03ebd141cb898eadb2608eed76282412</anchor>
      <arglist>(const GridView &amp;gridView, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AmiraMeshWriter&lt; GridType::LeafGridView &gt;</name>
    <filename>a03346.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a6a9dba7e45452b83a733c15f9e3e8c43</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a781d87465dff12975cf1d4da59c90b88</anchor>
      <arglist>(const GridType2 &amp;grid, int level, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLeafGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a07b645f86bc75e8fa7e14b6e20082db9</anchor>
      <arglist>(const GridType2 &amp;grid, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>aebd5dfa9d91b8afb8faf5ef76a41270c</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LeafGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a4abddbf0dc028c66df3b56eea592429a</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LeafGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a19e8169d7419363d2ef51cac4d374341</anchor>
      <arglist>(const std::string &amp;filename, bool ascii=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUniformData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a7dc8c510ed4e3f9845b5119054351fb8</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, const std::array&lt; unsigned int, dim &gt; &amp;n, const DataContainer &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeSurfaceGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a03ebd141cb898eadb2608eed76282412</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AmiraMeshWriter&lt; GridType::LevelGridView &gt;</name>
    <filename>a03346.html</filename>
    <member kind="function">
      <type>void</type>
      <name>addGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a6a9dba7e45452b83a733c15f9e3e8c43</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a781d87465dff12975cf1d4da59c90b88</anchor>
      <arglist>(const GridType2 &amp;grid, int level, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLeafGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a07b645f86bc75e8fa7e14b6e20082db9</anchor>
      <arglist>(const GridType2 &amp;grid, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>aebd5dfa9d91b8afb8faf5ef76a41270c</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LevelGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a4abddbf0dc028c66df3b56eea592429a</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LevelGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a19e8169d7419363d2ef51cac4d374341</anchor>
      <arglist>(const std::string &amp;filename, bool ascii=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUniformData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a7dc8c510ed4e3f9845b5119054351fb8</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, const std::array&lt; unsigned int, dim &gt; &amp;n, const DataContainer &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeSurfaceGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a03ebd141cb898eadb2608eed76282412</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AnalyticalCoordFunction</name>
    <filename>a02982.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <base>Dune::AnalyticalCoordFunctionInterface</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>ac81f877ef526268294ad9b203003b9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2329d2798bb307ce6532b7b112503c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa20be4c488507e2a307c9b3157a33248</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>af7dd96c4ade903ef9b2fea416dae8763</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aac40fa19f8876b07114ed4fc662f3a44</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa448be28eb77130af98bf5206c3c2ae9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2833c0bc048fd27a968172d49d449332</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a205f4fed9fe79f3a58a02a5d567dd50e</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalyticalCoordFunction&lt; ctype, dim, dim, IdenticalCoordFunction&lt; ctype, dim &gt; &gt;</name>
    <filename>a02982.html</filename>
    <base>Dune::AnalyticalCoordFunctionInterface</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>ac81f877ef526268294ad9b203003b9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2329d2798bb307ce6532b7b112503c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa20be4c488507e2a307c9b3157a33248</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>af7dd96c4ade903ef9b2fea416dae8763</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aac40fa19f8876b07114ed4fc662f3a44</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa448be28eb77130af98bf5206c3c2ae9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2833c0bc048fd27a968172d49d449332</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a205f4fed9fe79f3a58a02a5d567dd50e</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>AnalyticalCoordFunction&lt; double, dimD, dimR, DGFCoordFunction&lt; dimD, dimR &gt; &gt;</name>
    <filename>a02982.html</filename>
    <base>Dune::AnalyticalCoordFunctionInterface</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>ac81f877ef526268294ad9b203003b9ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2329d2798bb307ce6532b7b112503c2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa20be4c488507e2a307c9b3157a33248</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>af7dd96c4ade903ef9b2fea416dae8763</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aac40fa19f8876b07114ed4fc662f3a44</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~AnalyticalCoordFunction</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>aa448be28eb77130af98bf5206c3c2ae9</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a2833c0bc048fd27a968172d49d449332</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02982.html</anchorfile>
      <anchor>a205f4fed9fe79f3a58a02a5d567dd50e</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AnalyticalCoordFunctionInterface</name>
    <filename>a02990.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimDomain &gt;</type>
      <name>DomainVector</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>afb0c564b6295875be9a2bb400ad706e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a4acd7dbafafb7a12af38801276304a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::AppendedBase64DataArrayWriter</name>
    <filename>a03762.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>AppendedBase64DataArrayWriter</name>
      <anchorfile>a03762.html</anchorfile>
      <anchor>a82d8fff3298fe41a8fe8f7ccc376ef68</anchor>
      <arglist>(std::ostream &amp;s, std::string name, int ncomps, unsigned nitems, unsigned &amp;offset, const Indent &amp;indent, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03762.html</anchorfile>
      <anchor>a922446c88f779a7af752b7192655bcbc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::AppendedRawDataArrayWriter</name>
    <filename>a03758.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>AppendedRawDataArrayWriter</name>
      <anchorfile>a03758.html</anchorfile>
      <anchor>a09b1cd7c7d8fefd31ad85e614262d9e9</anchor>
      <arglist>(std::ostream &amp;s, std::string name, int ncomps, unsigned nitems, unsigned &amp;offset, const Indent &amp;indent, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03758.html</anchorfile>
      <anchor>abcc2ad817baf0d566d6d93419926f9a2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::AsciiDataArrayWriter</name>
    <filename>a03750.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>AsciiDataArrayWriter</name>
      <anchorfile>a03750.html</anchorfile>
      <anchor>aacd16bd7f1b0c582f986e60caf9b5851</anchor>
      <arglist>(std::ostream &amp;theStream, std::string name, int ncomps, const Indent &amp;indent_, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~AsciiDataArrayWriter</name>
      <anchorfile>a03750.html</anchorfile>
      <anchor>a74e6867699319865f3e161fe6a020fc1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>abf42e76c4b1f7c214239f3fb745eb297</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::b64chunk</name>
    <filename>a03694.html</filename>
    <member kind="typedef">
      <type>unsigned char</type>
      <name>size_type</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>a1131ba9802a736203dcd7566ee7d6c65</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>af5b86cb11f0aca7381e1802b9a5f9580</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>read</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>aec6f229c1c8d0af459d81116ee20330a</anchor>
      <arglist>(const char *t, size_type s)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>put</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>aef8a9dfb8d2ba5a6dda94cd047f363e6</anchor>
      <arglist>(const char c)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>a142e802572914a4ddfeaf0c6637a0c13</anchor>
      <arglist>(char *t)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>a2b2a74e2ab67c618a07ed52b683f9e6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>char</type>
      <name>txt</name>
      <anchorfile>a03694.html</anchorfile>
      <anchor>a11037bab216ec528d03aeec77ae8b505</anchor>
      <arglist>[3]</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::BackupRestoreFacilities</name>
    <filename>a02910.html</filename>
    <templarg></templarg>
    <templarg>hasBackupRestoreFacilities</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::BackupRestoreFacilities&lt; Grid, true &gt;</name>
    <filename>a02914.html</filename>
    <templarg></templarg>
    <member kind="function" protection="protected">
      <type></type>
      <name>BackupRestoreFacilities</name>
      <anchorfile>a02914.html</anchorfile>
      <anchor>aaec3b310f0162197daf3a514fa4d90be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>asImp</name>
      <anchorfile>a02914.html</anchorfile>
      <anchor>a2dcee4191f240aea3e53bdc79a272c00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Grid &amp;</type>
      <name>asImp</name>
      <anchorfile>a02914.html</anchorfile>
      <anchor>a50d412cf64c6f3e6e4268e9af04bb480</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BackupRestoreFacility</name>
    <filename>a02466.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>acf0d026f0f2f6cc98e0d605b98421370</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a937c54d389378579761623a48dfe3336</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a06b6a4d150a7e0760dd2c120089f40d4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a59eb745ad475baa4119d6663a491d784</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01790.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a01790.html</anchorfile>
      <anchor>a0c1ceaa6709ffe9d0cfc9c10105343e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a01790.html</anchorfile>
      <anchor>aae005a75468c18510cffeb463acd3d0e</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a01790.html</anchorfile>
      <anchor>aa24302aaf1c4fb5fad648f859279008a</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a01790.html</anchorfile>
      <anchor>a3f563b0156665e686dc089272958fc25</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a01790.html</anchorfile>
      <anchor>ac48c94def23ef586469e51cb00edb8a3</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; const Grid &gt;</name>
    <filename>a02470.html</filename>
    <templarg></templarg>
    <base>Dune::BackupRestoreFacility</base>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>acf0d026f0f2f6cc98e0d605b98421370</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a937c54d389378579761623a48dfe3336</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a06b6a4d150a7e0760dd2c120089f40d4</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a02466.html</anchorfile>
      <anchor>a59eb745ad475baa4119d6663a491d784</anchor>
      <arglist>(std::istream &amp;stream)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04226.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::YaspGrid&lt; dim, Coordinates &gt;</type>
      <name>Grid</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>a10c23fc30d9d21922ca46416a3b86ebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>a144cd0a5adfbd752dbecbce5ee48fd7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>a2375d736d6e5059bc9b2b45e48ee52aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>ab39ff8b530a3ee9c1f8c56e01a899cc7</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>a1e2017439b1484df53708d78e324b85d</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>adab4dbb08d8e1c989a0477b21ecd4386</anchor>
      <arglist>(const std::string &amp;filename, Comm comm=Comm())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a04226.html</anchorfile>
      <anchor>a151ebf949d96cf85016a5473e32a7056</anchor>
      <arglist>(std::istream &amp;stream, Comm comm=Comm())</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02918.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a02918.html</anchorfile>
      <anchor>af2c649968fa71557ebdcb5a941436c9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BackupRestoreFacility&lt; HostGrid &gt;</type>
      <name>HostBackupRestoreFacility</name>
      <anchorfile>a02918.html</anchorfile>
      <anchor>a0ad1b416d0ac7f3899dd9e97bc5f7dd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a02918.html</anchorfile>
      <anchor>a23a28345877636fe9946814b02acc1b1</anchor>
      <arglist>(const Grid &amp;grid, const Output &amp;filename_or_stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a02918.html</anchorfile>
      <anchor>a91b1fcffdea48dcf61065a9367fb1112</anchor>
      <arglist>(const Input &amp;filename_or_stream)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BackupRestoreFacility&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a04230.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt;</type>
      <name>Grid</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>a1bc8f1a1ff8d9c2f0027067138dec0fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>a6e2c3529bdd3a713888e6c998a1339dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>a1a2d816caca0c2c20e135cab28827024</anchor>
      <arglist>(const Grid &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>backup</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>aa8d44802be6dc6752843ebb75c9a4d5c</anchor>
      <arglist>(const Grid &amp;grid, std::ostream &amp;stream)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>aeef4e7435c330d2e65580e6ac62f7b33</anchor>
      <arglist>(const std::string &amp;filename, Comm comm=Comm())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Grid *</type>
      <name>restore</name>
      <anchorfile>a04230.html</anchorfile>
      <anchor>a3de623e00b7ea8890d111a7ccd6333b3</anchor>
      <arglist>(std::istream &amp;stream, Comm comm=Comm())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Base64Stream</name>
    <filename>a03838.html</filename>
    <member kind="function">
      <type></type>
      <name>Base64Stream</name>
      <anchorfile>a03838.html</anchorfile>
      <anchor>a8a7027f3d59f72de295f2579e95ba8d6</anchor>
      <arglist>(std::ostream &amp;s_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03838.html</anchorfile>
      <anchor>a24ec170183dc09a2c46c4765e77f1248</anchor>
      <arglist>(X &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>flush</name>
      <anchorfile>a03838.html</anchorfile>
      <anchor>a48aab0178aad2e1fa1b85dac76f899a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Base64Stream</name>
      <anchorfile>a03838.html</anchorfile>
      <anchor>aa1ad6d6fc4b55ff8256cf387729e8ab8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::BasicBlock</name>
    <filename>a03358.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicBlock</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a2fe4d5c33081672cccf6fc054dce1776</anchor>
      <arglist>(std::istream &amp;in, const char *id)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std ::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a7f0dbf6896ee985e52024f9ec1784d25</anchor>
      <arglist>(std ::ostream &amp;os, const BasicBlock &amp;b)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::BasicNodeProjection</name>
    <filename>a02374.html</filename>
    <member kind="function">
      <type></type>
      <name>BasicNodeProjection</name>
      <anchorfile>a02374.html</anchorfile>
      <anchor>a7ab855a7827b3752a56413e7344373f8</anchor>
      <arglist>(unsigned int boundaryIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BasicNodeProjection</name>
      <anchorfile>a02374.html</anchorfile>
      <anchor>a77555a1239e990c6e3c72d3b4059ee8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>boundaryIndex</name>
      <anchorfile>a02374.html</anchorfile>
      <anchor>ab7df4de0c8d3b4268620978c0b1fbd4e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::BasicWriter</name>
    <filename>a03698.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FunctionWriterBase&lt; Cell &gt;</type>
      <name>FunctionWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ad36d9935215389eea1fd32991cdc4a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a2a158fb5bc0a849bc3df21c60255a8f3</anchor>
      <arglist>(const IteratorFactory &amp;factory_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a895c78454f07359bc12553b73421426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePiece</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aedf4d1e27b282df9cb1c44bb46abc2a0</anchor>
      <arglist>(const std::string &amp;filename, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCollection</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a58b0cf56bd71a1462b9370af1b194361</anchor>
      <arglist>(const std::string name, const std::string &amp;piecename, const std::string &amp;piecepath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9e1789744821b09e22c8fcce67d2f03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9cd727cb23e3cb0cc75140b87bff0fc0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a3d280097305c7e5ec746ee7932fc8710</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a75860317a0f1e9dfbedd870b68485093</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afbc864f3b73fbb8a1e196e00831d5966</anchor>
      <arglist>(const std::string &amp;name, OutputType outputType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9082d2d165e818242e1176a06d1f9622</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>add2df4842048164321d57609a15f337d</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCornerFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a91f4353fe0a4de25a06d0dda41b97303</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncorners) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a0cfe911f621230115e3657820ee8fd7a</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aaec05e424a6657f4d8d4843364a05444</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGrid</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a6bb905e9ec13e2452ed1647a6e79eccf</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a7335b24fa49e1d792db7e2132cf436a9</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstScalar</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9ba4cc56e221c73e03f98c4701adcae</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstVector</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ac9cd3194e22933f9bee6af141da6ceec</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicWriter&lt; ConformingVolumeIteratorFactory&lt; GV &gt; &gt;</name>
    <filename>a03698.html</filename>
    <member kind="typedef">
      <type>FunctionWriterBase&lt; Cell &gt;</type>
      <name>FunctionWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ad36d9935215389eea1fd32991cdc4a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a2a158fb5bc0a849bc3df21c60255a8f3</anchor>
      <arglist>(const ConformingVolumeIteratorFactory&lt; GV &gt; &amp;factory_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a895c78454f07359bc12553b73421426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePiece</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aedf4d1e27b282df9cb1c44bb46abc2a0</anchor>
      <arglist>(const std::string &amp;filename, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCollection</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a58b0cf56bd71a1462b9370af1b194361</anchor>
      <arglist>(const std::string name, const std::string &amp;piecename, const std::string &amp;piecepath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9e1789744821b09e22c8fcce67d2f03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9cd727cb23e3cb0cc75140b87bff0fc0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a3d280097305c7e5ec746ee7932fc8710</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a75860317a0f1e9dfbedd870b68485093</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afbc864f3b73fbb8a1e196e00831d5966</anchor>
      <arglist>(const std::string &amp;name, OutputType outputType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9082d2d165e818242e1176a06d1f9622</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>add2df4842048164321d57609a15f337d</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCornerFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a91f4353fe0a4de25a06d0dda41b97303</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncorners) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a0cfe911f621230115e3657820ee8fd7a</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aaec05e424a6657f4d8d4843364a05444</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGrid</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a6bb905e9ec13e2452ed1647a6e79eccf</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a7335b24fa49e1d792db7e2132cf436a9</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstScalar</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9ba4cc56e221c73e03f98c4701adcae</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstVector</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ac9cd3194e22933f9bee6af141da6ceec</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BasicWriter&lt; NonConformingBoundaryIteratorFactory&lt; GV &gt; &gt;</name>
    <filename>a03698.html</filename>
    <member kind="typedef">
      <type>FunctionWriterBase&lt; Cell &gt;</type>
      <name>FunctionWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ad36d9935215389eea1fd32991cdc4a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BasicWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a2a158fb5bc0a849bc3df21c60255a8f3</anchor>
      <arglist>(const NonConformingBoundaryIteratorFactory&lt; GV &gt; &amp;factory_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a895c78454f07359bc12553b73421426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePiece</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aedf4d1e27b282df9cb1c44bb46abc2a0</anchor>
      <arglist>(const std::string &amp;filename, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCollection</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a58b0cf56bd71a1462b9370af1b194361</anchor>
      <arglist>(const std::string name, const std::string &amp;piecename, const std::string &amp;piecepath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9e1789744821b09e22c8fcce67d2f03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9cd727cb23e3cb0cc75140b87bff0fc0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a3d280097305c7e5ec746ee7932fc8710</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a75860317a0f1e9dfbedd870b68485093</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afbc864f3b73fbb8a1e196e00831d5966</anchor>
      <arglist>(const std::string &amp;name, OutputType outputType)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9082d2d165e818242e1176a06d1f9622</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>add2df4842048164321d57609a15f337d</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCornerFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a91f4353fe0a4de25a06d0dda41b97303</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncorners) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a0cfe911f621230115e3657820ee8fd7a</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aaec05e424a6657f4d8d4843364a05444</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGrid</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a6bb905e9ec13e2452ed1647a6e79eccf</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a7335b24fa49e1d792db7e2132cf436a9</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstScalar</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9ba4cc56e221c73e03f98c4701adcae</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstVector</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ac9cd3194e22933f9bee6af141da6ceec</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLeafIntersectionIterator::Begin</name>
    <filename>a02146.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::BinaryDataArrayWriter</name>
    <filename>a03754.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>BinaryDataArrayWriter</name>
      <anchorfile>a03754.html</anchorfile>
      <anchor>aa4f1a9636c2c82dc3544e0f899269297</anchor>
      <arglist>(std::ostream &amp;theStream, std::string name, int ncomps, int nitems, const Indent &amp;indent_, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BinaryDataArrayWriter</name>
      <anchorfile>a03754.html</anchorfile>
      <anchor>a53e82d8440c8a871c7ead54ee189a3fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>abf42e76c4b1f7c214239f3fb745eb297</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::BoundaryDomBlock</name>
    <filename>a03370.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>BoundaryDomBlock</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>addff72b409ba3ad25268a4c15e1ef3bd</anchor>
      <arglist>(std::istream &amp;in, int cdimworld)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryDomBlock</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a17902e8f496c40231782b5e62177b412</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>next</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a489604c74399dd6966ee03693332e496</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Domain &amp;</type>
      <name>domain</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a3080f485a1a2c80d331c99f628b75467</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDefaultData</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>ab5294ad390a605e6b3088a5281f47e03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DomainData *</type>
      <name>defaultData</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>acb5cc152082559ebe4317864b099fc5c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParameter</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a2ee89e7bd0f1f2cf541013ea5f95ad71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a8573d697470773f346c927f58abc4e86</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>aadb1fe56f2a3549f3bbd78b1a7b34d21</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const DomainData *</type>
      <name>contains</name>
      <anchorfile>a03370.html</anchorfile>
      <anchor>a274c02a946a5bb781836eddd5f8bc2de</anchor>
      <arglist>(const std::vector&lt; Vector &gt; &amp;v) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::BoundaryIterator</name>
    <filename>a03702.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>BoundaryIterator&lt; GV &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a11a5c1a50347477a1fd85233127c054b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const GV::Intersection</type>
      <name>Value</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a5c3b50023c63240cf43ee0bfd2f5aa87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>aa9fed1e7517d00e064f36d3eb21ae0f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::Iterator</type>
      <name>ElementIterator</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a87ee265ccb15dd573bfff8fc1aa7ff6a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>abaf2b5c99a14196b7ba0197f3ff13782</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; ElementIterator &gt;::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>ae94324fa35c001a669295339eb41ae0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>dereference</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a5019a7e6a4fc5f6da958142176d43444</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>ac8a11f3300bb31c8ab298b972d83f2ce</anchor>
      <arglist>(const DerivedType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>aed4b0d8c4dc7a28be2627d05c3e49b62</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryIterator</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a60718d4da462586aabae62bb3be9ccf6</anchor>
      <arglist>(const GV &amp;gv_, const ElementIterator &amp;eit_, const IntersectionIterator &amp;iit_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryIterator</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a43a4d0e2d252793e88fda000620795a8</anchor>
      <arglist>(const GV &amp;gv_, const ElementIterator &amp;eit_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryIterator</name>
      <anchorfile>a03702.html</anchorfile>
      <anchor>a5da406255b1932e3b69e7815f717f6aa</anchor>
      <arglist>(const GV &amp;gv_, bool end=false)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BoundaryProjectionWrapper</name>
    <filename>a02478.html</filename>
    <templarg>dimworld</templarg>
    <base>Dune::DuneBoundaryProjection</base>
    <member kind="typedef">
      <type>BaseType ::CoordinateType</type>
      <name>CoordinateType</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>acef377f66bf06df20eb1b7aaf2407876</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>ThisType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a1240ce037f995c5ed5bbe0458640b044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ad60cc6247113babeee6a08075cd54dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundaryProjectionWrapper</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>a1f3c1c8dd1dd80a2fe085d2af5ee072e</anchor>
      <arglist>(const BaseType &amp;proje)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~BoundaryProjectionWrapper</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>ad9f03bc12230ef62c9dfee5471380084</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CoordinateType</type>
      <name>operator()</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>a8e42947b0ba2b2501cc988c58fb5e4b8</anchor>
      <arglist>(const CoordinateType &amp;global) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backup</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ab228940e4a077aad8523a6ba1e299191</anchor>
      <arglist>([[maybe_unused]] ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a6d9a483589850a809c3b15b566475066</anchor>
      <arglist>(BufferImp &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>aad2bfc023b531dd03481aa9ae7db922f</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a9ec397bb9f5aa4ef51fbd2a45fbb9a3f</anchor>
      <arglist>(BufferImp &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a4d65a8d868ccde06ae2d921e1d1d0e04</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>a595c7eea4cb5f090bef1a77b39d89cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const BaseType &amp;</type>
      <name>proj_</name>
      <anchorfile>a02478.html</anchorfile>
      <anchor>a21da0cf3cfff392a0f47feb59e8362d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::BoundarySegBlock</name>
    <filename>a03374.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="typedef">
      <type>DGFEntityKey&lt; unsigned int &gt;</type>
      <name>EntityKey</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>acb028c46b1194cd0c378696861541bb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; int, BoundaryParameter &gt;</type>
      <name>BndParam</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>ab599318717430314e32eb4a1fd162904</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundarySegBlock</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>ac3da837c85b5aa9bbb24e130b6ee3a1e</anchor>
      <arglist>(std ::istream &amp;in, int pnofvtx, int pdimworld, bool psimplexgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>a4ce343f4fe2efae532a8a48fae09cf01</anchor>
      <arglist>(std ::map&lt; EntityKey, BndParam &gt; &amp;facemap, bool fixedsize, int vtxoffset)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>a0e111c9a960299c9ed9fe94601244021</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofbound</name>
      <anchorfile>a03374.html</anchorfile>
      <anchor>ade45334299b02d12f0b7a6c125ffd9c6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::BoundarySegment</name>
    <filename>a02490.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>BoundarySegmentBackupRestore&lt; BoundarySegment&lt; dim, dimworld, ctype &gt; &gt;</base>
    <member kind="typedef">
      <type>BoundarySegment&lt; dim, dimworld, ctype &gt;</type>
      <name>ThisType</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>a62ef2db9fb2ca26388354b3dcc39b5f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundarySegmentBackupRestore&lt; BoundarySegment&lt; dim, dimworld, ctype &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>a8c8a84c055d26215e56f043ec7631621</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>a608da49ddf048861f9f44a4d2700fc28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~BoundarySegment</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>aa6f7744ff9c0a3198ebdeb238cd4d30b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual FieldVector&lt; ctype, dimworld &gt;</type>
      <name>operator()</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>a8fa6047e67cbd9b9e6a36b9188f236f5</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backup</name>
      <anchorfile>a02490.html</anchorfile>
      <anchor>ae1f9ed38197f7a7ccb13793d453a3622</anchor>
      <arglist>([[maybe_unused]] ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BoundarySegment&lt; dim, dimworld, ctype &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BoundarySegmentBackupRestore</name>
    <filename>a02494.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::stringstream</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a5f1caab3482efa6040f65abf6df4983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BndSeg</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundarySegmentBackupRestore&lt; BoundarySegment&lt; dim, dimworld, ctype &gt; &gt;</name>
    <filename>a02494.html</filename>
    <member kind="typedef">
      <type>std::stringstream</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a5f1caab3482efa6040f65abf6df4983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>BoundarySegment&lt; dim, dimworld, ctype &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>BoundarySegmentBackupRestore&lt; DuneBoundaryProjection&lt; dimworld &gt; &gt;</name>
    <filename>a02494.html</filename>
    <member kind="typedef">
      <type>std::stringstream</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a5f1caab3482efa6040f65abf6df4983c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::BoundarySegmentWrapper</name>
    <filename>a02482.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>Dune::DuneBoundaryProjection</base>
    <member kind="typedef">
      <type>Base::CoordinateType</type>
      <name>CoordinateType</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>afb62d0ffc1946b3081f79ff56ec93ef5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BoundarySegment&lt; dim, dimworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a5a619d6975fa60419d3156009e9fa8a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundarySegmentBackupRestore&lt; DuneBoundaryProjection&lt; dimworld &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>acaef9ce982a7554333139a3b3d592027</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundarySegmentWrapper</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a1b858aa8d667c5404ff1c2ba7f7627ed</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; CoordinateType &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BoundarySegmentWrapper</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a538fd545270ab85cafc1d65a9e1cab37</anchor>
      <arglist>(ObjectStreamType &amp;buffer)</arglist>
    </member>
    <member kind="function">
      <type>CoordinateType</type>
      <name>operator()</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a082fec52d698e2a69e2de09713c01201</anchor>
      <arglist>(const CoordinateType &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>const BoundarySegment &amp;</type>
      <name>boundarySegment</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a297be7d48cda7162fc231de8f69c3107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backup</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a098c7b0194b76a0b75cb66b9e22f5d4f</anchor>
      <arglist>(ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backup</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ab228940e4a077aad8523a6ba1e299191</anchor>
      <arglist>([[maybe_unused]] ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a6d9a483589850a809c3b15b566475066</anchor>
      <arglist>(BufferImp &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>aad2bfc023b531dd03481aa9ae7db922f</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>registerFactory</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>a6d1241b48fee1f708eeea720a63c681d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a9ec397bb9f5aa4ef51fbd2a45fbb9a3f</anchor>
      <arglist>(BufferImp &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a4d65a8d868ccde06ae2d921e1d1d0e04</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>FaceMapping</type>
      <name>readFaceMapping</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>aa6792869d84c1363f3756ab072385a10</anchor>
      <arglist>(ObjectStreamType &amp;buffer)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int &amp;</type>
      <name>key</name>
      <anchorfile>a02482.html</anchorfile>
      <anchor>aa5962cc12c45bafcb22dcded0d3a5db3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::BracketExpression</name>
    <filename>a03438.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>BracketExpression</name>
      <anchorfile>a03438.html</anchorfile>
      <anchor>a9f88091014c384a72ae93d782f07bdc1</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression, size_t field)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03438.html</anchorfile>
      <anchor>aded3b4b73d3a336b5be2ef21c34f191d</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CachedCoordFunction</name>
    <filename>a02922.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>DiscreteCoordFunction&lt; CoordFunction::ctype, CoordFunction::dimRange, CachedCoordFunction&lt; HostGrid, CoordFunction &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::ctype</type>
      <name>ctype</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>a8f1085ed6a9d283df1572f838beb370f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>ab8c25acc01bc884080fcf0da0a619690</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>adc88f0f384f03aa83e2b6320f07fa06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>ad9ace574a632cac3704aa95ae655929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CachedCoordFunction</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>a2050adae5ff4e27292c2882001d63c2d</anchor>
      <arglist>(const HostGrid &amp;hostGrid, const CoordFunction &amp;coordFunction=CoordFunction())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>a179ac6acac1f460f9afd94e75673a281</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>buildCache</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>ac6782218c765983a7e14027d576725e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertEntity</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>ae613c286039425a15119d4b1dba101e8</anchor>
      <arglist>(const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02922.html</anchorfile>
      <anchor>a899aff87ae108aa742a6eba0e4f6e819</anchor>
      <arglist>(const HostEntity &amp;hostEntity, unsigned int corner, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a1f9c71d96a45516c5ff2e524c9c4cd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a9baf248acca0197dc7381d9c14e7fd81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a42b5617749de90ba40802b7a5e3f431f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLevelProvider::CalcMaxLevel</name>
    <filename>a02170.html</filename>
    <member kind="function">
      <type></type>
      <name>CalcMaxLevel</name>
      <anchorfile>a02170.html</anchorfile>
      <anchor>a16dee858c1fc04325d4c783806ec2713</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02170.html</anchorfile>
      <anchor>a66178761df3c76d908566161a99bef3b</anchor>
      <arglist>(const Level &amp;dof)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02170.html</anchorfile>
      <anchor>a8b65c1c6c503e7766642f8db2598897c</anchor>
      <arglist>(const Alberta::ElementInfo&lt; dim &gt; &amp;elementInfo)</arglist>
    </member>
    <member kind="function">
      <type>Level</type>
      <name>maxLevel</name>
      <anchorfile>a02170.html</anchorfile>
      <anchor>a1f9e7b11cb50afd1b874b8879b79253a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate</name>
    <filename>a02518.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02518.html</anchorfile>
      <anchor>acea6fdebeeeafcff7b0476c6e2cf39ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; const Grid, codim &gt;</name>
    <filename>a02558.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02558.html</anchorfile>
      <anchor>a5cce572a78335e67bb270c028688038d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</name>
    <filename>a02942.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02942.html</anchorfile>
      <anchor>a64e598dfd2ecbc42d1537ff0d59fb2a4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</name>
    <filename>a03274.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03274.html</anchorfile>
      <anchor>adbb20a1cc08eae55d99b869ce098fd6e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; UGGrid&lt; dim &gt;, codim &gt;</name>
    <filename>a03982.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03982.html</anchorfile>
      <anchor>a088d07e83416b81a1fe65e634b6d7fa5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::canCommunicate&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</name>
    <filename>a04206.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04206.html</anchorfile>
      <anchor>a2c9b6c50ecad2a936491f01031a53c4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKWriter::CellIterator</name>
    <filename>a03914.html</filename>
    <member kind="function">
      <type></type>
      <name>CellIterator</name>
      <anchorfile>a03914.html</anchorfile>
      <anchor>a9450332cddb616ef039b2bbfc996bae5</anchor>
      <arglist>(const GridCellIterator &amp;x)</arglist>
    </member>
    <member kind="function">
      <type>const FieldVector&lt; DT, n &gt;</type>
      <name>position</name>
      <anchorfile>a03914.html</anchorfile>
      <anchor>a7d25c0e87bdcc4bd2ae2f1b0f8b6a18e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::CircleBoundaryProjection</name>
    <filename>a02486.html</filename>
    <templarg>dimworld</templarg>
    <base>Dune::DuneBoundaryProjection</base>
    <member kind="typedef">
      <type>FieldVector&lt; double, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a02486.html</anchorfile>
      <anchor>a02ed116e6857555b5b8282661fc4245b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>ThisType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a1240ce037f995c5ed5bbe0458640b044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundarySegmentBackupRestore&lt; DuneBoundaryProjection&lt; dimworld &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>acaef9ce982a7554333139a3b3d592027</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ad60cc6247113babeee6a08075cd54dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CircleBoundaryProjection</name>
      <anchorfile>a02486.html</anchorfile>
      <anchor>a5e5a2cdaec59f8c8391c368869fbaa96</anchor>
      <arglist>(const double radius=std::sqrt((double) dimworld))</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~CircleBoundaryProjection</name>
      <anchorfile>a02486.html</anchorfile>
      <anchor>acdc9cd8d5fa14328df4b03747ea3bc7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual CoordinateType</type>
      <name>operator()</name>
      <anchorfile>a02486.html</anchorfile>
      <anchor>a82369296c902d7e92d342ba073935d24</anchor>
      <arglist>(const CoordinateType &amp;global) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backup</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ab228940e4a077aad8523a6ba1e299191</anchor>
      <arglist>([[maybe_unused]] ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a6d9a483589850a809c3b15b566475066</anchor>
      <arglist>(BufferImp &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>aad2bfc023b531dd03481aa9ae7db922f</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a9ec397bb9f5aa4ef51fbd2a45fbb9a3f</anchor>
      <arglist>(BufferImp &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a4d65a8d868ccde06ae2d921e1d1d0e04</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const double</type>
      <name>radius_</name>
      <anchorfile>a02486.html</anchorfile>
      <anchor>af2b67c7083b3fd279cea685fa67d4c2d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridEntity::Codim</name>
    <filename>a01942.html</filename>
    <templarg>cd</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01942.html</anchorfile>
      <anchor>aec65bb400a19920ec09786b10151411a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;::Codim</name>
    <filename>a01950.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01950.html</anchorfile>
      <anchor>a949d5697fc4e003e0ec2cdcc60a72c1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridFamily::Traits::Codim</name>
    <filename>a02058.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::AlbertaGridFamily::Traits::Codim::Partition</class>
    <member kind="typedef">
      <type>AlbertaGridGlobalGeometry&lt; dim-cd, dimworld, const Grid &gt;</type>
      <name>GeometryImpl</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>addf65a0c3f1b1211882f3df2082f1495</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridGeometry&lt; dim-cd, dim, const Grid &gt;</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a018d75a904b7f30dd93bb322d8eca9b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dimworld, const Grid, AlbertaGridGlobalGeometry &gt;</type>
      <name>Geometry</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a4e7abba1ce858089c6c5934071fde05b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dim, const Grid, LocalGeometryReference &gt;</type>
      <name>LocalGeometry</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a88397bdb9a634916465b249b69f0aa52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridEntity&lt; cd, dim, const GridImp &gt;</type>
      <name>EntityImpl</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a74c49cf7b783dfa30836d9e1a51bcba1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; cd, dim, const GridImp, AlbertaGridEntity &gt;</type>
      <name>Entity</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a3c4520d00ea8832b399157b5a6eecfa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntitySeed&lt; const GridImp, AlbertaGridEntitySeed&lt; cd, const GridImp &gt; &gt;</type>
      <name>EntitySeed</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a9761e59295a437ca9abf4eced24f81da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>abcfe1497c7a87f952bea75ff2df9cab5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a02058.html</anchorfile>
      <anchor>a7bf2ac0f8c84d6a23096d6ed714d031e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLocalGeometryProvider::Codim</name>
    <filename>a01994.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>AlbertaGridGeometry&lt; dimension-codim, dimension, Grid &gt;</type>
      <name>LocalGeometry</name>
      <anchorfile>a01994.html</anchorfile>
      <anchor>a402a8cf518b7b84d52eac52400add562</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLeafGridView::Codim</name>
    <filename>a02102.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLeafGridViewTraits::Codim</name>
    <filename>a02094.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a02094.html</anchorfile>
      <anchor>a2b48001236f456d8d2a560059895c37d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02094.html</anchorfile>
      <anchor>a6584f91494e186f12fadd10b72b56b8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02094.html</anchorfile>
      <anchor>aeac11bc4dc16686f3e118ac6d5c6eb8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02094.html</anchorfile>
      <anchor>a74536c69555c4da17b6ff66c29b9edd6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLevelGridView::Codim</name>
    <filename>a02086.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLevelGridViewTraits::Codim</name>
    <filename>a02078.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02078.html</anchorfile>
      <anchor>ab439c4927d3552b7d581d574cb68d988</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02078.html</anchorfile>
      <anchor>ae3200ac06978bc58a89d5ea4afe1a14c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02078.html</anchorfile>
      <anchor>a88e6feaafa63fc8af647852fbb3368bd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02078.html</anchorfile>
      <anchor>a94264fc6b75776b766fc729ac7183ce7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaMarkerVector::MarkSubEntities::Codim</name>
    <filename>a02450.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02450.html</anchorfile>
      <anchor>ab0781f696d16fbf34905d30d99169b0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02450.html</anchorfile>
      <anchor>ae07e85c515ca9270b94a282784285fc0</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering, int *(&amp;marker)[dimension+1], const ElementInfo &amp;elementInfo)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02450.html</anchorfile>
      <anchor>a0d73a989dbf932dddc148363faf783fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafGridView::Codim</name>
    <filename>a02638.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafGridViewTraits::Codim</name>
    <filename>a02630.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::DefaultLeafGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a02630.html</anchorfile>
      <anchor>a922bd16a2fbf647f254adc518e1591f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02630.html</anchorfile>
      <anchor>a193d4100571033755e12d5d287408693</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02630.html</anchorfile>
      <anchor>ac2c5d7012783ce0b6f12dc101bca769a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02630.html</anchorfile>
      <anchor>af99ae782655de27e88f0246f757ceec4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelGridView::Codim</name>
    <filename>a02622.html</filename>
    <templarg>cd</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelGridViewTraits::Codim</name>
    <filename>a02614.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::DefaultLevelGridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02614.html</anchorfile>
      <anchor>a82fbca89ea949cd33c334cdfeab3e809</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02614.html</anchorfile>
      <anchor>ac4879847f69a36512419a1fdb27b811f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02614.html</anchorfile>
      <anchor>a3b1af8997b64501380992a008fc54ae5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02614.html</anchorfile>
      <anchor>a1ea0e8601313b97058496fb0de70b95c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;::Codim</name>
    <filename>a02650.html</filename>
    <templarg>cd</templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02650.html</anchorfile>
      <anchor>a1bd5acdcb10f7c41375dce19f00235b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridFamily::Traits::Codim</name>
    <filename>a03162.html</filename>
    <templarg>codim</templarg>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits::Codim::Partition</class>
    <member kind="typedef">
      <type>Dune::GeoGrid::Geometry&lt; dimension-codim, dimensionworld, const Grid &gt;</type>
      <name>GeometryImpl</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>ac69bff356a0b94e67c84f93ea59a0bc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dimension-codim, dimensionworld, const Grid, Dune::GeoGrid::Geometry &gt;</type>
      <name>Geometry</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a43267666e42fff1391b6b8ddec516bc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codim &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a7dadb439da3c0332e3f70808ad07abc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::Entity&lt; codim, dimension, const Grid &gt;</type>
      <name>EntityImpl</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a998fb330591f7aa49e1243dcf366f71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; codim, dimension, const Grid, GeoGrid::Entity &gt;</type>
      <name>Entity</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a1d898de176c5265581bab549a2aaeb8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntitySeed&lt; const Grid, GeoGrid::EntitySeed&lt; codim, const Grid &gt; &gt;</type>
      <name>EntitySeed</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a633475b3357fc13bf942d6c4622bd414</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a09738e42d2929dad5d15b222f28c82e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a03162.html</anchorfile>
      <anchor>a89917f21a1ffc2d09b88aad96c8d3a0c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridView::Codim</name>
    <filename>a03186.html</filename>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridViewTraits::Codim</name>
    <filename>a03178.html</filename>
    <templarg>codim</templarg>
    <class kind="struct">Dune::GeoGrid::GridViewTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>GeoGrid::Iterator&lt; HostGridView, codim, All_Partition, const Grid &gt;</type>
      <name>IteratorImp</name>
      <anchorfile>a03178.html</anchorfile>
      <anchor>ae24309d9197731335efe0d9b711b9364</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; codim, const Grid, IteratorImp &gt;</type>
      <name>Iterator</name>
      <anchorfile>a03178.html</anchorfile>
      <anchor>a6d25977619f3e0841e01591e36709eef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03178.html</anchorfile>
      <anchor>ac3ab42f18978a5037037135e6fbe51a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03178.html</anchorfile>
      <anchor>a00a02bc3ece5a07677879ed7736ab266</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03178.html</anchorfile>
      <anchor>a8a1acc213388b4ffe753d485980a3a85</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeometryGrid::Codim</name>
    <filename>a03142.html</filename>
    <templarg>codim</templarg>
    <class kind="struct">Dune::GeometryGrid::Codim::Partition</class>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03142.html</anchorfile>
      <anchor>a86d3e6d967bfc47142a272d2bdbf8fa3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03142.html</anchorfile>
      <anchor>a6bbcd05eac632d3623d7e269edafdcc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03142.html</anchorfile>
      <anchor>a7942448ec458ed17b3f6f93df8b0596e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a03142.html</anchorfile>
      <anchor>a53d6c57b5cbaf92b305ae57e9317a70a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a03142.html</anchorfile>
      <anchor>a001ee00aff6d069cb560c1e5f07bc6b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Grid::Codim</name>
    <filename>a02714.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::Grid::Codim::Partition</class>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>a2c17d34312a333e90a59667aa5a946d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>a0141e1edba39c66d7d94de53c978440c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>a010395efed236aefd4d2fab3b0ad8e96</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>a71d6e6d997419f6b536ff1f59bb2dbe7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>a14d3d7ea9a8e166407c7b61759c14ea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a02714.html</anchorfile>
      <anchor>aaf1c81a40e78a0b3d9007f718ea26b37</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::Codim</name>
    <filename>a02018.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02018.html</anchorfile>
      <anchor>a53192a065a33503ec2b6dfe8c97414ac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;::Codim</name>
    <filename>a03998.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>UGGrid&lt; dimworld &gt;::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03998.html</anchorfile>
      <anchor>a8339c43f6b75a170abcf1c49c8513fd2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridFactoryInterface::Codim</name>
    <filename>a02750.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>GridType::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02750.html</anchorfile>
      <anchor>a2ef1d13b2c014018249f36510426c299</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridTraits::Codim</name>
    <filename>a02726.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::GridTraits::Codim::Partition</class>
    <member kind="typedef">
      <type>GeometryImp&lt; dim-cd, dimw, const GridImp &gt;</type>
      <name>GeometryImpl</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>a8acabb36291c3eaace6ae51dcd566863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>LocalGeometryImp&lt; dim-cd, dim, const GridImp &gt;</type>
      <name>LocalGeometryImpl</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>a56547b3c5dd96208aa2d1ecad2c80c3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dimw, const GridImp, GeometryImp &gt;</type>
      <name>Geometry</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>ac5a45a20ef8c5d4892206e18dec64da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Geometry&lt; dim-cd, dim, const GridImp, LocalGeometryImp &gt;</type>
      <name>LocalGeometry</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>a92a70ce87f50a81bfb7fe1cafdb8ed20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; cd, dim, const GridImp, EntityImp &gt;</type>
      <name>Entity</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>acaba14ffeba3470248fce54333aeacfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntitySeed&lt; const GridImp, EntitySeedImp&lt; cd, const GridImp &gt; &gt;</type>
      <name>EntitySeed</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>a1a9725dfae224393c6c56b85e14d85da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>a2dfead823eb93f8846668da531fe5574</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>aeb258c2f694c0da358e169bf91554b6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::Entity&lt; cd, dim, const GridImp, EntityImp &gt;</name>
      <anchorfile>a02726.html</anchorfile>
      <anchor>abadaf3f85fe6d1db5d97594a3ba595b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridView::Codim</name>
    <filename>a02762.html</filename>
    <templarg>cd</templarg>
    <class kind="struct">Dune::GridView::Codim::Partition</class>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga7385fa4dc126599c549127cd47cb5b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga9d69742c24c2b313aa7b9f8c8e695f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga94fbe1afe6bda8fccf93d05651686d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gacdf8721c364a1afcd769ca1cef9194b3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;::Codim</name>
    <filename>a04070.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04070.html</anchorfile>
      <anchor>aa0e23fa9c95c7af1b70ef5c2e3535ff7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codim &gt;::Entity</type>
      <name>HostEntity</name>
      <anchorfile>a04070.html</anchorfile>
      <anchor>a07eebafcb584f4a99264a45aae832d2e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;::Codim</name>
    <filename>a04078.html</filename>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04078.html</anchorfile>
      <anchor>ab9c4193a4e2f0feb1cedcd81d14918c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codim &gt;::Entity</type>
      <name>HostEntity</name>
      <anchorfile>a04078.html</anchorfile>
      <anchor>a38e8b1ddf8061fe3fe6a559fc9d10f42</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IdSet::Codim</name>
    <filename>a02782.html</filename>
    <templarg>cc</templarg>
    <member kind="typedef">
      <type>typename Traits::template Codim&lt; cc &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02782.html</anchorfile>
      <anchor>abffc664d8ad39d4815d50a3e29ff5372</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IndexSet::Codim</name>
    <filename>a02774.html</filename>
    <templarg>cc</templarg>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cc &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02774.html</anchorfile>
      <anchor>a8eb68693451ae9b2c9cff126000dd504</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::YaspEntity&lt; 0, dim, GridImp &gt;::Codim</name>
    <filename>a04290.html</filename>
    <templarg>cd</templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04290.html</anchorfile>
      <anchor>a86b2fc848742a8e84349d77420bf4b2f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Capabilities::CodimCache</name>
    <filename>a02978.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>hasHostEntity</name>
      <anchorfile>a02978.html</anchorfile>
      <anchor>a7781f79eaba878b5b4ccc5c983acb657</anchor>
      <arglist>(int codim)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType</name>
    <filename>a02242.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType&lt; 2, 1 &gt;</name>
    <filename>a02254.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02254.html</anchorfile>
      <anchor>a5efe6be6eb8704febeb10f45d5d961f5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType&lt; 3, 1 &gt;</name>
    <filename>a02258.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02258.html</anchorfile>
      <anchor>a8b33f3fc92c474455ad576caf4d3f899</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType&lt; 3, 2 &gt;</name>
    <filename>a02262.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02262.html</anchorfile>
      <anchor>a3a965a9c9087c267fc1fd6c945757b36</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType&lt; dim, 0 &gt;</name>
    <filename>a02246.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02246.html</anchorfile>
      <anchor>ab65935b62839bbd23f21ce4bb5b82236</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CodimType&lt; dim, dim &gt;</name>
    <filename>a02250.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02250.html</anchorfile>
      <anchor>a69b8177bd1e1e7b3799d6e3e3acbc04d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CombinedAdaptProlongRestrict</name>
    <filename>a02462.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CombinedAdaptProlongRestrict</name>
      <anchorfile>a02462.html</anchorfile>
      <anchor>a2988f0b4276c38a7609adf039aaaab14</anchor>
      <arglist>(A &amp;a, B &amp;b)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restrictLocal</name>
      <anchorfile>a02462.html</anchorfile>
      <anchor>a5423e86dff225f0908600f3c9044f20b</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>prolongLocal</name>
      <anchorfile>a02462.html</anchorfile>
      <anchor>abcc408004014cec14089a0a3c1d677b0</anchor>
      <arglist>(const Entity &amp;father, const Entity &amp;son, bool initialize)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CommDataHandle</name>
    <filename>a03058.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>CommDataHandleIF&lt; CommDataHandle&lt; Grid, WrappedHandle &gt;, WrappedHandle::DataType &gt;</base>
    <member kind="typedef">
      <type>WrappedHandle::DataType</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CommDataHandle</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>acc0b269a2257ef9eea4777436f417385</anchor>
      <arglist>(const Grid &amp;grid, WrappedHandle &amp;handle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>a7de2cdb824b856711a0aa40eb13f7440</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>a547024e861beb9dab3cf7f6b5868ef53</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>ac8391f627f917e269da927bbb59a9bf4</anchor>
      <arglist>(const HostEntity &amp;hostEntity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>adc10183dc346ff3814771529be3b26ea</anchor>
      <arglist>(MessageBuffer &amp;buffer, const HostEntity &amp;hostEntity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a03058.html</anchorfile>
      <anchor>afa23227b10d30f641735393d35ba083a</anchor>
      <arglist>(MessageBuffer &amp;buffer, const HostEntity &amp;hostEntity, size_t size_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::CommDataHandleIF</name>
    <filename>a02586.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>DataTypeImp</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa7131b27d9e4cd3c573a220be3e2f383</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>add4ddecd5908123d2beafbca89f127fa</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommDataHandleIF</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a1bf05ec7c10fa8bc2a3898e4acc19ce7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommDataHandleIF&lt; CommDataHandle&lt; Grid, WrappedHandle &gt;, WrappedHandle::DataType &gt;</name>
    <filename>a02586.html</filename>
    <member kind="typedef">
      <type>WrappedHandle::DataType</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa7131b27d9e4cd3c573a220be3e2f383</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>add4ddecd5908123d2beafbca89f127fa</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommDataHandleIF</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a1bf05ec7c10fa8bc2a3898e4acc19ce7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommDataHandleIF&lt; DataHandle, char &gt;</name>
    <filename>a02586.html</filename>
    <member kind="typedef">
      <type>char</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa7131b27d9e4cd3c573a220be3e2f383</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>add4ddecd5908123d2beafbca89f127fa</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommDataHandleIF</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a1bf05ec7c10fa8bc2a3898e4acc19ce7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommDataHandleIF&lt; IndexExchange, Index &gt;</name>
    <filename>a02586.html</filename>
    <member kind="typedef">
      <type>Index</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa7131b27d9e4cd3c573a220be3e2f383</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>add4ddecd5908123d2beafbca89f127fa</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommDataHandleIF</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a1bf05ec7c10fa8bc2a3898e4acc19ce7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CommDataHandleIF&lt; MinimumExchange&lt; IS, V &gt;, V::value_type &gt;</name>
    <filename>a02586.html</filename>
    <member kind="typedef">
      <type>V::value_type</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa7131b27d9e4cd3c573a220be3e2f383</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>add4ddecd5908123d2beafbca89f127fa</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>CommDataHandleIF</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a1bf05ec7c10fa8bc2a3898e4acc19ce7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::ConformingConnectivityWriter</name>
    <filename>a03802.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; IteratorFactory::Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorFactory::Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConformingConnectivityWriter</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>a8623578ea5fd9bb46c26eba884d35dbf</anchor>
      <arglist>(const IteratorFactory &amp;factory_)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>a623513374b76079800744af9711843b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>aa1c12fd2377b5548b12d7f4ec57dcb0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>a291c34be859fe64449605931203c912b</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>ab9383cd58a7f57df6e911f448da93640</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>a6c35a45441b7fd67efe13de5b041f448</anchor>
      <arglist>(const typename Base::Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03802.html</anchorfile>
      <anchor>ae122255cfbf97e9d7657ace7d500e5b6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::ConformingVolumeIteratorFactory</name>
    <filename>a03854.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::Entity</type>
      <name>Cell</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae6215cf619aa91c50ea484dd97ac727f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::template Partition&lt; InteriorBorder_Partition &gt;::Iterator</type>
      <name>CellIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a2c973430beba78f11b88e7dd21e0aa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Corner</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a69c1e7e99c32cc2d86fff8519526a9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::CornerIterator&lt; CellIterator &gt;</type>
      <name>CornerIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a610893d34f81ac0470b21554c133d71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Point</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>abacbecdfa7ef99ffa859d1976522761f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::PointIterator&lt; CellIterator, typename GV::IndexSet &gt;</type>
      <name>PointIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a8cbaec5a413791981eccc637e117e81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConformingConnectivityWriter&lt; ConformingVolumeIteratorFactory&lt; GV &gt; &gt;</type>
      <name>ConnectivityWriter</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a99a0905da2e8c1823ccfb6ade7a32ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ac8592288ba202cb1ae54b90b3221da2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConformingVolumeIteratorFactory</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ab57f74709d2ba0987d8cf0a2e5a86602</anchor>
      <arglist>(const GV &amp;gv_)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>beginCells</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae0e33d61befa77ee84e37f2f0f8951ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>endCells</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a72933dc1a25db46a6fdb9e474fa40f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>beginCorners</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a9aff567af22a6812aa8e242e1650f5d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>endCorners</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a0c978cb21ce59845402fb2d1d4f7c0af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>beginPoints</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae9825228b36b518fa8a86c89557fda6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>endPoints</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>aaa77f31ca31e64793e352851afa61daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityWriter</type>
      <name>makeConnectivity</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>acfd5e0f7db6110d3f7f2022cf473de39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ac61848001e2bafa379d0925715cee482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimCell</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a9c6a74528c100d905040e6d92c3ddf82</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>ConformingConnectivityWriter&lt; ConformingVolumeIteratorFactory&lt; GV &gt; &gt;</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a1635122dd8223032c1cf2beca9edba0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::ConformingVolumeWriter</name>
    <filename>a03862.html</filename>
    <templarg></templarg>
    <base>Dune::VTK::ConformingVolumeIteratorFactory</base>
    <base>BasicWriter&lt; ConformingVolumeIteratorFactory&lt; GV &gt; &gt;</base>
    <member kind="typedef">
      <type>Dune::VTKFunction&lt; GV &gt;</type>
      <name>VTKFunction</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>ae84c764e8048ea23bc53438af8e27323</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; VTKFunction &gt;</type>
      <name>VTKFunctionPtr</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a35c2635e9d297340db8eaa89b5042863</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::Entity</type>
      <name>Cell</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae6215cf619aa91c50ea484dd97ac727f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::template Partition&lt; InteriorBorder_Partition &gt;::Iterator</type>
      <name>CellIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a2c973430beba78f11b88e7dd21e0aa34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Corner</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a69c1e7e99c32cc2d86fff8519526a9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::CornerIterator&lt; CellIterator &gt;</type>
      <name>CornerIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a610893d34f81ac0470b21554c133d71c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Point</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>abacbecdfa7ef99ffa859d1976522761f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::PointIterator&lt; CellIterator, typename GV::IndexSet &gt;</type>
      <name>PointIterator</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a8cbaec5a413791981eccc637e117e81d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ConformingConnectivityWriter&lt; ConformingVolumeIteratorFactory&lt; GV &gt; &gt;</type>
      <name>ConnectivityWriter</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a99a0905da2e8c1823ccfb6ade7a32ad8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ac8592288ba202cb1ae54b90b3221da2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionWriterBase&lt; Cell &gt;</type>
      <name>FunctionWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ad36d9935215389eea1fd32991cdc4a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConformingVolumeWriter</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>ac21d8bb82097b318f6a0c413244c62dd</anchor>
      <arglist>(const GV &amp;gv_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a3c0f8373a157b8d3cdcdcb179824a46d</anchor>
      <arglist>(const VTKFunctionPtr &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a519535bd21e783c6c2cf646da2e7612e</anchor>
      <arglist>(VTKFunction *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>aa205f51063c30a3783bd6f6db5944951</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a3cd148eb9712adbe57d7c636ed2b8551</anchor>
      <arglist>(const VTKFunctionPtr &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a7be6aa13f47b9a0fc8c3ab1a394d182c</anchor>
      <arglist>(VTKFunction *p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>a6778a40c8f60e891c23ac6fbb1a26124</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03862.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>beginCells</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae0e33d61befa77ee84e37f2f0f8951ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>endCells</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a72933dc1a25db46a6fdb9e474fa40f90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>beginCorners</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a9aff567af22a6812aa8e242e1650f5d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>endCorners</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a0c978cb21ce59845402fb2d1d4f7c0af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>beginPoints</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ae9825228b36b518fa8a86c89557fda6d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>endPoints</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>aaa77f31ca31e64793e352851afa61daf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityWriter</type>
      <name>makeConnectivity</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>acfd5e0f7db6110d3f7f2022cf473de39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>ac61848001e2bafa379d0925715cee482</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a895c78454f07359bc12553b73421426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePiece</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aedf4d1e27b282df9cb1c44bb46abc2a0</anchor>
      <arglist>(const std::string &amp;filename, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCollection</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a58b0cf56bd71a1462b9370af1b194361</anchor>
      <arglist>(const std::string name, const std::string &amp;piecename, const std::string &amp;piecepath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9e1789744821b09e22c8fcce67d2f03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9cd727cb23e3cb0cc75140b87bff0fc0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a3d280097305c7e5ec746ee7932fc8710</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a75860317a0f1e9dfbedd870b68485093</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afbc864f3b73fbb8a1e196e00831d5966</anchor>
      <arglist>(const std::string &amp;name, OutputType outputType)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimCell</name>
      <anchorfile>a03854.html</anchorfile>
      <anchor>a9c6a74528c100d905040e6d92c3ddf82</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9082d2d165e818242e1176a06d1f9622</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>add2df4842048164321d57609a15f337d</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCornerFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a91f4353fe0a4de25a06d0dda41b97303</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncorners) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a0cfe911f621230115e3657820ee8fd7a</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aaec05e424a6657f4d8d4843364a05444</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGrid</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a6bb905e9ec13e2452ed1647a6e79eccf</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a7335b24fa49e1d792db7e2132cf436a9</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstScalar</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9ba4cc56e221c73e03f98c4701adcae</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstVector</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ac9cd3194e22933f9bee6af141da6ceec</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::ConstantExpression</name>
    <filename>a03422.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantExpression</name>
      <anchorfile>a03422.html</anchorfile>
      <anchor>a8430cbb34132599223465821512aa3fd</anchor>
      <arglist>(const Vector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ConstantExpression</name>
      <anchorfile>a03422.html</anchorfile>
      <anchor>a1cfce5245902ddd5226e104d4b33b530</anchor>
      <arglist>(const double &amp;value)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03422.html</anchorfile>
      <anchor>acaf42dd0c6e866a089d27aef42625908</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::CoordCache</name>
    <filename>a01826.html</filename>
    <templarg>dim</templarg>
    <class kind="struct">Dune::Alberta::CoordCache::Interpolation</class>
    <class kind="class">Dune::Alberta::CoordCache::LocalCaching</class>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>acd07bb0638c9b271132e8dfa6c33f3b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>aa0405fd7b265d11bad72c062db42df35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HierarchyDofNumbering&lt; dimension &gt;</type>
      <name>DofNumbering</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>ad2edf3750cf4473bead41b3fb2eab533</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>GlobalVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a574d6d31bfdcdf58d14efb7d61354b52</anchor>
      <arglist>(const Element *element, int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>acb9d774769d1a3eb86287707571eb066</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>ae9641b980ecb624bed686c17177f54c9</anchor>
      <arglist>(const DofNumbering &amp;dofNumbering)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>aab1216519ce2130f58d97e4a1b47216c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01826.html</anchorfile>
      <anchor>a1094003c7b01e371b84ffb9bf0e2c3e1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CoordCache</name>
    <filename>a02926.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CoordCache</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a1f8b085ddce8c918882d54902aa640da</anchor>
      <arglist>(const HostGrid &amp;hostGrid)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a42f550a485de0bfd7eb04aa95369282d</anchor>
      <arglist>(const Entity &amp;entity, unsigned int corner) const</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a189ec4fbb66b77d9efed5e1bde7d4800</anchor>
      <arglist>(const Vertex &amp;vertex, unsigned int corner) const</arglist>
    </member>
    <member kind="function">
      <type>Coordinate &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a9b972cb2dcc7f94ed63adb122ec8cb67</anchor>
      <arglist>(const Entity &amp;entity, unsigned int corner)</arglist>
    </member>
    <member kind="function">
      <type>Coordinate &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a2e904bd62cae7c42f5f30c65f5e00b14</anchor>
      <arglist>(const Vertex &amp;vertex, unsigned int corner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a0356047e71cbaa8cfa5e6cbda64bf78b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>CoordCache&lt; HostGrid, RangeVector &gt;</name>
    <filename>a02926.html</filename>
    <member kind="function">
      <type></type>
      <name>CoordCache</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a1f8b085ddce8c918882d54902aa640da</anchor>
      <arglist>(const HostGrid &amp;hostGrid)</arglist>
    </member>
    <member kind="function">
      <type>const RangeVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a42f550a485de0bfd7eb04aa95369282d</anchor>
      <arglist>(const Entity &amp;entity, unsigned int corner) const</arglist>
    </member>
    <member kind="function">
      <type>const RangeVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a189ec4fbb66b77d9efed5e1bde7d4800</anchor>
      <arglist>(const Vertex &amp;vertex, unsigned int corner) const</arglist>
    </member>
    <member kind="function">
      <type>RangeVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a9b972cb2dcc7f94ed63adb122ec8cb67</anchor>
      <arglist>(const Entity &amp;entity, unsigned int corner)</arglist>
    </member>
    <member kind="function">
      <type>RangeVector &amp;</type>
      <name>operator()</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a2e904bd62cae7c42f5f30c65f5e00b14</anchor>
      <arglist>(const Vertex &amp;vertex, unsigned int corner)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02926.html</anchorfile>
      <anchor>a0356047e71cbaa8cfa5e6cbda64bf78b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CoordFunctionCaller</name>
    <filename>a03026.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::CoordinatesWriter</name>
    <filename>a03798.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CoordinatesWriter</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>af8cdcfaf81eef80acedacfd7e24ddc96</anchor>
      <arglist>(VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>a3a2b1242861a103cd27c465f7343077f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>ac44993e7e34a2df46336439eb194c391</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>ad7e33a5f6d0f8a719543aaf3dbf80378</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>ad9198b9a3600086f12279c03c3dc9a4c</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>a289b55233ec75a9e6f7a814c8877dbea</anchor>
      <arglist>(const typename Base::Cell &amp;cell, const typename Base::Domain &amp;xl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03798.html</anchorfile>
      <anchor>a9095ca624a7b293b6c6e50eb9d4c1e8d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CoordVector</name>
    <filename>a03038.html</filename>
    <templarg>mydim</templarg>
    <templarg></templarg>
    <templarg>fake</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CoordVector&lt; mydim, Grid, false &gt;</name>
    <filename>a03042.html</filename>
    <templarg>mydim</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CoordVector</name>
      <anchorfile>a03042.html</anchorfile>
      <anchor>a2598fc122c4e0d8ea670eeffd7467078</anchor>
      <arglist>(const HostEntity &amp;hostEntity, const CoordFunction &amp;coordFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a03042.html</anchorfile>
      <anchor>a6312b0920b7e0c080f6cbc97bd8558d5</anchor>
      <arglist>(std::array&lt; Coordinate, size &gt;(&amp;corners)) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CoordVector&lt; mydim, Grid, true &gt;</name>
    <filename>a03046.html</filename>
    <templarg>mydim</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>CoordVector</name>
      <anchorfile>a03046.html</anchorfile>
      <anchor>a8125e6a9f5d6671a92e4123cb3011a1f</anchor>
      <arglist>(const HostElement &amp;hostElement, const unsigned int subEntity, const CoordFunction &amp;coordFunction)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a03046.html</anchorfile>
      <anchor>aec907c5c8e62946f92bbd9693a5c21c8</anchor>
      <arglist>(std::array&lt; Coordinate, size &gt;(&amp;corners)) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::Corner</name>
    <filename>a03738.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Corner</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a57310bdbab3fec80646c497a7f1c399d</anchor>
      <arglist>(const Cell &amp;cell, unsigned duneIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Corner</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>af4fad847006a52d99f2e06cb74edad26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Cell &amp;</type>
      <name>cell</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a4ed90fdf589620aeec73635f4b338bc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cell</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a872ea76315caaa5f80477e303413d444</anchor>
      <arglist>(const Cell &amp;cell__)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>duneIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a96d015ea59b576aee9ce14f26b0af47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duneIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a9079594dafedef4fd349e1e91e75da05</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>vtkIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a087fe884580807102d9dbb23953fb776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vtkIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a1fa87320d7486ac837c31073f6208502</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Corner&lt; typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &gt;</name>
    <filename>a03738.html</filename>
    <member kind="function">
      <type></type>
      <name>Corner</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a57310bdbab3fec80646c497a7f1c399d</anchor>
      <arglist>(const typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &amp;cell, unsigned duneIndex)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Corner</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>af4fad847006a52d99f2e06cb74edad26</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &amp;</type>
      <name>cell</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a4ed90fdf589620aeec73635f4b338bc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cell</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a872ea76315caaa5f80477e303413d444</anchor>
      <arglist>(const typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &amp;cell__)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>duneIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a96d015ea59b576aee9ce14f26b0af47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>duneIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a9079594dafedef4fd349e1e91e75da05</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>vtkIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a087fe884580807102d9dbb23953fb776</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>vtkIndex</name>
      <anchorfile>a03738.html</anchorfile>
      <anchor>a1fa87320d7486ac837c31073f6208502</anchor>
      <arglist>(unsigned i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::CornerIterator</name>
    <filename>a03742.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>CornerIterator&lt; CellIterator &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>aeb7ef01a29e07ee94a8e38aeb3f316a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &gt;</type>
      <name>Corner</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a2acc629098d8646b12f5710b06a769d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Corner</type>
      <name>Value</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>ab70194093a43c97b3c1701b2bb70c9ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a0f57fd11effaf5444c59881e64714ee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; CellIterator &gt;::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a689792ce0ae97603928c334fd5f943ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; CellIterator &gt;::value_type::Geometry::ctype</type>
      <name>ctype</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>af694393c4ebe0a065c7cac3673a5c2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReferenceElements&lt; ctype, dim &gt;</type>
      <name>Refelems</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>aa3e42c7a40a0a0e667dae585a00f51ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>dereference</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a44e90e5b695e8be0c3f25a424ab4edc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDereferencable</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>af8829ce43e03185d5fb32f4161cf44b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>ae7768a6e574dc91eb325be8548b82b9f</anchor>
      <arglist>(const DerivedType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a3c1248e20d0db2a9c2c1e5298d09789c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CornerIterator</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>abc59e18c2bd8a48ce774e4a6dbeb95d5</anchor>
      <arglist>(const CellIterator &amp;cellit_, const CellIterator &amp;cellend_, unsigned vtkIndex=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CornerIterator</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>ae58ab3578c686cac8d6eac3bd277a0b3</anchor>
      <arglist>(const CellIterator &amp;cellend_)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dim</name>
      <anchorfile>a03742.html</anchorfile>
      <anchor>a75386ee4e7f68aafbd7c38f05c3d26f7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKWriter::CornerIterator</name>
    <filename>a03922.html</filename>
    <member kind="function">
      <type></type>
      <name>CornerIterator</name>
      <anchorfile>a03922.html</anchorfile>
      <anchor>a4c3cfdb64cc670d6b1a4bd5c54af5a6f</anchor>
      <arglist>(const GridCellIterator &amp;x, const GridCellIterator &amp;end, const VTK::DataMode &amp;dm, const VertexMapper &amp;vm, const std::vector&lt; int &gt; &amp;num)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03922.html</anchorfile>
      <anchor>a02ab16cf244b65f35d2065d37e278949</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03922.html</anchorfile>
      <anchor>aee31387140b7780758acdef9e1976dca</anchor>
      <arglist>(const CornerIterator &amp;cit) const</arglist>
    </member>
    <member kind="function">
      <type>EntityReference</type>
      <name>dereference</name>
      <anchorfile>a03922.html</anchorfile>
      <anchor>ac6df98b8e38e05cfe918cce9f10fc031</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a03922.html</anchorfile>
      <anchor>a9488b5cd6af73cc2f544d136f2dfc6ff</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::CornerStorage</name>
    <filename>a03054.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Coords::const_iterator</type>
      <name>const_iterator</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>a257b175371ddec643b43b8071d81e775</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CornerStorage</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>afce3e1d3a018ce976be98681c1c7e879</anchor>
      <arglist>(const CoordVector&lt; mydim, Grid, fake &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CornerStorage</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>a380e1fe16d12ad9d15b603c36bd72de9</anchor>
      <arglist>(const IntersectionCoordVector&lt; Grid &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>const Coordinate &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>a3ac3c0ed2c72be73ee46aa15f6b81890</anchor>
      <arglist>(unsigned int i) const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>a27758f30d03d2f3fd4d3307ad849ccb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>a03054.html</anchorfile>
      <anchor>a3cc21992aea5ab06935ee9686342ff76</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GeometryTraits::CornerStorage</name>
    <filename>a03122.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <member kind="typedef">
      <type>GeoGrid::CornerStorage&lt; mydim, cdim, Grid &gt;</type>
      <name>Type</name>
      <anchorfile>a03122.html</anchorfile>
      <anchor>a8de15d300d9a0881b6a4babcaee0e8a5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::CosExpression</name>
    <filename>a03458.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>CosExpression</name>
      <anchorfile>a03458.html</anchorfile>
      <anchor>a1d599f084c424a1f55b8aa73f52d65b0</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03458.html</anchorfile>
      <anchor>a17037d556ebb3918c22875a6cb8e76e2</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::CubeBlock</name>
    <filename>a03378.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>CubeBlock</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>ae2c1ef9698b308ea87eb191e2c581902</anchor>
      <arglist>(std ::istream &amp;in, int pnofvtx, int pvtxoffset, int &amp;pdimgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a145365577efce39962cbf87e902fe61d</anchor>
      <arglist>(std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt; &amp;simplex, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;params, int &amp;nofp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a7a6df3359736b63d44e9b14d046fd67f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofsimplex</name>
      <anchorfile>a03378.html</anchorfile>
      <anchor>a4b8b4a59fa2869a0495f0e9579492914</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::DataArrayWriter</name>
    <filename>a03746.html</filename>
    <member kind="function">
      <type></type>
      <name>DataArrayWriter</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a305cf8e4c5161e22709982e8ff1bc3ff</anchor>
      <arglist>(Precision _prec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>abf42e76c4b1f7c214239f3fb745eb297</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DataArrayWriter</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>ad81eacbcf2466eabe6d0e52de4d199ce</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::DataArrayWriterFactory</name>
    <filename>a03774.html</filename>
    <member kind="function">
      <type></type>
      <name>DataArrayWriterFactory</name>
      <anchorfile>a03774.html</anchorfile>
      <anchor>aa7718fac4cb8560f2bdb208b5f9f398b</anchor>
      <arglist>(OutputType type_, std::ostream &amp;stream_)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginAppended</name>
      <anchorfile>a03774.html</anchorfile>
      <anchor>a2bd8db9e8cf963f8d7bc5a3953332c24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>appendedEncoding</name>
      <anchorfile>a03774.html</anchorfile>
      <anchor>ae4f593583797da807474db85f3dd057d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DataArrayWriter *</type>
      <name>make</name>
      <anchorfile>a03774.html</anchorfile>
      <anchor>a966c473c45839d2383934e23a30d81e3</anchor>
      <arglist>(const std::string &amp;name, unsigned ncomps, unsigned nitems, const Indent &amp;indent, Precision prec)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridPtr::DataHandle</name>
    <filename>a03614.html</filename>
    <base>CommDataHandleIF&lt; DataHandle, char &gt;</base>
    <member kind="typedef">
      <type>char</type>
      <name>DataType</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aea4fc1f0be98043840533addbbb5edc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataHandle</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>a732b66216167b210092a6cbc489c4f56</anchor>
      <arglist>(GridPtr &amp;gridPtr)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataHandle</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>a53ecbe7c55fe5454817f19497e8ba549</anchor>
      <arglist>(const DataHandle &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DataHandle</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>abbbdc3347bfa3ff236c64103d87d195b</anchor>
      <arglist>(DataHandle &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DataHandle</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>a5cb897f8fdc408538e31e51fd2ea050e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CommDataHandleIF&lt; DataHandle, char &gt; &amp;</type>
      <name>interface</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>af818208c627d9a8cb00da695d9e7efab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>ad16285132d1de5f91ab3193d05fa8523</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>fixedSize</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>ab0a93b4837bbe603af7fc00724a9d0a5</anchor>
      <arglist>(int, int) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>abab0233bb5cad877ead7836f4500e533</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>a835facb8b6dc9d4e111c745d047454f5</anchor>
      <arglist>(Buffer &amp;buffer, const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a03614.html</anchorfile>
      <anchor>ac595342dd70490cf3a167456f36111a0</anchor>
      <arglist>(Buffer &amp;buffer, const Entity &amp;entity, std::size_t n)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3f02719aaca782403c32eb7557af9be8</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>overloaded_deprecated_fixedsize</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>af966f235c5f9df42ca00fe1c93bf1b93</anchor>
      <arglist>(int dim, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>aa79e2bc1b9d3bad04f551bd2635b87df</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gather</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>ad0b237a39af278c0721501aaf7cc7a1c</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>scatter</name>
      <anchorfile>a02586.html</anchorfile>
      <anchor>a3824c1b0e900afde3a6bb922bdb76ba4</anchor>
      <arglist>(MessageBufferImp &amp;buff, const EntityType &amp;e, size_t n)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DefaultCoordFunction</name>
    <filename>a03138.html</filename>
    <templarg></templarg>
    <base>IdenticalCoordFunction&lt; HostGrid::ctype, HostGrid::dimensionworld &gt;</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ae7fd118e1582243e059596f00633fbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>a39d81849cd57edf1e2313e8b4c4d1f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>RangeVector</type>
      <name>operator()</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ab1617063a05a7680e4046082d293dc6e</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DefaultLeafGridView</name>
    <filename>a02606.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLeafGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a3b6a419aa10122ff4d4f2a8e32cb91aaa1a54e8c2ac49f80feaaf1e90fdb1164c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultLeafGridViewTraits&lt; GridImp &gt;</type>
      <name>Traits</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a19326daee1cdbc2c8ec17817e93ee4e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a7596321b66e25025105669fc292288a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>aaf4da16cb3371daf49840a4ed0e3e605</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ab2420a6972d1193ee6c51df2695df130</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a9799188845137942c1d2454150a76839</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ad6dbb03ec0bc023e47c383b024b39777</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a3b6a419aa10122ff4d4f2a8e32cb91aaa1a54e8c2ac49f80feaaf1e90fdb1164c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultLeafGridView</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>acc7e52b9fa3a01ee3f1e1a836ca835d7</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>adc95b74cb080787b2f40d87fc0d99b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a4ae44d7112aa5702ce99da0fa598fa30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ae04ba2bf7fa4fd602032d8216f4641c7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a760137a7cfb7040d43583b8d93d447c8</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a4b8af6c102bd13089bc05f6b15520df9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ab3c149cff6ec8b6d78f57b26c16bc1ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>af13dae95ff7110c146d040702198c8dd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a7ff52bd71aabb35bc606724b79fa7a5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a5d17bbe1965c44c0ca3b48762ad0a48f</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a693bdc1168f2fe1b50bf0547c449c4dd</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a50a868c962cd2db117c49cb017c53c84</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ad57204bcf082f844e116cf59d40e3185</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>ade2378ead05a7424335bb8775191f6f3</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a02606.html</anchorfile>
      <anchor>a090e18598cfd10179ae6aa95ddc15e39</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafGridViewTraits</name>
    <filename>a02626.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLeafGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a185af651099b3428c18b1f87ed45f8f4a5f36404b733ee4a0a1a7b2af1bd20f46</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultLeafGridView&lt; GridImp &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a596bfd78bd9503d631c127bc51b20cad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a05b67e0170ecb2be12197518714463b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a9582818aa4edd7956e192506b75851e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIntersection</type>
      <name>Intersection</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>ad25aec2ab1fc3296797394b525156b1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LeafIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>ad0bd99b3ea3bbef91bc4562c0a8b8078</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a6e637ce93fdc0a3c1ee216579673836f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02626.html</anchorfile>
      <anchor>a185af651099b3428c18b1f87ed45f8f4a5f36404b733ee4a0a1a7b2af1bd20f46</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DefaultLevelGridView</name>
    <filename>a02602.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLevelGridView::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a716735b32aa5d011963de2d2dde9ec07a1ad6788bb4a629458ef6f78238d6a87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultLevelGridViewTraits&lt; GridImp &gt;</type>
      <name>Traits</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a32d1b80e21ce023740e6bd616c3cf6da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>afaab9419c0f22b771d1a4801651b48d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a23d4cce4f40ede9f98258f42676dfcdb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>af25f36b61fbfce47b02d05595158518c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>aabd57c6c00d64c7acb0fa93071544d7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ab76c1359f64da713205a10ac7a6e0ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a716735b32aa5d011963de2d2dde9ec07a1ad6788bb4a629458ef6f78238d6a87e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DefaultLevelGridView</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ad58217a8c762a1ba0a40f2da510b6e57</anchor>
      <arglist>(const Grid &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a54107e22626ddf9b05705dbcc6e6ae6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a84699a5188af29c7cf4395341497b1b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ab29a35613d389f3d31e775c28d6d8792</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a18f2819744217f52bbe4c6dc43fd41ee</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ac5068193378cd07b0e3b1bd2600cc4b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a9d2ba1fedbacc3ff96f891fd4316da96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a4c6c8141ba6c60210b7651eed02681ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a8ea66a49dfd44b9a2b6c9609f0f7ae6e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ad16d1ad00f86d8c1345c0988cd0db614</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a265f556baed08c36bbb7b6a30dd32c09</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a62f1941233b74f78c365e87b3fb1ea9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>ac401ae5f991f28e2f0413e516b38c0b4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>af746dc5a4d19dce5885ae7d4b6241afe</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a02602.html</anchorfile>
      <anchor>a6f5f28875b3b990f19130dd2d5d225c1</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelGridViewTraits</name>
    <filename>a02610.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::DefaultLevelGridViewTraits::Codim</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>a558a5558a2b8f6c00cf5f5587539991bacc7545853110b2d09e19958c34829481</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DefaultLevelGridView&lt; GridImp &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>af37acb3b09a72f54f912bc7dc40408a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>aac8283d499323700eb622d7c9b1000dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>a4afa424cc67a865b954286614b08dc29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersection</type>
      <name>Intersection</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>a1569fc2b3e0b277ed2ae97f07aa32e30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::LevelIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>ae81ba1db4eb506aef9fcfbe1604c6153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid ::Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>a54f191b5941ec4d0097074798ca73d1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a02610.html</anchorfile>
      <anchor>a558a5558a2b8f6c00cf5f5587539991bacc7545853110b2d09e19958c34829481</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridView::DeprecatedMethodEmptyFuture</name>
    <filename>a02770.html</filename>
    <member kind="function">
      <type>void</type>
      <name>printMessage</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga4a04fd36c9c3c266208cfc4f33a994e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gab0bfe5d07834bb795dc995af5f1a0970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf16802326f0f3e83fe23902d986db4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6bee0be62a2fbce3e89cc27d0f3a82a0</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFBoundaryParameter</name>
    <filename>a03626.html</filename>
    <member kind="typedef">
      <type>std::string</type>
      <name>type</name>
      <anchorfile>a03626.html</anchorfile>
      <anchor>afa9bc1f519c309d951d1955cbce7ea7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const type &amp;</type>
      <name>defaultValue</name>
      <anchorfile>a03626.html</anchorfile>
      <anchor>a712fa41606a197aacc2bf128aef0e732</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static type</type>
      <name>convert</name>
      <anchorfile>a03626.html</anchorfile>
      <anchor>add07d4507352d388f882d26f40523340</anchor>
      <arglist>(const std::string &amp;parameter)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char</type>
      <name>delimiter</name>
      <anchorfile>a03626.html</anchorfile>
      <anchor>a550701eebf6060e8012331b55aa15a6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DGFCoordFunction</name>
    <filename>a03514.html</filename>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <base>AnalyticalCoordFunction&lt; double, dimD, dimR, DGFCoordFunction&lt; dimD, dimR &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a03514.html</anchorfile>
      <anchor>a79970c86718dcd312a43d89761134223</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a03514.html</anchorfile>
      <anchor>afd70826c37eaac3fbefb3913b8e2aa95</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dgf::ProjectionBlock::Expression</type>
      <name>Expression</name>
      <anchorfile>a03514.html</anchorfile>
      <anchor>ab73e43f943b9da4f478448b5fdd7adeb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFCoordFunction</name>
      <anchorfile>a03514.html</anchorfile>
      <anchor>acdbde602b104099d9a6f248b4b221b59</anchor>
      <arglist>(const Expression *expression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a03514.html</anchorfile>
      <anchor>aa7676cca3b5b4e676e726608e1c9c8e1</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFCoordFunctionFactory</name>
    <filename>a03518.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>discrete</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, false &gt;</name>
    <filename>a03522.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static CoordFunction *</type>
      <name>create</name>
      <anchorfile>a03522.html</anchorfile>
      <anchor>acfea00a1640b66785f649b048e77b60a</anchor>
      <arglist>(std::istream &amp;, const HostGrid &amp;)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, true &gt;</name>
    <filename>a03526.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static CoordFunction *</type>
      <name>create</name>
      <anchorfile>a03526.html</anchorfile>
      <anchor>a752a73590ed2141f42dec5d94c43e920</anchor>
      <arglist>(std::istream &amp;, const HostGrid &amp;hostGrid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFCoordFunctionFactory&lt; HostGrid, DGFCoordFunction&lt; dimD, dimR &gt;, false &gt;</name>
    <filename>a03530.html</filename>
    <templarg></templarg>
    <templarg>dimD</templarg>
    <templarg>dimR</templarg>
    <member kind="typedef">
      <type>DGFCoordFunction&lt; dimD, dimR &gt;</type>
      <name>CoordFunction</name>
      <anchorfile>a03530.html</anchorfile>
      <anchor>a7ae34642a6478f9a22ffa0919c106356</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CoordFunction *</type>
      <name>create</name>
      <anchorfile>a03530.html</anchorfile>
      <anchor>a9a782dffaaebcb0bf73cb4e7fd7bcf6b</anchor>
      <arglist>(std::istream &amp;input, const HostGrid &amp;hostGrid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFEntityKey</name>
    <filename>a03598.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>adf300044edbd0bf1b8819e2c031e2aae</anchor>
      <arglist>(const std ::vector&lt; A &gt; &amp;key, bool setOrigKey=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>abdb2568a260e27ed18fe88af09fe0d05</anchor>
      <arglist>(const std::vector&lt; A &gt; &amp;key, int N, int offset, bool setOrigKey=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>aeba3ff0f76a29d0b350c43c54591213e</anchor>
      <arglist>(const DGFEntityKey&lt; A &gt; &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DGFEntityKey&lt; A &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a638d9486725791f6d5cdf736151380fb</anchor>
      <arglist>(const DGFEntityKey&lt; A &gt; &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>const A &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>af32566a09e2c2f85f5bb3070fcca22a6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a220bb297c9006fca25df6da83e248292</anchor>
      <arglist>(const DGFEntityKey&lt; A &gt; &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>aa21b1d9095852f3bb3406b0ce4815b31</anchor>
      <arglist>(int base, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;vtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>ac0e616694282bf7677c8295fc77c4ccd</anchor>
      <arglist>(std ::ostream &amp;out=std ::cerr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>origKeySet</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a89b314f7907cfe19a5b203a0000bbffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const A &amp;</type>
      <name>origKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>ab24de1aea858c105d82ced141566998e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a97489b94b57ec1c9382b9b2a5d1e71e2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGFEntityKey&lt; unsigned int &gt;</name>
    <filename>a03598.html</filename>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>adf300044edbd0bf1b8819e2c031e2aae</anchor>
      <arglist>(const std ::vector&lt; unsigned int &gt; &amp;key, bool setOrigKey=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>abdb2568a260e27ed18fe88af09fe0d05</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;key, int N, int offset, bool setOrigKey=true)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFEntityKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>aeba3ff0f76a29d0b350c43c54591213e</anchor>
      <arglist>(const DGFEntityKey&lt; unsigned int &gt; &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>DGFEntityKey&lt; unsigned int &gt; &amp;</type>
      <name>operator=</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a638d9486725791f6d5cdf736151380fb</anchor>
      <arglist>(const DGFEntityKey&lt; unsigned int &gt; &amp;k)</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>operator[]</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>af32566a09e2c2f85f5bb3070fcca22a6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a220bb297c9006fca25df6da83e248292</anchor>
      <arglist>(const DGFEntityKey&lt; unsigned int &gt; &amp;k) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>orientation</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>aa21b1d9095852f3bb3406b0ce4815b31</anchor>
      <arglist>(int base, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;vtx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>ac0e616694282bf7677c8295fc77c4ccd</anchor>
      <arglist>(std ::ostream &amp;out=std ::cerr) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>origKeySet</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a89b314f7907cfe19a5b203a0000bbffa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const unsigned int &amp;</type>
      <name>origKey</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>ab24de1aea858c105d82ced141566998e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03598.html</anchorfile>
      <anchor>a97489b94b57ec1c9382b9b2a5d1e71e2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DGFException</name>
    <filename>a03510.html</filename>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory</name>
    <filename>a01770.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aacdf8a1ced5c7f3a475794c56d1b51a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a4ec0522ca63de361e7cb089c4d52156b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a82521e219bb9060247f79ff3ac4f99dd</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aae7b618e6f091329dece01ede72fac55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a63f0041d74d73cc87923875a6d0de6ff</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a2cd96b5f1ddc07be7a163914e023dd7d</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a23f9666928f5789ae17b03a967e8db59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a4efa75581ee896286ca1b9e95a737254</anchor>
      <arglist>(const Entity &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aaac673b1ec524154b3f639185cc039d8</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a9a1853475dc0fd364864c60826f601e9</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>ae2eaaf12987d004a98b0c5f07a379dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a2900cb153133fdd7bdfbd0cb026b9bdc</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aaffd9982016fe3b91b0ef27ad435efdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01846.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a5a2f5535f8827c15eb3cf740627b511b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a20f067452327c291f9cd7b60178c5b73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a3894425c26fb1bfbc80f193b13c22c24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>af3a47802293b24d435fa20e440b3ec1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridFactory&lt; Grid &gt;</type>
      <name>GridFactory</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>aa7cfd432066fa1559d6d4c109e8f16ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a2d3636f5cea73af6abd61d9aab6ba919</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a233281e55842c1d5868f20c5d505f29c</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a0cdf4786ce269edfb7cbe6e4d3612cbe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>ab71a095617f3babf584a4f61ea165449</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>af1867e0a0c7481aa1e0b61b73fbbe354</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a3137ed6c67724e01cab1e0618d7f6511</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a758f6039261b6f4811914187fb5e969e</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a865ffc2b277fd302e1581f805db9fe4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a6686b2f7927acd1e5c22f1ef6e65c865</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>a2eb6cd49bb89c2f197527f63899ae16e</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01846.html</anchorfile>
      <anchor>ab02fc06f24c0066053249dbd5ca9105d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a03534.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a88930b35918b73068a10aecfea02a459</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicator</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a073ba489f77d1fbb0d278ea7e997679a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a541ad0a9afc0f204a76844f5ef8ebc37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a04819486a329f425f728aec950eddace</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DGFCoordFunctionFactory&lt; HostGrid, CoordFunction &gt;</type>
      <name>CoordFunctionFactory</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a82d8a90e72ab551c815aa5a69d62e8b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a254fb69abb8db1445f8abfb5fcae1187</anchor>
      <arglist>(std::istream &amp;input, MPICommunicator comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>acc81d8d912b3e1c5ff7844dd6999a644</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicator comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>af9d077023b220257ebca82c0f0e2f9ac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>adbd64ab1761a06e0484ba227feae23e1</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a0617fb5a78d54d24b40bf7b407e662f5</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a903b88b34a8bd6069ef697e3dd8ddc39</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>afdaf104cb8fcfa880b0cc1c16c9a998e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a568c9d53e282e2613eaa22636d6bc418</anchor>
      <arglist>(const Dune::Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>a275da9632dc55ffdf51a6d2134c28d37</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03534.html</anchorfile>
      <anchor>af632930448e4e21bfda0ff8e6d4f55e4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DGFGridFactory&lt; HostGrid &gt;</name>
    <filename>a01770.html</filename>
    <member kind="typedef">
      <type>HostGrid</type>
      <name>Grid</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aacdf8a1ced5c7f3a475794c56d1b51a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a4ec0522ca63de361e7cb089c4d52156b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a82521e219bb9060247f79ff3ac4f99dd</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aae7b618e6f091329dece01ede72fac55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a63f0041d74d73cc87923875a6d0de6ff</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a2cd96b5f1ddc07be7a163914e023dd7d</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a23f9666928f5789ae17b03a967e8db59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a4efa75581ee896286ca1b9e95a737254</anchor>
      <arglist>(const Entity &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aaac673b1ec524154b3f639185cc039d8</anchor>
      <arglist>(const Element &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a9a1853475dc0fd364864c60826f601e9</anchor>
      <arglist>(const Vertex &amp;vertex)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>ae2eaaf12987d004a98b0c5f07a379dfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>a2900cb153133fdd7bdfbd0cb026b9bdc</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01770.html</anchorfile>
      <anchor>aaffd9982016fe3b91b0ef27ad435efdb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03546.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IdentityGrid&lt; HostGrid &gt;</type>
      <name>Grid</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a530e9d434135e932be81c2907b5fa830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicator</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>ae496aaf3595c89bc304701389d14152a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>afc571df96c95fc7f35c21d58340599c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; dimension &gt;::Entity</type>
      <name>Vertex</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a136fa98046702af1b972b52ce4b2f674</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>abaeb0956036479a355946ba883c78636</anchor>
      <arglist>(std::istream &amp;input, MPICommunicator comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>ab66e123e9ebb7d205e296414999acf80</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicator comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a5666f99e7afd2d69540ea7e95656870a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>affda7c42753013edd849f4a14e81bcf3</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>ac6be090fc0228089767efdcbc2284ad2</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a9eacefa06d9075ac3a4d841df5892708</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a58c96f0cde441219f7a01bcdc95c11d3</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03546.html</anchorfile>
      <anchor>a435cc661f17411f0f7b7dd3e01fba6be</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; OneDGrid &gt;</name>
    <filename>a03558.html</filename>
    <member kind="typedef">
      <type>OneDGrid</type>
      <name>Grid</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>a140dfbb16338438531a7793d42c521a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>a533bbb5aa92a828636d513a118168c01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ae3908705e3fdb6774d9fd619a5d2e906</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>adc65c01368f86d442e2abdd48cb57804</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ad663dd0c982d5511c111e80baa8056cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>af07313a6c396716c56803dcc45d1e8b6</anchor>
      <arglist>(const Dune::Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ab3676335a4c127b97ebf8a5576d77bbf</anchor>
      <arglist>(const Dune::Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ad859752fc6861566a8b033707782a7d1</anchor>
      <arglist>(const Entity &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ae8c5690e600e321f2e91cdaddbee81a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>a0d8efa1f3a910dee6910d650326a7065</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>a4b4c22d696ff44d8d6a96909fcd346a1</anchor>
      <arglist>([[maybe_unused]] const typename Grid::Codim&lt; codim &gt;::Entity &amp;element)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ad57422a4ae4c57ba149bf31939c90399</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>a33091d799b2e06d58d2a284db163f314</anchor>
      <arglist>([[maybe_unused]] const Dune::Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03558.html</anchorfile>
      <anchor>ad641dd9810a85b5998d8ddf7bce0115e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a03582.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt;</type>
      <name>Grid</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>ad6d2bdaea782009dcf36034b96a751a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a786a6bc5b24a2e57ec4475f6502155f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a0c2d97aa5e408409fc784bf0afa66452</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a15b994327a2cd8a6d641ea3b57468144</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DGFGridFactory</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a9090a129ca259a55bf7af4ef30892928</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>ab330069d5fb10d46f5774a70fc951197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a2f0263e60633efb4641d69bfa7d2da00</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>af81fa04e74910bff0281c483ee4d8e6a</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a363418ae9a27544df7331317545c6928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>a90c2db32e78149d68777656e3c44a23d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>ab313705e84ad38fafc84a5409a4b0509</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>ad987e97719b3feea3501315df375854b</anchor>
      <arglist>(const Entity &amp;)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03582.html</anchorfile>
      <anchor>ae107ab9b7bc06cb72e9c12a5b84f034f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a03590.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt;</type>
      <name>Grid</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a3bd7ef40121f68a1346f41ecd2531e68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>ab2eebb5769458c970aef599339328c42</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>aec11420b15985901de338971bdf657ae</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFGridFactory</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a057078efd0233dae9f0ba8597e7e560d</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DGFGridFactory</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>af8d34e766c40cce38d319b4cc2e204bf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Grid *</type>
      <name>grid</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a2b413941e5021dc69daab93feebc4530</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasInserted</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a5a5755c6a755c9c442eedb348a5d3b62</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a39e3ff13dfcf5ce2bd422a08a53b33a7</anchor>
      <arglist>(const Intersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numParameters</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>afa0734eaed2ea41455a8345789bced60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haveBoundaryParameters</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>aa892ab41bdbff377c2c6acab9bd1bd15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>boundaryParameter</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>ac9eb7a7bacf1f8a7dc7a548cb9089100</anchor>
      <arglist>(const Intersection&lt; GG, II &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>parameter</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a9362e1e72af1ac0287bb35597bc067dd</anchor>
      <arglist>([[maybe_unused]] const Entity &amp;entity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03590.html</anchorfile>
      <anchor>a67c2cb42eeb654b95191a12a095b9e21</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo</name>
    <filename>a03566.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03566.html</anchorfile>
      <anchor>adb294d220494f1e9e818838eb10a5b9d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03566.html</anchorfile>
      <anchor>a61eeb96dd06a60e149bcd3dbd21da879</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01850.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a01850.html</anchorfile>
      <anchor>a655cb46fc33533710467d83a39c8cb91</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a01850.html</anchorfile>
      <anchor>a74112f9e9d3978c3dcc19b3a83379528</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a03538.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03538.html</anchorfile>
      <anchor>adf76ab5023ea253552a9d6e34afb13ca</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03538.html</anchorfile>
      <anchor>a0586d7f1849db533e19f34e7e3ecd243</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03550.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03550.html</anchorfile>
      <anchor>a46ba07950b4b721f3f227b61b2c7a55c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03550.html</anchorfile>
      <anchor>ae1b6502b054bca56b77ba017445d02fc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; OneDGrid &gt;</name>
    <filename>a03554.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03554.html</anchorfile>
      <anchor>ad0757ecf6b0a8b4fb0844a0c747414bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03554.html</anchorfile>
      <anchor>a02bbf767c703ff14f7145700b5c5d276</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a03586.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03586.html</anchorfile>
      <anchor>a15faf0067b23be5df494fab7c4e47b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03586.html</anchorfile>
      <anchor>a7d3282bb2b03345144113af6cd03b0e1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a03594.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>refineStepsForHalf</name>
      <anchorfile>a03594.html</anchorfile>
      <anchor>a79778111dac1259af681f9c4b797b60f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static double</type>
      <name>refineWeight</name>
      <anchorfile>a03594.html</anchorfile>
      <anchor>a3a3fe325372c75aabf45156b005c2da9</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DGFPrintInfo</name>
    <filename>a03562.html</filename>
    <member kind="function">
      <type></type>
      <name>DGFPrintInfo</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a41162a58d3bcd320489e9d6dc6d67bb6</anchor>
      <arglist>(const std ::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finish</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>ab72ef73d2c3b7b96b5af0e11c63e91b0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>block</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a5483cf7c9209d4b74d6e5a4b9e491b4b</anchor>
      <arglist>(const Block &amp;printBlock)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a73725fc139728f08dcdf24e05be79bd7</anchor>
      <arglist>(const std ::string &amp;message)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step1</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a98cd486808eec2ec3bec6545ebd22c88</anchor>
      <arglist>(int dimw, int nofvtx, int nofel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>step2</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a3499a8e44f9a138ff17a44cdc035b484</anchor>
      <arglist>(int bndseg, int totalbndseg, int bnddomain, int defsegs, int remaining)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>cube2simplex</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a491bf6aa66ec7b0b8cc816b00afac816</anchor>
      <arglist>(DuneGridFormatParser::element_t el)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>automatic</name>
      <anchorfile>a03562.html</anchorfile>
      <anchor>a29229e64a940bd815282ce71cf1c1638</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DGFWriter</name>
    <filename>a03574.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV</type>
      <name>GridView</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a814c282ea4de383110d1fb060c3c3151</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridView::Grid</type>
      <name>Grid</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a90242e0f8f0e3e553ee95f598a2365cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DGFWriter</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a21e3098a425d5a4ab205821a9f11071c</anchor>
      <arglist>(const GridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a4c56e613f5366d79c27f5eb30c42a3d1</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;newElemOrder, BoundaryData &amp;&amp;boundaryData, const std::stringstream &amp;addParams=std::stringstream()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>ab3975f0c46fa6b3b4561731a63267bc3</anchor>
      <arglist>(std::ostream &amp;gridout, BoundaryData &amp;&amp;boundaryData, const std::stringstream &amp;addParams=std::stringstream()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a3c45d965307fe286a9adae3c603e2e26</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;newElemOrder, const std::stringstream &amp;addParams=std::stringstream()) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a22019f13f007f4f9f4eb3977c7766d8e</anchor>
      <arglist>(std::ostream &amp;gridout, const std::stringstream &amp;addParams=std::stringstream()) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>write</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a22cc92cd7672d24837fa1ef51df61fc4</anchor>
      <arglist>(const std::string &amp;fileName, Args &amp;&amp;... args) const -&gt; std::void_t&lt; decltype(this-&gt;write(std::declval&lt; std::ostream &amp; &gt;(), std::declval&lt; Args &gt;()...)) &gt;</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimGrid</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a03d3c9e2011ce4adc65602042e31dc61</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>elementsSeeds</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>aeebcd2ad2f9337c0965bd02609f651ae</anchor>
      <arglist>(const std::vector&lt; Index &gt; &amp;newElemOrder) const -&gt; std::vector&lt; ElementSeed &gt;</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeHeader</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>ae207a7a784ce1d73adf7add51a9a171d</anchor>
      <arglist>(std::ostream &amp;gridout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeFooter</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a8f966630e5590816d260a7c8cc2c88f1</anchor>
      <arglist>(std::ostream &amp;gridout) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>writeVertices</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a91e045450ebef18855557179860a928f</anchor>
      <arglist>(std::ostream &amp;gridout) const -&gt; std::vector&lt; Index &gt;</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeElement</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a7b9cab48142895117b4b21d13577739b</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices, const Element &amp;element, const GeometryType &amp;elementType) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeSimplices</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>ad2cfd1644b8e3b21ceead12361875298</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeSimplices</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a888f59a88d1efbddc8ccc8d6f64c3f12</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices, const std::vector&lt; ElementSeed &gt; &amp;elementSeeds) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCubes</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>ab6382af25d9fc3c70915c16d6a00cdd0</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCubes</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a1e17c71400bb43e10a77dd9552bea7a3</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices, const std::vector&lt; ElementSeed &gt; &amp;elementSeeds) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeElements</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>aa475c98c97d6312ba28ae72402f6b4a1</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices, const Args &amp;... args) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeBoundaries</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a259a85b2a33dbec4bcb0726a28364913</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices, BoundaryData &amp;&amp;boundaryData) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeBoundaries</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>aa75e04c2d07c550062006d278272b245</anchor>
      <arglist>(std::ostream &amp;gridout, const std::vector&lt; Index &gt; &amp;dgfIndices) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>boundaryId</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a2dda71c2e24926b19ad94c26de71e14e</anchor>
      <arglist>(const Intersection &amp;i)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridView</type>
      <name>gridView_</name>
      <anchorfile>a03574.html</anchorfile>
      <anchor>a74af0a19066c5b82bc0ac101317f849f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::DifferenceExpression</name>
    <filename>a03470.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DifferenceExpression</name>
      <anchorfile>a03470.html</anchorfile>
      <anchor>ad83239605a9fc096fa2f528989657cff</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;exprA, const ProjectionBlock::ExpressionPointer &amp;exprB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03470.html</anchorfile>
      <anchor>a01ff1a196df3dbe020daff02f46d5710</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::DimBlock</name>
    <filename>a03382.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>DimBlock</name>
      <anchorfile>a03382.html</anchorfile>
      <anchor>a3b63945eb7304c35caabef01dbd19841</anchor>
      <arglist>(std ::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dim</name>
      <anchorfile>a03382.html</anchorfile>
      <anchor>a94c3a88085eb8bf5fdfb235e5cfb3fd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimworld</name>
      <anchorfile>a03382.html</anchorfile>
      <anchor>a1ab272a17dc53eb5dc8872599079ea05</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03382.html</anchorfile>
      <anchor>a7f5c9e384d5481d010df618ac10e6dc3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const char *</type>
      <name>ID</name>
      <anchorfile>a03382.html</anchorfile>
      <anchor>a2822c463b0125b62da5dffe0c2195cd3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiscreteCoordFunction</name>
    <filename>a02986.html</filename>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <base>Dune::DiscreteCoordFunctionInterface</base>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a12d3cba8f5c46aaef1661e113e40eb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>adc88f0f384f03aa83e2b6320f07fa06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>ad9ace574a632cac3704aa95ae655929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a4096e481568da3ab74388140257e642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a1f9c71d96a45516c5ff2e524c9c4cd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a508904f8d7381a26df6dd6b32acef490</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>adecbffd11d40b4fd5d0f9b7cb25aea73</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>aab3efde5867deb660b88a565df5c61c1</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>accc6257b33e430e403830ad0ed3d5b01</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a966635f5ebea07e1ef23925d7961f7fb</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a563491c27acb3f93382607bf2b70b641</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a36f07506d2f96a2186df93922e8d19b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a9baf248acca0197dc7381d9c14e7fd81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a42b5617749de90ba40802b7a5e3f431f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DiscreteCoordFunction&lt; CoordFunction::ctype, CoordFunction::dimRange, CachedCoordFunction&lt; HostGrid, CoordFunction &gt; &gt;</name>
    <filename>a02986.html</filename>
    <base>Dune::DiscreteCoordFunctionInterface</base>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a12d3cba8f5c46aaef1661e113e40eb14</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>adc88f0f384f03aa83e2b6320f07fa06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>ad9ace574a632cac3704aa95ae655929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a4096e481568da3ab74388140257e642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a1f9c71d96a45516c5ff2e524c9c4cd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a508904f8d7381a26df6dd6b32acef490</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>adecbffd11d40b4fd5d0f9b7cb25aea73</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>aab3efde5867deb660b88a565df5c61c1</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>~DiscreteCoordFunction</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>accc6257b33e430e403830ad0ed3d5b01</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a966635f5ebea07e1ef23925d7961f7fb</anchor>
      <arglist>(const This &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a563491c27acb3f93382607bf2b70b641</anchor>
      <arglist>(This &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02986.html</anchorfile>
      <anchor>a36f07506d2f96a2186df93922e8d19b1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a9baf248acca0197dc7381d9c14e7fd81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a42b5617749de90ba40802b7a5e3f431f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DiscreteCoordFunctionInterface</name>
    <filename>a02994.html</filename>
    <templarg></templarg>
    <templarg>dimR</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>adc88f0f384f03aa83e2b6320f07fa06c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>ad9ace574a632cac3704aa95ae655929f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a4096e481568da3ab74388140257e642a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimRange &gt;</type>
      <name>RangeVector</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>aaf12cc72c9292e76a696d797bb307682</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a2512a2659c82c783ac555589c1974be9</anchor>
      <arglist>(const HostEntity &amp;hostEntity, unsigned int corner, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>adapt</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a5018ae5a6aa8b961cfa2000fe06fc358</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a1f9c71d96a45516c5ff2e524c9c4cd84</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a9baf248acca0197dc7381d9c14e7fd81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02994.html</anchorfile>
      <anchor>a42b5617749de90ba40802b7a5e3f431f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::DofAccess</name>
    <filename>a01858.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>aff12d5a3e33f12f875046ca21f87ddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a24a4865da9e6b1e06b2aa22b827cbf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a78832be06e30f098839018ada7169eac</anchor>
      <arglist>(const DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab974b8564f9b2ab58db6dd8f1dd94862</anchor>
      <arglist>(const Element *element, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab3b3155eedec059066abcf810e3f2f21</anchor>
      <arglist>(const Element *element, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>af9bf778ce6465860f5beeb65a5770126</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a5aa91d34ecc9c3397f856fab7faea019</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a64a6a8adb53aff6c1475629c96638b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a2367fe847ca32e4eec9ced25382b1ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a4516f7b7b3a3210d23a7447674eb579c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofAccess&lt; dim, 0 &gt;</name>
    <filename>a01858.html</filename>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>aff12d5a3e33f12f875046ca21f87ddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a24a4865da9e6b1e06b2aa22b827cbf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a78832be06e30f098839018ada7169eac</anchor>
      <arglist>(const DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab974b8564f9b2ab58db6dd8f1dd94862</anchor>
      <arglist>(const Element *element, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab3b3155eedec059066abcf810e3f2f21</anchor>
      <arglist>(const Element *element, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>af9bf778ce6465860f5beeb65a5770126</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a5aa91d34ecc9c3397f856fab7faea019</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a64a6a8adb53aff6c1475629c96638b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a2367fe847ca32e4eec9ced25382b1ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a4516f7b7b3a3210d23a7447674eb579c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofAccess&lt; dim, dim &gt;</name>
    <filename>a01858.html</filename>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>aff12d5a3e33f12f875046ca21f87ddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a24a4865da9e6b1e06b2aa22b827cbf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a78832be06e30f098839018ada7169eac</anchor>
      <arglist>(const DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab974b8564f9b2ab58db6dd8f1dd94862</anchor>
      <arglist>(const Element *element, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab3b3155eedec059066abcf810e3f2f21</anchor>
      <arglist>(const Element *element, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>af9bf778ce6465860f5beeb65a5770126</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a5aa91d34ecc9c3397f856fab7faea019</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a64a6a8adb53aff6c1475629c96638b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a2367fe847ca32e4eec9ced25382b1ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a4516f7b7b3a3210d23a7447674eb579c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofAccess&lt; dimension, codimension &gt;</name>
    <filename>a01858.html</filename>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>aff12d5a3e33f12f875046ca21f87ddff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a24a4865da9e6b1e06b2aa22b827cbf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofAccess</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a78832be06e30f098839018ada7169eac</anchor>
      <arglist>(const DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab974b8564f9b2ab58db6dd8f1dd94862</anchor>
      <arglist>(const Element *element, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>ab3b3155eedec059066abcf810e3f2f21</anchor>
      <arglist>(const Element *element, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>af9bf778ce6465860f5beeb65a5770126</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a5aa91d34ecc9c3397f856fab7faea019</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, int subEntity) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a64a6a8adb53aff6c1475629c96638b76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a2367fe847ca32e4eec9ced25382b1ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a01858.html</anchorfile>
      <anchor>a4516f7b7b3a3210d23a7447674eb579c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::DofVectorPointer</name>
    <filename>a01898.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>DofVectorProvider::DofVector</type>
      <name>DofVector</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a05bd2e0b9fab5341f90f0231c196cf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a74edc3a9720bf5d0dee215aa5085e789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af8b19ab9cc3bea4f3786dcd05d905b96</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ab737a0c0f5786eead66adfb7e8c032a4</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a356cb147edc95891b8b6679d51895096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator DofVector *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a61fa1edf91710ba7990fd825aa1820bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Dof *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a985ec58bd8256ac15f60eecbf5564610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae7630253a5a9bd740c8dbdf40130b27b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae23d9a6fc307c2ad043825bed1fa89fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a2dbf772bab3c9300e01499eb1479c16f</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a251e0d5534b846ca769522f4bc59612c</anchor>
      <arglist>(const std::string &amp;filename, const MeshPointer&lt; dim &gt; &amp;meshPointer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa881427c226c88693731f5cd83ad78a1</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a3af801d63e84f7376a37a3279383adaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af666659a72551be487cbf400265115f4</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a1aaff1d41d94d25616bc57db8a7589f0</anchor>
      <arglist>(const Dof &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>AdaptationData *</type>
      <name>getAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a95d25f798e2a81eca7e29d5142134b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa727305fcaf82dcc9cd112729d436e7c</anchor>
      <arglist>(AdaptationData *adaptationData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupInterpolation</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a15f7ec1d0adbec2658d4da35e866bdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupRestriction</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a737cee783d924ca7fb8e4e3b5d5a49e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ac57315767de5ad2995abb96ebe7a22d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofVectorPointer&lt; GlobalVector &gt;</name>
    <filename>a01898.html</filename>
    <member kind="typedef">
      <type>DofVectorProvider::DofVector</type>
      <name>DofVector</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a05bd2e0b9fab5341f90f0231c196cf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a74edc3a9720bf5d0dee215aa5085e789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af8b19ab9cc3bea4f3786dcd05d905b96</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ab737a0c0f5786eead66adfb7e8c032a4</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a356cb147edc95891b8b6679d51895096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator DofVector *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a61fa1edf91710ba7990fd825aa1820bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator GlobalVector *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a985ec58bd8256ac15f60eecbf5564610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae7630253a5a9bd740c8dbdf40130b27b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae23d9a6fc307c2ad043825bed1fa89fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a2dbf772bab3c9300e01499eb1479c16f</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a251e0d5534b846ca769522f4bc59612c</anchor>
      <arglist>(const std::string &amp;filename, const MeshPointer&lt; dim &gt; &amp;meshPointer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa881427c226c88693731f5cd83ad78a1</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a3af801d63e84f7376a37a3279383adaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af666659a72551be487cbf400265115f4</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a1aaff1d41d94d25616bc57db8a7589f0</anchor>
      <arglist>(const GlobalVector &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>AdaptationData *</type>
      <name>getAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a95d25f798e2a81eca7e29d5142134b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa727305fcaf82dcc9cd112729d436e7c</anchor>
      <arglist>(AdaptationData *adaptationData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupInterpolation</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a15f7ec1d0adbec2658d4da35e866bdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupRestriction</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a737cee783d924ca7fb8e4e3b5d5a49e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ac57315767de5ad2995abb96ebe7a22d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofVectorPointer&lt; IndexType &gt;</name>
    <filename>a01898.html</filename>
    <member kind="typedef">
      <type>DofVectorProvider::DofVector</type>
      <name>DofVector</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a05bd2e0b9fab5341f90f0231c196cf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a74edc3a9720bf5d0dee215aa5085e789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af8b19ab9cc3bea4f3786dcd05d905b96</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ab737a0c0f5786eead66adfb7e8c032a4</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a356cb147edc95891b8b6679d51895096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator DofVector *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a61fa1edf91710ba7990fd825aa1820bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator IndexType *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a985ec58bd8256ac15f60eecbf5564610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae7630253a5a9bd740c8dbdf40130b27b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae23d9a6fc307c2ad043825bed1fa89fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a2dbf772bab3c9300e01499eb1479c16f</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a251e0d5534b846ca769522f4bc59612c</anchor>
      <arglist>(const std::string &amp;filename, const MeshPointer&lt; dim &gt; &amp;meshPointer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa881427c226c88693731f5cd83ad78a1</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a3af801d63e84f7376a37a3279383adaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af666659a72551be487cbf400265115f4</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a1aaff1d41d94d25616bc57db8a7589f0</anchor>
      <arglist>(const IndexType &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>AdaptationData *</type>
      <name>getAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a95d25f798e2a81eca7e29d5142134b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa727305fcaf82dcc9cd112729d436e7c</anchor>
      <arglist>(AdaptationData *adaptationData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupInterpolation</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a15f7ec1d0adbec2658d4da35e866bdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupRestriction</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a737cee783d924ca7fb8e4e3b5d5a49e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ac57315767de5ad2995abb96ebe7a22d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>DofVectorPointer&lt; Level &gt;</name>
    <filename>a01898.html</filename>
    <member kind="typedef">
      <type>DofVectorProvider::DofVector</type>
      <name>DofVector</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a05bd2e0b9fab5341f90f0231c196cf4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a74edc3a9720bf5d0dee215aa5085e789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af8b19ab9cc3bea4f3786dcd05d905b96</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DofVectorPointer</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ab737a0c0f5786eead66adfb7e8c032a4</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a356cb147edc95891b8b6679d51895096</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator DofVector *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a61fa1edf91710ba7990fd825aa1820bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Level *</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a985ec58bd8256ac15f60eecbf5564610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae7630253a5a9bd740c8dbdf40130b27b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ae23d9a6fc307c2ad043825bed1fa89fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a2dbf772bab3c9300e01499eb1479c16f</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a251e0d5534b846ca769522f4bc59612c</anchor>
      <arglist>(const std::string &amp;filename, const MeshPointer&lt; dim &gt; &amp;meshPointer)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa881427c226c88693731f5cd83ad78a1</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a3af801d63e84f7376a37a3279383adaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>af666659a72551be487cbf400265115f4</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a1aaff1d41d94d25616bc57db8a7589f0</anchor>
      <arglist>(const Level &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>AdaptationData *</type>
      <name>getAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a95d25f798e2a81eca7e29d5142134b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>aa727305fcaf82dcc9cd112729d436e7c</anchor>
      <arglist>(AdaptationData *adaptationData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupInterpolation</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a15f7ec1d0adbec2658d4da35e866bdad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setupRestriction</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>a737cee783d924ca7fb8e4e3b5d5a49e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsAdaptationData</name>
      <anchorfile>a01898.html</anchorfile>
      <anchor>ac57315767de5ad2995abb96ebe7a22d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider</name>
    <filename>a01874.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider&lt; GlobalVector &gt;</name>
    <filename>a01894.html</filename>
    <member kind="typedef">
      <type>ALBERTA DOF_REAL_D_VEC</type>
      <name>DofVector</name>
      <anchorfile>a01894.html</anchorfile>
      <anchor>a59d24e0b48afbff219eca28159ed1d10</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>get</name>
      <anchorfile>a01894.html</anchorfile>
      <anchor>a25a510d31f56c76abe6094028c842519</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a01894.html</anchorfile>
      <anchor>a8998165e3597e1e0f6056744d6c4c38e</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>read</name>
      <anchorfile>a01894.html</anchorfile>
      <anchor>a476546a289488c087615f5525541e208</anchor>
      <arglist>(const std::string &amp;filename, Mesh *mesh, DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a01894.html</anchorfile>
      <anchor>ac1c090c502ddf98b7f4a528c66571308</anchor>
      <arglist>(const DofVector *dofVector, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider&lt; int &gt;</name>
    <filename>a01878.html</filename>
    <member kind="typedef">
      <type>ALBERTA DOF_INT_VEC</type>
      <name>DofVector</name>
      <anchorfile>a01878.html</anchorfile>
      <anchor>a5ca6dfca3a174012c2b31c841e1e83d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>get</name>
      <anchorfile>a01878.html</anchorfile>
      <anchor>a7631ed16880e0e6d1f5bc16495ffdebc</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a01878.html</anchorfile>
      <anchor>aa31ac13fb2ef7d5116b8dfa650c6941b</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>read</name>
      <anchorfile>a01878.html</anchorfile>
      <anchor>ae591101cb99765ae196fe4283dd592bd</anchor>
      <arglist>(const std::string &amp;filename, Mesh *mesh, DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a01878.html</anchorfile>
      <anchor>a6cd61ae645d891490b6c15bc4b4f52b6</anchor>
      <arglist>(const DofVector *dofVector, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider&lt; Real &gt;</name>
    <filename>a01890.html</filename>
    <member kind="typedef">
      <type>ALBERTA DOF_REAL_VEC</type>
      <name>DofVector</name>
      <anchorfile>a01890.html</anchorfile>
      <anchor>ac76d627257673c1839315a1732c6c021</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>get</name>
      <anchorfile>a01890.html</anchorfile>
      <anchor>ac1d009a5198702a3674b6feaccbff0a1</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a01890.html</anchorfile>
      <anchor>a9d52e71f3fa23e7cd73430d03c62de1d</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>read</name>
      <anchorfile>a01890.html</anchorfile>
      <anchor>aecfda3904cf7c8a3e979e4114290234b</anchor>
      <arglist>(const std::string &amp;filename, Mesh *mesh, DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a01890.html</anchorfile>
      <anchor>aadb8f0db79e5ff51bab5e36f7f29afb7</anchor>
      <arglist>(const DofVector *dofVector, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider&lt; signed char &gt;</name>
    <filename>a01882.html</filename>
    <member kind="typedef">
      <type>ALBERTA DOF_SCHAR_VEC</type>
      <name>DofVector</name>
      <anchorfile>a01882.html</anchorfile>
      <anchor>abf4701f04e94e2ff37a85efe1da9baae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>get</name>
      <anchorfile>a01882.html</anchorfile>
      <anchor>ae813f46b3c4daa3d8ca236fbfb8f1398</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a01882.html</anchorfile>
      <anchor>a7ba7c5a5e8d811c634708ad82224ee9e</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>read</name>
      <anchorfile>a01882.html</anchorfile>
      <anchor>a32f7d972dd801a027b70b2eb7f55bc60</anchor>
      <arglist>(const std::string &amp;filename, Mesh *mesh, DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a01882.html</anchorfile>
      <anchor>a418153905051e0cb18cb538a44633488</anchor>
      <arglist>(const DofVector *dofVector, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::DofVectorProvider&lt; unsigned char &gt;</name>
    <filename>a01886.html</filename>
    <member kind="typedef">
      <type>ALBERTA DOF_UCHAR_VEC</type>
      <name>DofVector</name>
      <anchorfile>a01886.html</anchorfile>
      <anchor>a49f0e788aeab439a96c21100075f1308</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>get</name>
      <anchorfile>a01886.html</anchorfile>
      <anchor>a168e386fc10d86e97e762b030ebae551</anchor>
      <arglist>(const DofSpace *dofSpace, const std::string &amp;name)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>free</name>
      <anchorfile>a01886.html</anchorfile>
      <anchor>a2642f5b27521161123a47e81f9408fe9</anchor>
      <arglist>(DofVector *dofVector)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DofVector *</type>
      <name>read</name>
      <anchorfile>a01886.html</anchorfile>
      <anchor>a478783e43d5c33cf2ad9e5ce9baa13c3</anchor>
      <arglist>(const std::string &amp;filename, Mesh *mesh, DofSpace *dofSpace)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>write</name>
      <anchorfile>a01886.html</anchorfile>
      <anchor>abd7830e742b444698e2bf5dc972df834</anchor>
      <arglist>(const DofVector *dofVector, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Domain</name>
    <filename>a03366.html</filename>
    <member kind="typedef">
      <type>DGFBoundaryParameter::type</type>
      <name>BoundaryParameter</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a7a6f83b406f4fa9ec4556148700f322a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a07477182663770030e5dad752771ba15</anchor>
      <arglist>(std::vector&lt; double &gt; p1, std::vector&lt; double &gt; p2, int id, BoundaryParameter &amp;parameter)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>afde13d18f2e022d06495a4298fe11c15</anchor>
      <arglist>(std::vector&lt; double &gt; p1, std::vector&lt; double &gt; p2, DomainData &amp;data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Domain</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a56a48fa0af1da896e1748db4da6efd10</anchor>
      <arglist>(const Domain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Domain &amp;</type>
      <name>operator=</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a87e102d26ab34c1ec14c3e9a24e2000c</anchor>
      <arglist>(const Domain &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a603c3d3f7a274fbb5fbb41c7e09cbfb3</anchor>
      <arglist>(const Vector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>const DomainData &amp;</type>
      <name>data</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>aecae4040d3335b92f7e3fe319d50fc8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>a6002342497cad076716457e18b0911e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03366.html</anchorfile>
      <anchor>ac16653e7ff23cd8464438439794b8231</anchor>
      <arglist>(std ::ostream &amp;os, const Domain &amp;domain)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::DomainData</name>
    <filename>a03362.html</filename>
    <member kind="typedef">
      <type>DGFBoundaryParameter::type</type>
      <name>BoundaryParameter</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a5c0a6884ff54c10fed3f8ea8a9f7de4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainData</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a6b0cdf71b751cdecdae7a34e527e5540</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~DomainData</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a387f94c3e8420459392780c9cca00d34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DomainData</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>ae68411b73286d7d9d028ea1ad73ae3d4</anchor>
      <arglist>(int id, BoundaryParameter parameter, bool defaultData=false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>id</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a7c8e795c5e3d7d974b3302496eab866e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasParameter</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>add3ca73f240c11cbbb28a2ed1711438f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const BoundaryParameter &amp;</type>
      <name>parameter</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a6d8105dcbabe5f5a553f46578aa6d4e4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a12c247a20de294c51caeee476334337a</anchor>
      <arglist>(int id, BoundaryParameter parameter, bool defaultData=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDefault</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>aee08cdf02b57c16d192b7742dcffae17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03362.html</anchorfile>
      <anchor>a8ba606594cbc9d1739177f8c208c3a53</anchor>
      <arglist>(std ::ostream &amp;os, const DomainData &amp;ddata)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Dune2AlbertaNumbering</name>
    <filename>a02278.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02278.html</anchorfile>
      <anchor>a6cc26770a0e9d4a43b18ece18c8a6a7c</anchor>
      <arglist>(const int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Dune2AlbertaNumbering&lt; 3, 2 &gt;</name>
    <filename>a02282.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02282.html</anchorfile>
      <anchor>a273a3c89369d3f74289d645f7d46c965</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02282.html</anchorfile>
      <anchor>a0df29e5fd39d7adf3be3f176775a6e2b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::DuneBoundaryProjection</name>
    <filename>a02362.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>ad91d75760d6f3a027dadd0f2a84fb0c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; Real, dimWorld &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>aa02ad95d87739e6ead1a11e74335598b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::DuneBoundaryProjection&lt; dimWorld &gt;</type>
      <name>Projection</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>a110b0581faf03547bfa17c7857404cea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const Projection &gt;</type>
      <name>ProjectionPtr</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>a66716e143ed6da0cca78debeb5298f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuneBoundaryProjection</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>af53b81d8de95e41a69c00455095ee77c</anchor>
      <arglist>(const ProjectionPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>a3d2652c60a2b69120e1f3a76ce9c955a</anchor>
      <arglist>(const ElementInfo &amp;, const LocalVector, GlobalVector global) const</arglist>
    </member>
    <member kind="function">
      <type>const Projection &amp;</type>
      <name>projection</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>aef679e381f284fe33258e9dcf44af968</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02362.html</anchorfile>
      <anchor>a6db76baa668f52e4e4d2f0a735615bd5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DuneBoundaryProjection</name>
    <filename>a02474.html</filename>
    <templarg>dimworld</templarg>
    <base>BoundarySegmentBackupRestore&lt; DuneBoundaryProjection&lt; dimworld &gt; &gt;</base>
    <member kind="typedef">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>ThisType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a1240ce037f995c5ed5bbe0458640b044</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundarySegmentBackupRestore&lt; DuneBoundaryProjection&lt; dimworld &gt; &gt;</type>
      <name>BaseType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>acaef9ce982a7554333139a3b3d592027</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BaseType ::ObjectStreamType</type>
      <name>ObjectStreamType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ad60cc6247113babeee6a08075cd54dd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; double, dimworld &gt;</type>
      <name>CoordinateType</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>aa5dfff6108e6ac695d972a5e9fe56be9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~DuneBoundaryProjection</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a91bd64f068b15343c9f00a8bd5b42ba6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual CoordinateType</type>
      <name>operator()</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a5d9ef189a3460ea062ab96daed520fbe</anchor>
      <arglist>(const CoordinateType &amp;global) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>backup</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>ab228940e4a077aad8523a6ba1e299191</anchor>
      <arglist>([[maybe_unused]] ObjectStreamType &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a6d9a483589850a809c3b15b566475066</anchor>
      <arglist>(BufferImp &amp;buffer) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>toBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>aad2bfc023b531dd03481aa9ae7db922f</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a9ec397bb9f5aa4ef51fbd2a45fbb9a3f</anchor>
      <arglist>(BufferImp &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; ThisType &gt;</type>
      <name>restoreFromBuffer</name>
      <anchorfile>a02474.html</anchorfile>
      <anchor>a4d65a8d868ccde06ae2d921e1d1d0e04</anchor>
      <arglist>(MessageBufferIF&lt; BufferImp &gt; &amp;buffer)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DuneBoundaryProjection&lt; dimworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a4f71601287aa0a714c1b461dac1d47ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>Dune::ParameterizedObjectFactory&lt; std::unique_ptr&lt; BoundarySegment &gt; ObjectStreamType &amp;), int &gt;</type>
      <name>FactoryType</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a9dd5029cf1df298606a7e4e17f378a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::unique_ptr&lt; BoundarySegment &gt;</type>
      <name>restore</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>a1d347a431cce7dd13a050453b5f04b63</anchor>
      <arglist>(ObjectStreamType &amp;in)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static int</type>
      <name>registerFactory</name>
      <anchorfile>a02494.html</anchorfile>
      <anchor>acd33be44661200bd7a32cf39801c8a43</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::DuneGlobalBoundaryProjectionFactory</name>
    <filename>a02370.html</filename>
    <templarg>dim</templarg>
    <base>ProjectionFactory&lt; DuneBoundaryProjection&lt; dim &gt;, DuneGlobalBoundaryProjectionFactory&lt; dim &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::Projection</type>
      <name>Projection</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>aae51af09fa5369012b060f703db41320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>aefa019dfbc5521ceba49b383d4b082dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Projection::ProjectionPtr</type>
      <name>DuneProjectionPtr</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>a36ec170e92a3b517aa5cdcfea446c9b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuneGlobalBoundaryProjectionFactory</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>aedcb1ff0fa70d7da770ee98625f114cf</anchor>
      <arglist>(const DuneProjectionPtr &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>ada83c6b9b901a1926a8196d109d2468f</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>ae676a200ba98ce86697b31803ce0c93b</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>ac0065376beb54f770f6f5f01a7db1b83</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02370.html</anchorfile>
      <anchor>aecccd0898ae75a692dca53896b708eb7</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::DuneGridFormatParser</name>
    <filename>a03630.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>element_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5ad87b42c400b7536ee07df3541bf73f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cube</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a8359f3caedae25d2ca2d59216f3c5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>General</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a31ed920dca4a283899446acd1b9e293c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>orientation_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>counterclockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16faf1d492375835f8c5fcd6fae8e1d30fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>clockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16fa890d59f85a7a80ebbac57f8bf514e9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5ad87b42c400b7536ee07df3541bf73f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cube</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a8359f3caedae25d2ca2d59216f3c5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>General</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a31ed920dca4a283899446acd1b9e293c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>counterclockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16faf1d492375835f8c5fcd6fae8e1d30fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>clockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16fa890d59f85a7a80ebbac57f8bf514e9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>DuneGridFormatParser</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5a5fcc3fe12c7e32a0b317e4bad953c5</anchor>
      <arglist>(int rank, int size)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readDuneGrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acd51ecc4500f9548ccb68f4930796bea</anchor>
      <arglist>(std::istream &amp;input, int dimG, int dimW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTetgenPoly</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ac56dda2bdc0d6d1c49e4880bdfe531ca</anchor>
      <arglist>(const std::string &amp;, std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTetgenPoly</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5447f9a75d085356d66f1f3dcef4f86e</anchor>
      <arglist>(std::ostream &amp;out, const bool writeSegments=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDuneGridFormat</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a2f0bac9945c1aac80fef0375ac9bbb66</anchor>
      <arglist>(std::istream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDuneGridFormat</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>afeba398d7b3b0da4c843fc76f0bf76b5</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DGFBoundaryParameter::type</type>
      <name>BoundaryParameter</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a679b6cc7c104ae90d2d579b13858c3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int, BoundaryParameter &gt;</type>
      <name>BndParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a1c451f092166ebb2a2a8b921e491ec68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; DGFEntityKey&lt; unsigned int &gt;, BndParam &gt;</type>
      <name>facemap_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a8939d74670203cfcc17649a493ec13be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateBoundaries</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ae4009d91889c5d28600fc88519548cb3</anchor>
      <arglist>(std::istream &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateSimplexGrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a9129a7fe9380be73500eb0de72869d92</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readTetgenTriangle</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a2387a2bebf38b1efc62bba31d0a8252d</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCopies</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5af6b4659d9ea12f78ba2e91296bdf6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a307feb19c0d314110c50d71217338688</anchor>
      <arglist>(int use1, int use2, orientation_t orientation=counterclockwise)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRefinement</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a433a3e61c77be1640531204b1067eb29</anchor>
      <arglist>(int use1, int use2, int is1=-1, int is2=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>testTriang</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a7ac5b724dd30a24c1647121631cb9d02</anchor>
      <arglist>(int snr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getElParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>affb905e9906d963e3034f173bbe17083</anchor>
      <arglist>(int i, std::vector&lt; double &gt; &amp;coord)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getVtxParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>aefea2b016f4545662078716c56145d2c</anchor>
      <arglist>(int i, std::vector&lt; double &gt; &amp;coord)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>temporaryFileName</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a59f7270870bbe24e1cea0cc031a245e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimw</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5b274d351f5f3b15d84aa65820d47f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimgrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5b59bb3507fec140e930fbaf52c8da64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vtx</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acc59bd603305425555fc3bee4ec8fc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofvtx</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>abf74c41bac9904a07aaec768dd3adab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vtxoffset</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acd42761a4e412c1d9aecd448a3822d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minVertexDistance</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a7e3c3bf51faa3d282e93458f6af6a91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt;</type>
      <name>elements</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ad491b526ea24e65d733f52a62b9aa105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofelements</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a705cc468b2fc3824f562f8d4a2fa92d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>bound</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a8dc848d62e2da8c72f64ebaf5cadd446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofbound</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a194b7853aa4b10489b774f2fd3859585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>facemap_t</type>
      <name>facemap</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab292cd2dfbcfa5fec7251f1bb1d28ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>haveBndParameters</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ada0f10805ceb826a3852468c4ec2e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>element_t</type>
      <name>element</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a6389f908096c2a90d7dae1928e110c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>simplexgrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a868a0f07c9328b6dd2653c244e817a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cube2simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab6ed2fb13cc0fabd28295626520e6375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofvtxparams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a0f70cf3b4870057b07784267ec2f7a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofelparams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>aaed1f1025b6cebb864695399a931c3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vtxParams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a3936476b43f95f46e1d3ccd8d22f98ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>elParams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab11343cb0d0ff86c901e4b33fdc071b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGFPrintInfo *</type>
      <name>info</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ae300b2be81211c1c92cf18bbc348b5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>emptyParam_</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a9a676a08a205d581ef9fd1aa9de0aed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DGFGridFactory</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5e43a7e0d6bbe4e0a39d5fdd85435aaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DGFBaseFactory</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a4b538fafb682f05bc571de9290998218</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::ElementFaceUtil</name>
    <filename>a03602.html</filename>
    <member kind="function">
      <type>DGFEntityKey&lt; unsigned int &gt;</type>
      <name>generateSimplexFace</name>
      <anchorfile>a03602.html</anchorfile>
      <anchor>a9e308b82251922ec6ca38cfd3442107e</anchor>
      <arglist>(const std ::vector&lt; unsigned int &gt; &amp;element, int f)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>nofFaces</name>
      <anchorfile>a03602.html</anchorfile>
      <anchor>a8e289a9c477fe7f06eb2c370c82fd57e</anchor>
      <arglist>(int dim, const std::vector&lt; unsigned int &gt; &amp;element)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>faceSize</name>
      <anchorfile>a03602.html</anchorfile>
      <anchor>a3c7917d0f388517f69534cbe826ed91e</anchor>
      <arglist>(int dim, bool simpl)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static DGFEntityKey&lt; unsigned int &gt;</type>
      <name>generateFace</name>
      <anchorfile>a03602.html</anchorfile>
      <anchor>a01bfd7df250fed73d7e6f07270285f97</anchor>
      <arglist>(int dim, const std::vector&lt; unsigned int &gt; &amp;element, int f)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::ElementInfo</name>
    <filename>a01902.html</filename>
    <templarg>dim</templarg>
    <class kind="struct">Dune::Alberta::ElementInfo::Instance</class>
    <class kind="struct">Dune::Alberta::ElementInfo::Seed</class>
    <class kind="class">Dune::Alberta::ElementInfo::Stack</class>
    <member kind="typedef">
      <type>Alberta::MacroElement&lt; dimension &gt;</type>
      <name>MacroElement</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a224c436b32abe220b88664dc1b6f3f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8f8f72a4faddeac25a0d9c54cd23101e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::FillFlags&lt; dimension &gt;</type>
      <name>FillFlags</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aaa5c5e1e0a2f64f82b3d6acbfc316a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometryCacheProxy&lt; dim &gt;</type>
      <name>GeometryCache</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a3f08a0cb784d298336567fbf00303497</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a9c182b1194f0c7cfa93a18e8024965e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ab5c4013c6f31124c7f4f5ab06593903f</anchor>
      <arglist>(const MeshPointer &amp;mesh, const MacroElement &amp;macroElement, typename FillFlags::Flags fillFlags=FillFlags::standard)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>afff45505f01b5af265a5e5fc7d1bf1f4</anchor>
      <arglist>(const MeshPointer &amp;mesh, const Seed &amp;seed, typename FillFlags::Flags fillFlags=FillFlags::standard)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a3dbb3e868a70f8dd602a7c49c42ec849</anchor>
      <arglist>(const ElementInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aff606a337dda95e864f5622a99455f7f</anchor>
      <arglist>(ElementInfo &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a84ee8d6233500f766ce7c61d7c8e2fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a452914df01bd5c616cfce4b5b94022a9</anchor>
      <arglist>(const ElementInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0f24e38ba40aa0c4f4799adaf65b6187</anchor>
      <arglist>(ElementInfo &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a49a012484d4b5b2b3cfd000f907801a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a527ff2cec25760c3294d74c1eff8ac6f</anchor>
      <arglist>(const ElementInfo &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aa8aada51729bc3c5d2e4751367f6c541</anchor>
      <arglist>(const ElementInfo &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const MacroElement &amp;</type>
      <name>macroElement</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a28dca87ba7111c9d7101ce1efac635c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>father</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a329d795b6a9b1b46083d104a6922dadd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInFather</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ace690c46d20aa09c506e299db688a2fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>child</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1668648e2eee8a556effb01e16e95382</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0d234518dee404f22ebab288cd902db7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Seed</type>
      <name>seed</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ad90908c077be9f0d07a2671d74a2b024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshPointer</type>
      <name>mesh</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae2d86bce541e9b4b8dfc5f69ee1c096c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a18d549c3b9420ee9d5d3ddaf083fe5f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a16e2b4b0c098ee710a06cdefde49b3a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a644e2d1ab232d0e778612606d1361a79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8d16089f39f03ca4bb890a52a88157f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMark</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a767bce6e62e6167f1eb685e016eda50c</anchor>
      <arglist>(int refCount) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLeafNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a526538161fe499c98b000398241282a1</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>leafNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0ae9379e6f0b6f2813f811fc25c08ff9</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>levelNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>afd84805372d7000a8e10996df91fe8b8</anchor>
      <arglist>(const int face, ElementInfo(&amp;neighbor)[maxLevelNeighbors], int(&amp;faceInNeighbor)[maxLevelNeighbors]) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1ac8f8d12be47278a2eb837c71e3c305</anchor>
      <arglist>(int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twistInNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1c802d39aaf5ac2d2a6dcba0d1e91c17</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBoundary</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ac5be6584dcefe8a1ece66499243f07bc</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aa1aebab1e6300eff731c75408eb08e29</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>transformation</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aba2c965a6c53a2437940d0757ec9220b</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>BasicNodeProjection *</type>
      <name>boundaryProjection</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a24a15cbb54f17edd2a55967f4765e943</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCoordinates</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aecb1761060ce12ce75757545ed8de610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a87dc2cdc503ee32a9b877bc15df2c185</anchor>
      <arglist>(int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryCache</type>
      <name>geometryCache</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae50061cfb527a01561d73908881d963b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchicTraverse</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a5c3f91c3647565689c40d09fa9bb0e2f</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTraverse</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8e3abdc49b99c5f296255cb9930fdd44</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>const Element *</type>
      <name>element</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>adcdcda4bba6e73f94c6578ba7b8d3ddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Element *</type>
      <name>neighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a91a4623a08a1e46e842af36f8db20bc5</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>el</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ada0ef6466c62d95e8e3f30aed2da8fad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ALBERTA EL_INFO &amp;</type>
      <name>elInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae228986c2df106417910cf3788645efe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8dcce1911f5662e05fcf59e0cad7d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ElementInfo</type>
      <name>createFake</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0d93c03725ada80bbccb3827298d3811</anchor>
      <arglist>(const MeshPointer &amp;mesh, const Element *element, int level, int type=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ElementInfo</type>
      <name>createFake</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a941026c61f2e5f3fec10f159afbca72a</anchor>
      <arglist>(const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a533a7a0d580dcffdd0d95ab6f9c91657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numVertices</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8c1f2fb96264b973fb5898bad3f84899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numFaces</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a19d5314bc758414871e1f4c61bbe5d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a6f7f1f065add882dad9f659f9a5c1958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxLevelNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a2bc55c13b568a007de226eb2e4ff7ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ElementInfo&lt; dimension &gt;</name>
    <filename>a01902.html</filename>
    <member kind="typedef">
      <type>Alberta::MacroElement&lt; dimension &gt;</type>
      <name>MacroElement</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a224c436b32abe220b88664dc1b6f3f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8f8f72a4faddeac25a0d9c54cd23101e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::FillFlags&lt; dimension &gt;</type>
      <name>FillFlags</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aaa5c5e1e0a2f64f82b3d6acbfc316a23</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometryCacheProxy&lt; dim &gt;</type>
      <name>GeometryCache</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a3f08a0cb784d298336567fbf00303497</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a9c182b1194f0c7cfa93a18e8024965e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ab5c4013c6f31124c7f4f5ab06593903f</anchor>
      <arglist>(const MeshPointer &amp;mesh, const MacroElement &amp;macroElement, typename FillFlags::Flags fillFlags=FillFlags::standard)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>afff45505f01b5af265a5e5fc7d1bf1f4</anchor>
      <arglist>(const MeshPointer &amp;mesh, const Seed &amp;seed, typename FillFlags::Flags fillFlags=FillFlags::standard)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a3dbb3e868a70f8dd602a7c49c42ec849</anchor>
      <arglist>(const ElementInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aff606a337dda95e864f5622a99455f7f</anchor>
      <arglist>(ElementInfo &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~ElementInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a84ee8d6233500f766ce7c61d7c8e2fa1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a452914df01bd5c616cfce4b5b94022a9</anchor>
      <arglist>(const ElementInfo &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo &amp;</type>
      <name>operator=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0f24e38ba40aa0c4f4799adaf65b6187</anchor>
      <arglist>(ElementInfo &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a49a012484d4b5b2b3cfd000f907801a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a527ff2cec25760c3294d74c1eff8ac6f</anchor>
      <arglist>(const ElementInfo &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aa8aada51729bc3c5d2e4751367f6c541</anchor>
      <arglist>(const ElementInfo &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const MacroElement &amp;</type>
      <name>macroElement</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a28dca87ba7111c9d7101ce1efac635c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>father</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a329d795b6a9b1b46083d104a6922dadd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInFather</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ace690c46d20aa09c506e299db688a2fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>child</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1668648e2eee8a556effb01e16e95382</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0d234518dee404f22ebab288cd902db7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Seed</type>
      <name>seed</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ad90908c077be9f0d07a2671d74a2b024</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MeshPointer</type>
      <name>mesh</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae2d86bce541e9b4b8dfc5f69ee1c096c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a18d549c3b9420ee9d5d3ddaf083fe5f0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a16e2b4b0c098ee710a06cdefde49b3a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a644e2d1ab232d0e778612606d1361a79</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>type</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8dcce1911f5662e05fcf59e0cad7d379</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8d16089f39f03ca4bb890a52a88157f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMark</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a767bce6e62e6167f1eb685e016eda50c</anchor>
      <arglist>(int refCount) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasLeafNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a526538161fe499c98b000398241282a1</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>leafNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0ae9379e6f0b6f2813f811fc25c08ff9</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>levelNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>afd84805372d7000a8e10996df91fe8b8</anchor>
      <arglist>(const int face, ElementInfo(&amp;neighbor)[maxLevelNeighbors], int(&amp;faceInNeighbor)[maxLevelNeighbors]) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twist</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1ac8f8d12be47278a2eb837c71e3c305</anchor>
      <arglist>(int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>twistInNeighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a1c802d39aaf5ac2d2a6dcba0d1e91c17</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBoundary</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ac5be6584dcefe8a1ece66499243f07bc</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aa1aebab1e6300eff731c75408eb08e29</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>AffineTransformation *</type>
      <name>transformation</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aba2c965a6c53a2437940d0757ec9220b</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>BasicNodeProjection *</type>
      <name>boundaryProjection</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a24a15cbb54f17edd2a55967f4765e943</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasCoordinates</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>aecb1761060ce12ce75757545ed8de610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a87dc2cdc503ee32a9b877bc15df2c185</anchor>
      <arglist>(int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryCache</type>
      <name>geometryCache</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae50061cfb527a01561d73908881d963b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchicTraverse</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a5c3f91c3647565689c40d09fa9bb0e2f</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTraverse</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8e3abdc49b99c5f296255cb9930fdd44</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>const Element *</type>
      <name>element</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>adcdcda4bba6e73f94c6578ba7b8d3ddb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Element *</type>
      <name>neighbor</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a91a4623a08a1e46e842af36f8db20bc5</anchor>
      <arglist>(int face) const</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>el</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ada0ef6466c62d95e8e3f30aed2da8fad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ALBERTA EL_INFO &amp;</type>
      <name>elInfo</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>ae228986c2df106417910cf3788645efe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ElementInfo</type>
      <name>createFake</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a0d93c03725ada80bbccb3827298d3811</anchor>
      <arglist>(const MeshPointer &amp;mesh, const Element *element, int level, int type=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ElementInfo</type>
      <name>createFake</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a941026c61f2e5f3fec10f159afbca72a</anchor>
      <arglist>(const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a533a7a0d580dcffdd0d95ab6f9c91657</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numVertices</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a8c1f2fb96264b973fb5898bad3f84899</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numFaces</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a19d5314bc758414871e1f4c61bbe5d2f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a6f7f1f065add882dad9f659f9a5c1958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxLevelNeighbors</name>
      <anchorfile>a01902.html</anchorfile>
      <anchor>a2bc55c13b568a007de226eb2e4ff7ef3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLeafIntersectionIterator::End</name>
    <filename>a02150.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::Entity</name>
    <filename>a02642.html</filename>
    <templarg>cd</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>EntityImp</templarg>
    <member kind="typedef">
      <type>EntityImp&lt; cd, dim, GridImp &gt;</type>
      <name>Implementation</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ae2a856d82106158542ed714f1f9044fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a68d485a5bdbfe46acd8158d9af06e174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a83361749453e6f9321b6a5b8239334c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>realEntity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ab70984712e2f325a4ab9e951c7651e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96582c71e46edace6e2d81d575e5e684</anchor>
      <arglist>(const Entity&lt; cd, dim, GridImp, EntityImp &gt; &amp;entity) -&gt; decltype(referenceElement&lt; typename GridImp::ctype, GridImp::template Codim&lt; cd &gt;::Geometry::mydimension &gt;(entity.type()))</arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a5e1fb35208769300c1760d11a96ea829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a6d02483586c09b5b17b4a0d3457b9b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aa5f17df3f43df86bb7170277cd891ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a13ee7a43fb1a7a5ff27c9a6e8f25a7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a405b82bb3cb2a6e9c6c41ea65cd55faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>afcca2e572657d516e1c816fc917016b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0b6f35018b3734597d4998025e775da2</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a288a3e513dc21c45b0aed3e85264626d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>adab1836cb95ad9af059fbcd70b24e516</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0819ee377958fee6f9743ae6b85a8a5e</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ac2b419e2e2afdaca006d3ec11a35f0c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>acfb6a62b9717bd23d540b352e1f65d74</anchor>
      <arglist>(const Entity &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a2178e0b0e638f28cb6a89de714ee8c2f</anchor>
      <arglist>(Entity &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>operator=</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a2abeac2d4e62935bf7319caaf5a18b54</anchor>
      <arglist>(const Entity &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>operator=</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a37cea4e051426cc8151efacc438df4e6</anchor>
      <arglist>(Entity &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ae20c191a72cbc05edf49986a590896e0</anchor>
      <arglist>(const EntityImp&lt; cd, dim, GridImp &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>afcf2975464dac9e35a03583b7f2b9146</anchor>
      <arglist>(EntityImp&lt; cd, dim, GridImp &gt; &amp;&amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>intersections</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0927181ebf10ed59531e262a63f92daf</anchor>
      <arglist>(const GV &amp;gv, const Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>descendantElements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gae3280c6d5c25ef7993a59b45e401f935</anchor>
      <arglist>(const Entity &amp;e, int maxLevel)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>subEntities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga88886f3af629c47559a5274da52e5512</anchor>
      <arglist>(const E &amp;e, Codim&lt; codim &gt; c)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Entity</name>
    <filename>a03070.html</filename>
    <templarg>codim</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>Dune::GeoGrid::EntityBase</base>
    <member kind="typedef">
      <type>Base::HostEntity</type>
      <name>HostEntity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a40e41743efe77ce12a59a10d5fc9a778</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::HostElement</type>
      <name>HostElement</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a50de39244a8160792197f6a65b3eb4b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>ab186979a1c7d8841d1160bf739e3346c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>ae163d984f0d9007a4493a7e80191b663</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a6f78f999d200f12c18b7614b381d62ad</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a1454eac7696ab1c6ecf00290e7e826ae</anchor>
      <arglist>(const Grid &amp;grid, const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a3b373ec6b4396d51871aa678d1528dac</anchor>
      <arglist>(const Grid &amp;grid, const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>a3e08c3a7a38e0974def925e298ef6e0e</anchor>
      <arglist>(const Grid &amp;grid, HostEntity &amp;&amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03070.html</anchorfile>
      <anchor>aebd35e72a11bdb8321f6d97bb3b1ff59</anchor>
      <arglist>(const Grid &amp;grid, const HostElement &amp;hostEntity, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Entity&lt; 0, dim, Grid &gt;</name>
    <filename>a03090.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityBase&lt; 0, Grid &gt;</base>
    <member kind="typedef">
      <type>Base::HostEntity</type>
      <name>HostEntity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a8f6cbb758358941caba4418e6522765b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::HostElement</type>
      <name>HostElement</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>aba68ec1c64ebe76b534224c0931c7534</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>afa356e56790693414a66481cbdfd0b24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>aaec0e582c7f178c0cb066f0d76e6a712</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>ac482c7cf3e3512241a56d4f59951b844</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; 0, dim, Grid, Dune::GeoGrid::Entity &gt;</type>
      <name>EntityFacade</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a00aeb3caad9987e2a06bba9c65975ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a2d359adec2ad28a6e1d14b42155c1ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a50f7f374d3ea74cd3264262fa44f636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a62ddc11e59a65513c8d1011324c545f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a73dfaa9c9f70a54e7de18ca12c63c905</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a2a363e20d3c976aaee2f57cd9060086e</anchor>
      <arglist>(const Grid &amp;g, const HostEntity &amp;hostE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a86420fad3b6120cd4d5c0c966c0a7728</anchor>
      <arglist>(const Grid &amp;g, HostEntity &amp;&amp;hostE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a7e385a447c04d22110db56e2b8d4426e</anchor>
      <arglist>(const GeometryImpl &amp;geo, const HostEntity &amp;hostE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a4403c7750aa71b21b2e9fa5b213af4ef</anchor>
      <arglist>(const GeometryImpl &amp;geo, HostEntity &amp;&amp;hostE)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a835f059c2183d18faf24eabd3e9abc4e</anchor>
      <arglist>(const Grid &amp;g, const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a1211c184d237d06771b41f3bbffb7ca6</anchor>
      <arglist>(const Grid &amp;g, const HostEntity &amp;hostE, int i)</arglist>
    </member>
    <member kind="function">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a5a31da93946edcbf805323e62781f135</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>LevelIntersectionIterator</type>
      <name>ilevelbegin</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>aa2f2892efadbd946f0d65b93e14694e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelIntersectionIterator</type>
      <name>ilevelend</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a07e6d1766ebc195b31a241152de2a9d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeafIntersectionIterator</type>
      <name>ileafbegin</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a96aadd2c3378da4c8c7a5cbb3fd66a71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeafIntersectionIterator</type>
      <name>ileafend</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a8c0ed491f7437b06f7f7033e24e966f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundaryIntersections</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a051134ad325b88a3b5e43cf0f43069e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a1709512e2ab6030184bc0dea12579107</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntityFacade</type>
      <name>father</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>af906ba1f34e837fd306f9f68ca768cc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a4abc5724283d7a1ec04400b902a89b6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>ac95ab578cf29f68918c742f105ad6960</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hbegin</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a274e3a0affcc29e9cabacfe4d55a684a</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hend</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a29ae87611383d227daac1d972b616ed1</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegular</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a20bd6beae848f0c5e2fa2034c265b376</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>aa2d2758d260dde5c330e22304e81c3ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>ac724158627966d26bf633e7382192bdd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>af493ec34b811bcd10dbb9e3f68528928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a83891ffafa2fa05c08fa5578198c75c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a98c569a3d8bb89464f497e521d978a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>af03b6d131430107ade3c1c901ef24f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a8cba6643211985bd0b7753df1bfa6ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>ac482c7cf3e3512241a56d4f59951b844</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Entity&lt; 0, dim, Grid, Dune::GeoGrid::Entity &gt;</type>
      <name>EntityFacade</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a00aeb3caad9987e2a06bba9c65975ed0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a2d359adec2ad28a6e1d14b42155c1ccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a50f7f374d3ea74cd3264262fa44f636b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a62ddc11e59a65513c8d1011324c545f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>af493ec34b811bcd10dbb9e3f68528928</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a83891ffafa2fa05c08fa5578198c75c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a98c569a3d8bb89464f497e521d978a18</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>af03b6d131430107ade3c1c901ef24f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03090.html</anchorfile>
      <anchor>a8cba6643211985bd0b7753df1bfa6ae7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;</name>
    <filename>a02646.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>EntityImp</templarg>
    <base>Dune::Entity</base>
    <class kind="struct">Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;::Codim</class>
    <member kind="typedef">
      <type>EntityImp&lt; 0, dim, GridImp &gt;</type>
      <name>Implementation</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>ac36cd76047ce46b62c6e1a4821fbec27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a2ed335e11331f69950c4dd6a98122346aec7b81f894378ec4c52618ac21f7d0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a291e850f3267ac67b475672541c11f16a329982dc5e305ad063733549bc3a68b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a40ac0bbb6a339b714a47e736d0e9cf79ad8c91e61cda68a0e5d7617712a75f2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a570feaeecc5a28b990a86f9ba9ec65bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>aea0f07188164ecbd005a1330cf9e76a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>realEntity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a0a73c87ab658c24b9c7a715493da8024</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96582c71e46edace6e2d81d575e5e684</anchor>
      <arglist>(const Entity&lt; cd, dim, GridImp, EntityImp &gt; &amp;entity) -&gt; decltype(referenceElement&lt; typename GridImp::ctype, GridImp::template Codim&lt; cd &gt;::Geometry::mydimension &gt;(entity.type()))</arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a2ed335e11331f69950c4dd6a98122346aec7b81f894378ec4c52618ac21f7d0ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a291e850f3267ac67b475672541c11f16a329982dc5e305ad063733549bc3a68b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a40ac0bbb6a339b714a47e736d0e9cf79ad8c91e61cda68a0e5d7617712a75f2f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a179b2a5845941f88f3ce680b7e00ce3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a8752420c50f6159f6b507048c9193e4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a8b0efca9c2585b1bfd5843fc231503a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>ae77b5801dcb02652191b66fd24c7c0d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a7d5bb72e0dfbf7bf38109c8fa993f6ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>aa8d4c9c9c07f9bd1e0a1299bac461197</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a70013775987a73e4499d973c0fde6928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a3540ff7d0bd417e723f56bf1e1547307</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a012ab8ca3649fd76ad2645821fce97c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a66124e847d1d09c83b63abe502158233</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a74beb3a5ccfa65d5085079d113105ac8</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>abd62b2a2a8a5581a68545038f13978cc</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a811feca338bffff92e6e640106b76b5b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a6754368fc92c39d2c85591a8d453ac4c</anchor>
      <arglist>(const Entity &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a3a610632d772ae4845a558a35bbd7b92</anchor>
      <arglist>(Entity &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>operator=</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a9f7155e82635a1dc485647d0938cabfa</anchor>
      <arglist>(const Entity &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Entity &amp;</type>
      <name>operator=</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>ae1c96bf84958953e3b374ecfc4d721c4</anchor>
      <arglist>(Entity &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a368c072548cbf01cf42c89bf985536f6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>father</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a3d19251d81ee01b2674af5dd106d0dfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a7d4a6fce604dfd41448b530c148e6fb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>aa4e4e9e42161d0898e30bb9dd493a95a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegular</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>aacb33537c25a8c62be698ad188191a8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>ac32cbd6accc9204976409f265de2fa21</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hbegin</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a5d3863324c68f047558d52e10b59f8e4</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hend</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a16d79b0a6e9a0f10716de5cba3fa3442</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a945a134463a6077db691fca10a90a884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a01db8b186f74d4e0c2fa56e2c6d55f95</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundaryIntersections</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a6256a3e3b64568acc66f73278ec28a69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a48680fc629ef43d522cb67e55079b25b</anchor>
      <arglist>(const EntityImp&lt; 0, dim, GridImp &gt; &amp;e)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Entity</name>
      <anchorfile>a02646.html</anchorfile>
      <anchor>a392761a48993921f702deb70af6e14aa</anchor>
      <arglist>(EntityImp&lt; 0, dim, GridImp &gt; &amp;&amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>subEntities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga88886f3af629c47559a5274da52e5512</anchor>
      <arglist>(const E &amp;e, Codim&lt; codim &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>intersections</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0927181ebf10ed59531e262a63f92daf</anchor>
      <arglist>(const GV &amp;gv, const Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>descendantElements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gae3280c6d5c25ef7993a59b45e401f935</anchor>
      <arglist>(const Entity &amp;e, int maxLevel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntityBase</name>
    <filename>a03066.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <templarg>fake</templarg>
  </compound>
  <compound kind="class">
    <name>EntityBase&lt; 0, Grid &gt;</name>
    <filename>a03066.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntityBase&lt; codim, Grid, false &gt;</name>
    <filename>a03082.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a7494d3ab5cafe14d043be58639435d88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const EntityBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a8bf019aae906d12334d3af40b653479b</anchor>
      <arglist>(const EntityBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const EntityBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ae2a7b1c95b373013621019f247888f71</anchor>
      <arglist>(EntityBase &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a086b382cd1d3c803b8eb1e8b9e2fdb1e</anchor>
      <arglist>(const EntityBase &amp;other) const</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a3bfba787dc6f3d6615f4520271391a12</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a4fe17424b2b68ae254fd859d23ce5790</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codimension &gt;::Entity</type>
      <name>HostEntity</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a2e0a101ac57ca1a683a323c78088147c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a033e469342a61e4778606407bf0a9c8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; 0 &gt;::Entity</type>
      <name>HostElement</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a5190fba193aeb6a869c4fb85fe1af594</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>aeb17feeef6ed2e9bc2a52109343507c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a3ca6e33cbe5d29b7c9f8c5da5fb3b077</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a984268ba7296b56d0c68c3a30fb4aa0e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ae719cb22cee9007bd7e9f39a85af155d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a47964c26b9e033ff974590a48efa00a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a386177b9e744f5f27599ead73aacab54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ade8605ca3364650fc004cd2b0d16822e</anchor>
      <arglist>(const Grid &amp;grid, const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a06a12f08d46758b3efb7fb46c53956ec</anchor>
      <arglist>(const Grid &amp;grid, const HostElement &amp;hostElement, int i)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a74ba97a9ea05f238a29a4a9436a2fc22</anchor>
      <arglist>(const GeometryImpl &amp;geo, const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a4bb3ddcdd6e40c282261b411df7d3b11</anchor>
      <arglist>(const GeometryImpl &amp;geo, HostEntity &amp;&amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ac5a4f09df8b39df940c06ba9a40784f3</anchor>
      <arglist>(const Grid &amp;grid, const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a0a3bc3cc14b9f55aaa0cf949c623605e</anchor>
      <arglist>(const Grid &amp;grid, HostEntity &amp;&amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ac0a7ccbf9e7997ba15e9c09fb97663bb</anchor>
      <arglist>(const EntityBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a1ad0c1136a55c2262e82e5712a9c29c6</anchor>
      <arglist>(EntityBase &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a0296037e224a1880bd066dc7f5ede1aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ae5b383e2f299ed7442b5b22f26f4e29e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ae330461a789a2029a4a0d62b47cccde0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a549ad9833c91984e06dae1a59a5a537f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a449760f93dd35b9fa2fa95f3b3b268cc</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a583aa6985cdcb953a552e71963d5946c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a38101c007d9180e2f4985f67d6e706b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>adef57c09beded7447c67a32f5b0a01b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a57dc773313dfa22f61be327172b931b4</anchor>
      <arglist>(const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type>HostIndexSet::IndexType</type>
      <name>index</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>acf4373ae4dafaf9f8e1c1bbfafa03318</anchor>
      <arglist>(const HostIndexSet &amp;indexSet) const</arglist>
    </member>
    <member kind="function">
      <type>HostIndexSet::IndexType</type>
      <name>subIndex</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>ae6f42f83d1bdf29db6cd076467c546cf</anchor>
      <arglist>(const HostIndexSet &amp;indexSet, int i, unsigned int cd) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContained</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>aecb9d1e3006ab9b118f37186b46192f5</anchor>
      <arglist>(const HostIndexSet &amp;indexSet) const</arglist>
    </member>
    <member kind="function">
      <type>HostIdSet::IdType</type>
      <name>id</name>
      <anchorfile>a03082.html</anchorfile>
      <anchor>a597cbd963eb560a2abfb00885b531378</anchor>
      <arglist>(const HostIdSet &amp;idSet) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntityBase&lt; codim, Grid, true &gt;</name>
    <filename>a03086.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ad3b4f22426d63e170d6d3d540b5ced3f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const EntityBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a72f204a97e4f7e0286eb15928ddfac39</anchor>
      <arglist>(const EntityBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const EntityBase &amp;</type>
      <name>operator=</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a8176b4c6a41cc82fac4340862c2cd95d</anchor>
      <arglist>(EntityBase &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a3438661d28791907e4a8545864ff7ad3</anchor>
      <arglist>(const EntityBase &amp;other) const</arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ada051026c4f4d1d594209e5a28ff9ae2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>af278cc1b5f42c58a5c6b5d6cc6a71118</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codimension &gt;::Entity</type>
      <name>HostEntity</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a43612604dd7bfd081b4e826c0ab3271a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>adcec05f952f7e399aab14f18dc931bdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; 0 &gt;::Entity</type>
      <name>HostElement</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a033b9f617ea242f517dcd3204ea9748a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a44dfded24e15f3db6ff533df1fc8f3c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ae911654399d8a3d136fd4c310910cd26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ad559c7af374423ec2660a719d426df38</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a2e1be39b52f7586f0a020d2d645d545e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ac0ba689d82a034e8b5f3cce18c6558ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>aceea8059d54baf11d066e8eaf2bca605</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a66062acba58d8ff4eb4108b9c22c9296</anchor>
      <arglist>(const Grid &amp;grid, const HostElement &amp;hostElement, unsigned int subEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a91198928cf4beaf3874bed79aca4b551</anchor>
      <arglist>(const Grid &amp;grid, const EntitySeed &amp;seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a09590870232458f794178558f9949dbc</anchor>
      <arglist>(const EntityBase &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a20254b27a682ab06a0ee13a28641bd6a</anchor>
      <arglist>(EntityBase &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityBase</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>aabf14771c3eaab9dabb1e75cc7748b93</anchor>
      <arglist>(const Grid &amp;grid, const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ae49418194297d54074f5902b5943c30d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a1735a30ae04ca59ba60e7ce7468eedb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a2f962ea424c04e6ea429c15d7b405751</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>aca0a706e392ffbb48fa3fd3a8763f6d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a78a7fc0c0af1ead509fec77fb9d0278d</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a8899fce092f7438d0cbd0176087cb12a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a02d99155a0615144c80918114b5c9b0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a587a0b6f50f6dd7907d4a702c006d0b8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostElement &amp;</type>
      <name>hostElement</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a71d70e4d7f818beefef78612398e721c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subEntity</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>adc59893b4e0f6a1ae11f788b5a8f622a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ab5e02b16a9adc17fa3ed57bb66ee0ac3</anchor>
      <arglist>(const HostElement &amp;hostElement)</arglist>
    </member>
    <member kind="function">
      <type>HostIndexSet::IndexType</type>
      <name>index</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a3c8ad3ed94b2a3192ae48facf5a33573</anchor>
      <arglist>(const HostIndexSet &amp;indexSet) const</arglist>
    </member>
    <member kind="function">
      <type>HostIndexSet::IndexType</type>
      <name>subIndex</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a99d303027dc7c33beb71259ee7143421</anchor>
      <arglist>(const HostIndexSet &amp;indexSet, int i, unsigned int cd) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isContained</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>ae0d84368d75c0121907cf1c4713b5309</anchor>
      <arglist>(const HostIndexSet &amp;indexSet) const</arglist>
    </member>
    <member kind="function">
      <type>HostIdSet::IdType</type>
      <name>id</name>
      <anchorfile>a03086.html</anchorfile>
      <anchor>a71b9bb3fd5cbb5baa66a61a05cca3374</anchor>
      <arglist>(const HostIdSet &amp;idSet) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper</name>
    <filename>a04002.html</filename>
    <templarg>iftype</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper&lt; All_All_Interface &gt;</name>
    <filename>a04022.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>send</name>
      <anchorfile>a04022.html</anchorfile>
      <anchor>a4c371f3d4c138b909ccc79b0d0176bfa</anchor>
      <arglist>([[maybe_unused]] const PartitionType p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>receive</name>
      <anchorfile>a04022.html</anchorfile>
      <anchor>aca5c3e70950e39a1e4d6d2823bfe3d01</anchor>
      <arglist>([[maybe_unused]] const PartitionType p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper&lt; InteriorBorder_All_Interface &gt;</name>
    <filename>a04010.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>send</name>
      <anchorfile>a04010.html</anchorfile>
      <anchor>ae79be40a9664c397e8ccb950374b5068</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>receive</name>
      <anchorfile>a04010.html</anchorfile>
      <anchor>a4f404328d931f5ec1c587d0f083aa59c</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper&lt; InteriorBorder_InteriorBorder_Interface &gt;</name>
    <filename>a04006.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>send</name>
      <anchorfile>a04006.html</anchorfile>
      <anchor>add61f7d85749c8c13832056012f2eab7</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>receive</name>
      <anchorfile>a04006.html</anchorfile>
      <anchor>a5efdb10386417f93f715abf06f8918b1</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper&lt; Overlap_All_Interface &gt;</name>
    <filename>a04018.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>send</name>
      <anchorfile>a04018.html</anchorfile>
      <anchor>a0b44e3160fefaf4a06ef329644230e7c</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>receive</name>
      <anchorfile>a04018.html</anchorfile>
      <anchor>aea2bf67b3d78a8366f43773a14298294</anchor>
      <arglist>([[maybe_unused]] const PartitionType p)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityCommHelper&lt; Overlap_OverlapFront_Interface &gt;</name>
    <filename>a04014.html</filename>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>send</name>
      <anchorfile>a04014.html</anchorfile>
      <anchor>a1c71d5612b84952b7d4bea377876cf0b</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>receive</name>
      <anchorfile>a04014.html</anchorfile>
      <anchor>a310a3e12a1f91e9d97e5d5a347dfe099</anchor>
      <arglist>(const PartitionType p)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EntityDefaultImplementation</name>
    <filename>a02654.html</filename>
    <templarg>cd</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>EntityImp</templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; 0, dim, Grid, AlbertaGridEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EntityDefaultImplementation&lt; 0, dim, GridImp, EntityImp &gt;</name>
    <filename>a02658.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>EntityImp</templarg>
    <base>Dune::EntityDefaultImplementation</base>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a50aeaa2899a3574f2db1bff1e7ae2a3aa0e61a945b90484dcdc187a111a63ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a6448dbe88cb803a1a53be5bc6fa497d3ad08b177ee5c36281e4633bfd3986d4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a121ecc9f0522ff934d0817baca20799eaad199d0fdd4eb6d584caf6da013a5ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>ac17b1d51b92b759a1a11391a0950b6c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a50aeaa2899a3574f2db1bff1e7ae2a3aa0e61a945b90484dcdc187a111a63ec35</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a6448dbe88cb803a1a53be5bc6fa497d3ad08b177ee5c36281e4633bfd3986d4c4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a121ecc9f0522ff934d0817baca20799eaad199d0fdd4eb6d584caf6da013a5ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isRegular</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a33a31539e4d6c3432be275449a388e93</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>af03e03dc98024fc2bf8db86e241ade2f</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>adbdbc3564a0a6a19b35283ef784c09ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>a11731bd31824d3d8f3a61e457ea647fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>af9d05e8eeee4ca8afcedd9b6cb5207ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasBoundaryIntersections</name>
      <anchorfile>a02658.html</anchorfile>
      <anchor>aab3322c71214d8bc04bf9a2a8adfe78f</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; 0, dim, GridImp, IdentityGridEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; 0, dim, GridImp, YaspEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; codim, dim, Grid, AlbertaGridEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; codim, dim, GridImp, IdentityGridEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; codim, dim, GridImp, YaspEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>EntityDefaultImplementation&lt; dim, dim, GridImp, YaspEntity &gt;</name>
    <filename>a02654.html</filename>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a395217b16a6c7546713eb0f0dc513a7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>af8ee943ca0aef605c8b527ccffc68940</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::EntityInfo</name>
    <filename>a04050.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>EntityInfo</name>
      <anchorfile>a04050.html</anchorfile>
      <anchor>af5d5b1c812f0e8b573fe95b22421901b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::size_t</type>
      <name>count</name>
      <anchorfile>a04050.html</anchorfile>
      <anchor>ae7b7a78bbb46ceaf48a27b097af96c54</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ctype</type>
      <name>volumeMin</name>
      <anchorfile>a04050.html</anchorfile>
      <anchor>a17b9baa7656ff84fc8f7c6075eeec72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ctype</type>
      <name>volumeMax</name>
      <anchorfile>a04050.html</anchorfile>
      <anchor>a26cd434446b0d4bf89b19a121726a8e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>ctype</type>
      <name>volumeSum</name>
      <anchorfile>a04050.html</anchorfile>
      <anchor>a28a14f5abe2ebfbbe457ef8fd685b405</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EntityIterator</name>
    <filename>a02662.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IteratorImp</type>
      <name>Implementation</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a17b116dcdc73ca5b5946275901d19b1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a1cc09c2a0b3e8c177036e35d0f89bfe0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; std::is_lvalue_reference&lt; decltype(realIterator.dereference()) &gt;::value, const Entity &amp;, Entity &gt;::type</type>
      <name>Reference</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a9e0b0e4bcbd5eb49a94368caf52dc7e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a0367a641504ac23f571e465e5d241013</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>aed7cd027d75643e6b13f81d31eb308f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntityIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>af6c30e8ee794504c8b02d3c98fc2a6ea</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>EntityIterator</type>
      <name>operator++</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>ae39ef384cefade96a7b9d389dd0b7561</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type>const Entity &amp;</type>
      <name>operator*</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a10691da452db42b44ff18ba6b226ec0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Entity &amp;</type>
      <name>operator-&gt;</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a08c5ac2873831992ab1e278f0340036d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>aebdf139614cd0f6cb2108385e02c1c6a</anchor>
      <arglist>(const EntityIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a74a2c4f801c9673f62fa245285405b7f</anchor>
      <arglist>(const EntityIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityIterator</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a7ba8b58d4de004cd7d3b3ad824764ae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityIterator</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a681c36aaa9156a57b9a292dfb5e35dac</anchor>
      <arglist>(const IteratorImp &amp;imp)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IteratorImp</type>
      <name>realIterator</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a56e2adf493e6608c224f6392eb680ca5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityIterator</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a7ba8b58d4de004cd7d3b3ad824764ae6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntityIterator</name>
      <anchorfile>a02662.html</anchorfile>
      <anchor>a681c36aaa9156a57b9a292dfb5e35dac</anchor>
      <arglist>(const IteratorImp &amp;imp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EntitySeed</name>
    <filename>a02670.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>acb07a182b9bbdb2b3ee0163e7dd2d2eca033751376d421a05fa3115a2e5b7ef37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntitySeedImp</type>
      <name>Implementation</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>a0f272aad243e31fbbc576e65ee141648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>acb07a182b9bbdb2b3ee0163e7dd2d2eca033751376d421a05fa3115a2e5b7ef37</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>a9ca82170ea94cd18735746d035a900d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>a3561e7ad2a3c059b6565be15a344d6ad</anchor>
      <arglist>(const EntitySeedImp &amp;implementation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>aecaac7ec8bf386d5a227314140ed56ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>a8ffc210e35067734113c989f3115dd5f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02670.html</anchorfile>
      <anchor>a6bed1b490451fd23a5813674367e0a69</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntitySeed</name>
    <filename>a03094.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <templarg>fake</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntitySeed&lt; codim, Grd, false &gt;</name>
    <filename>a03098.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a38a4fe72b0fcd2a020cd350fcef4c312</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>ace38c41064f21a819bf03fa87665f320</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HostGrid</type>
      <name>HostGrid</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a93f8acdba2784db849940f4564f9e52a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>HostEntitySeed</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a26119a265dabc9e43a53f069b4799492</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a6763f6e1b90841b4a0bebc31419193e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a3815b899b5507564e69b3542547f57dd</anchor>
      <arglist>(const HostEntitySeed &amp;hostEntitySeed)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>adbb3c9d156c9620265ad33d7adac699d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostEntitySeed &amp;</type>
      <name>hostEntitySeed</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a50370039ad07219c7081a19a59457c61</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a17967da764b29775c4d88202b2d7f5ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>ab904446b8d1919dd806d378c7feec6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a9b88c7f9417499d47ea053c3f30de55d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>a016cbdcdcdeaf19e22811ec7250f1346</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03098.html</anchorfile>
      <anchor>ada241a8339605bb11ac79eec8159f72e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::EntitySeed&lt; codim, Grd, true &gt;</name>
    <filename>a03102.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>ae4333f133c03528b4839d2761288e31e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>adfd09c9afad684ca2e25983723f3a72b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HostGrid</type>
      <name>HostGrid</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a9c47434146897db8ef47d21f81db12a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>HostElementSeed</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a8b3818d46414d717992a66d23d93b8b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a32f94028f397f125cc0e5449dd3a38a6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EntitySeed</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>ae3ba1aff89996f274c12d787ba786135</anchor>
      <arglist>(const HostElementSeed &amp;hostElementSeed, unsigned int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a9e265967ebb9955bf38146b4886cef50</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostElementSeed &amp;</type>
      <name>hostElementSeed</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a208365a89d70997bd60b824a9d809fc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntity</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a7c6941953a4ba92ea02c98f228016ce7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a8687903a39588b15bc1398d77689e499</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>aa5b70ba375caa1c9d2b03ae3fe4d6530</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a46a8cf44d9b237a83da461a1959efc1e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>a71a6e4e61c4338cd3c0c060adb0aa891</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03102.html</anchorfile>
      <anchor>adc74ca8c6bcf8024c6dc5810a05a06de</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EquidistantCoordinates</name>
    <filename>a04234.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a888d53928598ec514f5548b44d3b1985</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquidistantCoordinates</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a79be6c6107373049c3eb103fcecff92c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquidistantCoordinates</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>abdafa828f62c9c0fa7772f82d7f2e972</anchor>
      <arglist>(const Dune::FieldVector&lt; ct, dim &gt; &amp;upperRight, const std::array&lt; int, dim &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>meshsize</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>af09de255df84f32d60521c62d8ea9155</anchor>
      <arglist>(int d, [[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>coordinate</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a0310d8c520ed28db99835bb339f8f85c</anchor>
      <arglist>(int d, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a239e5dede8d8c9b324e70f29d54341a0</anchor>
      <arglist>(int d) const</arglist>
    </member>
    <member kind="function">
      <type>EquidistantCoordinates&lt; ct, dim &gt;</type>
      <name>refine</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a003db7a09c320b431a85eed8c6fb2d16</anchor>
      <arglist>(std::bitset&lt; dim &gt; ovlp_low, std::bitset&lt; dim &gt; ovlp_up, int overlap, bool keep_ovlp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a4f8fbf22a04b848c0cf52a2c055f3f99</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a04234.html</anchorfile>
      <anchor>a3050e799a8e7093f5b69f85cdffbb798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::EquidistantOffsetCoordinates</name>
    <filename>a04238.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>ab503bb21ce09618a8e9f3f922ac31942</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquidistantOffsetCoordinates</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>a01fd41c182a319fee3dce4e3e050991f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>EquidistantOffsetCoordinates</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>a19b79e5ce53cf8c4c6152b5094df711e</anchor>
      <arglist>(const Dune::FieldVector&lt; ct, dim &gt; &amp;lowerLeft, const Dune::FieldVector&lt; ct, dim &gt; &amp;upperRight, const std::array&lt; int, dim &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>meshsize</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>ae2430e69a300b0658fdff4d31d64809a</anchor>
      <arglist>(int d, [[maybe_unused]] int i) const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>coordinate</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>aeb72448b015e8bfbdf1f2ae3a399d351</anchor>
      <arglist>(int d, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>aaef18604075bd26baca90da0643869b6</anchor>
      <arglist>(int d) const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>origin</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>a751c8b340bd9574846e4d98a55ff146c</anchor>
      <arglist>(int d) const</arglist>
    </member>
    <member kind="function">
      <type>EquidistantOffsetCoordinates&lt; ct, dim &gt;</type>
      <name>refine</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>af182db6d6bbc358741467197720d5f94</anchor>
      <arglist>(std::bitset&lt; dim &gt; ovlp_low, std::bitset&lt; dim &gt; ovlp_up, int overlap, bool keep_ovlp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>a2dc78924f119f0789b7ddb9cd5a8065a</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a04238.html</anchorfile>
      <anchor>ad1eb8f110cfe82b43436ea19877ae01e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::ExportParams</name>
    <filename>a03150.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>HG</type>
      <name>HostGrid</name>
      <anchorfile>a03150.html</anchorfile>
      <anchor>a1f20b5e0ce5669fdeed3c37fc7472b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>CoordFunction</name>
      <anchorfile>a03150.html</anchorfile>
      <anchor>afd50c87dacfdb741bd6393e7aafd3a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::ProjectionBlock::Expression</name>
    <filename>a03494.html</filename>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~Expression</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>a1f244e2649f8f1d5820ed53dd24193ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>ab90b022a705ed3e9e3722114d8afdcfe</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLocalGeometryProvider::FaceCoordReader</name>
    <filename>a01970.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a8a20d00e2461610e1e5e73888e6ff1c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension &gt;</type>
      <name>Coordinate</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a818a7fa7d6a3f41f48bb386537e9335a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FaceCoordReader</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a01c2feac3e748bb015b4a79fb3fa928f</anchor>
      <arglist>(const int face, const int twist=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinate</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a53300f614c9759e54021bac90cb4a93c</anchor>
      <arglist>(const int i, Coordinate &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDeterminant</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a8812564700fec944ad31061b2204e580</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>determinant</name>
      <anchorfile>a01970.html</anchorfile>
      <anchor>a6b1fb7db8a5931c385079af53d92bc19</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::FieldInfo</name>
    <filename>a03734.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Type</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>a7b84931b6e002d3861565db729e304e1</anchor>
      <arglist></arglist>
      <enumvalue file="a03734.html" anchor="a7b84931b6e002d3861565db729e304e1aa27a6549ade38cc036f7b8c58a840510">scalar</enumvalue>
      <enumvalue file="a03734.html" anchor="a7b84931b6e002d3861565db729e304e1a6ba8844da718b4a65f60dbfd0d92d6ef">vector</enumvalue>
      <enumvalue file="a03734.html" anchor="a7b84931b6e002d3861565db729e304e1a2af2584abc1418fcc1098807a7129ddb">tensor</enumvalue>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldInfo</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>a7b8da5337040532a6ef65b968f543b1b</anchor>
      <arglist>(std::string name, Type type, std::size_t size, Precision prec=Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>af58a15e5affc631ff25b61889067902a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Type</type>
      <name>type</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>a8df1ecf0ba9d4aa547e6028a0c4f36ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>a41320a2f05df7056566684dac7c40ac2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Precision</type>
      <name>precision</name>
      <anchorfile>a03734.html</anchorfile>
      <anchor>a610730bb86bead6a6ec8c45ad3268ec7</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::FillFlags</name>
    <filename>a02266.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ALBERTA FLAGS</type>
      <name>Flags</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a78827548b7dfc97322ef424dae19ac80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>nothing</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a02a81df8ce972de8c05155b5935a4685</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>coords</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>ac3e240014ba9acf9e159f556ffc429db</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>neighbor</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>acfe708019f4894fdcfa1d0a61ac33215</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>orientation</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>ac889ca15e027d97eabbfa6d907886f65</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>projection</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a9ceb6dc8004398958d42f7c33dc700c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>elementType</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a5f2eff357aadcdcf6037b6fbcf9a0405</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>boundaryId</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a2e5831a4f885c9550ebf205afaff534d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>nonPeriodic</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>a0f4508d2b2f3596e08893ebfee83516c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>all</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>ad2511c1874a4319368f7dd54bc7fe6a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>standardWithCoords</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>afaadc4f444adb5c448abe21549956a2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>standard</name>
      <anchorfile>a02266.html</anchorfile>
      <anchor>aceb198108efb3ef85c9d028e3435739a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild</name>
    <filename>a02382.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild&lt; 2, 1 &gt;</name>
    <filename>a02398.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02398.html</anchorfile>
      <anchor>a5207feddbcea5a7d960c67c089244db1</anchor>
      <arglist>(Functor &amp;functor, const Patch&lt; 2 &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild&lt; 3, 1 &gt;</name>
    <filename>a02402.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02402.html</anchorfile>
      <anchor>a96b27cde1f868c232fe0007e291e7e99</anchor>
      <arglist>(Functor &amp;functor, const Patch&lt; 3 &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild&lt; 3, 2 &gt;</name>
    <filename>a02406.html</filename>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02406.html</anchorfile>
      <anchor>aa996341f5f20e808cce52bdd1e846a9f</anchor>
      <arglist>(Functor &amp;functor, const Patch&lt; 3 &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild&lt; dim, 0 &gt;</name>
    <filename>a02390.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02390.html</anchorfile>
      <anchor>aa88854dcbab5c239422ebf72c169a670</anchor>
      <arglist>(Functor &amp;functor, const Patch&lt; dim &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ForEachInteriorSubChild&lt; dim, dim &gt;</name>
    <filename>a02394.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>apply</name>
      <anchorfile>a02394.html</anchorfile>
      <anchor>a9d37a71fc46c82cac9009760f23f7962</anchor>
      <arglist>(Functor &amp;functor, const Patch&lt; dim &gt; &amp;patch)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::FunctionCallExpression</name>
    <filename>a03430.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionCallExpression</name>
      <anchorfile>a03430.html</anchorfile>
      <anchor>a182727d659bb1668a21912633558d1be</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;function, const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03430.html</anchorfile>
      <anchor>a5dd2c8ab83daa6db8b23135a3fa47aed</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTKWriter::VTKLocalFunction::FunctionWrapper</name>
    <filename>a03902.html</filename>
    <templarg></templarg>
    <base>Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</base>
    <member kind="typedef">
      <type>typename std::decay&lt; F &gt;::type</type>
      <name>Function</name>
      <anchorfile>a03902.html</anchorfile>
      <anchor>a4a20b3418716fb5dffd04bb4ac99aaee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FunctionWrapper</name>
      <anchorfile>a03902.html</anchorfile>
      <anchor>a739246d92b521a96eccb66553e49a85a</anchor>
      <arglist>(F_ &amp;&amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a03902.html</anchorfile>
      <anchor>aec1e76c9888960854d43740275a4fbfc</anchor>
      <arglist>(const Entity &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind</name>
      <anchorfile>a03902.html</anchorfile>
      <anchor>a914dfa25068e54be835b4803ad6e205d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03902.html</anchorfile>
      <anchor>a8453939f16f3fd8471a98f24894690e1</anchor>
      <arglist>(const Coordinate &amp;pos, Writer &amp;w, std::size_t count) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</name>
    <filename>a03898.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a03898.html</anchorfile>
      <anchor>abc0ecd194a4124110917abea1ccdc942</anchor>
      <arglist>(const Entity &amp;e)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>unbind</name>
      <anchorfile>a03898.html</anchorfile>
      <anchor>aa2a0254b322c01dd8da1d8bdb27c405b</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03898.html</anchorfile>
      <anchor>a6738e48a99bcbbc7cb52517a473530c8</anchor>
      <arglist>(const Coordinate &amp;pos, Writer &amp;w, std::size_t count) const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWrapperBase</name>
      <anchorfile>a03898.html</anchorfile>
      <anchor>a87ff5009075af77c20e2a0adb8e7f637</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::FunctionWriterBase</name>
    <filename>a03790.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell_</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2a71a4df6451e8e04d12fd055823cd52</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2c82fb698b632857354c2e18ff27e2d5</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a5e6a900bae82a20cb5b646e6cf68792a</anchor>
      <arglist>(PVTUWriter &amp;writer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ab9b501e9c303ac5679016b437d1ce04b</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a82b6eec66060ef5c8638a01ecbaac035</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWriterBase</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ac8250002b167a403f41100c634f19eb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionWriterBase&lt; Cell &gt;</name>
    <filename>a03790.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2a71a4df6451e8e04d12fd055823cd52</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2c82fb698b632857354c2e18ff27e2d5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a5e6a900bae82a20cb5b646e6cf68792a</anchor>
      <arglist>(PVTUWriter &amp;writer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ab9b501e9c303ac5679016b437d1ce04b</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a82b6eec66060ef5c8638a01ecbaac035</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWriterBase</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ac8250002b167a403f41100c634f19eb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionWriterBase&lt; Func::Entity &gt;</name>
    <filename>a03790.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Func::Entity</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2a71a4df6451e8e04d12fd055823cd52</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2c82fb698b632857354c2e18ff27e2d5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a5e6a900bae82a20cb5b646e6cf68792a</anchor>
      <arglist>(PVTUWriter &amp;writer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ab9b501e9c303ac5679016b437d1ce04b</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a82b6eec66060ef5c8638a01ecbaac035</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWriterBase</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ac8250002b167a403f41100c634f19eb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionWriterBase&lt; Func::Traits::Cell &gt;</name>
    <filename>a03790.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Func::Traits::Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2a71a4df6451e8e04d12fd055823cd52</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2c82fb698b632857354c2e18ff27e2d5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a5e6a900bae82a20cb5b646e6cf68792a</anchor>
      <arglist>(PVTUWriter &amp;writer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ab9b501e9c303ac5679016b437d1ce04b</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a82b6eec66060ef5c8638a01ecbaac035</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWriterBase</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ac8250002b167a403f41100c634f19eb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>FunctionWriterBase&lt; IteratorFactory::Cell &gt;</name>
    <filename>a03790.html</filename>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorFactory::Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2a71a4df6451e8e04d12fd055823cd52</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a2c82fb698b632857354c2e18ff27e2d5</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a5e6a900bae82a20cb5b646e6cf68792a</anchor>
      <arglist>(PVTUWriter &amp;writer)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ab9b501e9c303ac5679016b437d1ce04b</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a82b6eec66060ef5c8638a01ecbaac035</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~FunctionWriterBase</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>ac8250002b167a403f41100c634f19eb2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::GeneralBlock</name>
    <filename>a03386.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>GeneralBlock</name>
      <anchorfile>a03386.html</anchorfile>
      <anchor>a02f007c3932267365e173c3efa6ed7ac</anchor>
      <arglist>(std ::istream &amp;in, int pnofvtx, int pvtxoffset, int &amp;pdimgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03386.html</anchorfile>
      <anchor>a5c4e6d37ef3960989af2d5b381d8543b</anchor>
      <arglist>(std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt; &amp;simplex, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;params, int &amp;nofp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03386.html</anchorfile>
      <anchor>a853f347ac543f222992ed1610f3fbda7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofsimplex</name>
      <anchorfile>a03386.html</anchorfile>
      <anchor>a1d574360d81bff40abfc7e999bb746d8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Generic2AlbertaNumbering</name>
    <filename>a02286.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02286.html</anchorfile>
      <anchor>ac8e6abcb3a2aa1faca88cf101f1e76c5</anchor>
      <arglist>(const int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Generic2AlbertaNumbering&lt; 1, 1 &gt;</name>
    <filename>a02294.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02294.html</anchorfile>
      <anchor>ab9a0eb860e1d07240eb37f6e902a82e8</anchor>
      <arglist>(const int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Generic2AlbertaNumbering&lt; 3, 2 &gt;</name>
    <filename>a02298.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02298.html</anchorfile>
      <anchor>ae0ad00a163303cf4beb86adef5c274ef</anchor>
      <arglist>(const int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02298.html</anchorfile>
      <anchor>ab3ff5d757b7576ab5bf00c3dd397bf9b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Generic2AlbertaNumbering&lt; dim, 1 &gt;</name>
    <filename>a02290.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02290.html</anchorfile>
      <anchor>ace97cf8e862f1ec23ad729d6fed7300f</anchor>
      <arglist>(const int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLocalGeometryProvider::GeoInFatherCoordReader</name>
    <filename>a01966.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>a4d5e24a173cba5ec3c9f558ad28f2343</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimension &gt;</type>
      <name>Coordinate</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>a084f9dd94277b1cbbcb08e7dd17bb7b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeoInFatherCoordReader</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>aab5c45645b62982e1f0a9985cbfcf724</anchor>
      <arglist>(int child, int orientation)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinate</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>a5875e087e1dfbd6a0b9ac404e7810dec</anchor>
      <arglist>(int i, Coordinate &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDeterminant</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>ab507dd13f8fc663cea476b2c6c58b11c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>determinant</name>
      <anchorfile>a01966.html</anchorfile>
      <anchor>af95b09b604f4bbc22ecb92b93be36df3</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Geometry</name>
    <filename>a03130.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <class kind="struct">Dune::GeoGrid::Geometry::Mapping</class>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a35e9958db0999a181a9692deaa46cbe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mapping::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>aebad27bdf46a3b5e9bbdecfd87045e5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mapping::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ae9cb57f8547e82c3a18a99c612041360</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mapping::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac0b83cd7df4ebdc63dc0332f261f6973</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Mapping::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>aeb40eecdcdc2ac8f2bed9428d603ccd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>aa589e3f90760643c654aef4485e9f432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a1b40a17626c2ee1225d1862849e33454</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a3def620984bb3c606b78c365f8cc7838</anchor>
      <arglist>(const Grid &amp;grid, const GeometryType &amp;type, const CoordVector &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a55a9fb05bdcaf58a1f40143cba440614</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a62f70f5de3488107013af7610c563624</anchor>
      <arglist>(This &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ad6907d343bdec5d39cabdb457c45d406</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a9cc0e672f509b85af1b8b95cf1dcb087</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ae0434a3299299fd7974f092c2a9d725d</anchor>
      <arglist>(This &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac5178a6a87ce7e0806aed088bb333ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a5e5b44020823617e86c0c3b53965151b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac6be610067d04da6a08cef175abe54d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a249a0b3216b47b0e23056ec6629d8eda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>aa242f80447f2cdb3b05592e994d4b9de</anchor>
      <arglist>(const int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac8b67b7f900256ba2230722ee44dc38b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a156551581865f3b72f253a4edee99d45</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a9685cc340bbe6b663ed687030a640fac</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ae771008801fc8982848a4c92901bb1b7</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac80c51dc587febab5c6e42859f69b3b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ae8f40ebb5ff8ce8b50fb9ebb651a559e</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a3d6b69d6d7cf3d8352f43d2e2add244b</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>af055353cc9766e0e0464e51fee7a617d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a57904ff3f485e15f84464f0ce78788c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>ac0707b0c01cfbcc018d17330cacc3ebc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a405030d7bc3a82c29188803194cda8b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a2526d2ca35bb2c981a442fa2c89c85f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>CachedMultiLinearGeometry&lt; ctype, mydimension, coorddimension, GeometryTraits&lt; Grid &gt; &gt;</type>
      <name>BasicMapping</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a5ddf4303abc5c799924465b8bc96ef2b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Geometry</name>
      <anchorfile>a03130.html</anchorfile>
      <anchor>a5ce40473ca6fedc5e944cb4f5aa6d113</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Geometry</name>
    <filename>a02682.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <templarg>GeometryImp</templarg>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a5558f1fac42bd28c26c6be66c6b7ce60a5d92e0b5a4a022e237fa6c0db1147486</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coorddimension</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>ad709dc059437ac93b89e7304f8823f17a9729efb4ce9d85aebbb9cb212d72c975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometryImp&lt; mydim, cdim, GridImp &gt;</type>
      <name>Implementation</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>aea991b46fba9b30b7f1886adab1377a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a95d45019635b713c8d5069a9c111f4b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>aa9f22f897f89bc7b9e921117e81fa80b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a090c61d9ce2e927225f4e8c8ccf79891</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a5967d88e3c1e11950cd13df035693f92</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a55e4d68a4e832e9c41619e3f0e9366df</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a5558f1fac42bd28c26c6be66c6b7ce60a5d92e0b5a4a022e237fa6c0db1147486</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>coorddimension</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>ad709dc059437ac93b89e7304f8823f17a9729efb4ce9d85aebbb9cb212d72c975</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>aa2645b953bac144d04b207d48d1dcbd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a06f4fbb4b7b80868cc9f03f834573351</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a2ca9e294c9b1c05dd211ca9cd80b75ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>abc04132e2c40c417cd3456b0ee487ecc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a72dcc1784e51b03bd4898bd8c6856610</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a666d61b8aaf27b7822b3170e21c6f53c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a390be918f55a71294618ce7ef53de844</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>acc391e52e5f60ed339dbfcaaa6c402b5</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a99e8810f709f01289fd41eb88d9b118b</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>Volume</type>
      <name>volume</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a736a0ce47acd73919984badad40898f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>aab400706ed4fe3995f548cd7cdc384b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a0c6f9affbd7f174013f667070c8daee2</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>af38ff39e7124bef895a914c24c83c8a1</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="variable">
      <type>decltype(std::declval&lt; Implementation &gt;().volume()) typedef</type>
      <name>Volume</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a676b42ba8b5254134db640bd222f3721</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>ac1fe2262b9d8e788f531e0d39cda931e</anchor>
      <arglist>(const Geometry&lt; mydim, cdim, GridImp, GeometryImp &gt; &amp;geo, const Impl &amp;) -&gt; decltype(referenceElement&lt; typename GridImp::ctype, mydim &gt;(geo.type()))</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>realGeometry</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>aab0d17af0967db3c983504a5e0d4c65b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Geometry</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a4b941db0e8d5d3b8fe9280292b17a2e3</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>const Geometry &amp;</type>
      <name>operator=</name>
      <anchorfile>a02682.html</anchorfile>
      <anchor>a33702f099d73f8c0e4976692bbcf6516</anchor>
      <arglist>(const Geometry &amp;rhs)=delete</arglist>
    </member>
    <docanchor file="a02682.html" title="Terminology">Grid1</docanchor>
    <docanchor file="a02682.html" title="Grid refinement">subs33333</docanchor>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::GeometryCache</name>
    <filename>a01998.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; Real, dimWorld, dim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>ad0a23a0b6a1a919b8c4603ea115cce76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; Real, dim, dimWorld &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>a38ddc32dbe5b4ef4efd53941090f0f60</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryCache</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>a1a3bc6c38f782bd577b9ebcf37c5c475</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Real &amp;</type>
      <name>integrationElement</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>ae6e5f7fad94a88c4414202f8ea80fa54</anchor>
      <arglist>(const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>ad24953796252f1b331550e89ecfcd75b</anchor>
      <arglist>(const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a01998.html</anchorfile>
      <anchor>a894010739da0cf1bd08d0a39bcc323fb</anchor>
      <arglist>(const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::GeometryCacheProxy</name>
    <filename>a02002.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>FieldMatrix&lt; Real, dimWorld, dim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>ac3baf2ddc715b683a8b195d5699034e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; Real, dim, dimWorld &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>a60f660a672ecb0064eb6993209967f41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryCacheProxy</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>ad1b00f2eb1e6d9a4955b34bcc7b6a280</anchor>
      <arglist>(GeometryCache&lt; dim &gt; &amp;geometryCache, const ALBERTA EL_INFO &amp;elInfo)</arglist>
    </member>
    <member kind="function">
      <type>const Real &amp;</type>
      <name>integrationElement</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>a28503ae4ee78acc73a607e4ba025d7e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const JacobianTransposed &amp;</type>
      <name>jacobianTransposed</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>aecb43f8867293e8c61e0bb9d9bf0cf53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const JacobianInverseTransposed &amp;</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a02002.html</anchorfile>
      <anchor>a73d54d08fa5cf6f76c4c0ad4c8fa1470</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeometryDefaultImplementation</name>
    <filename>a02686.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <templarg>GeometryImp</templarg>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>ad3b317a43b11807784fc7e0a06a1ad51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a230a18b7eef22940bf9831141a26f57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a12b6a2e70654a30d8a107dcedafe5a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctype</type>
      <name>Volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>afdc103266933aa9c2b8627290751b96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, mydim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>ae830d606953457b981aa4eb44006b8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydim, cdim &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a9f161ddc1bdc40cdcdd9e800054aafc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Volume</type>
      <name>volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a21943761f08ab9d5645963b02278a6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a284db76350a800c76a91f24aab8808bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a1da6409e6820ea32570b1a1c7dc0f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>af3e9441f17eb50018937ff545fe5d18a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeometryDefaultImplementation&lt; 0, cdim, GridImp, GeometryImp &gt;</name>
    <filename>a02690.html</filename>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <templarg>GeometryImp</templarg>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a0e9fb5cecfa2ad8e6b3afa60da3db376</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>ac7636379330e3e56466753ca1281d7e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a1a2b6a776337468ccd952e8ad9f1b934</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctype</type>
      <name>Volume</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a5691eb63d6ff51f0b5c26b8c5af1babf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, mydim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a2b85bd2181cadd5c397de5a8a981c35d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydim, cdim &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>ace7396dbe7c83636da7fb911453af6b2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>global</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a611772a5a89355fb1cf4e92a5161d61b</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a4c76d40dd2fa49842674abae85887fc0</anchor>
      <arglist>(const FieldVector&lt; ctype, cdim &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Volume</type>
      <name>volume</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>aecd46676c86a483108c38a61570aec06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>center</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>ae5e1434379003ec1d842fee7cc20ca7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>a2c9e8f1f4e512c8ad00d35e473100348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02690.html</anchorfile>
      <anchor>ab97714729b9857eb3edb0fdb151d2526</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryDefaultImplementation&lt; mydim, coorddim, GridImp, IdentityGridGeometry &gt;</name>
    <filename>a02686.html</filename>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>ad3b317a43b11807784fc7e0a06a1ad51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a230a18b7eef22940bf9831141a26f57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a12b6a2e70654a30d8a107dcedafe5a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctype</type>
      <name>Volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>afdc103266933aa9c2b8627290751b96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, cdim, mydim &gt;</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>ae830d606953457b981aa4eb44006b8eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, mydim, cdim &gt;</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a9f161ddc1bdc40cdcdd9e800054aafc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Volume</type>
      <name>volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a21943761f08ab9d5645963b02278a6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a284db76350a800c76a91f24aab8808bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a1da6409e6820ea32570b1a1c7dc0f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>af3e9441f17eb50018937ff545fe5d18a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeometryGrid</name>
    <filename>a03062.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::GeometryGrid::Codim</class>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a8f8438aee18b1e3fccb9eb0d31a8dc81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a4e4e3c8f6d5cc590a2c60877bad1c153</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a790ef44420c7acd92dc7d9e21c4a4f76</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>afa2000d545f8882f103918cbd424aae4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ad46537f4fc0cf8c8e4d3465795dabe5f</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a903be807da09a368aeeaac93d5dfa32a</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;entity_)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ab2dbe67a78f746d7fcbbacee5fefb23e</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity_) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ae6e130238464621e03130bc1c06e0d5e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a7a9fa937ca2a1d2bad9be2dc8e6c1055</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a49bf54ca89fa6796429847e3be3b16c0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void *</type>
      <name>allocateStorage</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>aa85c26c7da802d4e191a98516e1d351b</anchor>
      <arglist>(std::size_t size) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>deallocateStorage</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ac55e6cf00fdeea5d1748c83244ec3b37</anchor>
      <arglist>(void *p, std::size_t size) const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static const HostGrid::template Codim&lt; codim &gt;::Entity &amp;</type>
      <name>getHostEntity</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a859abaf8901eb19111a00c85ee871474</anchor>
      <arglist>(const typename Codim&lt; codim &gt;::Entity &amp;entity)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::HierarchicIterator&lt; const Grid &gt;</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a85721e3b6d84bcf94d224c2c5edfe484</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::EntityBase</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>aea173876047c01d4ced73021d8356c15</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::Geometry</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a171d0c34104eb41746709173888c3910</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::GridView</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>aa99cd49d7be2e4ba770d073708ad72bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::Intersection</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a71ce08b39ea1b59c6d9bbda1c21b9f5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::IntersectionIterator</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a96f0391c329b158ce1ee92c81b7b8cb9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::IdSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>abd3c405f20b132b264611c7e25004746</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::IndexSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a63c589bcf1ff9557cea0e37efaf18015</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>HostGridAccess</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a3ded9a6d563622d77f6368a0dcc8db4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>GeoGrid::CommDataHandle</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a9363ab96aef92f2c8ff87cc64be4cdde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a9b9fd0c963dd92567e8a0780dd1ac3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a849a6ab45e7b20f53c9e6fab70c0aee1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ad01c5259d16ecf4a14120101469c57aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a56dc995a8028c984042f81b4c0dcc99d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ae1e12a4eaac3fd4f55e6bdad568f5d76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>aa773b847b245c802f4b1277293f1eb09</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a788617d2909ca2dbdfebe080887812d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ab05498d7d8f8be49d4d24251d5eb8501</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ac944b8718ba26ecf89abbbb4b3435bef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ac2497477e948a44b5ca09196f255802a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a992aff5c1805da0777df193f30cded90</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ae8560c60698b0b719a8a5a1ef0e8dc51</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>af7ec25a365d85bfb72ea710b7dd00128</anchor>
      <arglist>(HostGrid &amp;hostGrid, CoordFunction &amp;coordFunction, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a6da9c7c15eb98fb97d8c791b0e1ba45d</anchor>
      <arglist>(std::shared_ptr&lt; HostGrid &gt; hostGrid, std::shared_ptr&lt; CoordFunction &gt; coordFunction, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>ad5d914bab55b5524e1df07a949444ed7</anchor>
      <arglist>(std::shared_ptr&lt; HostGrid &gt; hostGrid, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GeometryGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a9c663795ec8fee3b6e0ba34dd55cd650</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a0867fa6da7d5a8a8cbaf140bfbffc880</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a6e59e5fe6073cf176ee8fa39829f333a</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a331981591f7df017704a8bb1fe572aaf</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a360f9aad44e6687df176c8be75da0b0e</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>af029ebb5559bfc38ddd2153188ea9b68</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>aea2cf72bda6aa624030388b147ba482e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a6ffa73a7d21416cbeecfddc8b91fb266</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; EntitySeed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a5e5fbf8818ba8dc47aedf4b0eb5d5246</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a6728a79a7fa4631029eff2ca66fad97d</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a51ec0d5d1e39f53f12872e38b453d92e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostGrid &amp;</type>
      <name>hostGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>af223a8ef395b2ba4b619b51be7c518f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HostGrid &amp;</type>
      <name>hostGrid</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a26e042e859aa4952acf48191b2e6e30a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>afb6c9e4ed129626c27c7964ddbafd2d6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CoordFunction &amp;</type>
      <name>coordFunction</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>af8ee74fd5f51c53d69d49ed764ecb85c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CoordFunction &amp;</type>
      <name>coordFunction</name>
      <anchorfile>a03062.html</anchorfile>
      <anchor>a19344b2a2fd4f36056fdb447381e8827</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::GeometryInFather</name>
    <filename>a02410.html</filename>
    <templarg>dim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::GeometryInFather&lt; 1 &gt;</name>
    <filename>a02414.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>LocalVector</name>
      <anchorfile>a02414.html</anchorfile>
      <anchor>aa40c2ca4ea5b8e26e4cf39a1e739fd68</anchor>
      <arglist>[dim]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a02414.html</anchorfile>
      <anchor>a290dd416adfabb96926a12ea9bb782b8</anchor>
      <arglist>(int child, int, int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a02414.html</anchorfile>
      <anchor>a0ebf62661640890908ac6a907b12a4b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::GeometryInFather&lt; 2 &gt;</name>
    <filename>a02418.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>LocalVector</name>
      <anchorfile>a02418.html</anchorfile>
      <anchor>af2bfe40a20ef13641ae2b7167cad693b</anchor>
      <arglist>[dim]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a02418.html</anchorfile>
      <anchor>a3bad2728eb811461f7eefb3dd37ee49a</anchor>
      <arglist>(int child, int, int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a02418.html</anchorfile>
      <anchor>a4008fb74a79a225c58884e14af55a9fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::GeometryInFather&lt; 3 &gt;</name>
    <filename>a02422.html</filename>
    <member kind="typedef">
      <type>Real</type>
      <name>LocalVector</name>
      <anchorfile>a02422.html</anchorfile>
      <anchor>a9eb576d22e41952e518f4d8ba751d6e0</anchor>
      <arglist>[dim]</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const LocalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a02422.html</anchorfile>
      <anchor>a38c284895b39982787c7be5141e9f31e</anchor>
      <arglist>(int child, int orientation, int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a02422.html</anchorfile>
      <anchor>aa2318a66a0ca54e07a50a08b211ef31c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeometryReference</name>
    <filename>a02006.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Implementation::ctype</type>
      <name>ctype</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae01fb3d14daf82da62d3ba86d71365b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac35b0e8118cfd4da6822eec119b63043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9f9a7cdf0056f6b220ca215583890e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae2c68316d02fb1d7582528fe77bbfbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a54020bac15c1997bc20aec2efec94d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryReference</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a5ca87204ee141e91f92665332216c463</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>afa99f8d77c51447fd51fe483309afd11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>aab55ee5855d1cbdc7b233718771477fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac26574883f92698eb2abc92bdfabfa44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab34a190d76ec19ba1171a0e0aaed8fe9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a507219a842aff95718c8d1f1436f6c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ad5f02960c7caa8c10ebe3d7a1aab91f4</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0aef92a73857edafd006d6fc67f8ec7e</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a18b7c05ccb5aed4f39afc618f268695a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a1ddb620ad5c82a53756cae56fd203c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>abb14e02426cc5f512d1252111b0344ea</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab87473834c78e7ddbc7e11059f12e845</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>add35eed07965bbaf7e0b788741b9901d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0d690ef3c7b93c3406e9d7156bd5de3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9feb9b9f244485c5b5dc3a2bf50f6023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GeometryReference&lt; std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; std::remove_const&lt; Grid &gt;::type::dimension - mydim &gt;::LocalGeometryImpl &gt;</name>
    <filename>a02006.html</filename>
    <member kind="typedef">
      <type>Implementation::ctype</type>
      <name>ctype</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae01fb3d14daf82da62d3ba86d71365b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac35b0e8118cfd4da6822eec119b63043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9f9a7cdf0056f6b220ca215583890e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae2c68316d02fb1d7582528fe77bbfbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a54020bac15c1997bc20aec2efec94d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0aef92a73857edafd006d6fc67f8ec7e</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GeometryReference</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a5ca87204ee141e91f92665332216c463</anchor>
      <arglist>(const std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; std::remove_const&lt; Grid &gt;::type::dimension - mydim &gt;::LocalGeometryImpl &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>afa99f8d77c51447fd51fe483309afd11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>aab55ee5855d1cbdc7b233718771477fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac26574883f92698eb2abc92bdfabfa44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab34a190d76ec19ba1171a0e0aaed8fe9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a507219a842aff95718c8d1f1436f6c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ad5f02960c7caa8c10ebe3d7a1aab91f4</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a18b7c05ccb5aed4f39afc618f268695a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a1ddb620ad5c82a53756cae56fd203c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>abb14e02426cc5f512d1252111b0344ea</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab87473834c78e7ddbc7e11059f12e845</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; std::remove_const&lt; Grid &gt;::type::dimension - mydim &gt;::LocalGeometryImpl &amp;</type>
      <name>impl</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>add35eed07965bbaf7e0b788741b9901d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0d690ef3c7b93c3406e9d7156bd5de3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9feb9b9f244485c5b5dc3a2bf50f6023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GeometryTraits</name>
    <filename>a03118.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::GeoGrid::GeometryTraits::CornerStorage</class>
    <class kind="struct">Dune::GeoGrid::GeometryTraits::hasSingleGeometryType</class>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits</type>
      <name>Traits</name>
      <anchorfile>a03118.html</anchorfile>
      <anchor>a2871f8b3ba537e044458adf15f9639a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03118.html</anchorfile>
      <anchor>a42dd0a07b9966b95baf0c45bbcd6d2ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl::FieldMatrixHelper&lt; ctype &gt;</type>
      <name>MatrixHelper</name>
      <anchorfile>a03118.html</anchorfile>
      <anchor>a5316103c11917243eb297d6da4f51abe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ctype</type>
      <name>tolerance</name>
      <anchorfile>a03118.html</anchorfile>
      <anchor>a5d7fde30365a77909b14d7aead7c8ed4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridIntersectionBase::GlobalCoordReader</name>
    <filename>a02134.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a3c8558cd04f5dfe053c700f7bf31b53e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a2d8c23b861b374a6f8788c7d88547a98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a439e58433fbcef1418d0249efa28ca26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>Coordinate</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a2674a16adc0478df9b2e869e9a1673f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalCoordReader</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>abcb0223c8d72cb9c5487b357f2a98270</anchor>
      <arglist>(const GridImp &amp;grid, const ElementInfo &amp;elementInfo, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinate</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>ac28460cc7cc6ae5b72d17c4a6d94831c</anchor>
      <arglist>(int i, Coordinate &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDeterminant</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a7e7a7641f5456b543897cdbe2b539fd9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>determinant</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a79ba9513af47d8cd60004baef8dd7825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>a722215053dd3fec87825e2c406be9c0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>acce276f6a607c8f4fc35c138c978e2e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>aa3411eda39466620d54252e7ba1b316b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02134.html</anchorfile>
      <anchor>aac1b185e88c7efb875509526f5c21eec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTKWriter::VTKLocalFunction::GlobalFunctionWrapper</name>
    <filename>a03906.html</filename>
    <templarg></templarg>
    <base>Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</base>
    <member kind="typedef">
      <type>typename std::decay&lt; F &gt;::type</type>
      <name>Function</name>
      <anchorfile>a03906.html</anchorfile>
      <anchor>a87df297c3347c7a35db810247772c959</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalFunctionWrapper</name>
      <anchorfile>a03906.html</anchorfile>
      <anchor>a00773384ca04578f4b08aba976d634ee</anchor>
      <arglist>(F_ &amp;&amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a03906.html</anchorfile>
      <anchor>aff84077a9908ecb36aa8eba02b948854</anchor>
      <arglist>(const Entity &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind</name>
      <anchorfile>a03906.html</anchorfile>
      <anchor>a2ca6f844155cd450e98a652621c391bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03906.html</anchorfile>
      <anchor>af77f3a7ed6161df0c9294ee96f9cb1f4</anchor>
      <arglist>(const Coordinate &amp;pos, Writer &amp;w, std::size_t count) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GlobalGeometryReference</name>
    <filename>a02694.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>Dune::GlobalIndexSet</name>
    <filename>a04026.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::GlobalIndexSet::SubPartitionTypeProvider</class>
    <class kind="struct">Dune::GlobalIndexSet::SubPartitionTypeProvider&lt; Entity, 0 &gt;</class>
    <member kind="typedef">
      <type>int</type>
      <name>Index</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>a7842178d99a35b241d4c93f7375eb528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GlobalIndexSet</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>af1d6ddb6138a8bb1a19a490c072816e1</anchor>
      <arglist>(const GridView &amp;gridview, int codim)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>aa02e8b4d512eeea296731fca7f2e0496</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>a0024de47e02eb0f48c00142a4456c70e</anchor>
      <arglist>(const Entity &amp;entity, unsigned int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>size</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>aea6e77fce46bbad0238617732eeec929</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const GridView</type>
      <name>gridview_</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>af4bb36468284940e0ff53e2892bbfccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>codim_</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>aaa8841da2f1c2d1967325a15c378cbc8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nGlobalEntity_</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>a9200f3c57a05092b9b89b123d00ad56f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>IndexMap</type>
      <name>localGlobalMap_</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>aac213310c414f436c657c8d596132958</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>MapId2Index</type>
      <name>globalIndex_</name>
      <anchorfile>a04026.html</anchorfile>
      <anchor>a73ec895de0cefc3cbcde84597c313e25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::GlobalSpace</name>
    <filename>a02210.html</filename>
    <member kind="typedef">
      <type>GlobalMatrix</type>
      <name>Matrix</name>
      <anchorfile>a02210.html</anchorfile>
      <anchor>ab0386402c65090e772676789e2a81d20</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GlobalVector</type>
      <name>Vector</name>
      <anchorfile>a02210.html</anchorfile>
      <anchor>ab964db613a65e1be687785a3efa16a8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Matrix &amp;</type>
      <name>identityMatrix</name>
      <anchorfile>a02210.html</anchorfile>
      <anchor>a903e553ce77990909b294d3072b242e5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Vector &amp;</type>
      <name>nullVector</name>
      <anchorfile>a02210.html</anchorfile>
      <anchor>aba008be5c08985feda711f55d112d74f</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GmshReader</name>
    <filename>a03654.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridType</type>
      <name>Grid</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>a5e2ef567687218805ab811bdc473f46c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Grid &gt;</type>
      <name>read</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>aea8b37ff6cf65b1d23b0d3460d14d0f8</anchor>
      <arglist>(const std::string &amp;fileName, bool verbose=true, bool insertBoundarySegments=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; Grid &gt;</type>
      <name>read</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>ae6dd922b65bf15193f50c4d3362bfe62</anchor>
      <arglist>(const std::string &amp;fileName, std::vector&lt; int &gt; &amp;boundarySegmentToPhysicalEntity, std::vector&lt; int &gt; &amp;elementToPhysicalEntity, bool verbose=true, bool insertBoundarySegments=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>a56598c38b14a8e1ffbc024888d0fcc1f</anchor>
      <arglist>(Dune::GridFactory&lt; Grid &gt; &amp;factory, const std::string &amp;fileName, bool verbose=true, bool insertBoundarySegments=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>a45234995ca3e22f433d5269c814775a8</anchor>
      <arglist>(Dune::GridFactory&lt; Grid &gt; &amp;factory, const std::string &amp;fileName, DataFlagArg boundarySegmentData, DataArg elementData, bool verbose=true)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>read</name>
      <anchorfile>a03654.html</anchorfile>
      <anchor>aa59187e25e8ba81594884a479a19b358</anchor>
      <arglist>(Dune::GridFactory&lt; Grid &gt; &amp;factory, const std::string &amp;fileName, std::vector&lt; int &gt; &amp;boundarySegmentToPhysicalEntity, std::vector&lt; int &gt; &amp;elementToPhysicalEntity, bool verbose, bool insertBoundarySegments)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GmshReaderOptions</name>
    <filename>a03634.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>GeometryOrder</name>
      <anchorfile>a03634.html</anchorfile>
      <anchor>ae2578eaac64106ff0bbad10b5e997501</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>firstOrder</name>
      <anchorfile>a03634.html</anchorfile>
      <anchor>ae2578eaac64106ff0bbad10b5e997501a79050c5952b1b9407fd5d236d534634c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>secondOrder</name>
      <anchorfile>a03634.html</anchorfile>
      <anchor>ae2578eaac64106ff0bbad10b5e997501a8ced2274388c5049a571d49f94a49358</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>firstOrder</name>
      <anchorfile>a03634.html</anchorfile>
      <anchor>ae2578eaac64106ff0bbad10b5e997501a79050c5952b1b9407fd5d236d534634c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>secondOrder</name>
      <anchorfile>a03634.html</anchorfile>
      <anchor>ae2578eaac64106ff0bbad10b5e997501a8ced2274388c5049a571d49f94a49358</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GmshReaderParser</name>
    <filename>a03650.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GmshReaderParser</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a6c7bbbd67a0030e6378d393c1b740efc</anchor>
      <arglist>(Dune::GridFactory&lt; GridType &gt; &amp;_factory, bool v, bool i)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>boundaryIdMap</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>ac65f3d685fc832db3f6de8f5bd9d993f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; &amp;</type>
      <name>elementIndexMap</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a425ffd0393fa58547a75c20feb38bf75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a76a5c308d43e47283b9679aa462069ff</anchor>
      <arglist>(const std::string &amp;f)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>pass1HandleElement</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a147e70382194a4b3677dbb0cc7d50dc5</anchor>
      <arglist>(FILE *file, const int elm_type, std::map&lt; int, unsigned int &gt; &amp;renumber, const std::vector&lt; GlobalVector &gt; &amp;nodes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundarysegment_insert</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>addca2333f52c6a0b0d8f9b54f08665e7</anchor>
      <arglist>(const V &amp;, const E &amp;, const V2 &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>boundarysegment_insert</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a63e09c8ff0cfb5ec72dcc8e5ac7a2541</anchor>
      <arglist>(const std::vector&lt; FieldVector&lt; double, 3 &gt; &gt; &amp;nodes, const E &amp;elementDofs, const V &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>pass2HandleElement</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>abbff95482f5cc5712f5aabb8f3fafe5d</anchor>
      <arglist>(FILE *file, const int elm_type, std::map&lt; int, unsigned int &gt; &amp;renumber, const std::vector&lt; GlobalVector &gt; &amp;nodes, const int physical_entity)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>FieldVector&lt; double, dimWorld &gt;</type>
      <name>GlobalVector</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>ad31558f723a013fe266ce2af4f047e99</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readfile</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>aaf9bf4607f0ef36fffcc9d1f2eaf6cb5</anchor>
      <arglist>(FILE *file, int cnt, const char *format, void *t1, void *t2=0, void *t3=0, void *t4=0, void *t5=0, void *t6=0, void *t7=0, void *t8=0, void *t9=0, void *t10=0)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>skipline</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a851bd3b0e2a15c39b5c11ac03840101d</anchor>
      <arglist>(FILE *file)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Dune::GridFactory&lt; GridType &gt; &amp;</type>
      <name>factory</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a24148bc4c7d3c8abba5d643ce50ddfc1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>verbose</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>adf81bf1a6d7be52180d87b9c41ccd623</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>insert_boundary_segments</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>af8ffc70fd759e0bf93d6c2c8b2a375eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>unsigned int</type>
      <name>number_of_real_vertices</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a5b6e2c7070e7bc3b1d2fa656e20f27ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>boundary_element_count</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>add9d0b52224787ff3cacc6336611881d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>element_count</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a6d0a62a82ec64347806e7fa4b4614b39</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>char</type>
      <name>buf</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>af09c182ebec208b6949f971dabbd120e</anchor>
      <arglist>[512]</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>fileName</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>ad4e75b2477c9608108143050d880ca07</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>boundary_id_to_physical_entity</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>aee1a3f96014a35578c75572ce6f2101a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>element_index_to_physical_entity</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>ab0b974c6cf4e675125220847044aee1b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>acaf5df3b54749928e55210675a1b9baf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimWorld</name>
      <anchorfile>a03650.html</anchorfile>
      <anchor>a1e36fd255ecc5cdb14c9fb4b06fa5a9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GmshWriter</name>
    <filename>a03666.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GmshWriter</name>
      <anchorfile>a03666.html</anchorfile>
      <anchor>a24582a753c305c4c996a02ba5d349610</anchor>
      <arglist>(const GridView &amp;gridView, int numDigits=6)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPrecision</name>
      <anchorfile>a03666.html</anchorfile>
      <anchor>ad113fabfbefb84fcbcdc0db0eb3c0197</anchor>
      <arglist>(int numDigits)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03666.html</anchorfile>
      <anchor>af15ab9d280fbc5980bf09a0d15585351</anchor>
      <arglist>(const std::string &amp;fileName, const std::vector&lt; int &gt; &amp;physicalEntities=std::vector&lt; int &gt;(), const std::vector&lt; int &gt; &amp;physicalBoundaries=std::vector&lt; int &gt;()) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GnuplotWriter</name>
    <filename>a03670.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>GnuplotWriter</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>abb5bfa7b578e679e36967af7d1b9f34e</anchor>
      <arglist>(const GridView &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a795d3e663a32bed6fd733930b2b944df</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a4480585a934bb6e2f787cb17e4615e21</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a86a8f005d9040aa4fbc38c0adae76574</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GnuplotWriter&lt; G::LeafGridView &gt;</name>
    <filename>a03670.html</filename>
    <member kind="function">
      <type></type>
      <name>GnuplotWriter</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>abb5bfa7b578e679e36967af7d1b9f34e</anchor>
      <arglist>(const G::LeafGridView &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a795d3e663a32bed6fd733930b2b944df</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a4480585a934bb6e2f787cb17e4615e21</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a86a8f005d9040aa4fbc38c0adae76574</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GnuplotWriter&lt; G::LevelGridView &gt;</name>
    <filename>a03670.html</filename>
    <member kind="function">
      <type></type>
      <name>GnuplotWriter</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>abb5bfa7b578e679e36967af7d1b9f34e</anchor>
      <arglist>(const G::LevelGridView &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a795d3e663a32bed6fd733930b2b944df</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a4480585a934bb6e2f787cb17e4615e21</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a86a8f005d9040aa4fbc38c0adae76574</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Grid</name>
    <filename>a02710.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::Grid::Codim</class>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab6d4570643194ac96189e68c92b60220</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5683d25186d8ee2f376098ed83f2c185</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a1564c65bdad5b5413bd895a4121142f4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aec8890a56641d38f33aaf7b1882f6bc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a63afff954624ec9b06452e39195b3269</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ada884e15d0d07c155260b60072c9648b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridDefaultImplementation</name>
    <filename>a02678.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridDefaultImplementation&lt; 1, 1, OneDGridGeometry&lt; 0, 1, OneDGrid &gt;::ctype, OneDGridFamily &gt;</name>
    <filename>a02678.html</filename>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridDefaultImplementation&lt; dim, Alberta::dimWorld, Alberta::Real, AlbertaGridFamily&lt; dim, Alberta::dimWorld &gt; &gt;</name>
    <filename>a02678.html</filename>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridDefaultImplementation&lt; dim, dim, Coordinates::ctype, YaspGridFamily&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;</name>
    <filename>a02678.html</filename>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridDefaultImplementation&lt; dim, dim, double, UGGridFamily&lt; dim &gt; &gt;</name>
    <filename>a02678.html</filename>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridDefaultImplementation&lt; HostGrid::dimension, HostGrid::dimensionworld, HostGrid::ctype, IdentityGridFamily&lt; HostGrid::dimension, HostGrid &gt; &gt;</name>
    <filename>a02678.html</filename>
    <base>Dune::Grid</base>
    <member kind="typedef">
      <type>GridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>aeb355360f80bd1ee12e0e296cf04aa2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a35d92b4541493e5a6ee4783d9811de71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a9e0b327f80724af8973e96bfe0529789</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a435007e96ec4552124ff43f64e1ca6f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af10850d580532530ec127817a2a28c38</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a93a978abbc10aaa4095ca96458830a6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a14bffeb2e87c19ae6dcc461891f7da20</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aeffadbc0d81bc706a8acf08744b7897e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0b61296a7d039a0217ad00fccb53d7b8</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>afbbc2fbb2d44734f7dd27f6fe8838db1</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a9c9df3758ef2907fc519656f9ba63d03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a6fad67511baa3fddab2c3ffb291e90cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af71bddb30489be8d9ca22fe3c81f7579</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af157a164aed83de8ebc5b64c735f4b5a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a5a99caa65a2c42944b94e3c762b556aa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af7c79b2ec152452cb935a2654a3388f6</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a761e0cf6981e1c4c652b8801b0378714</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridError</name>
    <filename>a02674.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactory</name>
    <filename>a02754.html</filename>
    <templarg></templarg>
    <base>Dune::GridFactoryInterface</base>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a70c4a041e323ee2d7f1106699df242cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a527bb6412a4ec27b0b38599a0bf00654</anchor>
      <arglist>([[maybe_unused]] const FieldVector&lt; ctype, dimworld &gt; &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>ae730b072271f09482c11a7c7dd851702</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type, [[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>acab55841e6422f28f444a859b6888dce</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; GridType &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>af62d4a98d13c697f0a6cc4d14485bf6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>aefa84c2022a0f349af1c146c4cc2eecf</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a080bcc5d5f613154e22a67380f1f7ff9</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type, [[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6acc0aca4d820b22da541f284d3799ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a02014.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <base>GridFactoryInterface&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</base>
    <class kind="struct">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::Codim</class>
    <class kind="class">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::ProjectionFactory</class>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a76dce7e8f1fa7e59774477a29226493b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>aab950dc082271b1ee13da012b2c72868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>WorldVector</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a1c06faf82d7fe2ad9944f87fd8217842</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldMatrix&lt; ctype, dimensionworld, dimensionworld &gt;</type>
      <name>WorldMatrix</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a92cc36f1a553b6490dbc39c52190d85b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>DuneBoundaryProjection&lt; dimensionworld &gt;</type>
      <name>DuneProjection</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a0f3770435933b55cdbe0aeccff62220a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::shared_ptr&lt; const DuneProjection &gt;</type>
      <name>DuneProjectionPtr</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a4b7669d53ec6d7daf7f804c60ff8ca8e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::BoundarySegment&lt; dimension, dimensionworld &gt;</type>
      <name>BoundarySegment</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a9b1c33afe0563e6294640ff6e1fa885a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ac6c58b6426be498098a2158d4db2e608</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridFactory</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a4dd188ad5e2f87299793ee431cf6f1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ac3f9a30b5b159198749ad91b7d3753f0</anchor>
      <arglist>(const WorldVector &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a93693d905b7ed0d7606c89817d907bd8</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundary</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ac59c2fb967184356cea3b542fe6ed637</anchor>
      <arglist>(int element, int face, int id)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a8318ab630fe3164c941a20a431d1010d</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, const DuneProjection *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundaryProjection</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ae0f45017aab23d267a5d487e14723460</anchor>
      <arglist>(const DuneProjection *projection)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>af8a82e77752664f672c1160d5270067c</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ad86d8de086938e5513ea58b021dc96b9</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertFaceTransformation</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a9575b82208e49d2f5091173e70ab306c</anchor>
      <arglist>(const WorldMatrix &amp;matrix, const WorldVector &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a9d97424e2a1ff9cd0b0c53cb5558ab04</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a955373fc48a5691fc148556f54ed0f7b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ad05d12eae5b0cd5d42839ffe2cf5eace</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a3e0f5e944dfd6ed4858d711c02b17313</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>acb6dba3284072f032858acccc3346818</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>aed391606bb578f3a2c26e3f796a071b4</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a43e009a90e1e91dee7bf47f9a6c68927</anchor>
      <arglist>(const typename Grid::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type,[[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>destroyGrid</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>ac718ca8e2d6111f74abc547c47056ba5</anchor>
      <arglist>(Grid *grid)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>af80e75bf36863864f38852f53a5cdefe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a13b77330a4101c548b10c979f63b4d28</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportsBoundaryIds</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a7ff76127cd54a5934c88952bc2c54473</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>supportPeriodicity</name>
      <anchorfile>a02014.html</anchorfile>
      <anchor>a68475d01670aaae4d78a0b1789a36f50</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridFactory&lt; Grid &gt;</name>
    <filename>a02754.html</filename>
    <base>Dune::GridFactoryInterface</base>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a70c4a041e323ee2d7f1106699df242cb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a527bb6412a4ec27b0b38599a0bf00654</anchor>
      <arglist>([[maybe_unused]] const FieldVector&lt; ctype, dimworld &gt; &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>ae730b072271f09482c11a7c7dd851702</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type,[[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>acab55841e6422f28f444a859b6888dce</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>aefa84c2022a0f349af1c146c4cc2eecf</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02754.html</anchorfile>
      <anchor>af62d4a98d13c697f0a6cc4d14485bf6f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a080bcc5d5f613154e22a67380f1f7ff9</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type, [[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6acc0aca4d820b22da541f284d3799ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;</name>
    <filename>a03994.html</filename>
    <templarg>dimworld</templarg>
    <base>GridFactoryInterface&lt; UGGrid&lt; dimworld &gt; &gt;</base>
    <class kind="struct">Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;::Codim</class>
    <member kind="typedef">
      <type>typename UGGrid&lt; dimworld &gt;::CollectiveCommunication</type>
      <name>Communication</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a83c1652d7470109a97d751df54ffc220</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a84c2c597072cb2e7005af9f6f3df2d12</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactory</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>ac271324b1b56821bb6c3e63ea5ee793b</anchor>
      <arglist>(UGGrid&lt; dimworld &gt; *grid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~GridFactory</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a2ad5546679b5cb01eb70e1d845121982</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a28f724c2d891c517c2ab15acced81bfa</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a7d51ac0851cfa08641bedc1c86719d5d</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>adea963c5b567ba39b7b56a1ac196a22b</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a1c225d7ab37c9a5df06af1d3e2869b3c</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices, const std::shared_ptr&lt; BoundarySegment&lt; dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; UGGrid&lt; dimworld &gt; &gt;</type>
      <name>createGrid</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a0d246e642a6dd758251ba8be24754b55</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a37994be6d447fbed22cc893c584f6092</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a7f679988bffacc92428de850c3a9730d</anchor>
      <arglist>(const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>acc4adb02d30c2435e3a6b7a7279651e7</anchor>
      <arglist>(const typename UGGrid&lt; dimworld &gt;::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>aa4e81efbe7fbba64fec6a40562271b76</anchor>
      <arglist>(const typename UGGrid&lt; dimworld &gt;::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>ab22f427aa0b4f495cca1437d6b5be557</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type,[[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03994.html</anchorfile>
      <anchor>a6f6a2e0694b5fb70cbcfdb19a1165f91</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactoryInterface</name>
    <filename>a02746.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::GridFactoryInterface::Codim</class>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9369f079541b31608b8d4e47658609c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a30c6c0095a6bd6f84a1c56f11eab5b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a080bcc5d5f613154e22a67380f1f7ff9</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type, [[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices, [[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; GridType &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a07401edad7eec5362418e064c7db9d21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::ctype</type>
      <name>ctype</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a7b58d79f583d97de9efca4f8ca110caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6acc0aca4d820b22da541f284d3799ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridFactoryInterface&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a02746.html</filename>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9369f079541b31608b8d4e47658609c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a30c6c0095a6bd6f84a1c56f11eab5b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a080bcc5d5f613154e22a67380f1f7ff9</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type,[[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a07401edad7eec5362418e064c7db9d21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::ctype</type>
      <name>ctype</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a7b58d79f583d97de9efca4f8ca110caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6acc0aca4d820b22da541f284d3799ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>GridFactoryInterface&lt; UGGrid&lt; dimworld &gt; &gt;</name>
    <filename>a02746.html</filename>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; typename MPIHelper::MPICommunicator &gt;</type>
      <name>Communication</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>abbf0551a5a9082d1ab1fd3f6bd942d91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9369f079541b31608b8d4e47658609c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~GridFactoryInterface</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a30c6c0095a6bd6f84a1c56f11eab5b20</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertVertex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a5f0b38a138c64daab43f42dd43b2acdc</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;pos)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a080bcc5d5f613154e22a67380f1f7ff9</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_BEGIN void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aacef766012d57f68fdb19df4f0757151</anchor>
      <arglist>([[maybe_unused]] const GeometryType &amp;type,[[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; VirtualFunction&lt; FieldVector&lt; ctype, dimension &gt;, FieldVector&lt; ctype, dimworld &gt; &gt; &gt; &amp;elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual DUNE_NO_DEPRECATED_END void</type>
      <name>insertElement</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>aa831a4071fb0f5c5cec5c1123767cf17</anchor>
      <arglist>(const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices, std::function&lt; FieldVector&lt; ctype, dimworld &gt;(FieldVector&lt; ctype, dimension &gt;)&gt; elementParametrization)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a21637f0ef87b500a57f9e726d8619dcb</anchor>
      <arglist>(const std::vector&lt; unsigned int &gt; &amp;vertices)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>insertBoundarySegment</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a98ec0cf8898d878fd2c7839b93cca63b</anchor>
      <arglist>([[maybe_unused]] const std::vector&lt; unsigned int &gt; &amp;vertices,[[maybe_unused]] const std::shared_ptr&lt; BoundarySegment&lt; dimension, dimworld &gt; &gt; &amp;boundarySegment)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; UGGrid&lt; dimworld &gt; &gt;</type>
      <name>createGrid</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a07401edad7eec5362418e064c7db9d21</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a0b7c2a2e27e63965926aa5fdd611be59</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6152c903208f25b1159c1c7b20d2bc5c</anchor>
      <arglist>([[maybe_unused]] const typename Codim&lt; dimension &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned int</type>
      <name>insertionIndex</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a9bfb090feaf113f48055c45623ee3dbd</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>wasInserted</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a2d905f89116b44f535d4376dc796c7aa</anchor>
      <arglist>([[maybe_unused]] const typename GridType::LeafIntersection &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>Communication</type>
      <name>comm</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a97dafaf7c0a9f08342bd81738fc9831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridType::ctype</type>
      <name>ctype</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a7b58d79f583d97de9efca4f8ca110caa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue" protection="protected">
      <name>dimworld</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a14215e19807befd416b199b60f241ee0a08ec53a31ef19204cd9e8572c0ab4715</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02746.html</anchorfile>
      <anchor>a6acc0aca4d820b22da541f284d3799ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridFamily</name>
    <filename>a03154.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits</class>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::GridParameterBlock</name>
    <filename>a03390.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Flags</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a4ff7f9f323ce7542d96973e20ab53f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridParameterBlock</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a15eafcea1fd2d18901dfe71b2a64de29</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a24b88ddc41ed0197f6088ad536a82b5b</anchor>
      <arglist>(const std::string &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>dumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6aaded57bfd0a0738edcd4eea285272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>ae1a78a247bd46cfa8fc20e4b00d79f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a78e57a95f2299ae56d090a84562e07c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a0bf00acfb6eb31b179006d48d80e7920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundDumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a06bb232c4b906ce7c2e36c7161dea168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af075ecb976aa895aebdeaac9a3693a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Flags</type>
      <name>foundFlags_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a94afe8c549e83f70b9eb6a8c11e8b497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6dec65f7ec6a9c4e229e5ff93763c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>dumpFileName_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a753a31290c5bc38146388bece7070dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>markLongestEdge_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af6cb6850ba239a44db3addbbf62536ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridPtr</name>
    <filename>a03606.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::GridPtr::DataHandle</class>
    <class kind="class">Dune::GridPtr::mygrid_ptr</class>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a86dae11bfd47c208bb1dae44f8d5708d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridPtr</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a7ed3acb5c987c653ec7c2041f4c17088</anchor>
      <arglist>(const std::string &amp;filename, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridPtr</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a0b5845d816d56711f5150d446c4ed0a9</anchor>
      <arglist>(std::istream &amp;input, MPICommunicatorType comm=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridPtr</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a186089d9440f8ecb8c4a9bdc4aff1e45</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridPtr</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a5b7e6af86b3716d57b0a52bf0eafd970</anchor>
      <arglist>(GridType *grd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridPtr</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>ae7b4201dd3f3956beb4e6e413b5965d4</anchor>
      <arglist>(const GridPtr &amp;org)=default</arglist>
    </member>
    <member kind="function">
      <type>GridPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a06b69a474960d32ad132ab17c7ad3b79</anchor>
      <arglist>(const GridPtr &amp;org)</arglist>
    </member>
    <member kind="function">
      <type>GridPtr &amp;</type>
      <name>operator=</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>ab52813ab476a068a6fce7bdda8cb7534</anchor>
      <arglist>(GridType *grd)</arglist>
    </member>
    <member kind="function">
      <type>GridType &amp;</type>
      <name>operator*</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>af3887c941ba3bb641961c420eb7cc464</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>GridType *</type>
      <name>operator-&gt;</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a1077ddfecda18170af16d101b6370d9c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GridType &amp;</type>
      <name>operator*</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a93569fb5f251e9f943ab1d7de85b952f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridType *</type>
      <name>operator-&gt;</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a62c97cf71cbf34296e912231ee6c5ca5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GridType *</type>
      <name>release</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a5fad114f4ef61af668706433ac5e9178</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofParameters</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a95c42914db4d5718fe057bb065879f8f</anchor>
      <arglist>(int cdim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofParameters</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a7c259aedde65e9b5f78312d89710295f</anchor>
      <arglist>(const Entity &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofParameters</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>aa0c282ce0de5a3d59bac13e94cf07d5e</anchor>
      <arglist>(const Intersection&lt; GridImp, IntersectionImp &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>parameters</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a04fa7af4d9231de13f2a9ebde81e9836</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const DGFBoundaryParameter::type &amp;</type>
      <name>parameters</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a9be07facf16cbd635444e00cdaac0d8c</anchor>
      <arglist>(const Intersection&lt; GridImp, IntersectionImp &gt; &amp;intersection) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>af0ff2b4bd637e9c4e711e781b8b31d6d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadBalance</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a4a5cb590e6fdc7bf3e680228c0cff93d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a36af6558de048bdb2ac559e91284f402</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getFileExtension</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>ae8507c6de5c35ca4cc25f97eee7341db</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readGmsh</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>ad2ab8b67e2a294c59703adcbfa1d6bcb</anchor>
      <arglist>(const std::string &amp;filename, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readGmsh</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>ac070067439aed91bb9b062d36bb64f0f</anchor>
      <arglist>(const std::string &amp;filename, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>adf9bc4de0d64be4b877863685b1b12aa</anchor>
      <arglist>(DGFGridFactory&lt; GridType &gt; &amp;dgfFactory)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>initialize</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a546cf6798f70a65ca3d6f7f04e6ec587</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, std::vector&lt; int &gt; &amp;boundaryIds, std::vector&lt; int &gt; &amp;elementIds)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>params</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a1baad77be4991b158c4e3c75babb2b10</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setNofParams</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a3daf5aee5b4329d44ed57a9f7844f3c4</anchor>
      <arglist>(int cdim, int nofP)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static bool</type>
      <name>isEmpty</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a79c74ad2d4c13d20e821d1ce9cb5ea5c</anchor>
      <arglist>(Range &amp;&amp;range)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>mygrid_ptr</type>
      <name>gridPtr_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>aae7a9b275aefaa4377deba35ffef3a17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>elParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a8125762f3f75215b2c6947796043b666</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vtxParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>af3d27960c72f4d318c181663ff12416f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; DGFBoundaryParameter::type &gt;</type>
      <name>bndParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a50af4f715ed3064f4e5174a90fd26dc3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; int &gt;</type>
      <name>bndId_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a3a757bac6e31b17ea7dc180483d4f402</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>emptyParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>aa7ca73ca58280c45addf78874f07f281</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofElParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a5d2fe6eaf011fbaace9d8713bb45a668</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofVtxParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>af942be981521c1cc8996c728942d55dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>haveBndParam_</name>
      <anchorfile>a03606.html</anchorfile>
      <anchor>a1fba0389503d536dbeefa22a49beda00</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridTraits</name>
    <filename>a02722.html</filename>
    <templarg>dim</templarg>
    <templarg>dimw</templarg>
    <templarg></templarg>
    <templarg>GeometryImp</templarg>
    <templarg>EntityImp</templarg>
    <templarg>LevelIteratorImp</templarg>
    <templarg>LeafIntersectionImp</templarg>
    <templarg>LevelIntersectionImp</templarg>
    <templarg>LeafIntersectionIteratorImp</templarg>
    <templarg>LevelIntersectionIteratorImp</templarg>
    <templarg>HierarchicIteratorImp</templarg>
    <templarg>LeafIteratorImp</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>LevelGridViewTraits</templarg>
    <templarg>LeafGridViewTraits</templarg>
    <templarg>EntitySeedImp</templarg>
    <templarg>LocalGeometryImp</templarg>
    <class kind="struct">Dune::GridTraits::Codim</class>
    <member kind="typedef">
      <type>GridImp</type>
      <name>Grid</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>af20677de07effa58c3ac8d7183f049f1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, LeafIntersectionImp&lt; const GridImp &gt; &gt;</type>
      <name>LeafIntersection</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>ab1239c38f14d4fa3b624a2c2d29c4374</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, LevelIntersectionImp&lt; const GridImp &gt; &gt;</type>
      <name>LevelIntersection</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>acbd78bd2eddd611e2cfdd9f3828cacca</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const GridImp, LeafIntersectionIteratorImp&lt; const GridImp &gt;, LeafIntersectionImp&lt; const GridImp &gt; &gt;</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a2ea76774982b0275cf28f0b6d8a0b244</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const GridImp, LevelIntersectionIteratorImp&lt; const GridImp &gt;, LevelIntersectionImp&lt; const GridImp &gt; &gt;</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>ab3bb644f71df3c408d5b45b753b5cca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; 0, const GridImp, HierarchicIteratorImp&lt; const GridImp &gt; &gt;</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a785bed2e1d3d4d0b4bc182a764600d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; LeafGridViewTraits&lt; const GridImp &gt; &gt;</type>
      <name>LeafGridView</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a561e8f97ab25a9fa54f14dc7ce4137ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; LevelGridViewTraits&lt; const GridImp &gt; &gt;</type>
      <name>LevelGridView</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>ab23e2c62533b253a9972635b28f0a98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; const GridImp, LevelIndexSetImp &gt;</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>ab15b45c5173652546755e1e3864ac15e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; const GridImp, LeafIndexSetImp &gt;</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a85635f7b49ec753178ad1bae923df174</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; const GridImp, GlobalIdSetImp, GIDType &gt;</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a76c94cf691e5617a0af9fc60b74d9388</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; const GridImp, LocalIdSetImp, LIDType &gt;</type>
      <name>LocalIdSet</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>a37104ec797c35e9e5dc4bb7c6a479f2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CCType</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02722.html</anchorfile>
      <anchor>ad109aa808e9a1d379d93ab5cc8114a87</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::GridView</name>
    <filename>a03170.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::GeoGrid::GridView::Codim</class>
    <member kind="typedef">
      <type>GridViewTraits&lt; HGV, CoordFunction, Allocator &gt;</type>
      <name>Traits</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>aecd01e25d788dabd6a30a60ad5ce62d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::HostGridView</type>
      <name>HostGridView</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ae20e7ebc88369618b30adc1818aec820</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a00b0013ad6529e6acf67173c5ee0f855</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a6947797efaa74532d967616061d247cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a5c358d2861c2e7770232444339db3bde</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a34ca9578fe7b949d58fa36e1301446a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ad3bcc44e123bd1ef7b2982c7b488f9ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ab5a80093daa8485b9efb3c89ceb98e70</anchor>
      <arglist>(const Grid &amp;grid, const HostGridView &amp;hostGridView)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a774daee78605d69756109a178911908d</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>adb6885b79952abc042d5902ed9c314ca</anchor>
      <arglist>(This &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>adcfd3376f4874f20c2b3e15877a5d652</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a25594ffce7d8d81d52f6128e3a584baf</anchor>
      <arglist>(This &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ad99b868b1bb0b74316e44696de3c0bcb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a85fa0c2f2facfd367dc6ffdbb6c6c55d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a99882cd461b7391442e1cb6a92afed76</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ad632d917a836f9892e813b91d3105092</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ad68a5211ccd607553842c1dd11ebe2ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a85a08284a9186b0db41015af0069aa81</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a56b226b77989a1e777af311d8d196908</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; codim &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a8fd347d047063c832d5f33d204214f00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a4a14aa6a188e621e5de374718f93bef3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ac6b0724ed22045c3fd70d7f47bafe980</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ae906506cc6406c942615fb8e8f232d74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>ab718cf399cc692848727900c0ab1d2e6</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a4f9078ec340b31beab2044ed38d501bf</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>abcdea36f981c91a36b9ca2e3e2bb0d75</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandle, Data &gt; &amp;dataHandle, InterfaceType interface, CommunicationDirection direction) const</arglist>
    </member>
    <member kind="function">
      <type>const HostGridView &amp;</type>
      <name>hostGridView</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>a18c62ea48be20d17a53babb6bd12cf2e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>conforming</name>
      <anchorfile>a03170.html</anchorfile>
      <anchor>aff52ee62c7033c1069fb90e45a53fcb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridView</name>
    <filename>a02758.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::GridView::Codim</class>
    <class kind="struct">Dune::GridView::DeprecatedMethodEmptyFuture</class>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga470166ab4c35a0b7366204d19c430221af1aa25dd4bbb7ed513bd7b08a3e63926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga5c76b0a0ed3fdcf2bd9ab2bbb2df0847a7170531f3c1c62b7904410099cf37a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga45c3ae7dec727cca6837cd1c2360029aa440aff832b6f4ffea3f9f334f016c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTraits ::GridViewImp</type>
      <name>Implementation</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6f7280bd69cfb603432165d70b3a0fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTraits ::GridViewImp</type>
      <name>GridViewImp</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad5b0cd877cf707823f4266ef1ac25e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTraits</type>
      <name>Traits</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga26b2114a4034a33473d01926c6b21b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Grid</type>
      <name>Grid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad6482279521362048503475e72e8adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga5f1345dd3b5cf92a0470c9ce7ea24910</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad52e1af6a8085784dd1a047ec003d1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga04a58d035da1949e02b84757999e3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga14c83b500679183b9095a0c0ea551128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gac2778afeec5a6e768c882746f7baecc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga470166ab4c35a0b7366204d19c430221af1aa25dd4bbb7ed513bd7b08a3e63926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga5c76b0a0ed3fdcf2bd9ab2bbb2df0847a7170531f3c1c62b7904410099cf37a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga45c3ae7dec727cca6837cd1c2360029aa440aff832b6f4ffea3f9f334f016c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9bbe243bea9b505e0fa4f3ab0005c7f5</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad2988e47e63b21c5d21cf344a3604e82</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gadc6db5e0e39171ba2d9d50d55ec70b80</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0b3a52863a2cefddd5af1b80a63f8226</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gacc8f311deabddf0c759465f623e87886</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga4f194e5ca8f8dc43e3552316925eb885</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga163b69ed0f5787171662b67ee84af991</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad05c567186a050cda1b13cd8a8ca9399</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga238916c208f9e3ead728a253d101fda6</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9259fd91c0202503a0fd9d3436360bd4</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga1a59901aedb79caf93090e4211243fa7</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga3deab7ac40c219b9c381bd9de2f3e06b</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>impl_</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga3fc41fda2ed6fe1dbd5cd4ebfea1b69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaaf68cc574df6dc419a2c903bd5009ecf</anchor>
      <arglist>(const Implementation &amp;imp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf3b626d766afd77c38be8ec47149f789</anchor>
      <arglist>(const ThisType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaa4c3d548fb5ca47cdd845e54377a7f27</anchor>
      <arglist>(const ThisType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaabc68b134636fde0a5384017d7047e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gae3f0803a7bc8cc409f98bd87af16b55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga5ddcf4f66ca883711fcdbcd23d0ed28c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga4793d740d8824a946e81674e098c3d53</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gacc036e7e6c42d7b6e88bfdce4a3b1ac1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga92860a4a6cc8a9853597651813e28928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf937633517b9e222b7651caf8b8dc5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga8c6d10ebfc0d41495af02fdccc3997ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga932de218f79e8e9fcfdb4f97451d5159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga2ebb9b611e85170ca9b7caed8c92ea48</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gab4cdba181dd6bd5d6d0efd4604a2d1b6</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaceb2ef5865dc5e6b3931a36b634db1a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga426f2a232840d3d059e9dc1adfca7eb4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gafac7df15b7cfd83142180db8092940b7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga604f7725dc34709f70c328de872bf881</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga3711aa01cd12780440d7e531ec7da344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga03ec4aa1955491927ee99629b94f3128</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga608b5a299cc350230a4a0c65651a292b</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, std::integral_constant&lt; bool, false &gt;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gac5921a9aa4ab7dd0b45ee8e5e80cb7cf</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, std::integral_constant&lt; bool, true &gt;) const</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9bbe243bea9b505e0fa4f3ab0005c7f5</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad2988e47e63b21c5d21cf344a3604e82</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gadc6db5e0e39171ba2d9d50d55ec70b80</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0b3a52863a2cefddd5af1b80a63f8226</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gacc8f311deabddf0c759465f623e87886</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga4f194e5ca8f8dc43e3552316925eb885</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga163b69ed0f5787171662b67ee84af991</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad05c567186a050cda1b13cd8a8ca9399</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga238916c208f9e3ead728a253d101fda6</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9259fd91c0202503a0fd9d3436360bd4</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga1a59901aedb79caf93090e4211243fa7</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga3deab7ac40c219b9c381bd9de2f3e06b</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridViewInfo</name>
    <filename>a04058.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04058.html</anchorfile>
      <anchor>ae0cf729981e65132b58801a79c10111c</anchor>
      <arglist>(std::ostream &amp;stream, std::string prefix) const</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>gridName</name>
      <anchorfile>a04058.html</anchorfile>
      <anchor>ac7d435fc182e732ed30bcf2ebcab5b60</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>gridViewName</name>
      <anchorfile>a04058.html</anchorfile>
      <anchor>a4d1bd5e4fe7ff6f52524094123ceb5c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>partitionName</name>
      <anchorfile>a04058.html</anchorfile>
      <anchor>ac5e1394feb12f892b0eee98b26145eee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a04058.html</anchorfile>
      <anchor>a12e9ef920625cb015ce201753e31d77f</anchor>
      <arglist>(std::ostream &amp;stream, const GridViewInfo&lt; ctype &gt; &amp;info)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridViewInfoGTCompare</name>
    <filename>a04054.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>a04054.html</anchorfile>
      <anchor>a868b383eee29a7da9c31b5292f8bf699</anchor>
      <arglist>(const GeometryType &amp;a, const GeometryType &amp;b) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::GridViewTraits</name>
    <filename>a03174.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::GeoGrid::GridViewTraits::Codim</class>
    <member kind="typedef">
      <type>GridView&lt; HostGridView, CoordFunction, Allocator &gt;</type>
      <name>GridViewImp</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>ab8452117a55fd0d572eebc57e01edcfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>ade9a280c451e6f3fe138e941c923b3db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::IndexSet&lt; const Grid, typename HostGridView::IndexSet &gt;</type>
      <name>IndexSet</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>aa1108c9a78cac5b7f127ec24584786db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const Grid, GeoGrid::Intersection&lt; const Grid, HostIntersection &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>adbfe11e27b586a2d77bbdeff857d1513</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, GeoGrid::IntersectionIterator&lt; const Grid, HostIntersectionIterator &gt;, GeoGrid::Intersection&lt; const Grid, HostIntersection &gt; &gt;</type>
      <name>IntersectionIterator</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>af4af958a7c88976fca38f4fd5a5ab8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGridView::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>ab8f8178e3c8abb9a2a2728826f83f171</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>conforming</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>adbcbca3ab3e4ab33e5bcb94e02b02071</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GridView&lt; HGV, CoordFunction, Allocator &gt;</name>
      <anchorfile>a03174.html</anchorfile>
      <anchor>a870893b8a195775763d87e596d1138fd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities</name>
    <filename>a02530.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02530.html</anchorfile>
      <anchor>aff738a74868d7c6f3cfda9cb0b934fdf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01814.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01814.html</anchorfile>
      <anchor>af26400bf0e222b4cb11ce16c70f647dd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; const Grid &gt;</name>
    <filename>a02570.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02570.html</anchorfile>
      <anchor>ac0e9614781e566cfb2dd8701c27771d4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02946.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02946.html</anchorfile>
      <anchor>a7e4a4dc71ed3b6f922d1aaddcd8b40c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasBackupRestoreFacilities&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04186.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04186.html</anchorfile>
      <anchor>abcaa30ca588f83762982b94c070507f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity</name>
    <filename>a02506.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02506.html</anchorfile>
      <anchor>a75e9ee2b00464750e2b26fd36b8ae7a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</name>
    <filename>a01798.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01798.html</anchorfile>
      <anchor>a1bd58cef6dd38389f1fbbbdde71c394f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; const Grid, codim &gt;</name>
    <filename>a02550.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02550.html</anchorfile>
      <anchor>a944904ea30a106021b94979333b0e223</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</name>
    <filename>a02934.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02934.html</anchorfile>
      <anchor>a63e8cc29d0b8ead5fbf8aded24ba54d5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; Grid&lt; dim, dimworld, ct, GridFamily &gt;, codim &gt;</name>
    <filename>a02734.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02734.html</anchorfile>
      <anchor>a7630d8aca450ca9b7d118195fdb96c74</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; GridDefaultImplementation&lt; dim, dimworld, ct, GridFamily &gt;, cdim &gt;</name>
    <filename>a02738.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>cdim</templarg>
    <member kind="typedef">
      <type>GridDefaultImplementation&lt; dim, dimworld, ct, GridFamily &gt;</type>
      <name>GridType</name>
      <anchorfile>a02738.html</anchorfile>
      <anchor>ab0978ff296c835c35896d890e33c146e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridType::Traits::Grid</type>
      <name>GridImp</name>
      <anchorfile>a02738.html</anchorfile>
      <anchor>ae4803a73307ee88cb00586f31224332d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02738.html</anchorfile>
      <anchor>a2338a17255c95f67be44965423156218</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</name>
    <filename>a03266.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03266.html</anchorfile>
      <anchor>aadbc811208d52897432ff863a56730c6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; OneDGrid, cdim &gt;</name>
    <filename>a03942.html</filename>
    <templarg>cdim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03942.html</anchorfile>
      <anchor>accc4a8868ea9fa61060fe17638ac49b4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; UGGrid&lt; dim &gt;, codim &gt;</name>
    <filename>a03966.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03966.html</anchorfile>
      <anchor>ab4c46560362220f72c306115bd196a29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntity&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</name>
    <filename>a04198.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04198.html</anchorfile>
      <anchor>a24956aba3910f557c632a4f62f84cfa9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator</name>
    <filename>a02510.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02510.html</anchorfile>
      <anchor>a771e61df6ae5663905e373cb03682149</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</name>
    <filename>a01802.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01802.html</anchorfile>
      <anchor>a764288e7c0e86b35c66619fd67aa87f0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; const Grid, codim &gt;</name>
    <filename>a02554.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02554.html</anchorfile>
      <anchor>ac8961d763df9b410e1e3e400ad2553d1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</name>
    <filename>a02938.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02938.html</anchorfile>
      <anchor>a725d70fc8705cef7d9517e08dd6e5e59</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</name>
    <filename>a03270.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03270.html</anchorfile>
      <anchor>aae9f8f35885b07bf3e8f352c4f25512d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; OneDGrid, codim &gt;</name>
    <filename>a03946.html</filename>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03946.html</anchorfile>
      <anchor>af252fa1310799be133eba3c58f64efe2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, 0 &gt;</name>
    <filename>a03974.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03974.html</anchorfile>
      <anchor>a26a248a0bee5f5ee5d9c0deeba16feb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, codim &gt;</name>
    <filename>a03970.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03970.html</anchorfile>
      <anchor>aa38fde8066b96bbbfd2e37a928ad3271</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, dim &gt;</name>
    <filename>a03978.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03978.html</anchorfile>
      <anchor>aeac902455171b3c39cc7f3ad0d71c163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasEntityIterator&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</name>
    <filename>a04202.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04202.html</anchorfile>
      <anchor>abadf09d3ab3d20a340f34c9ad08f52b1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasGeometry</name>
    <filename>a02514.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02514.html</anchorfile>
      <anchor>a735a56b9ffb0cef7eff23da73a01c02a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasHierarchicIndexSet</name>
    <filename>a01818.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasHierarchicIndexSet&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01822.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01822.html</anchorfile>
      <anchor>a49c9e6f93ec88dc05bdc1b0296264e33</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasHostEntity</name>
    <filename>a02966.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasHostEntity&lt; const Grid, codim &gt;</name>
    <filename>a02970.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02970.html</anchorfile>
      <anchor>ae323661fb061aa6b7a7bfc14a822dd25</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasHostEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</name>
    <filename>a02974.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg>codim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02974.html</anchorfile>
      <anchor>a0b614ffeb202165d679868407c00e329</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType</name>
    <filename>a02498.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02498.html</anchorfile>
      <anchor>abf782a7868e92b75f99183208936f4c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02498.html</anchorfile>
      <anchor>ac0c3cafd7214588634f519c7c0fbf0f4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GeometryTraits::hasSingleGeometryType</name>
    <filename>a03126.html</filename>
    <templarg>mydim</templarg>
    <base>InferHasSingleGeometryType&lt; Capabilities::hasSingleGeometryType&lt; Grid &gt;, Traits::dimension, mydim &gt;</base>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a8b34ef261fada62642a3abdcf1859950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a7bc971869926958ab8096f87b30d2c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01794.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01794.html</anchorfile>
      <anchor>ad86492e75561094f553ca62b39501307</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a01794.html</anchorfile>
      <anchor>ae2161a37af4dca98f136ffebbc4f9221</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; const Grid &gt;</name>
    <filename>a02542.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02542.html</anchorfile>
      <anchor>acd049b97be09eff6adbc14aab8409a8f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02542.html</anchorfile>
      <anchor>a2bea8c49834922c216bf97b6aca43e62</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02930.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02930.html</anchorfile>
      <anchor>a1230dcc6636d886c00980dbb4f32a106</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a02930.html</anchorfile>
      <anchor>aa224fb9d930a1934c15bd80f736b49df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; OneDGrid &gt;</name>
    <filename>a03938.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03938.html</anchorfile>
      <anchor>afa9dc49f941623e4c2dec3d80b58f292</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03938.html</anchorfile>
      <anchor>aa9d07c2e414b8b1f89cf9d934ec7cc06</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::hasSingleGeometryType&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04190.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04190.html</anchorfile>
      <anchor>a551761197f3f6ad90be343473c07d64e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a04190.html</anchorfile>
      <anchor>a7e0c0560c216f48d0e0aed7b966d265f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::HierarchicIterator</name>
    <filename>a03074.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>abdaca9ec78aa6bef43dc5f89bc09ee1a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>aa09b38ec503766b67f323545f3048060</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicIterator</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a3394d1afd6fe80b0c0403d7445304a10</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchicIterator</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a929f4d472da00d0f70a9889e4bbe13d3</anchor>
      <arglist>(const Grid &amp;grid, HostEntityIterator hostEntityIterator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a24a605c0c83529c1aff9f4f6e6900776</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a2b381223e214d4ba223044374e719e6b</anchor>
      <arglist>(const HierarchicIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a2c97ed8c5f4a82bebe5f14de8a06be66</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a1bef8ebc524cc69838ed615f38a14417</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a73a3aa362aa6706de302fcf2a21cb6a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03074.html</anchorfile>
      <anchor>a196a87ce367236d7d6c7e54be77cb273</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HierarchicSearch</name>
    <filename>a04062.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>HierarchicSearch</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a9460d6b947eaf92afaf9858195724061</anchor>
      <arglist>(const Grid &amp;g, const IS &amp;is)</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>findEntity</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a4ba4275685ccbed79c224532abce38ae</anchor>
      <arglist>(const FieldVector&lt; ct, dimw &gt; &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>findEntity</name>
      <anchorfile>a04062.html</anchorfile>
      <anchor>a518a3da13e81ec0cbcfcb8e18b23aca4</anchor>
      <arglist>(const FieldVector&lt; ct, dimw &gt; &amp;global) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::HierarchyDofNumbering</name>
    <filename>a01862.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a424d3d1c9a8a1e6ecc03088ffd6b0926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a860f98b7d6bb1d1b3c7dc84a153f95c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchyDofNumbering</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a04c1bcd5fee88aa52f44560ec035a80d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyDofNumbering</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a32fa1caf0809f7d57970072f4e40ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a1103aaa532ae6ecdc2149ce27e018cb4</anchor>
      <arglist>(const Element *element, int codim, unsigned int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a48d659d36ea5275b82b9fea494666f20</anchor>
      <arglist>(const ElementInfo &amp;element, int codim, unsigned int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>ac45094fa6e826065d5aad626cc71491c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a2f5f3cdb8b7e84d02e46e988e6c2a04c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>emptyDofSpace</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a553d69c351931d6c6cce7e451ed01452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeshPointer &amp;</type>
      <name>mesh</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a6cfe4139cf427e85c6a8c484d95940fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a4ee8007bc0a5e1124d945b22d163ebc1</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a19fc3a572c26984ace1664a681af3a31</anchor>
      <arglist>(const MeshPointer &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>aa88c08c3d19fdf077f1cd68b5cc558f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a98f0d24143e595d305a36617541ad5b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>HierarchyDofNumbering&lt; dimension &gt;</name>
    <filename>a01862.html</filename>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dimension &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a424d3d1c9a8a1e6ecc03088ffd6b0926</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a860f98b7d6bb1d1b3c7dc84a153f95c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HierarchyDofNumbering</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a04c1bcd5fee88aa52f44560ec035a80d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~HierarchyDofNumbering</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a32fa1caf0809f7d57970072f4e40ee52</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a1103aaa532ae6ecdc2149ce27e018cb4</anchor>
      <arglist>(const Element *element, int codim, unsigned int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>operator()</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a48d659d36ea5275b82b9fea494666f20</anchor>
      <arglist>(const ElementInfo &amp;element, int codim, unsigned int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>ac45094fa6e826065d5aad626cc71491c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>dofSpace</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a2f5f3cdb8b7e84d02e46e988e6c2a04c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const DofSpace *</type>
      <name>emptyDofSpace</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a553d69c351931d6c6cce7e451ed01452</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeshPointer &amp;</type>
      <name>mesh</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a6cfe4139cf427e85c6a8c484d95940fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a4ee8007bc0a5e1124d945b22d163ebc1</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a19fc3a572c26984ace1664a681af3a31</anchor>
      <arglist>(const MeshPointer &amp;mesh)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>aa88c08c3d19fdf077f1cd68b5cc558f1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01862.html</anchorfile>
      <anchor>a98f0d24143e595d305a36617541ad5b2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::HostCorners</name>
    <filename>a03190.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>HostGeometry::GlobalCoordinate</type>
      <name>Coordinate</name>
      <anchorfile>a03190.html</anchorfile>
      <anchor>adebeba1277bc5086fe8875e13a4f29a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>HostCorners</name>
      <anchorfile>a03190.html</anchorfile>
      <anchor>ac77de2d42efb522c6026a84ff27a2a49</anchor>
      <arglist>(const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03190.html</anchorfile>
      <anchor>a847ca9a56ca1867c2475069bc968c46f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinate</type>
      <name>operator[]</name>
      <anchorfile>a03190.html</anchorfile>
      <anchor>ac4796dab49d657d650d0428085a63cc9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03190.html</anchorfile>
      <anchor>adef425f7c2c80a6152fb3b7f44648ec8</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::HostGridAccess</name>
    <filename>a03258.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a04066.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;::Codim</class>
    <member kind="typedef">
      <type>Grid::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a6c4baf7debf8a45d8ac2310236ef489d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>af3bbce8654288cbd31d01b12e91bba6d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::Traits::LeafIntersection</type>
      <name>HostLeafIntersection</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>ab909b102e8358f8b2a17b340df786675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::Traits::LevelIntersection</type>
      <name>HostLevelIntersection</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a183e124e2fb08479651d5186983fe00a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeometryGrid&lt; HG, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a44a41a0792353ed6c4188a5ccd99050d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::HostGrid</type>
      <name>HostGrid</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a17e2f10c468a7f61eec53251fdd5b115</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HostGrid &amp;</type>
      <name>hostGrid</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a9f737412657c8d4bee851c37c99b1004</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Codim&lt; Entity::codimension &gt;::HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a01fe775c4805bf5b936c5f1f55d6c7a7</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Codim&lt; codim &gt;::HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a1117b560c816a11c590a03ee5dc87802</anchor>
      <arglist>(const typename Codim&lt; codim &gt;::Entity &amp;entity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HostIntersection &amp;</type>
      <name>hostIntersection</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a16d20e3ab5137fd293ef425d3708c168</anchor>
      <arglist>(const Intersection&lt; const Grid, GeoGrid::Intersection&lt; const Grid, HostIntersection &gt; &gt; &amp;intersection)</arglist>
    </member>
    <member kind="typedef">
      <type>GeometryGrid&lt; HG, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a44a41a0792353ed6c4188a5ccd99050d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::HostGrid</type>
      <name>HostGrid</name>
      <anchorfile>a04066.html</anchorfile>
      <anchor>a17e2f10c468a7f61eec53251fdd5b115</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;</name>
    <filename>a04074.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;::Codim</class>
    <member kind="typedef">
      <type>Grid::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a0714daaa670fcf31f4879bba0557f91c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a3e2962cca699093b8db2b6bdfa95e2e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::Traits::LeafIntersection</type>
      <name>HostLeafIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a59912fbff9554a3f431d8ca90557aa81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::Traits::LevelIntersection</type>
      <name>HostLevelIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a38bec74e9dd212a784889ee62bd83845</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGrid&lt; HG &gt;</type>
      <name>Grid</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a151a0ac5ad69418092e9e4fe60a91fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HG</type>
      <name>HostGrid</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a126b237b540bda8be0113fd78581f5e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HostGrid &amp;</type>
      <name>hostGrid</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>aeb8a8d7725a490eb1ed48e309da79669</anchor>
      <arglist>(const Grid &amp;grid)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Codim&lt; Entity::codimension &gt;::HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a0864d8a10360d584e7ace1ca04e5bb74</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const Codim&lt; codim &gt;::HostEntity &amp;</type>
      <name>hostEntity</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a71c8edefe114ce3d63ea56f85684a193</anchor>
      <arglist>(const typename Codim&lt; codim &gt;::Entity &amp;entity)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HostLeafIntersection &amp;</type>
      <name>hostIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a0f8ce247dc3abc4233e455f37a2d7b85</anchor>
      <arglist>(const LeafIntersection &amp;intersection)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const HostLevelIntersection &amp;</type>
      <name>hostIntersection</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a9f82b89a106018334aaa8733315a098a</anchor>
      <arglist>(const LevelIntersection &amp;intersection)</arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGrid&lt; HG &gt;</type>
      <name>Grid</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a151a0ac5ad69418092e9e4fe60a91fad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HG</type>
      <name>HostGrid</name>
      <anchorfile>a04074.html</anchorfile>
      <anchor>a126b237b540bda8be0113fd78581f5e3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdenticalCoordFunction</name>
    <filename>a03194.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <base>AnalyticalCoordFunction&lt; ctype, dim, dim, IdenticalCoordFunction&lt; ctype, dim &gt; &gt;</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ae7fd118e1582243e059596f00633fbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>a39d81849cd57edf1e2313e8b4c4d1f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdenticalCoordFunction</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>a243a40f97fc104742bb6794a73ae0a43</anchor>
      <arglist>(Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>RangeVector</type>
      <name>operator()</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ab1617063a05a7680e4046082d293dc6e</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdenticalCoordFunction&lt; HostGrid::ctype, HostGrid::dimensionworld &gt;</name>
    <filename>a03194.html</filename>
    <base>Dune::AnalyticalCoordFunction</base>
    <member kind="typedef">
      <type>Base ::DomainVector</type>
      <name>DomainVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ae7fd118e1582243e059596f00633fbf6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base ::RangeVector</type>
      <name>RangeVector</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>a39d81849cd57edf1e2313e8b4c4d1f87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>This</type>
      <name>Interface</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ad96ae2fcf63b5e46c518f4ed9d7b26d8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Impl</type>
      <name>Implementation</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a13fea70cdccbb417a843fb6fa78217ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a8f0e02b54e869045ce1f290bd162cfc6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdenticalCoordFunction</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>a243a40f97fc104742bb6794a73ae0a43</anchor>
      <arglist>(Args &amp;...)</arglist>
    </member>
    <member kind="function">
      <type>RangeVector</type>
      <name>operator()</name>
      <anchorfile>a03194.html</anchorfile>
      <anchor>ab1617063a05a7680e4046082d293dc6e</anchor>
      <arglist>(const DomainVector &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a7954a8d756ae6191aea105b46e517ef3</anchor>
      <arglist>(const DomainVector &amp;x, RangeVector &amp;y) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimDomain</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ac04a2b995fc7c139adad7d6fc70440ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>dimRange</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>a87269153d990dce43bd18b230b04bfec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>accc5661b1d67cd4013f2b3e049ea28c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>Implementation &amp;</type>
      <name>asImp</name>
      <anchorfile>a02990.html</anchorfile>
      <anchor>ae4a380dc001f33d44dee6a3203a76ad1</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGrid</name>
    <filename>a03254.html</filename>
    <templarg></templarg>
    <base>GridDefaultImplementation&lt; HostGrid::dimension, HostGrid::dimensionworld, HostGrid::ctype, IdentityGridFamily&lt; HostGrid::dimension, HostGrid &gt; &gt;</base>
    <member kind="typedef">
      <type>HostGrid</type>
      <name>HostGridType</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a2f535be4dd63028ca3735e09da8ac4aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGridFamily&lt; HostGrid::dimension, HostGrid &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa0d420d1e43c6b5a635be085504e0922</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGridFamily&lt; HostGrid::dimension, HostGrid &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a0bbaae82da5a6a481f5258d97c8efc4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::ctype</type>
      <name>ctype</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a639244b2988315872c683f72f07f74fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGrid</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>ac8ae6e1be9a6aeac795bf428b7968516</anchor>
      <arglist>(HostGrid &amp;hostgrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IdentityGrid</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a7a3563331c126f98537d6823533b7bda</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a5f28d58d1acb9168438ba1c3a43231c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a7454df4bce16b9ff453bfce94101bb1a</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a4d6e862cee1921e60b6300f7eac545c1</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; PiType &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a1d53f034ad0af1455930bf75fd16525b</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; PiType &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa2b37a7913ce94f1d52507d4c3bebaef</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aca5343e511e57b7cbc60cd87517f4420</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a99998b9a650532695fe0afe3c31b9cac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; PiType &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a43c6a1a33789fd46ff82577a5d671239</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; PiType &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa0cae8bbce5fbebd88b7e1aee9b49512</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a19453e41d3050bbef8faf92fbcf322c6</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a9086035979e70704a4b1e9406a5bae20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a4e21096a5af0a069a3b96c867428a724</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a19b3e9bbe752174605d3d55cd080b9e9</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a5cbd9c8bc41ffeb9b1a62adc8a3c2969</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a50ccb72a493e0496863a960aabf1d620</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>ac67dce00ca3615c8dbd0e939b4c30cc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a095131f119b0a77b3e804242c9fc4476</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa82fd9f57291caebd4cf51780b928264</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; EntitySeed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a87a655c30724eb5f239df8f2a127880b</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLevelIndexSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a0898b1329e2f1c8bdbb4d0525d758ce0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLeafIndexSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a615dbd1cac966b6be8a8b7a582f5fbda</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridGlobalIdSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a02a6b3d3bb86ad734811f79056fcd180</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLocalIdSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a42d4254b1a3eb4dd2a202229ae936b78</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridHierarchicIterator&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a1ba26735801bb81d8b3d52f4ad660eea</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLevelIntersectionIterator&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a6fca79e0dbcbf3cf4bf6c3b8a317cd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLeafIntersectionIterator&lt; const IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a21e210696df60947789f23f3a5850411</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLevelIterator</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>ac873ac4dddb9f960c991d15697cf3a72</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLeafIterator</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a67a54e03522afbcd5d15949811797318</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a558dd656c3fe3c5ad17141f49359de81</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>HostGridAccess&lt; IdentityGrid&lt; HostGrid &gt; &gt;</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a0daa25268ea396e7265e67a97b4fa68e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>HostGrid *</type>
      <name>hostgrid_</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a45bd9cfcc893f091e245811803dc8f4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa219438d7d12ae4d468c002a2acba8ce</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a03f5beab05d55d93bc440afbde439d46</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>af6ec8743d8960ecff1858819dc724f2e</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>acdba156bf3450f2f08f32047ee432a8f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a3377c4a2308f8847c391f6e5eeeb843b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a31810c3e1bfef4df75b1f61e3f84fec9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>overlapSize</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>aa565d161a9c24684262769e122b1dfb8</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>ghostSize</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>ace32ceec385b1f5221f789d2a697f7ad</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>overlapSize</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>acd7ba83ef50968ca9992301ee716a281</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>ghostSize</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a2375e7b7ccdc73031eb95d44ec742f6d</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication&lt; No_Comm &gt; &amp;</type>
      <name>comm</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a3045749af31ec4132f80ca711255e39f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HostGridType &amp;</type>
      <name>getHostGrid</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>a87226fefd2a084ff6970765bcb3c6b6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostGrid::Traits::template Codim&lt; codim &gt;::Entity &amp;</type>
      <name>getHostEntity</name>
      <anchorfile>a03254.html</anchorfile>
      <anchor>ab1c0eb2002f2fd8ff0deefde9d0ed0ff</anchor>
      <arglist>(const typename Traits::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridEntity</name>
    <filename>a03286.html</filename>
    <templarg>codim</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; codim, dim, GridImp, IdentityGridEntity &gt;</base>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>acbd37a12a70e1d6358d2185d60ddcabc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a6e57dd2721e822cdacd75467ce9bd871</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a0086b1bc108ddc944f600bcd35a1528e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a7d6e542fec00d41ba7d089cd12226a35</anchor>
      <arglist>(const GridImp *identityGrid, const HostGridEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a9699f77da6b9119274cd58452769de1a</anchor>
      <arglist>(const GridImp *identityGrid, HostGridEntity &amp;&amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a960a5e7a37149be46a710a9a744c60fe</anchor>
      <arglist>(const IdentityGridEntity &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a45542db772af8905ecfe20582ab5457a</anchor>
      <arglist>(IdentityGridEntity &amp;&amp;original)</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridEntity &amp;</type>
      <name>operator=</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>aa5c62199b3a962fc68215187cead1924</anchor>
      <arglist>(const IdentityGridEntity &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridEntity &amp;</type>
      <name>operator=</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a7ed75ccd316f9af4d5dfbf60e419da2d</anchor>
      <arglist>(IdentityGridEntity &amp;&amp;original)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a4602289e9da00c72bc38b5220d1c91da</anchor>
      <arglist>(const IdentityGridEntity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>acade8f16cab0b4f89c481cd45e16631b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a75def7cda02f4699d691011c9983c1a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>adac811b6c6172e449471b0410f718f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a8eccc5ceaa131ae5fcf34807ad4caca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a91c20681a7f7e8f86cdd8dd679968c6e</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a8ba8d9605695ee9482bcc4a3e66b6314</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>HostGridEntity</type>
      <name>hostEntity_</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a4fce83a00949c54a4a39eafd1eaa51c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLevelIndexSet</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>af761e89fc5036420c9210ee59fec7b22</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLeafIndexSet</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a977f2ce1aa60db7cf53bb9f024e128eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLocalIdSet</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a59a3ce48afe6611f0b17d4562e022322</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridGlobalIdSet</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>ab40300089f3edf4d59d70497b0745d84</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>HostGridAccess&lt; typename std::remove_const&lt; GridImp &gt;::type &gt;</name>
      <anchorfile>a03286.html</anchorfile>
      <anchor>a22466467a2ab3b42f1332f32e3d1074b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridEntity&lt; 0, dim, GridImp &gt;</name>
    <filename>a03306.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; 0, dim, GridImp, IdentityGridEntity &gt;</base>
    <member kind="enumvalue">
      <name>CodimInHostGrid</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a6a9c2b30676350f80b3c0df2ee3b6ca1a7d45975baa962a31950de65bfe71f5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::HostGridType::Traits::template Codim&lt; CodimInHostGrid &gt;::Entity</type>
      <name>HostGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>abb81198673571a270e14b1f6c9b0abab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>ae5c10557a5b40514b9ba922edde1b02a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a2ea3bdf3de762dcbb99e18b021ddc689</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGridLevelIntersectionIterator&lt; GridImp &gt;</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a7cf9d60c6d0a585399288f8dda5bf7d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGridLeafIntersectionIterator&lt; GridImp &gt;</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>aedfdde8b2bff51927a22901e9f0ec027</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdentityGridHierarchicIterator&lt; GridImp &gt;</type>
      <name>HierarchicIterator</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a7a7bccc0c45ae6149fe5e49a4328eca9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a32efe0537c02d3db84f68cc5cd4bc529</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CodimInHostGrid</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a6a9c2b30676350f80b3c0df2ee3b6ca1a7d45975baa962a31950de65bfe71f5a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a2157ee8fd0e7e228c9bc40096917547f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a4449a685a4a54c5c48edd1d694a60491</anchor>
      <arglist>(const GridImp *identityGrid, const HostGridEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a1c7cba1f5e72eff4ba0ca03fd6b36dda</anchor>
      <arglist>(const GridImp *identityGrid, HostGridEntity &amp;&amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a6985eeae8db08b9ca0474df58f24e1b4</anchor>
      <arglist>(const IdentityGridEntity &amp;original)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>adb43aff52cf203fd635751d2f36e831b</anchor>
      <arglist>(IdentityGridEntity &amp;&amp;original)</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridEntity &amp;</type>
      <name>operator=</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>ae678fe28b67dc1a852dbfd081ead2034</anchor>
      <arglist>(const IdentityGridEntity &amp;original)</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridEntity &amp;</type>
      <name>operator=</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a04249a911d3cf8942afc866dae091369</anchor>
      <arglist>(IdentityGridEntity &amp;&amp;original)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>aeecc394a77feab64c88dcd2dd5763dd9</anchor>
      <arglist>(const IdentityGridEntity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>aadf40e88811c41bb6d6aca1c2432a8b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a3446055798cc0fa3209058f008128c7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a446d82f70379bab4b9f0cd08a8f2a3e6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>af208ea48a5229cdc2d1d251026486288</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a584bf2e8e7be10c994c00cabfc00f733</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a1571f9a9d798cd9802fc2d3c94764aff</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>GridImp::template Codim&lt; cc &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a1626b4a6df259b3a5f5df0d35c048343</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridLevelIntersectionIterator&lt; GridImp &gt;</type>
      <name>ilevelbegin</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a21c2cd6ab634f9b1effe5b47b76980cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridLevelIntersectionIterator&lt; GridImp &gt;</type>
      <name>ilevelend</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>add39cd8698e1d2606f019a99ede5a5de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridLeafIntersectionIterator&lt; GridImp &gt;</type>
      <name>ileafbegin</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a7ec1fc30a8c8bde385e5c1d0e09f2e19</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridLeafIntersectionIterator&lt; GridImp &gt;</type>
      <name>ileafend</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a522a743e28ac580248a28ab81dd1c9dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a20008f759e76a1f4e7445f82fc2faa2a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>father</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a207ac5bd593d47a9dd523927c394e52b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>acfc20a7da0417c5537cc704987a28e3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridHierarchicIterator&lt; GridImp &gt;</type>
      <name>hbegin</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a4c931dbe5935e0652521b314b2585743</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>IdentityGridHierarchicIterator&lt; GridImp &gt;</type>
      <name>hend</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a660d384f79981bd54b9c3c20571f30b7</anchor>
      <arglist>(int maxLevel) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>wasRefined</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a89bf535220e6b93ca83b35281f349f56</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightBeCoarsened</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>ac61c1af42b4510fef99b859d1af5f1a7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>HostGridEntity</type>
      <name>hostEntity_</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a520384c61d6549da98dadd75ae1bd3aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const GridImp *</type>
      <name>identityGrid_</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>ad6d1c86c654cfa23a6dbce01948118d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>HostGridAccess&lt; typename std::remove_const&lt; GridImp &gt;::type &gt;</name>
      <anchorfile>a03306.html</anchorfile>
      <anchor>a22466467a2ab3b42f1332f32e3d1074b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridEntitySeed</name>
    <filename>a03310.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>af3ce0be0d1badf5a7bdfd9fc1717a7a3aa085137fa58424013830daeb71cdeaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>af3ce0be0d1badf5a7bdfd9fc1717a7a3aa085137fa58424013830daeb71cdeaca</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntitySeed</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>a288bbbc2f8ac728e4e60d0ed6efe1df9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridEntitySeed</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>aca9cdcfe5567dd34e97def59e408d191</anchor>
      <arglist>(const HostEntity &amp;hostEntity)</arglist>
    </member>
    <member kind="function">
      <type>const HostEntitySeed &amp;</type>
      <name>hostEntitySeed</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>aa18c87387312d9c015958cfe6ec122ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>a40b706474681c17075e5278d2bf0a890</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::HostGridType::Traits::template Codim&lt; codim &gt;::Entity</type>
      <name>HostEntity</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>a819d9a04873881956ed6f8012a849e88</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>GridImp::HostGridType::Traits::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>HostEntitySeed</name>
      <anchorfile>a03310.html</anchorfile>
      <anchor>aeb4b187b9bdcf52919f78a10b22dde18</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::IdentityGridFamily</name>
    <filename>a03262.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridTraits&lt; dim, HostGrid::dimensionworld, Dune::IdentityGrid&lt; HostGrid &gt;, IdentityGridGeometry, IdentityGridEntity, IdentityGridLevelIterator, IdentityGridLeafIntersection, IdentityGridLevelIntersection, IdentityGridLeafIntersectionIterator, IdentityGridLevelIntersectionIterator, IdentityGridHierarchicIterator, IdentityGridLeafIterator, IdentityGridLevelIndexSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;, IdentityGridLeafIndexSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;, IdentityGridGlobalIdSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;, typename HostGrid::Traits::GlobalIdSet::IdType, IdentityGridLocalIdSet&lt; const IdentityGrid&lt; HostGrid &gt; &gt;, typename HostGrid::Traits::LocalIdSet::IdType, CollectiveCommunication&lt; No_Comm &gt;, DefaultLevelGridViewTraits, DefaultLeafGridViewTraits, IdentityGridEntitySeed &gt;</type>
      <name>Traits</name>
      <anchorfile>a03262.html</anchorfile>
      <anchor>a643d4b53949fa48dba6627cc04e686bc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridGeometry</name>
    <filename>a03314.html</filename>
    <templarg>mydim</templarg>
    <templarg>coorddim</templarg>
    <templarg></templarg>
    <base>GeometryDefaultImplementation&lt; mydim, coorddim, GridImp, IdentityGridGeometry &gt;</base>
    <member kind="enumvalue">
      <name>CodimInHostGrid</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>aaee8552731b4c2c16ec28781e63ac627a01708b71ce12dfae2686dfdeeeec3339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DimensionWorld</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a40949c2f757f87c0d6ac0ea8cf8e7375a948587ec2a4c0a5165bef24f754bb935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::HostGridType::Traits::template Codim&lt; CodimInHostGrid &gt;::Geometry</type>
      <name>HostGridGeometryType</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>aa4783928dd3fc66ee338547c588f7fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::HostGridType::Traits::template Codim&lt; CodimInHostGrid &gt;::Geometry</type>
      <name>HostGridLocalGeometryType</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a7eebb57585bb262e6a8e6b15a2dc20c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional&lt; coorddim==DimensionWorld, HostGridGeometryType, HostGridLocalGeometryType &gt;::type</type>
      <name>HostGridGeometry</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a9a839cb1f6141af888d190697dacc809</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGridGeometryType::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>ac43be9c1d8b1e05f159aa9b8ebd6f86d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGridGeometryType::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a60c34752b631a7b99cbe64d5c92f02ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CodimInHostGrid</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>aaee8552731b4c2c16ec28781e63ac627a01708b71ce12dfae2686dfdeeeec3339</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DimensionWorld</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a40949c2f757f87c0d6ac0ea8cf8e7375a948587ec2a4c0a5165bef24f754bb935</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, mydim &gt;</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a230a18b7eef22940bf9831141a26f57b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, cdim &gt;</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a12b6a2e70654a30d8a107dcedafe5a7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ctype</type>
      <name>Volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>afdc103266933aa9c2b8627290751b96c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridGeometry</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a2f1d76a6ffa95d19b6b44c331ffb6e1b</anchor>
      <arglist>(const HostGridGeometry &amp;hostGeometry)</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a365fb4aa806972e4d451ef255547c29c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a1a320040fbd03938cebcc313873baeb3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>aef7cf15f6654c8c59ddcc4c7df269f03</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const FieldVector&lt; ctype, coorddim &gt;</type>
      <name>corner</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a63271549fe59c0c7957b31ac46876c86</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, coorddim &gt;</type>
      <name>global</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a5766eb707168aa863eb14e28053add2a</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a158b4c212d21d30195bfc1096fcb10df</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>FieldVector</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a830cc2e65c2a651c10ff40e2317d0f44</anchor>
      <arglist>(const FieldVector&lt; ctype, coorddim &gt; &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkInside</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a0e4e945198e04f68917a037e28bc3e17</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a741c922dd1c279f928213977175ff740</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a124284b6fa30d1b6d6274d378da60528</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>Volume</type>
      <name>volume</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a21943761f08ab9d5645963b02278a6fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a284db76350a800c76a91f24aab8808bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>HostGridGeometry</type>
      <name>hostGeometry_</name>
      <anchorfile>a03314.html</anchorfile>
      <anchor>a78210d2b5827bfb878e66e7d90bac6fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>a1da6409e6820ea32570b1a1c7dc0f331</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02686.html</anchorfile>
      <anchor>af3e9441f17eb50018937ff545fe5d18a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridGlobalIdSet</name>
    <filename>a03326.html</filename>
    <templarg></templarg>
    <base>IdSet&lt; GridImp, IdentityGridGlobalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::GlobalIdSet::IdType &gt;</base>
    <member kind="typedef">
      <type>HostGrid::Traits::GlobalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>ae9b7898e6fb7e6c2e25264561a49cd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridGlobalIdSet</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a1c812be53da41381bcc150dc7320e79e</anchor>
      <arglist>(const GridImp &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>affe987674163b4d72f1c4fc8559775db</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>aff036a76501bb097db402c96796769c8</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a25b14e3ca6562c245bf316ad77eab228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a6b766d98521d6309284d99280f433456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentityGridGlobalIdSet&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03326.html</filename>
    <base>Dune::IdSet</base>
    <member kind="typedef">
      <type>HostGrid::Traits::GlobalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>ae9b7898e6fb7e6c2e25264561a49cd57</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridGlobalIdSet</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a1c812be53da41381bcc150dc7320e79e</anchor>
      <arglist>(const const Dune::IdentityGrid&lt; HostGrid &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>affe987674163b4d72f1c4fc8559775db</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>aff036a76501bb097db402c96796769c8</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a25b14e3ca6562c245bf316ad77eab228</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable">
      <type>const const Dune::IdentityGrid&lt; HostGrid &gt; *</type>
      <name>grid_</name>
      <anchorfile>a03326.html</anchorfile>
      <anchor>a6b766d98521d6309284d99280f433456</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridHierarchicIterator</name>
    <filename>a03302.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a2517b22492bc82640e11c6731c9c20f7aeb1389571026cf96edf3929e1af6ed63</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a8e18a57baf6ae3125ef5c33881ea7d89</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a2517b22492bc82640e11c6731c9c20f7aeb1389571026cf96edf3929e1af6ed63</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridHierarchicIterator</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>aebd5e0d03c127b9836d8e2fc76936c83</anchor>
      <arglist>(const GridImp *identityGrid, const Entity &amp;startEntity, int maxLevel)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridHierarchicIterator</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a6a3ef4b194cb332e03ec8a6b2c7afcd4</anchor>
      <arglist>(const GridImp *identityGrid, const Entity &amp;startEntity, int maxLevel, [[maybe_unused]] bool endDummy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a7d67c2e9ce45504c1a0cd5a532ac97d3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>ae0b559e450987269683ea0100cfe5a11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03302.html</anchorfile>
      <anchor>a94f4e2dba240d68b8050d60e58b005fc</anchor>
      <arglist>(const IdentityGridHierarchicIterator &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLeafIndexSet</name>
    <filename>a03322.html</filename>
    <templarg></templarg>
    <base>IndexSet&lt; GridImp, IdentityGridLeafIndexSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::IndexType, std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::Types &gt;</base>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aeda8bb987e905ec63a9d1db3e820039aa980105d8fbe161d98f64b0bea7895fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::LevelGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a540a243ac8b6048c7200cff0aded7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aeda8bb987e905ec63a9d1db3e820039aa980105d8fbe161d98f64b0bea7895fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIndexSet</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a12c7612e966b2f29a0ce9d5f309da4f3</anchor>
      <arglist>(const GridImp &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a65fec3663887610714552cd5107f9693</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a67193d3a743eef29826082c3916b1da6</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a456f6564ec807a9a730fc6ca1ed5c282</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a266c6d45c40833fa8e14e40906c4ec5b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a181f45dafb916edf7797870bb93750e7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aae296bd035d3c48fa78ebd5930a1c920</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a441e0c7a36010b1255cbc023bc903a4e</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>ade8a88f024c7370376dfec579e648393</anchor>
      <arglist>(const GridImp &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable">
      <type>GridImp *</type>
      <name>grid_</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aaf333d75d57960222153ec1be4a2515d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentityGridLeafIndexSet&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03322.html</filename>
    <base>Dune::IndexSet</base>
    <member kind="typedef">
      <type>HostGrid::LevelGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a540a243ac8b6048c7200cff0aded7a2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aeda8bb987e905ec63a9d1db3e820039aa980105d8fbe161d98f64b0bea7895fbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexTypeImp</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIndexSet</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a12c7612e966b2f29a0ce9d5f309da4f3</anchor>
      <arglist>(const const Dune::IdentityGrid&lt; HostGrid &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a65fec3663887610714552cd5107f9693</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a67193d3a743eef29826082c3916b1da6</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a456f6564ec807a9a730fc6ca1ed5c282</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a266c6d45c40833fa8e14e40906c4ec5b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a181f45dafb916edf7797870bb93750e7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aae296bd035d3c48fa78ebd5930a1c920</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>a441e0c7a36010b1255cbc023bc903a4e</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>ade8a88f024c7370376dfec579e648393</anchor>
      <arglist>(const const Dune::IdentityGrid&lt; HostGrid &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable">
      <type>const Dune::IdentityGrid&lt; HostGrid &gt; *</type>
      <name>grid_</name>
      <anchorfile>a03322.html</anchorfile>
      <anchor>aaf333d75d57960222153ec1be4a2515d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLeafIntersection</name>
    <filename>a03334.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>acee0685325b9f7ab4f7eb7f3961f535b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a0a41527a0ebd92ead19c47fa6b98f503</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>adadc7afe166c036b17a890aa86bd531b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalVector</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a60efdcc8217039fee207baef53daaa4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIntersection</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a2d5fbec8c78646035fc2ecda3c8df13d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIntersection</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a8fd07c5337d79dff75f08de65cb4b167</anchor>
      <arglist>(const GridImp *identityGrid, const HostLeafIntersection &amp;hostIntersection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIntersection</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a056ab6b9dfc506e2f573dcccf1345ab5</anchor>
      <arglist>(const GridImp *identityGrid, HostLeafIntersection &amp;&amp;hostIntersection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a9e9753bbbcf147ab52833b6034c17406</anchor>
      <arglist>(const IdentityGridLeafIntersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a04d18087c072bccf379b458640ea709a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a202377a4f12c14613f2c6c143892f29f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a49b12570fa851689b3e8bf75a40e3626</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a084584daf72a5f8df9d3368ead3fe6bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>ab867b4f8b60ec30102b0fb461b314bb5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a9077877e0bfae35a54d5b71008920fc5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a8dbd0c11286941069131be3c2fbad4ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a5bfdbd95738957d6975ac21af85b0fb9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a79dbd0bfebd7b1f5e719dd387f8eca22</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a25bac3faa1ee9a5fe10674994e4bc243</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a19ae177986651ca49c946d773df63ab5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>acbf2804f05e23262cdea5b7b20e59ca7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>aa5f9413419b0be566ac8daea37fcb5b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, GridImp::dimensionworld &gt;</type>
      <name>outerNormal</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a13f9e73cfa68abb7570df563b5d6bd73</anchor>
      <arglist>(const FieldVector&lt; ctype, GridImp::dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, GridImp::dimensionworld &gt;</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a2682d7fbece1447e823aa475bc57a8c2</anchor>
      <arglist>(const FieldVector&lt; ctype, GridImp::dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, GridImp::dimensionworld &gt;</type>
      <name>unitOuterNormal</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>adc7718d62e30b46c40ac667f950a9c56</anchor>
      <arglist>(const FieldVector&lt; ctype, GridImp::dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLeafIntersectionIterator&lt; GridImp &gt;</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>aa4045281290d5bc99331588ff58233b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>HostGridAccess&lt; typename std::remove_const&lt; GridImp &gt;::type &gt;</name>
      <anchorfile>a03334.html</anchorfile>
      <anchor>a22466467a2ab3b42f1332f32e3d1074b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLeafIntersectionIterator</name>
    <filename>a03298.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, Dune::IdentityGridLeafIntersection&lt; GridImp &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>aea71fe332ab3218d659a6439ccb9c430</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIntersectionIterator</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>aed2b0d4e0cf037f2170cc9d0b2089817</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIntersectionIterator</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>a5c49c0dc0e28faaefff547cc6bb08845</anchor>
      <arglist>(const GridImp *identityGrid, const HostLeafIntersectionIterator &amp;hostIterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>a32633a1200f9cedd5c0bed35ffdada07</anchor>
      <arglist>(const IdentityGridLeafIntersectionIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>a340aae4fbc58f0186590132dbe02b22b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Intersection</type>
      <name>dereference</name>
      <anchorfile>a03298.html</anchorfile>
      <anchor>a9c7703a9b388d57c7c598a8541ce75d4</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLeafIterator</name>
    <filename>a03342.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>a4b10d5cd11dd6d4570004d0b3e254fbfac8f82e8f12c109d5453c07ca1e78be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>ab954e16bec34e35cf6511fd087076ad1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>a4b10d5cd11dd6d4570004d0b3e254fbfac8f82e8f12c109d5453c07ca1e78be28</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIterator</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>abce0d8febe77c3244b4f0c1797e9b8b4</anchor>
      <arglist>(const GridImp *identityGrid)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLeafIterator</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>a4709ec30ce0376c9be2d52cecb81afe2</anchor>
      <arglist>(const GridImp *identityGrid, [[maybe_unused]] bool endDummy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>adcb0a96cf975a6dad2f7d87a3fae4fd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>a159798bf4ed35bb78a6121355d83c692</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03342.html</anchorfile>
      <anchor>a1bd323faf3358a0171f28daebe1c1d6f</anchor>
      <arglist>(const IdentityGridLeafIterator &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLevelIndexSet</name>
    <filename>a03318.html</filename>
    <templarg></templarg>
    <base>IndexSet&lt; GridImp, IdentityGridLevelIndexSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::IndexType, std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::Types &gt;</base>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>af1985395460af2d222400ae2f504715fadd3b253af33556720191e2f03c399cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType</type>
      <name>HostGrid</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a2ac043b0f95bf4ee5f84b8ba17e5d5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::LevelGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>aa117f8d0edb47e4eb53343701003a7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>af1985395460af2d222400ae2f504715fadd3b253af33556720191e2f03c399cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a0ec14c0bc52c96c97e9545589b567f53</anchor>
      <arglist>(const typename GridImp::Traits::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>ac4c6f85307faf598622536ed186b5c7b</anchor>
      <arglist>(const typename GridImp::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>aab14d4ed819268f6a0651733f3f5efb4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a81fe582077dfe96f39378ce8d3019d79</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a1a6490b8057cc3b1a8cab62c86f9ca4b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a6542d56205c120483da06ec081b2e78b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a04ac0b582bdfd91fbb19a75f3abadcfd</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>afaba7be81d3337803683debaae101166</anchor>
      <arglist>(const GridImp &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable">
      <type>GridImp *</type>
      <name>grid_</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a288a1ea8a0e8a34b3b9cdeec6ab41d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level_</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>af824bf66ee5c4ece2615b9fddecc23dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentityGridLevelIndexSet&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03318.html</filename>
    <base>Dune::IndexSet</base>
    <member kind="typedef">
      <type>std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::HostGridType</type>
      <name>HostGrid</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a2ac043b0f95bf4ee5f84b8ba17e5d5d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::LevelGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>aa117f8d0edb47e4eb53343701003a7c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>af1985395460af2d222400ae2f504715fadd3b253af33556720191e2f03c399cfa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexTypeImp</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a0ec14c0bc52c96c97e9545589b567f53</anchor>
      <arglist>(const typename GridImp::Traits::template Codim&lt; codim &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subIndex</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>ac4c6f85307faf598622536ed186b5c7b</anchor>
      <arglist>(const typename GridImp::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>aab14d4ed819268f6a0651733f3f5efb4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a81fe582077dfe96f39378ce8d3019d79</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a1a6490b8057cc3b1a8cab62c86f9ca4b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a6542d56205c120483da06ec081b2e78b</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a04ac0b582bdfd91fbb19a75f3abadcfd</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>afaba7be81d3337803683debaae101166</anchor>
      <arglist>(const const Dune::IdentityGrid&lt; HostGrid &gt; &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable">
      <type>const Dune::IdentityGrid&lt; HostGrid &gt; *</type>
      <name>grid_</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>a288a1ea8a0e8a34b3b9cdeec6ab41d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>level_</name>
      <anchorfile>a03318.html</anchorfile>
      <anchor>af824bf66ee5c4ece2615b9fddecc23dc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLevelIntersection</name>
    <filename>a03338.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a121b7fce482a5d689a254c1891a14f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a3d9fe46a8359e489f2b3943666113d22</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a0b06b9feff5e6012683240c8d0b01bf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>NormalVector</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a5be24277937eb8148ab110f39751a0e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIntersection</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a27c51e939a94e98a0ce564b3163a4181</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIntersection</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a0b48c54be051e4a7aeb8a84ca493517f</anchor>
      <arglist>(const GridImp *identityGrid, const HostLevelIntersection &amp;hostIntersection)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIntersection</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>afdedee870188dcd746411103f09810bf</anchor>
      <arglist>(const GridImp *identityGrid, HostLevelIntersection &amp;&amp;hostIntersection)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a1df9fb9b1eecf7cc4dfa21fa4bccac74</anchor>
      <arglist>(const IdentityGridLevelIntersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>ae74b7d4747562149d56f4a3ad805301a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>aca8af8c656a91569bd183669bf876cd4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a5fd4ae1ed62bf23cabdf9c7718b3d51b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>NormalVector</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a2f294e22bd6df3f326af9971ed69d173</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a2530dd452cf6cefd6156bd5dc0a9511a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>ab8089266e2337656c8b51e791c6e3120</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a2f57fa8a7a62378c645e51891075eb08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>aef26758d44a02fa2c4af41a438e3cfbd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a8394f6f875cec768d30aa436f23f3b00</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a7cff5d7c71587658d8402dabbb219089</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a093893241ca20088495ae66a6b415069</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a338eaf749483eaa0a3f57d67de570769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a86ca0c75147a5bb4ba82d7270968d037</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>outerNormal</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a006276af6b9fa8027e6eb8b91a1337e9</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a07406dbf09c9ed2b6c61eb74d5c681b5</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>unitOuterNormal</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>af4af20c72baa73897585a980fe048d3f</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>IdentityGridLevelIntersectionIterator&lt; GridImp &gt;</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>af463bc135ea8c3ff99be3cf2779f9617</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>HostGridAccess&lt; typename std::remove_const&lt; GridImp &gt;::type &gt;</name>
      <anchorfile>a03338.html</anchorfile>
      <anchor>a22466467a2ab3b42f1332f32e3d1074b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLevelIntersectionIterator</name>
    <filename>a03294.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, Dune::IdentityGridLevelIntersection&lt; GridImp &gt; &gt;</type>
      <name>Intersection</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>a75a25ee462a58f047d999fdda1969282</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIntersectionIterator</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>afd1e42c0136920c19fa3fdb5d034da56</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIntersectionIterator</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>a38b71d9d098ab3921c2f6b1d70d8b429</anchor>
      <arglist>(const GridImp *identityGrid, const HostLevelIntersectionIterator &amp;hostIterator)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>a0b54b5bb834901b85dd139034c2cd761</anchor>
      <arglist>(const IdentityGridLevelIntersectionIterator&lt; GridImp &gt; &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>a1037566787074ac53496da640e803415</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Intersection</type>
      <name>dereference</name>
      <anchorfile>a03294.html</anchorfile>
      <anchor>ac32574a7f8f237bea4294f37b2c73ce2</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLevelIterator</name>
    <filename>a03290.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a29ad709edd91ac7112cd99fb790b9fceac81223e0f729345b47c961a6438f4f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a131d9a0522fd611aa2fa2d4573885648</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a29ad709edd91ac7112cd99fb790b9fceac81223e0f729345b47c961a6438f4f45</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIterator</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a51ff754efb68c3c3f5e0cfd9117d1f06</anchor>
      <arglist>(const GridImp *identityGrid, int level)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLevelIterator</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>ace6bd84e1d6ef2d4dd2e2432da017b9e</anchor>
      <arglist>(const GridImp *identityGrid, int level, [[maybe_unused]] bool endDummy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a07b768a6505a34c20500f3f5bc97b85f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>ab660adcaa702b28b3d756c73bdf323f9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03290.html</anchorfile>
      <anchor>a96de6947a38292b8bcb40c1c7d586280</anchor>
      <arglist>(const IdentityGridLevelIterator &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdentityGridLocalIdSet</name>
    <filename>a03330.html</filename>
    <templarg></templarg>
    <base>IdSet&lt; GridImp, IdentityGridLocalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::LocalIdSet::IdType &gt;</base>
    <member kind="typedef">
      <type>HostGrid::Traits::LocalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>af8c1d148d35c85f5a1490e3fb749221d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLocalIdSet</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>a98c22d308ef51ef1baaa6dfe94d57af7</anchor>
      <arglist>(const GridImp &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ad5420c2ba705f81712d63d84f9c5794c</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>a5ecd138d907965b648e0ecef0c4823b1</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ac2b9cd203a6426c5fb57dacfc6eb9372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable">
      <type>const GridImp *</type>
      <name>grid_</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ac138c8e9c4aaf6dc3316065945152438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdentityGridLocalIdSet&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03330.html</filename>
    <base>Dune::IdSet</base>
    <member kind="typedef">
      <type>HostGrid::Traits::LocalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>af8c1d148d35c85f5a1490e3fb749221d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdentityGridLocalIdSet</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>a98c22d308ef51ef1baaa6dfe94d57af7</anchor>
      <arglist>(const const Dune::IdentityGrid&lt; HostGrid &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ad5420c2ba705f81712d63d84f9c5794c</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>a5ecd138d907965b648e0ecef0c4823b1</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::IdentityGrid&lt; HostGrid &gt; &gt;::type::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ac2b9cd203a6426c5fb57dacfc6eb9372</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable">
      <type>const const Dune::IdentityGrid&lt; HostGrid &gt; *</type>
      <name>grid_</name>
      <anchorfile>a03330.html</anchorfile>
      <anchor>ac138c8e9c4aaf6dc3316065945152438</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::IdSet</name>
    <filename>a03198.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IdSet&lt; Grid, IdSet&lt; Grid, HostIdSet &gt;, HostIdSet::IdType &gt;</base>
    <member kind="typedef">
      <type>HostIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>afdb501b68a918ac1916123efc83690e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a0fdf2cc6d76cb20c0607f2c8e2e9cef0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a15c54b7529cb0be300b6982f91dbaaf1</anchor>
      <arglist>(const HostIdSet &amp;hostIdSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>aa8970d4479b50a8da14e84a4253a3120</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const This &amp;</type>
      <name>operator=</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>af69b71244338100c006ff4445c957124</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a4e15452664bad6f416347833121c8d49</anchor>
      <arglist>(const typename Traits::template Codim&lt; codim &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a3fb32e58546f6eda082729319e55debf</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a42a7224a0846ba021f18aec2e1e5ec9b</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;entity, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a8697d890ec4fde4f83b2d2eb631b28ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a03198.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IdSet</name>
    <filename>a02706.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::IdSet::Codim</class>
    <member kind="typedef">
      <type>IdTypeImp</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdSet&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGridIdSet&lt; dim, dimworld &gt;, unsigned int &gt;</name>
    <filename>a02706.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdSet&lt; Grid, IdSet&lt; Grid, HostIdSet &gt;, HostIdSet::IdType &gt;</name>
    <filename>a02706.html</filename>
    <member kind="typedef">
      <type>HostIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdSet&lt; GridImp, IdentityGridGlobalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::GlobalIdSet::IdType &gt;</name>
    <filename>a02706.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::GlobalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdSet&lt; GridImp, IdentityGridLocalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::LocalIdSet::IdType &gt;</name>
    <filename>a02706.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::Traits::LocalIdSet::IdType</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IdSet&lt; GridImp, YaspGlobalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::PersistentIndexType &gt;</name>
    <filename>a02706.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::PersistentIndexType</type>
      <name>IdType</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7da8f5ba2179b1896017b5b1016d6011</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a467728e5dd76efdc21fef6b6f3bcff0a</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IdSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a96d884c534ed43190934c914f681a5f1</anchor>
      <arglist>(const IdSet &amp;)=delete</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IdSet</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a62c31f8e670fafaffcac2269e5d7459f</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::IndexSet</name>
    <filename>a03202.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IndexSet&lt; Grid, IndexSet&lt; Grid, HostIndexSet &gt;, HostIndexSet::IndexType, HostIndexSet::Types &gt;</base>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>ae123cf54a74afe6fa8da71047d398435</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Types</type>
      <name>Types</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a9b4724c7097c9abcdd0cfe6e90cf2d39</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a5bbaeaf471379dd501f37aa5ea2dabd2</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a95f960ca1bd74d068c6de39c65e476a6</anchor>
      <arglist>(const HostIndexSet &amp;hostIndexSet)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a2fae07a549286acee93c9f425d1119f0</anchor>
      <arglist>(const This &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a8c9756a7388467b9f07866efdb0c4c8a</anchor>
      <arglist>(This &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>ac82224830c5bc31801b90819ab0c873f</anchor>
      <arglist>(const This &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a2a19dfe36086cd88da2c5153a6becfcb</anchor>
      <arglist>(This &amp;&amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>af22a9cbd9ccfb3dc187f32c9318a5605</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a71058249a6bf74c60eb57a69d21ed8b3</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;entity, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a061fa5935a65c08c2e09ccfbe4bcd3d6</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>ad6578098c05ce1d9e5d4fada070920a7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a8cb4af15de8cec19e4b0bed8c0f9b37d</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a2c791831229f19794c738f87a46f5694</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>adb2b2fa1fbdae0fb44478d29e3bb5d97</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a4b139c03ea0b7495a1012445db0c8bae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a418f4e98c48ebccf33a4e2e908d71213</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a3ad940385f0581b27816f5ced63d642e</anchor>
      <arglist>(const HostIndexSet &amp;hostIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03202.html</anchorfile>
      <anchor>a4f3b33641b60e29d24007586928427fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndexSet</name>
    <filename>a02702.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::IndexSet::Codim</class>
    <member kind="typedef">
      <type>IndexTypeImp</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypesImp</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGridIndexSet&lt; dim, dimworld &gt;, int, std::array&lt; GeometryType, 1 &gt; &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; GeometryType, 1 &gt;</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; AlbertaGridFamily&lt; dim, dimworld &gt;, AlbertaGridHierarchicIndexSet&lt; dim, dimworld &gt;, int, std::array&lt; GeometryType, 1 &gt; &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; GeometryType, 1 &gt;</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; Grid, IndexSet&lt; Grid, HostIndexSet &gt;, HostIndexSet::IndexType, HostIndexSet::Types &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>HostIndexSet::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostIndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; GridImp, IdentityGridLeafIndexSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::IndexType, std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::Types &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LeafGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; GridImp, IdentityGridLevelIndexSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::IndexType, std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::Types &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::HostGridType::LevelGridView::IndexSet::Types</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; GridImp, IndexSetImp &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>IndexTypeImp</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypesImp</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>IndexSet&lt; GridImp, YaspIndexSet&lt; GridImp, isLeafIndexSet &gt;, unsigned int &gt;</name>
    <filename>a02702.html</filename>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>IndexType</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab3b85ef4b435257bafc0e838cca15b91</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypesImp</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a992da4d0ef49956670f9056b2ee6d96e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a102ee32d7dc22920ceb453cc92d54eb7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a9d132597c71c264a5966d5c0031cb63e</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function">
      <type>IndexSet &amp;</type>
      <name>operator=</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>ab4d73aa767e3386b58bd4d7722817691</anchor>
      <arglist>(const IndexSet &amp;)=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>IndexSet</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7da13f2d0e4c1ec77e8e7354660da739</anchor>
      <arglist>()=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndexSetDefaultImplementation</name>
    <filename>a02778.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>IndexSet&lt; GridImp, IndexSetImp &gt;</base>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a02778.html</anchorfile>
      <anchor>a124fbfbf76eed3227eb49d09e78c9561</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Types</type>
      <name>Types</name>
      <anchorfile>a02778.html</anchorfile>
      <anchor>a22a85039b78b14ace3105a113c773abb</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02778.html</anchorfile>
      <anchor>a7a2a96a6c814bb68c033f3d910c5ec01</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Types</type>
      <name>types</name>
      <anchorfile>a02778.html</anchorfile>
      <anchor>abd81363eace51ab96e4b50f1d82b8690</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02778.html</anchorfile>
      <anchor>ad3cf3ae0dcef0efd7c4931aed76ccc6e</anchor>
      <arglist>(const int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a21277808430ded4b56c62c1717a8729d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IndexStack</name>
    <filename>a02126.html</filename>
    <templarg></templarg>
    <templarg>length</templarg>
    <member kind="function">
      <type></type>
      <name>IndexStack</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a963600c4274abbc30b0afc7c0efefc78</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~IndexStack</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a5ec121f84ab34e9032238f8416096e75</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkAndSetMax</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a3f8058543235a0db3366dff28da9ee14</anchor>
      <arglist>(T index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setMaxIndex</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>aa06f1232bd9964fd7cad720ca034d46c</anchor>
      <arglist>(T index)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMaxIndex</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>afd8d447caedae28079c95eadf3fe8877</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>acd6592a4e2ab92a3fd9231319573d7d8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>getIndex</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a7970e3a05fc0abb870fcc0ffea3de1bd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>freeIndex</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>af63fc15a180cc82e98d03fee63fbf80b</anchor>
      <arglist>(T index)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>test</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>adf550b4d89dd5fc598f9d5a2e859a59a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>backupIndexSet</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a3fb064638c2b92a114dccc8ea3465560</anchor>
      <arglist>(std::ostream &amp;os)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>restoreIndexSet</name>
      <anchorfile>a02126.html</anchorfile>
      <anchor>a1fed92f81321287b05a25837d6e83cd3</anchor>
      <arglist>(std::istream &amp;is)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::InferHasSingleGeometryType</name>
    <filename>a03106.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <templarg>mydim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a8b34ef261fada62642a3abdcf1859950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a7bc971869926958ab8096f87b30d2c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>InferHasSingleGeometryType&lt; Capabilities::hasSingleGeometryType&lt; Grid &gt;, Traits::dimension, mydim &gt;</name>
    <filename>a03106.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a8b34ef261fada62642a3abdcf1859950</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03106.html</anchorfile>
      <anchor>a7bc971869926958ab8096f87b30d2c11</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 0 &gt;</name>
    <filename>a03114.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03114.html</anchorfile>
      <anchor>aca5c47904783412bd0ea99869096a7c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03114.html</anchorfile>
      <anchor>a7fc65d6cdfc232e18d17f37c49fd0472</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 1 &gt;</name>
    <filename>a03110.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03110.html</anchorfile>
      <anchor>a37a252f5978b2874204bfec9393d5e4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned int</type>
      <name>topologyId</name>
      <anchorfile>a03110.html</anchorfile>
      <anchor>ae7d74784ae4578fab70d62182e0fc870</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridHierarchicIndexSet::InitEntityNumber</name>
    <filename>a02118.html</filename>
    <member kind="function">
      <type></type>
      <name>InitEntityNumber</name>
      <anchorfile>a02118.html</anchorfile>
      <anchor>a507fb9fd7a1d313316ba99933fa2417e</anchor>
      <arglist>(IndexStack &amp;indexStack)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02118.html</anchorfile>
      <anchor>ab9deb826c481f9f2ed57528001a685b9</anchor>
      <arglist>(int &amp;dof)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ElementInfo::Instance</name>
    <filename>a01910.html</filename>
    <member kind="function">
      <type>InstancePtr &amp;</type>
      <name>parent</name>
      <anchorfile>a01910.html</anchorfile>
      <anchor>ac1884cb09f0439453f075bc9a49f3aab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>ALBERTA EL_INFO</type>
      <name>elInfo</name>
      <anchorfile>a01910.html</anchorfile>
      <anchor>a1d2ee16c793bbb94797e8006945b7bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>unsigned int</type>
      <name>refCount</name>
      <anchorfile>a01910.html</anchorfile>
      <anchor>ac5d67481832d94a6160a9d8e45abad44</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Alberta::GeometryCache&lt; dim &gt;</type>
      <name>geometryCache</name>
      <anchorfile>a01910.html</anchorfile>
      <anchor>a13fa2c35ddd7c13ab568826a98bcc59c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::CoordCache::Interpolation</name>
    <filename>a01834.html</filename>
    <member kind="typedef">
      <type>Alberta::Patch&lt; dimension &gt;</type>
      <name>Patch</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a047442f94574e8459f58a960667b00d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interpolateVector</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a7cd13b8d16e5524da2665eb9f3c98556</anchor>
      <arglist>(const CoordVectorPointer &amp;dofVector, const Patch &amp;patch)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a01834.html</anchorfile>
      <anchor>a0a42e86dcb20d942d6b0a8c905835275</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridLevelProvider::Interpolation</name>
    <filename>a02174.html</filename>
    <member kind="typedef">
      <type>Alberta::Patch&lt; dimension &gt;</type>
      <name>Patch</name>
      <anchorfile>a02174.html</anchorfile>
      <anchor>a7dfaf67d832d9c8ce94254058bdf7a70</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>interpolateVector</name>
      <anchorfile>a02174.html</anchorfile>
      <anchor>ac1ce5c8805a3c94ac6b5686095cdb3d5</anchor>
      <arglist>(const DofVectorPointer &amp;dofVector, const Patch &amp;patch)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02174.html</anchorfile>
      <anchor>af099be41e545491d527303aaec632be1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Intersection</name>
    <filename>a03206.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::ctype</type>
      <name>ctype</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a172fcf39d35e053309c0af872268f489</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a13b8dbac30ffd56c4794c73a505f7a06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a321de5a9c9cdcdd0770319d9dfe98c73</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a75a37192e2afb96219a885b92ef6fb2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; 0 &gt;::Geometry</type>
      <name>ElementGeometry</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a76f5f49852f36ba9ef35f5055951c893</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a41f47f87f2a1c17f898e4edf0cab1923</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a8f49b092052e4152222cc06b7484aa9b</anchor>
      <arglist>(const HostIntersection &amp;hostIntersection, const ElementGeometryImpl &amp;insideGeo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a75e5058c2a7a1c46a4dbc8af4491a8ed</anchor>
      <arglist>(HostIntersection &amp;&amp;hostIntersection, const ElementGeometryImpl &amp;insideGeo)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>ad80379350408cc586b8540be1691db58</anchor>
      <arglist>(const Intersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>ab827c68b305eb60f31b6e0dca027e3d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>aeedfda8c80aa94151a1fafd9cd991601</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>ae89815e07000f3b95f1aa6c6f2d9a10e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a23529cbc515129d0ecc5585c3b8ccbd2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>ae2f4f903b742a6d408c53aaa9245dd36</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a4822809367f26e1f0fd3619b9ba9a710</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a4e0ba19b98dd6c22f22893a00b547ca6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a199c809f861103aa6e8f2b00007fc82a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>afadd3cb345848ace8c541da48408a970</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a1fbb7ff00aec5b06251da15254437507</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a181f848bdf68817ad3b49bcb6f5e77ce</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>aea3d56cad1be5cca6dc7c4dbacea4b30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>ac1efa8cf68b9a52e5fa9e6146c8a49ec</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a10be09d6d9b73554052d301f599bd452</anchor>
      <arglist>(const FieldVector&lt; ctype, dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>outerNormal</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a5529ec7290871cdcfa89ab711908e909</anchor>
      <arglist>(const FieldVector&lt; ctype, dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>unitOuterNormal</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a58ce42d42aae1e601221c431ee98df48</anchor>
      <arglist>(const FieldVector&lt; ctype, dimension-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimensionworld &gt;</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>aed3b6b539de3557a23215d070294a409</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const HostIntersection &amp;</type>
      <name>hostIntersection</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a174a62692281298e1d70b70c99e8c964</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>a78dfe31344a0e509eeb1677509ebba69</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>aed6d5bbfa8b303634f0c10c133a528cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03206.html</anchorfile>
      <anchor>aae20032c8d47cab20c7f2057fc3f734d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Intersection</name>
    <filename>a01842.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ac487436bbcfcfc080e7fc1b3ea453e08a0e4445ffbc6fc65d5ed6a8c406440563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a69af798adb87bb03f23b9066b7651ebbad9a88d18c796cae51fb773eea8d09628</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IntersectionImp</type>
      <name>Implementation</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>af1c6a92ab305f45d135a2dc47e4d7fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>abf8a5cd3b222bf982d8b4c06b368b3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ab0713efcf2c061fec6bb28368bedcea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aa232ba1956632d7c12c4f88062d25edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a452cf218fc7cce9e816b2183a13cc61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a5f96ac570d17eca6799cf009e686b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aea02ffe420ab63ab985c70b747206193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ac487436bbcfcfc080e7fc1b3ea453e08a0e4445ffbc6fc65d5ed6a8c406440563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a69af798adb87bb03f23b9066b7651ebbad9a88d18c796cae51fb773eea8d09628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ad15a0a4aa48af83cd5852a4720dee20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a3bec688ee762eefef50287c68f21ffbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a40c5b5c4895d8ed963fd28a9db9d9c3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a8124a395dceb916e0dc3c2183e0831d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a2b0401cc00a52aa8b158846202c0e015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a9b51fa767d590db716192ac5aa12fd83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a15b99f1ec0e295d0b99c661d3c2a7b88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a12feaf9bf45c83cccf9adc1a687085a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6dbcac9ca743a097188b9905ce2d20ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6d465c9f4355be5368e33721ec828d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a0114ddae3f7e1b1f89384e447a1d7cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a67c5cd18ffff9a016a2e3fe01c27bc82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a444ce2caf541794180bfc09e26450311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a178f58c4b59ba9d91691b64271290eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>outerNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ad12c8bc6ed757ca87e930aefd3fb6584</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>af7f07c7f5c3cf6123218616237a6e01d</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>unitOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a61d3f4dbe704df17ed808dce7e73bf9a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aabb663e8c4e2c2b23aff3e88c1fd397f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>afad74666e83b5f75d7fb130d435b5f53</anchor>
      <arglist>(const Intersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a649e5154a2f121bd26e13d6a32db1b68</anchor>
      <arglist>(const Intersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ae46e34dc5a65bb3c1bf4576b38959627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>afc47e5429e3312e8b9caf5d16f90ecbb</anchor>
      <arglist>(const Intersection &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6a44fb789219aba50ff2ae61e746c8d7</anchor>
      <arglist>(Intersection &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Intersection &amp;</type>
      <name>operator=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a16bc39a9658b04d6c74e42e3b10c302e</anchor>
      <arglist>(const Intersection &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Intersection &amp;</type>
      <name>operator=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a212b0a7c78f4cda96785b11b864abead</anchor>
      <arglist>(Intersection &amp;&amp;other)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>real</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aa2bed60bdd659e18fa13dab8f0673554</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="protected">
      <type>friend class</type>
      <name>IntersectionIterator&lt; GridImp, IntersectionImp, IntersectionImp &gt;</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a702ee43e509ab711df12a13571547bec</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aec3108a05800ef86709e9a883fdd3ea1</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a44a55296dbd6001387bb609489d4e054</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::YGridList::Intersection</name>
    <filename>a04334.html</filename>
    <member kind="variable">
      <type>YGridComponent&lt; Coordinates &gt;</type>
      <name>grid</name>
      <anchorfile>a04334.html</anchorfile>
      <anchor>a73a6a18e254e919e6c23c8b9ec09272c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a04334.html</anchorfile>
      <anchor>a11f8d5b739444e7c995a771194eb3c7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>int</type>
      <name>distance</name>
      <anchorfile>a04334.html</anchorfile>
      <anchor>a92a9eba51573dab2ffef6ecdc0de06a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>YGrid&lt; Coordinates &gt;</type>
      <name>yg</name>
      <anchorfile>a04334.html</anchorfile>
      <anchor>aef37158486128ed9c590d52bf63f0bb8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Intersection&lt; GridImp, AlbertaGridLeafIntersection&lt; GridImp &gt; &gt;</name>
    <filename>a01842.html</filename>
    <member kind="typedef">
      <type>AlbertaGridLeafIntersection&lt; GridImp &gt;</type>
      <name>Implementation</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>af1c6a92ab305f45d135a2dc47e4d7fe6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>abf8a5cd3b222bf982d8b4c06b368b3ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ab0713efcf2c061fec6bb28368bedcea3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aa232ba1956632d7c12c4f88062d25edd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Geometry::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a452cf218fc7cce9e816b2183a13cc61e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a5f96ac570d17eca6799cf009e686b93d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aea02ffe420ab63ab985c70b747206193</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ac487436bbcfcfc080e7fc1b3ea453e08a0e4445ffbc6fc65d5ed6a8c406440563</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a69af798adb87bb03f23b9066b7651ebbad9a88d18c796cae51fb773eea8d09628</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ad15a0a4aa48af83cd5852a4720dee20a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a3bec688ee762eefef50287c68f21ffbf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a40c5b5c4895d8ed963fd28a9db9d9c3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a8124a395dceb916e0dc3c2183e0831d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a2b0401cc00a52aa8b158846202c0e015</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a9b51fa767d590db716192ac5aa12fd83</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a15b99f1ec0e295d0b99c661d3c2a7b88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a12feaf9bf45c83cccf9adc1a687085a8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6dbcac9ca743a097188b9905ce2d20ab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6d465c9f4355be5368e33721ec828d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a0114ddae3f7e1b1f89384e447a1d7cdb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a67c5cd18ffff9a016a2e3fe01c27bc82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a444ce2caf541794180bfc09e26450311</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a178f58c4b59ba9d91691b64271290eee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>outerNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ad12c8bc6ed757ca87e930aefd3fb6584</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>af7f07c7f5c3cf6123218616237a6e01d</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>unitOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a61d3f4dbe704df17ed808dce7e73bf9a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aabb663e8c4e2c2b23aff3e88c1fd397f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>afad74666e83b5f75d7fb130d435b5f53</anchor>
      <arglist>(const Intersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a649e5154a2f121bd26e13d6a32db1b68</anchor>
      <arglist>(const Intersection &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>ae46e34dc5a65bb3c1bf4576b38959627</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>afc47e5429e3312e8b9caf5d16f90ecbb</anchor>
      <arglist>(const Intersection &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a6a44fb789219aba50ff2ae61e746c8d7</anchor>
      <arglist>(Intersection &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Intersection &amp;</type>
      <name>operator=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a16bc39a9658b04d6c74e42e3b10c302e</anchor>
      <arglist>(const Intersection &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>Intersection &amp;</type>
      <name>operator=</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a212b0a7c78f4cda96785b11b864abead</anchor>
      <arglist>(Intersection &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aec3108a05800ef86709e9a883fdd3ea1</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a44a55296dbd6001387bb609489d4e054</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>real</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aa2bed60bdd659e18fa13dab8f0673554</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>aec3108a05800ef86709e9a883fdd3ea1</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Intersection</name>
      <anchorfile>a01842.html</anchorfile>
      <anchor>a44a55296dbd6001387bb609489d4e054</anchor>
      <arglist>(Implementation &amp;&amp;impl)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::IntersectionCoordVector</name>
    <filename>a03050.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>IntersectionCoordVector</name>
      <anchorfile>a03050.html</anchorfile>
      <anchor>a5890ac20e19259fe14fddc83becae9d8</anchor>
      <arglist>(const ElementGeometryImpl &amp;elementGeometry, const HostLocalGeometry &amp;hostLocalGeometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a03050.html</anchorfile>
      <anchor>adb0d9e6cee936d7029a3ae854fe4b01c</anchor>
      <arglist>(std::array&lt; Coordinate, size &gt;(&amp;corners)) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>calculate</name>
      <anchorfile>a03050.html</anchorfile>
      <anchor>a9394fe0342edddf5d52cecb0c602601e</anchor>
      <arglist>(Coordinate(&amp;corners)[numCorners]) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IntersectionDefaultNormalVectors</name>
    <filename>a02786.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>FieldVector&lt; ct, dimworld &gt;</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a02786.html</anchorfile>
      <anchor>a2d9319dbe2a0f739bba03cf9b8052557</anchor>
      <arglist>(const FieldVector&lt; ct, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ct, dimworld &gt;</type>
      <name>unitOuterNormal</name>
      <anchorfile>a02786.html</anchorfile>
      <anchor>aebe312f78ec337adbb27c41a2d520760</anchor>
      <arglist>(const FieldVector&lt; ct, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ct, dimworld &gt;</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a02786.html</anchorfile>
      <anchor>a6956749e60df2ef69a1f310224089698</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::IntersectionIndexSet</name>
    <filename>a03706.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>IntersectionIndexSet</name>
      <anchorfile>a03706.html</anchorfile>
      <anchor>a3ebc26cae83cf1322d96657f89077cae</anchor>
      <arglist>(const ElementIndexSet &amp;eis_)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::IntersectionIterator</name>
    <filename>a03078.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::Intersection&lt; Grid, IntersectionImpl &gt;</type>
      <name>Intersection</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a8f08b51cdac7f7039c7a05aa58422536</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a9670c6b9f9287aeaf06c485987282962</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a06d27fec6a7325297d66078397ab68ff</anchor>
      <arglist>(const Entity &amp;inside, const HostIntersectionIterator &amp;hostIterator)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a02578af795b823a562cdb437808c2639</anchor>
      <arglist>(const IntersectionIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>ae3dd50f20f71971bbf1ba4718f520556</anchor>
      <arglist>(IntersectionIterator &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a4d91a561a640f53baf74bc5a1134c40d</anchor>
      <arglist>(const IntersectionIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>aab4f793dc3b086f6830a139d9f6cad16</anchor>
      <arglist>(IntersectionIterator &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a2d040d5017d24b236cfac2141a3c5497</anchor>
      <arglist>(const IntersectionIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a94eb6f315039e3e5041ecd2fef5c0b0d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Intersection</type>
      <name>dereference</name>
      <anchorfile>a03078.html</anchorfile>
      <anchor>a2bb39a3e25cfc3616796c561c590553e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::IntersectionIterator</name>
    <filename>a02698.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IntersectionIteratorImp</type>
      <name>Implementation</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a2ac1b6c4821f31041e52b6aa1bdecd58</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, IntersectionImp &gt;</type>
      <name>Intersection</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a99af85902cf048a90e943902fae72ee8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a09d1ed59eb08664f4aeb735ca84b0430</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a86557486cfc511f21564f445df9ec37b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Intersection</type>
      <name>operator*</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a2dc7e3ce530e19d21961795c930f0223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Intersection *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>ae2446ca9f100457e9e50a02eb6fa64c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a9832caf0d901f3ec5305f1389329bec1</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>adcb1b5fa52e00c06ca6e54626e41fe8e</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>ae519a4ee558d19db324e06e3b24c86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>operator++</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a9fdabd5270e9694ec50c19667fdc4300</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a01125e7cad7c9595b82143f5d1c107b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>afed1a3f69e3a53112f51fc1937689e32</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>af26d2bfcadf3a327369f0782d1d901f6</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>realIterator</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>ac414b1c76b445e75d48edcd826e395c5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Intersection</type>
      <name>operator*</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a2dc7e3ce530e19d21961795c930f0223</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Intersection *</type>
      <name>operator-&gt;</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>ae2446ca9f100457e9e50a02eb6fa64c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a9832caf0d901f3ec5305f1389329bec1</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>adcb1b5fa52e00c06ca6e54626e41fe8e</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>ae519a4ee558d19db324e06e3b24c86c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>operator++</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a9fdabd5270e9694ec50c19667fdc4300</anchor>
      <arglist>(int)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>a01125e7cad7c9595b82143f5d1c107b4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>afed1a3f69e3a53112f51fc1937689e32</anchor>
      <arglist>(const IntersectionIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>IntersectionIterator</name>
      <anchorfile>a02698.html</anchorfile>
      <anchor>af26d2bfcadf3a327369f0782d1d901f6</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::IntervalBlock::Interval</name>
    <filename>a03398.html</filename>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>a122c6f42b7aba7d1a2215fb2533188b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Interval</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>a752db73509610bb67e3cf4ecd50d9f94</anchor>
      <arglist>(const Interval &amp;interval, const std::vector&lt; int &gt; &amp;map)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>ace6521aebcfa46e3fcc3ce02e4211770</anchor>
      <arglist>(const Interval &amp;interval, const std::vector&lt; int &gt; &amp;map)</arglist>
    </member>
    <member kind="variable">
      <type>std::array&lt; std::vector&lt; double &gt;, 2 &gt;</type>
      <name>p</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>a3eb36fe85c86b2ac37982feb0cd17381</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; double &gt;</type>
      <name>h</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>aefc78775915b9185631c857d996725d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; int &gt;</type>
      <name>n</name>
      <anchorfile>a03398.html</anchorfile>
      <anchor>a4c7cdf74813305ed9e44bd0c111e833f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::IntervalBlock</name>
    <filename>a03394.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <class kind="struct">Dune::dgf::IntervalBlock::Interval</class>
    <member kind="function">
      <type></type>
      <name>IntervalBlock</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a05870f810343a490094b6735804afa9f</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a15553535c2fdaaa41523119e33800fcf</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;vtx, int &amp;nofvtx, std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;simplex, int &amp;nofsimpl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>get</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>af45ae916e007fcb010a6ace34a71a708</anchor>
      <arglist>(std::vector&lt; std::vector&lt; double &gt; &gt; &amp;vtx, int &amp;nofvtx)</arglist>
    </member>
    <member kind="function">
      <type>const Interval &amp;</type>
      <name>get</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>aceaeb424704eb177df13304d84ac3024</anchor>
      <arglist>(int block) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numIntervals</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a6ad96da48e62b92d84f833d07050c632</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimw</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a8f4ef835f6736f48928133dab3ec62df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getVtx</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a6fbfe84ef721b923ad4b3a95aad9e1d0</anchor>
      <arglist>(int block, std::vector&lt; std::vector&lt; double &gt; &gt; &amp;vtx) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getHexa</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a8966d3ef87f6996d0eb73917299dedbd</anchor>
      <arglist>(int block, std::vector&lt; std::vector&lt; unsigned int &gt; &gt; &amp;cubes, int offset=0) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofvtx</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>af40ae6c5c9e441075831ec221570e0b6</anchor>
      <arglist>(int block) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofhexa</name>
      <anchorfile>a03394.html</anchorfile>
      <anchor>a8df4ac2061f6c8d6d014b0587c7d237c</anchor>
      <arglist>(int block) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isCartesian</name>
    <filename>a02502.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02502.html</anchorfile>
      <anchor>abaeb06a87ad891f2209d7f048612fb5e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isCartesian&lt; const Grid &gt;</name>
    <filename>a02546.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02546.html</anchorfile>
      <anchor>a093f244f85ec03941165bb1d98c30e29</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isCartesian&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04194.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04194.html</anchorfile>
      <anchor>aa68bb79b2d30973ae3f167cddfeb803e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::isCoordFunctionInterface</name>
    <filename>a02998.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>a02998.html</anchorfile>
      <anchor>ac735a269e95e6736875d781130c074cf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::isDiscreteCoordFunctionInterface</name>
    <filename>a03010.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>value</name>
      <anchorfile>a03010.html</anchorfile>
      <anchor>a6267f77fd59a7fc82c73681a83cd7881</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming</name>
    <filename>a02526.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02526.html</anchorfile>
      <anchor>a643fcb1a54d730bfb0b1fda877dd8c4c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01810.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01810.html</anchorfile>
      <anchor>adbc4d5eab6ecce648caadfebd9765538</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; const Grid &gt;</name>
    <filename>a02566.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02566.html</anchorfile>
      <anchor>a85d967d4196e970f2b0d7fe0140b354b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02954.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02954.html</anchorfile>
      <anchor>a3d590dad322fa8f868629bd2b44f2938</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03282.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03282.html</anchorfile>
      <anchor>ac83e207f3ffb9c4657cde03dc3e78a61</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; OneDGrid &gt;</name>
    <filename>a03954.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03954.html</anchorfile>
      <anchor>a95069c571e0d054c945b1f8ac9ca7c27</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</name>
    <filename>a03990.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03990.html</anchorfile>
      <anchor>af683871f3a3bffc74b23c48b0b75a19b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLeafwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04214.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04214.html</anchorfile>
      <anchor>aedcc64a7a23a62355f655e6918820466</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming</name>
    <filename>a02522.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02522.html</anchorfile>
      <anchor>acd9aa7be796cc4eae6c3c57d0800dcf0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a01806.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a01806.html</anchorfile>
      <anchor>a340814801563ba2be2577bc7d3d2568c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; const Grid &gt;</name>
    <filename>a02562.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02562.html</anchorfile>
      <anchor>ac9b533fdf45e38e567eaa1e1f1008fc6</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02950.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02950.html</anchorfile>
      <anchor>a94ba8ebecf98479116e4c18d719a0163</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</name>
    <filename>a03278.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03278.html</anchorfile>
      <anchor>aa9b3fa0fd10016435230159059d20946</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; OneDGrid &gt;</name>
    <filename>a03950.html</filename>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03950.html</anchorfile>
      <anchor>a5ab4ba0d61eb1f9f491110e158cf8049</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</name>
    <filename>a03986.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a03986.html</anchorfile>
      <anchor>ab4bf2e1f7088f4930bf5c3ca9e20c522</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::isLevelwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
    <filename>a04210.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a04210.html</anchorfile>
      <anchor>a1fa08affa280c3875e138017e07d3aa0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>IsUnstructured</name>
    <filename>a04342.html</filename>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Iterator</name>
    <filename>a03210.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <templarg>fake</templarg>
  </compound>
  <compound kind="class">
    <name>Dune::YGrid::Iterator</name>
    <filename>a04326.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a02a3f6ad860d0f10752bb2531882c64f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a51333ac087c22f2d64826508ef49c61e</anchor>
      <arglist>(const YGrid&lt; Coordinates &gt; &amp;yg, const std::array&lt; int, dim &gt; &amp;coords, int which=0)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>ae137470cbc0ab35a6ee7de8dd95a2001</anchor>
      <arglist>(const YGrid&lt; Coordinates &gt; &amp;yg, bool end=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinit</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>afd81b3b5ed84b5ae184e49badce11708</anchor>
      <arglist>(const YGrid&lt; Coordinates &gt; &amp;yg, const std::array&lt; int, dim &gt; &amp;coords, int which=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coord</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>adfc5630496ebf20149eefdbb9428d193</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; int, dim &gt; &amp;</type>
      <name>coord</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>ae7673af6230fdfbbda47bcd049141011</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinates::ctype</type>
      <name>lowerleft</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a486c415f590ee6672cfa5cdcda9b8661</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; typename Coordinates::ctype, dim &gt;</type>
      <name>lowerleft</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a858898d93c7821e53a918f4f1b6c6aa2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinates::ctype</type>
      <name>upperright</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a5c0359e967eccd091424c8237ee24bb5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; typename Coordinates::ctype, dim &gt;</type>
      <name>upperright</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>aff6cd3050e06df2059b51a655b7dfcc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinates::ctype</type>
      <name>meshsize</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>adddfa035c588595904497af00511f056</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Dune::FieldVector&lt; typename Coordinates::ctype, dim &gt;</type>
      <name>meshsize</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a75cd2ea71120d23467e771e837418f43</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shift</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a82e673ba303acc3c3dae523d964f8cc6</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; dim &gt;</type>
      <name>shift</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a5dd466e4524ce0e9933654a270a45176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>superindex</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>aec55dd169b4e8531ee8b25e8d3453ff1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>aadfeeca4080238a0121ab6a60548b354</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a42fb0f971ee21bd386652fc562b95d92</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a87b6003888347c87001c7c60e58428b6</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>which</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a1a5d2798124c280fd525c439fb2df110</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a2133b5227cb507b1ffa8f410e60ca5c8</anchor>
      <arglist>(int i, int dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>a8d00ecc74deba01d9b930d316be0c0a7</anchor>
      <arglist>(const iTupel &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>Coordinates *</type>
      <name>coordCont</name>
      <anchorfile>a04326.html</anchorfile>
      <anchor>aeb9d059bd91620482b763f516e0c3c06</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YGridComponent::Iterator</name>
    <filename>a04318.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a4ba0c2aae4df2a9a6958d1d98bed93f5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>abf4ad59d5aa5bc9499cdb5e3ec09bb54</anchor>
      <arglist>(const YGridComponent&lt; Coordinates &gt; &amp;r)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ae8501c88db9bb671f1cdcce262fbf013</anchor>
      <arglist>(const YGridComponent&lt; Coordinates &gt; &amp;r, const iTupel &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reinit</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a7281c9cdae5f77a73c9c6b2c83294589</anchor>
      <arglist>(const YGridComponent&lt; Coordinates &gt; &amp;r, const iTupel &amp;coord)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>adba8deacf65dc3dfa9e106c6d314b588</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a18bff0c23c4218648a26baa78272f30d</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>superindex</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a13f6991aac99626e41e7b1b0ef8345e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coord</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ad06b2a6976c07aafe26eb0e5d4953ffe</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>coord</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a083dbd8e5e6e1fd5f8b49c36b1812b42</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ab478b8a9e4b0ef59c7290309cb3f3763</anchor>
      <arglist>(int i, int dist)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>move</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a83821787fd67ca55d36402993e039f08</anchor>
      <arglist>(const iTupel &amp;dist)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ae115908bdfe4d7a07f7e98beaa7504e2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>lowerleft</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a25e54c54097592cfa51dd7c09500b6cf</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>fTupel</type>
      <name>lowerleft</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a87350b4b2bdd03676edbebd4f11c8dc6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>upperright</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ac36fe9b08916f201ea90601f5ba949db</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>fTupel</type>
      <name>upperright</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>ad827bbe846849a7c0a04640bd4ac42c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>meshsize</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a57bcb1ca4727d569ca1b8d41625e5b17</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>fTupel</type>
      <name>meshsize</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a83a14845e722ca317b43c5e17af0ae74</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shift</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a6af5f4b95fea6276938f88fecb67c9a7</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>std::bitset&lt; d &gt;</type>
      <name>shift</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a2e5dd8448e7f3dccf28c5dd35068ed88</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinates *</type>
      <name>coordCont</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a161fabbd4da52361e030d71b512929d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>iTupel</type>
      <name>_coord</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a9a45dd0ef57d874932b1e5220b8b107f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_superindex</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>afab1f638f77531e6d2d6b25582976fa4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const YGridComponent&lt; Coordinates &gt; *</type>
      <name>_grid</name>
      <anchorfile>a04318.html</anchorfile>
      <anchor>a6efc4bea1f4844886f33fe78fe87f10b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YGridList::Iterator</name>
    <filename>a04338.html</filename>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>a8a84536cb0c72ab2d18cb446d714d4f1</anchor>
      <arglist>(const YGridList&lt; Coordinates &gt; &amp;ygl, bool end=false)</arglist>
    </member>
    <member kind="function">
      <type>Iterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>aed78f832f24708850364972e0a6f68d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; Intersection &gt;::iterator</type>
      <name>operator-&gt;</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>a47d29b6344fea2db7ee7713f5bc6f352</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::deque&lt; Intersection &gt;::iterator</type>
      <name>operator*</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>a500928affc694b79e4c5864c7496f4cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>a3d393986e5beb4a913bb6075cac17db8</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04338.html</anchorfile>
      <anchor>a049324624fd5454b6515e3aaa259d139</anchor>
      <arglist>(const Iterator &amp;i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, false &gt;</name>
    <filename>a03242.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a4a9036068a2a2ee8d6c6ce1ac141a46d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a87eec97badb4d1de5f1c7bd7158e2824</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a14dbc7ea7ec416788075229b3e376af4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>afb3cdaf145aca64f33a1035a281f396b</anchor>
      <arglist>(const Grid &amp;grid, HostEntityIterator hostEntityIterator)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a72afb4ead0732a78b92b5e00e37773a4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a7687de07aae3b68b737daff6725cc36a</anchor>
      <arglist>(const Iterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a505ac52efcebc786a06ba147711cf527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a66388899810cc99a9bae2da8bfab5e75</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>af54f9be2516570b929c110acf3b36082</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>begin</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a9ec245b4f5c2cb7bd83401106349a4f9</anchor>
      <arglist>(const Grid &amp;grid, const HostGridView &amp;hostGridView)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>end</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>af642cc486a5d5909e7c85c966a5a2fec</anchor>
      <arglist>(const Grid &amp;grid, const HostGridView &amp;hostGridView)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>ae523521265ed696a90325b0cdb0b5de6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>fake</name>
      <anchorfile>a03242.html</anchorfile>
      <anchor>a48e9356dc3b0379795002de2a7111650</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, true &gt;</name>
    <filename>a03246.html</filename>
    <templarg></templarg>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Traits::Grid</type>
      <name>Grid</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a0b266242c36149384398e17e208d5f68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codimension &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a23cfd587b96650c3d93efc0957c35d09</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>ace2c89f79775194ad6ada19542701952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Iterator</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a9e58f684ff887da1794ca4f8b9b4cdd9</anchor>
      <arglist>(const Grid &amp;grid, HostElementIterator hostElementIterator, HostElementIterator hostEnd, const HostIndexSet &amp;hostIndexSet)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a228d4a0f490ee55ae50314963366e028</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a9886498250a959c9b28ba566cb531dc7</anchor>
      <arglist>(const Iterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>dereference</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a99d47c5b6f525f737cfe2870606d07af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a139eb250f302cbe1bb1b2b3898c0f0d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a54579a5586c01786621b1190a2980f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>begin</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a8a972ca4a8816598939e5801149bd556</anchor>
      <arglist>(const Grid &amp;grid, const HostGridView &amp;hostGridView)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Iterator</type>
      <name>end</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a82818b83c5d36fdde3c5ab841a3ea2b8</anchor>
      <arglist>(const Grid &amp;grid, const HostGridView &amp;hostGridView)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03246.html</anchorfile>
      <anchor>a68bbcab00b8f50044f697fdd89f05e6c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::iterator_traits&lt; Dune::EntityIterator&lt; codim, Grid, IteratorImp &gt; &gt;</name>
    <filename>a02666.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02666.html</anchorfile>
      <anchor>a4dbcf3ddae9bb7d3d4e041523f98e2c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const IteratorImp::Entity</type>
      <name>value_type</name>
      <anchorfile>a02666.html</anchorfile>
      <anchor>a45823af93595d6fbd85a4cd5596bc28b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>a02666.html</anchorfile>
      <anchor>ae50c92515837f47f2ebd65f7f43a2912</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a02666.html</anchorfile>
      <anchor>a8a2f5594ad24f6566a269bbf7c2de2fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a02666.html</anchorfile>
      <anchor>a4ba3a0c17e9f7fd8f54d32f44510c6b9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>std::iterator_traits&lt; Dune::IntersectionIterator&lt; GridImp, IntersectionIteratorImp, IntersectionImp &gt; &gt;</name>
    <filename>a02790.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>a02790.html</anchorfile>
      <anchor>af509d35374e506c041a75a3bfe163425</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Dune::Intersection&lt; GridImp, IntersectionImp &gt;</type>
      <name>value_type</name>
      <anchorfile>a02790.html</anchorfile>
      <anchor>ada8238b12823e766cc8475de1d716fbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type *</type>
      <name>pointer</name>
      <anchorfile>a02790.html</anchorfile>
      <anchor>a80e2866c3af628e0d27ab11eb65bcfbf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>value_type &amp;</type>
      <name>reference</name>
      <anchorfile>a02790.html</anchorfile>
      <anchor>a9c983d42dec92a4614a22cec8724ec17</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>forward_iterator_tag</type>
      <name>iterator_category</name>
      <anchorfile>a02790.html</anchorfile>
      <anchor>a72529bd0a26fc03804d303d10261ec16</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainerMap::IteratorWrapper</name>
    <filename>a04102.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>IteratorWrapper</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>a47f48f9584efdbe0b5d2682e2d6abb5e</anchor>
      <arglist>(const iterator &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator ConstWrapper</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>af379949206cbc85ec2a2d4db0c8825ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>value &amp;</type>
      <name>operator*</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>a4a05af20ba2967050e0555fb8c641909</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>value *</type>
      <name>operator-&gt;</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>a66d1368ec1048449f7f8b3f803c3d77f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>a7fd7202e6b62d7a0ce001c38a89539ee</anchor>
      <arglist>(const IteratorWrapper &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>aa9743c4d3e47da23461adaf02dcce22d</anchor>
      <arglist>(const IteratorWrapper &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>IteratorWrapper &amp;</type>
      <name>operator++</name>
      <anchorfile>a04102.html</anchorfile>
      <anchor>a6033051a17f8b584c209afd53c6045d4</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafAmiraMeshWriter</name>
    <filename>a03354.html</filename>
    <templarg></templarg>
    <base>AmiraMeshWriter&lt; GridType::LeafGridView &gt;</base>
    <member kind="function">
      <type></type>
      <name>LeafAmiraMeshWriter</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a3862f469133b3cdd443da76c45fab432</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafAmiraMeshWriter</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>ac0c0fb957d1f37416ceee3d2ca163807</anchor>
      <arglist>(const GridType &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a6a9dba7e45452b83a733c15f9e3e8c43</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a781d87465dff12975cf1d4da59c90b88</anchor>
      <arglist>(const GridType2 &amp;grid, int level, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLeafGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a07b645f86bc75e8fa7e14b6e20082db9</anchor>
      <arglist>(const GridType2 &amp;grid, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>aebd5dfa9d91b8afb8faf5ef76a41270c</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LeafGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a4abddbf0dc028c66df3b56eea592429a</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LeafGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a19e8169d7419363d2ef51cac4d374341</anchor>
      <arglist>(const std::string &amp;filename, bool ascii=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUniformData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a7dc8c510ed4e3f9845b5119054351fb8</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, const std::array&lt; unsigned int, dim &gt; &amp;n, const DataContainer &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeGrid</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a45e948f8b95ed3f41df9495515695ec4</anchor>
      <arglist>(const GridType &amp;grid, const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeBlockVector</name>
      <anchorfile>a03354.html</anchorfile>
      <anchor>a329f0548b4e2cbfe6a8914a5ec9580ad</anchor>
      <arglist>(const GridType &amp;grid, const VectorType &amp;f, const std::string &amp;filename, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeSurfaceGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a03ebd141cb898eadb2608eed76282412</anchor>
      <arglist>(const GridType::LeafGridView &amp;gridView, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafGnuplotWriter</name>
    <filename>a03674.html</filename>
    <templarg></templarg>
    <base>GnuplotWriter&lt; G::LeafGridView &gt;</base>
    <member kind="function">
      <type></type>
      <name>LeafGnuplotWriter</name>
      <anchorfile>a03674.html</anchorfile>
      <anchor>ac9e592a5d648259eb680fb2f0d112566</anchor>
      <arglist>(const G &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a795d3e663a32bed6fd733930b2b944df</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a4480585a934bb6e2f787cb17e4615e21</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a86a8f005d9040aa4fbc38c0adae76574</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafMultipleCodimMultipleGeomTypeMapper</name>
    <filename>a02802.html</filename>
    <templarg></templarg>
    <base>MultipleCodimMultipleGeomTypeMapper&lt; G::LeafGridView &gt;</base>
    <member kind="typedef">
      <type>G::LeafGridView</type>
      <name>GridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ad0f2fcda1251a52413fc5c28e183a924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7ea89039a0b86bb71a60f90a1a8ffee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a549a0c5ad253fb33c80cc4d813f366a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafMultipleCodimMultipleGeomTypeMapper</name>
      <anchorfile>a02802.html</anchorfile>
      <anchor>ac98a1a81628745acc7624ad9e38a30af</anchor>
      <arglist>(const G &amp;grid, const MCMGLayout &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02802.html</anchorfile>
      <anchor>a6a2b375acd4f0516e53163e511fd4ad4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a5df55b1e1be633b76d990dc7dbed881c</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a24a2624d09e1161517420e051b7a73ec</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a228e977d462d176b5453a6db62e68a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a9facf2614ae77f1b5fcf2bbff6abe824</anchor>
      <arglist>(GeometryType gt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>types</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a75354603bc5fda075a50ed01e55cee9a</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a804ce60c34eabbea7e5758dcc8f7736b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a08247d77c67ce838c3afd3ded6fad8ca</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a109484c93e4a1940b44d127052757bca</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a2dcfe88852a42c40ae22d43d8ffec4e3</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7451c8af09caaa1155939145c5d23c11</anchor>
      <arglist>(const G::LeafGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>afebe1cf0724f2c5dcc132f03b576e306</anchor>
      <arglist>(G::LeafGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>const MCMGLayout &amp;</type>
      <name>layout</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ac5aebc6ce510a418bd447d07e84fa113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridView &amp;</type>
      <name>gridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a056916a77c950e57addc5dbca246f913</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LeafSingleCodimSingleGeomTypeMapper</name>
    <filename>a02874.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <base>SingleCodimSingleGeomTypeMapper&lt; G::LeafGridView, c &gt;</base>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a215a4cc8b8b0c8f4723897fbf92f1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a2e28c04ec4df13ed044684c3c34d4c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LeafSingleCodimSingleGeomTypeMapper</name>
      <anchorfile>a02874.html</anchorfile>
      <anchor>a178488149a3cf9e56c7f48e03848690b</anchor>
      <arglist>(const G &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02874.html</anchorfile>
      <anchor>a58be38530ba2c39019ad22d88d9eee7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a4cb0a235f822bd67b5b7dae837398ae1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a690eb1d3d6926fec953c4f6a05e03e60</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a8ed7ee283d0db22d212b97aabcb6d7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a08774ef34409405b0a24b0ec017e344d</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a280b387f987575c3cc92633e445cda87</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>af98aac62ffd09f31e7360fcdedb2968a</anchor>
      <arglist>(const G::LeafGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a7df0ace18ccc1f1f3c75a63205d1448a</anchor>
      <arglist>(G::LeafGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelAmiraMeshWriter</name>
    <filename>a03350.html</filename>
    <templarg></templarg>
    <base>AmiraMeshWriter&lt; GridType::LevelGridView &gt;</base>
    <member kind="function">
      <type></type>
      <name>LevelAmiraMeshWriter</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>afed4c47b6671637d356b30b395de432c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelAmiraMeshWriter</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a5ea76566707bce2efb54e4125f1750c5</anchor>
      <arglist>(const GridType &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a6a9dba7e45452b83a733c15f9e3e8c43</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLevelGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a781d87465dff12975cf1d4da59c90b88</anchor>
      <arglist>(const GridType2 &amp;grid, int level, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addLeafGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a07b645f86bc75e8fa7e14b6e20082db9</anchor>
      <arglist>(const GridType2 &amp;grid, bool splitAll=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>aebd5dfa9d91b8afb8faf5ef76a41270c</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LevelGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a4abddbf0dc028c66df3b56eea592429a</anchor>
      <arglist>(const DataContainer &amp;data, const GridType::LevelGridView &amp;gridView, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a19e8169d7419363d2ef51cac4d374341</anchor>
      <arglist>(const std::string &amp;filename, bool ascii=false) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addUniformData</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a7dc8c510ed4e3f9845b5119054351fb8</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, const std::array&lt; unsigned int, dim &gt; &amp;n, const DataContainer &amp;data)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeGrid</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>aacdf62f95e87a51301221c1b1d786cb7</anchor>
      <arglist>(const GridType &amp;grid, const std::string &amp;filename, int level)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeBlockVector</name>
      <anchorfile>a03350.html</anchorfile>
      <anchor>a24782c1238e71fe9e14b08f735c7ef4b</anchor>
      <arglist>(const GridType &amp;grid, const VectorType &amp;f, const std::string &amp;filename, int level, bool GridSplitUp=false)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeSurfaceGrid</name>
      <anchorfile>a03346.html</anchorfile>
      <anchor>a03ebd141cb898eadb2608eed76282412</anchor>
      <arglist>(const GridType::LevelGridView &amp;gridView, const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelGnuplotWriter</name>
    <filename>a03678.html</filename>
    <templarg></templarg>
    <base>GnuplotWriter&lt; G::LevelGridView &gt;</base>
    <member kind="function">
      <type></type>
      <name>LevelGnuplotWriter</name>
      <anchorfile>a03678.html</anchorfile>
      <anchor>a51e46d8bdff3aa701ff7c76e853e803d</anchor>
      <arglist>(const G &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a795d3e663a32bed6fd733930b2b944df</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a4480585a934bb6e2f787cb17e4615e21</anchor>
      <arglist>(const DataContainer &amp;data, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03670.html</anchorfile>
      <anchor>a86a8f005d9040aa4fbc38c0adae76574</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelMultipleCodimMultipleGeomTypeMapper</name>
    <filename>a02806.html</filename>
    <templarg></templarg>
    <base>MultipleCodimMultipleGeomTypeMapper&lt; G::LevelGridView &gt;</base>
    <member kind="typedef">
      <type>G::LevelGridView</type>
      <name>GridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ad0f2fcda1251a52413fc5c28e183a924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7ea89039a0b86bb71a60f90a1a8ffee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a549a0c5ad253fb33c80cc4d813f366a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelMultipleCodimMultipleGeomTypeMapper</name>
      <anchorfile>a02806.html</anchorfile>
      <anchor>ad1157692b212f306f426c46fc6a0e96a</anchor>
      <arglist>(const G &amp;grid, int level, const MCMGLayout &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02806.html</anchorfile>
      <anchor>a76c665666d7c7385baa29844c84a2a85</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a5df55b1e1be633b76d990dc7dbed881c</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a24a2624d09e1161517420e051b7a73ec</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a228e977d462d176b5453a6db62e68a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a9facf2614ae77f1b5fcf2bbff6abe824</anchor>
      <arglist>(GeometryType gt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>types</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a75354603bc5fda075a50ed01e55cee9a</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a804ce60c34eabbea7e5758dcc8f7736b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a08247d77c67ce838c3afd3ded6fad8ca</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a109484c93e4a1940b44d127052757bca</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a2dcfe88852a42c40ae22d43d8ffec4e3</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7451c8af09caaa1155939145c5d23c11</anchor>
      <arglist>(const G::LevelGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>afebe1cf0724f2c5dcc132f03b576e306</anchor>
      <arglist>(G::LevelGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>const MCMGLayout &amp;</type>
      <name>layout</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ac5aebc6ce510a418bd447d07e84fa113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridView &amp;</type>
      <name>gridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a056916a77c950e57addc5dbca246f913</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LevelSingleCodimSingleGeomTypeMapper</name>
    <filename>a02878.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <base>SingleCodimSingleGeomTypeMapper&lt; G::LevelGridView, c &gt;</base>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a215a4cc8b8b0c8f4723897fbf92f1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a2e28c04ec4df13ed044684c3c34d4c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LevelSingleCodimSingleGeomTypeMapper</name>
      <anchorfile>a02878.html</anchorfile>
      <anchor>a7d7f308acbfb7dad81cedb2f26de207a</anchor>
      <arglist>(const G &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02878.html</anchorfile>
      <anchor>a9b7f2a94c913811872d89ad09f2afb79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a4cb0a235f822bd67b5b7dae837398ae1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a690eb1d3d6926fec953c4f6a05e03e60</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a8ed7ee283d0db22d212b97aabcb6d7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a08774ef34409405b0a24b0ec017e344d</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a280b387f987575c3cc92633e445cda87</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>af98aac62ffd09f31e7360fcdedb2968a</anchor>
      <arglist>(const G::LevelGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a7df0ace18ccc1f1f3c75a63205d1448a</anchor>
      <arglist>(G::LevelGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MacroData::Library</name>
    <filename>a02186.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Alberta::MacroData&lt; dim &gt;</type>
      <name>MacroData</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>abbb04152da05722afa2d53e329f64350</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>ae9b6d58a251e7a7cb747f8c95bb8691e</anchor>
      <arglist>(MacroData &amp;macroData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>ae9b6d58a251e7a7cb747f8c95bb8691e</anchor>
      <arglist>(MacroData &amp;macroData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>ae9b6d58a251e7a7cb747f8c95bb8691e</anchor>
      <arglist>(MacroData &amp;macroData)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>a49719b365a2ceae6dda121be7edb5e68</anchor>
      <arglist>(MacroData &amp;macroData, const Real orientation)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>checkNeighbors</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>ae0200650c13515dbff9905b25c37d409</anchor>
      <arglist>(const MacroData &amp;macroData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>a564e17d3ff5d61ded308fbf23b8aa3be</anchor>
      <arglist>(MacroData &amp;macroData)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>setOrientation</name>
      <anchorfile>a02186.html</anchorfile>
      <anchor>acb528d4a337818a2a522f72b34b457ec</anchor>
      <arglist>([[maybe_unused]] MacroData &amp;macroData, [[maybe_unused]] const Real orientation)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::CoordCache::LocalCaching</name>
    <filename>a01830.html</filename>
    <member kind="function">
      <type></type>
      <name>LocalCaching</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a1eb5f6a4f1f0b751301a281e01ab71ff</anchor>
      <arglist>(const CoordVectorPointer &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a01830.html</anchorfile>
      <anchor>a5fd88037ea6039e6b993b08964ba87bd</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridIntersectionBase::LocalCoordReader</name>
    <filename>a02138.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type</type>
      <name>Grid</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a70ff60bfecea780a44ce470eef85187e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::Real</type>
      <name>ctype</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a146e6e9410b95736c6ad450be0f65b86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ctype, coorddimension &gt;</type>
      <name>Coordinate</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a8843e4085d68dc0255afcc907c726bf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 0 &gt;::Geometry</type>
      <name>ElementGeometry</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>ac8e65b1dc129a73fe761987b19c96287</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::template Codim&lt; 1 &gt;::Geometry</type>
      <name>FaceGeometry</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a5216e36e4bcbd69f722b969b8ce6772e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordReader</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a3707990c0e3fd7ec2cc3e500ef6d07ef</anchor>
      <arglist>(const ElementGeometry &amp;elementGeometry, const FaceGeometry &amp;faceGeometry)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>coordinate</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a4eac95f831eb1e8b36310274624e0727</anchor>
      <arglist>(int i, Coordinate &amp;x) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasDeterminant</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a6b15792cf89356c798118d906022bb72</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>determinant</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a700ff487c2097f4527a32e526716a912</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a576f4332e427e2b230851f0e0de5e58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>ac563aeb5943ab00039fe9caadd751796</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>ad597151f31c1d48043d5041f5236eb88</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02138.html</anchorfile>
      <anchor>a625856b52b845c77026d99786758d82e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::LocalGeometryReference</name>
    <filename>a02010.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <base>GeometryReference&lt; std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; std::remove_const&lt; Grid &gt;::type::dimension - mydim &gt;::LocalGeometryImpl &gt;</base>
    <member kind="typedef">
      <type>Implementation::ctype</type>
      <name>ctype</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae01fb3d14daf82da62d3ba86d71365b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::LocalCoordinate</type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac35b0e8118cfd4da6822eec119b63043</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::GlobalCoordinate</type>
      <name>GlobalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9f9a7cdf0056f6b220ca215583890e45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianInverseTransposed</type>
      <name>JacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ae2c68316d02fb1d7582528fe77bbfbc4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Implementation::JacobianTransposed</type>
      <name>JacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a54020bac15c1997bc20aec2efec94d71</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalGeometryReference</name>
      <anchorfile>a02010.html</anchorfile>
      <anchor>a4173c08dd158217eca841eb0981b9c7f</anchor>
      <arglist>(const Implementation &amp;impl)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>LocalCoordinate</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0aef92a73857edafd006d6fc67f8ec7e</anchor>
      <arglist>(const GlobalCoordinate &amp;global) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>afa99f8d77c51447fd51fe483309afd11</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>affine</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>aab55ee5855d1cbdc7b233718771477fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>corners</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ac26574883f92698eb2abc92bdfabfa44</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>corner</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab34a190d76ec19ba1171a0e0aaed8fe9</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>center</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a507219a842aff95718c8d1f1436f6c0f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GlobalCoordinate</type>
      <name>global</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ad5f02960c7caa8c10ebe3d7a1aab91f4</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>integrationElement</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a18b7c05ccb5aed4f39afc618f268695a</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>ctype</type>
      <name>volume</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a1ddb620ad5c82a53756cae56fd203c0a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>JacobianTransposed</type>
      <name>jacobianTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>abb14e02426cc5f512d1252111b0344ea</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>JacobianInverseTransposed</type>
      <name>jacobianInverseTransposed</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>ab87473834c78e7ddbc7e11059f12e845</anchor>
      <arglist>(const LocalCoordinate &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>const std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; std::remove_const&lt; Grid &gt;::type::dimension - mydim &gt;::LocalGeometryImpl &amp;</type>
      <name>impl</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>add35eed07965bbaf7e0b788741b9901d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>mydimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a0d690ef3c7b93c3406e9d7156bd5de3a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>coorddimension</name>
      <anchorfile>a02006.html</anchorfile>
      <anchor>a9feb9b9f244485c5b5dc3a2bf50f6023</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::MacroData</name>
    <filename>a02182.html</filename>
    <templarg>dim</templarg>
    <class kind="struct">Dune::Alberta::MacroData::Library</class>
    <member kind="typedef">
      <type>int</type>
      <name>ElementId</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a201c938cec3cc4bb2854629e664ff082</anchor>
      <arglist>[numVertices]</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacroData</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aa2ce8beadfe75d4a8f1759c394724a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Data *</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a00b94dfcdfcf950e30f286dbc053da09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vertexCount</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a5835d7bd74b19f174a31db48cf0f6bcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementCount</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a33cfde67ce1cb6174a7a17f96287fd4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>element</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a7ecc142278a16514b44dfba1a0072d15</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalVector &amp;</type>
      <name>vertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a4f608888701c05c42fd91cda8b2ee22e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>neighbor</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a8e24a2c15a4294af67ced6edd4bf609e</anchor>
      <arglist>(int element, int i) const</arglist>
    </member>
    <member kind="function">
      <type>BoundaryId &amp;</type>
      <name>boundaryId</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a0cc967f8ee557c23b134110bb458f0b4</anchor>
      <arglist>(int element, int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ae2decf4b45c3eb09b4c6eef95e68489b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aac734a9e94c9dcb89d5db0614e7c02d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a5fc8392bd90b2145ad450f36f45f2254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ac82b6200eb3d5cf3a49f074e6d95b8dc</anchor>
      <arglist>(const Real orientation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNeighbors</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a766d5f8468c775365271662e6cf15c52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a30b84a1dcbd522f4841b50894ccec5ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertElement</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aeb2310244a46f4ba1513f131524047a2</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertVertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a1e0dbf75a2ba3d80bf9efafb67257ae2</anchor>
      <arglist>(const GlobalVector &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertVertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a718ae64c34fc2ee0d12cf1954049585b</anchor>
      <arglist>(const FieldVector&lt; Real, dimWorld &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWallTrafo</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ab2ce92cf7919aa8778978d3c8f55a57c</anchor>
      <arglist>(const GlobalMatrix &amp;m, const GlobalVector &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWallTrafo</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a7cb88e2042c37ce2038154deb31b393f</anchor>
      <arglist>(const FieldMatrix&lt; Real, dimWorld, dimWorld &gt; &amp;matrix, const FieldVector&lt; Real, dimWorld &gt; &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCycles</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a8cf2b03577251e2acc844560749193af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>afbaf203de10718491bfb89f253b7e116</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>af572b57e346e430149e971b6cfd3c721</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>supportPeriodicity</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a25a91b751d25fd241e464a27ce9b47df</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend struct</type>
      <name>InstantiateMacroDataLibrary</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a0b90a72845b2d1c6bc8f66b9c12fa366</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MacroData&lt; dimension &gt;</name>
    <filename>a02182.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>ElementId</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a201c938cec3cc4bb2854629e664ff082</anchor>
      <arglist>[numVertices]</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacroData</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aa2ce8beadfe75d4a8f1759c394724a24</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Data *</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a00b94dfcdfcf950e30f286dbc053da09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>vertexCount</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a5835d7bd74b19f174a31db48cf0f6bcc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementCount</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a33cfde67ce1cb6174a7a17f96287fd4b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementId &amp;</type>
      <name>element</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a7ecc142278a16514b44dfba1a0072d15</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>GlobalVector &amp;</type>
      <name>vertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a4f608888701c05c42fd91cda8b2ee22e</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>neighbor</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a8e24a2c15a4294af67ced6edd4bf609e</anchor>
      <arglist>(int element, int i) const</arglist>
    </member>
    <member kind="function">
      <type>BoundaryId &amp;</type>
      <name>boundaryId</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a0cc967f8ee557c23b134110bb458f0b4</anchor>
      <arglist>(int element, int i) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>create</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ae2decf4b45c3eb09b4c6eef95e68489b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aac734a9e94c9dcb89d5db0614e7c02d0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>markLongestEdge</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a5fc8392bd90b2145ad450f36f45f2254</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ac82b6200eb3d5cf3a49f074e6d95b8dc</anchor>
      <arglist>(const Real orientation)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>checkNeighbors</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a766d5f8468c775365271662e6cf15c52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a30b84a1dcbd522f4841b50894ccec5ec</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertElement</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>aeb2310244a46f4ba1513f131524047a2</anchor>
      <arglist>(const ElementId &amp;id)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertVertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a1e0dbf75a2ba3d80bf9efafb67257ae2</anchor>
      <arglist>(const GlobalVector &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>insertVertex</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a718ae64c34fc2ee0d12cf1954049585b</anchor>
      <arglist>(const FieldVector&lt; Real, dimWorld &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWallTrafo</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>ab2ce92cf7919aa8778978d3c8f55a57c</anchor>
      <arglist>(const GlobalMatrix &amp;m, const GlobalVector &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>insertWallTrafo</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a7cb88e2042c37ce2038154deb31b393f</anchor>
      <arglist>(const FieldMatrix&lt; Real, dimWorld, dimWorld &gt; &amp;matrix, const FieldVector&lt; Real, dimWorld &gt; &amp;shift)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>checkCycles</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a8cf2b03577251e2acc844560749193af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>afbaf203de10718491bfb89f253b7e116</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>af572b57e346e430149e971b6cfd3c721</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>supportPeriodicity</name>
      <anchorfile>a02182.html</anchorfile>
      <anchor>a25a91b751d25fd241e464a27ce9b47df</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MacroElement</name>
    <filename>a02190.html</filename>
    <templarg>dim</templarg>
    <member kind="function">
      <type>const GlobalVector &amp;</type>
      <name>coordinate</name>
      <anchorfile>a02190.html</anchorfile>
      <anchor>a44dea67bf3e2357398b12a379341ebb8</anchor>
      <arglist>(const int vertex) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundaryId</name>
      <anchorfile>a02190.html</anchorfile>
      <anchor>a3334244c89c97e59eb7608b125bbaf3c</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isBoundary</name>
      <anchorfile>a02190.html</anchorfile>
      <anchor>a1243109c8e1f4994144964d2cb2ec330</anchor>
      <arglist>(const int face) const</arglist>
    </member>
    <member kind="function">
      <type>const MacroElement&lt; dim &gt; *</type>
      <name>neighbor</name>
      <anchorfile>a02190.html</anchorfile>
      <anchor>a172db08f9896af3cfd3ce61c934ed219</anchor>
      <arglist>(const int face) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MacroGrid</name>
    <filename>a03618.html</filename>
    <base protection="protected">Dune::DuneGridFormatParser</base>
    <member kind="typedef">
      <type>MPIHelper::MPICommunicator</type>
      <name>MPICommunicatorType</name>
      <anchorfile>a03618.html</anchorfile>
      <anchor>a95033509912059f0139920abf8835981</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>element_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5ad87b42c400b7536ee07df3541bf73f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cube</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a8359f3caedae25d2ca2d59216f3c5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>General</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a31ed920dca4a283899446acd1b9e293c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>orientation_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>counterclockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16faf1d492375835f8c5fcd6fae8e1d30fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>clockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16fa890d59f85a7a80ebbac57f8bf514e9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>DGFBoundaryParameter::type</type>
      <name>BoundaryParameter</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a679b6cc7c104ae90d2d579b13858c3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; int, BoundaryParameter &gt;</type>
      <name>BndParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a1c451f092166ebb2a2a8b921e491ec68</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; DGFEntityKey&lt; unsigned int &gt;, BndParam &gt;</type>
      <name>facemap_t</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a8939d74670203cfcc17649a493ec13be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5ad87b42c400b7536ee07df3541bf73f40</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Cube</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a8359f3caedae25d2ca2d59216f3c5181</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>General</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab635edbf3774660424960b946df6edf5a31ed920dca4a283899446acd1b9e293c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>counterclockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16faf1d492375835f8c5fcd6fae8e1d30fab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>clockwise</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a79b2f18030639f8a0d2236895443c16fa890d59f85a7a80ebbac57f8bf514e9c3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MacroGrid</name>
      <anchorfile>a03618.html</anchorfile>
      <anchor>a2a7f5b8f4477cc5336cda47725a6a42c</anchor>
      <arglist>(const char *filename, MPICommunicatorType MPICOMM=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>MacroGrid</name>
      <anchorfile>a03618.html</anchorfile>
      <anchor>a37affaf5893c421e4a7189885442e870</anchor>
      <arglist>(MPICommunicatorType MPICOMM=MPIHelper::getCommunicator())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridType *</type>
      <name>createGrid</name>
      <anchorfile>a03618.html</anchorfile>
      <anchor>a8b43624b267cdd2ad9c79d95e65d445d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>readDuneGrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acd51ecc4500f9548ccb68f4930796bea</anchor>
      <arglist>(std::istream &amp;input, int dimG, int dimW)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTetgenPoly</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ac56dda2bdc0d6d1c49e4880bdfe531ca</anchor>
      <arglist>(const std::string &amp;, std::string &amp;, std::string &amp;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeTetgenPoly</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5447f9a75d085356d66f1f3dcef4f86e</anchor>
      <arglist>(std::ostream &amp;out, const bool writeSegments=true)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateBoundaries</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ae4009d91889c5d28600fc88519548cb3</anchor>
      <arglist>(std::istream &amp;, bool)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>generateSimplexGrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a9129a7fe9380be73500eb0de72869d92</anchor>
      <arglist>(std::istream &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>readTetgenTriangle</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a2387a2bebf38b1efc62bba31d0a8252d</anchor>
      <arglist>(const std::string &amp;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>removeCopies</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5af6b4659d9ea12f78ba2e91296bdf6b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setOrientation</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a307feb19c0d314110c50d71217338688</anchor>
      <arglist>(int use1, int use2, orientation_t orientation=counterclockwise)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>setRefinement</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a433a3e61c77be1640531204b1067eb29</anchor>
      <arglist>(int use1, int use2, int is1=-1, int is2=-1)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>double</type>
      <name>testTriang</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a7ac5b724dd30a24c1647121631cb9d02</anchor>
      <arglist>(int snr)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getElParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>affb905e9906d963e3034f173bbe17083</anchor>
      <arglist>(int i, std::vector&lt; double &gt; &amp;coord)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::vector&lt; double &gt; &amp;</type>
      <name>getVtxParam</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>aefea2b016f4545662078716c56145d2c</anchor>
      <arglist>(int i, std::vector&lt; double &gt; &amp;coord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDuneGridFormat</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a2f0bac9945c1aac80fef0375ac9bbb66</anchor>
      <arglist>(std::istream &amp;input)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>isDuneGridFormat</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>afeba398d7b3b0da4c843fc76f0bf76b5</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>temporaryFileName</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a59f7270870bbe24e1cea0cc031a245e3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimw</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5b274d351f5f3b15d84aa65820d47f02</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>dimgrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a5b59bb3507fec140e930fbaf52c8da64</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vtx</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acc59bd603305425555fc3bee4ec8fc94</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofvtx</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>abf74c41bac9904a07aaec768dd3adab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vtxoffset</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>acd42761a4e412c1d9aecd448a3822d3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>double</type>
      <name>minVertexDistance</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a7e3c3bf51faa3d282e93458f6af6a91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt;</type>
      <name>elements</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ad491b526ea24e65d733f52a62b9aa105</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofelements</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a705cc468b2fc3824f562f8d4a2fa92d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; int &gt; &gt;</type>
      <name>bound</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a8dc848d62e2da8c72f64ebaf5cadd446</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofbound</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a194b7853aa4b10489b774f2fd3859585</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>facemap_t</type>
      <name>facemap</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab292cd2dfbcfa5fec7251f1bb1d28ca8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>haveBndParameters</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ada0f10805ceb826a3852468c4ec2e881</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>element_t</type>
      <name>element</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a6389f908096c2a90d7dae1928e110c8b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>simplexgrid</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a868a0f07c9328b6dd2653c244e817a92</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>cube2simplex</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab6ed2fb13cc0fabd28295626520e6375</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofvtxparams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a0f70cf3b4870057b07784267ec2f7a77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nofelparams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>aaed1f1025b6cebb864695399a931c3a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>vtxParams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a3936476b43f95f46e1d3ccd8d22f98ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; std::vector&lt; double &gt; &gt;</type>
      <name>elParams</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ab11343cb0d0ff86c901e4b33fdc071b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>DGFPrintInfo *</type>
      <name>info</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>ae300b2be81211c1c92cf18bbc348b5b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; double &gt;</type>
      <name>emptyParam_</name>
      <anchorfile>a03630.html</anchorfile>
      <anchor>a9a676a08a205d581ef9fd1aa9de0aed1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>DGFGridFactory</name>
      <anchorfile>a03618.html</anchorfile>
      <anchor>a5e43a7e0d6bbe4e0a39d5fdd85435aaf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::MeshPointer::MacroIterator</name>
    <filename>a02198.html</filename>
    <member kind="typedef">
      <type>Alberta::MeshPointer&lt; dim &gt;</type>
      <name>MeshPointer</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a4163ce7a33934f0792f89119c8eaddd2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dim &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a3052fabbc215f38fc4884f1adf4005fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MacroIterator</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>aecc7b7a15e1ca962c28e44f1b0d74a9a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>done</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a81e5daa829765b04a64dcc182942aff0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>abe353d6827b2e57ddb404f37440be605</anchor>
      <arglist>(const MacroIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a826c82fb97ec30bb375705ba23d0399f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MacroElement &amp;</type>
      <name>macroElement</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a43ac97933bab7f4e8e2918546a9c4594</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const MeshPointer &amp;</type>
      <name>mesh</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a8e0c5b572de2b5ceaa3745d9dd159826</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>This &amp;</type>
      <name>operator++</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>aee2a7d0bd4e8dc0dcbf2b693adf2bd71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>operator*</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a8c6c4309eb20c71b0aa130a1719cc325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a4a81c9a71d8b379fd61af6da288f0fe1</anchor>
      <arglist>(const MacroIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a34aca08842c0b7b0d8e8a70284465e0b</anchor>
      <arglist>(const MacroIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>elementInfo</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a586612efe10deafe59834a8ac70bfa9c</anchor>
      <arglist>(typename FillFlags::Flags fillFlags=FillFlags::standard) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>MeshPointer&lt; dim &gt;</name>
      <anchorfile>a02198.html</anchorfile>
      <anchor>a9cbe02a05324fda43a710370cd446c1d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MakeableInterfaceObject</name>
    <filename>a02742.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>InterfaceType::Implementation</type>
      <name>ImplementationType</name>
      <anchorfile>a02742.html</anchorfile>
      <anchor>a3fd260b01fde3e52a8500d3fa981813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MakeableInterfaceObject</name>
      <anchorfile>a02742.html</anchorfile>
      <anchor>a5ec8156c3c9cbe3687ef37098d10c0f5</anchor>
      <arglist>(const ImplementationType &amp;realImp)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MakeableInterfaceObject&lt; Entity &gt;</name>
    <filename>a02742.html</filename>
    <base>Dune::Entity</base>
    <member kind="typedef">
      <type>InterfaceType::Implementation</type>
      <name>ImplementationType</name>
      <anchorfile>a02742.html</anchorfile>
      <anchor>a3fd260b01fde3e52a8500d3fa981813f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>EntityImp&lt; cd, dim, GridImp &gt;</type>
      <name>Implementation</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ae2a856d82106158542ed714f1f9044fc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a5e1fb35208769300c1760d11a96ea829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a6d02483586c09b5b17b4a0d3457b9b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MakeableInterfaceObject</name>
      <anchorfile>a02742.html</anchorfile>
      <anchor>a5ec8156c3c9cbe3687ef37098d10c0f5</anchor>
      <arglist>(const ImplementationType &amp;realImp)</arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a68d485a5bdbfe46acd8158d9af06e174</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a83361749453e6f9321b6a5b8239334c4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aa5f17df3f43df86bb7170277cd891ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a13ee7a43fb1a7a5ff27c9a6e8f25a7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a405b82bb3cb2a6e9c6c41ea65cd55faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>afcca2e572657d516e1c816fc917016b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0b6f35018b3734597d4998025e775da2</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a288a3e513dc21c45b0aed3e85264626d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>adab1836cb95ad9af059fbcd70b24e516</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0819ee377958fee6f9743ae6b85a8a5e</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>realEntity</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>ab70984712e2f325a4ab9e951c7651e18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96582c71e46edace6e2d81d575e5e684</anchor>
      <arglist>(const Entity&lt; cd, dim, GridImp, EntityImp &gt; &amp;entity) -&gt; decltype(referenceElement&lt; typename GridImp::ctype, GridImp::template Codim&lt; cd &gt;::Geometry::mydimension &gt;(entity.type()))</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>subEntities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga88886f3af629c47559a5274da52e5512</anchor>
      <arglist>(const E &amp;e, Codim&lt; codim &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>intersections</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0927181ebf10ed59531e262a63f92daf</anchor>
      <arglist>(const GV &amp;gv, const Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>descendantElements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gae3280c6d5c25ef7993a59b45e401f935</anchor>
      <arglist>(const Entity &amp;e, int maxLevel)</arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aaa6c6e1d981fce9dbe550666f7a97800a0ce22137a3853646973cf5cd16c87868</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a96f72585a61d541b48bef35b293d3559a06733de84ef5874f7387f9a8c83bed55</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a28fd2c5c8ea4b8e0af67f57eb43a5597ad3b212d74a3f912a998261ad94f03df0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a5e1fb35208769300c1760d11a96ea829</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; cd &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a6d02483586c09b5b17b4a0d3457b9b41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>aa5f17df3f43df86bb7170277cd891ed3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a13ee7a43fb1a7a5ff27c9a6e8f25a7d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a405b82bb3cb2a6e9c6c41ea65cd55faf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>afcca2e572657d516e1c816fc917016b9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0b6f35018b3734597d4998025e775da2</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a288a3e513dc21c45b0aed3e85264626d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>adab1836cb95ad9af059fbcd70b24e516</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a02642.html</anchorfile>
      <anchor>a0819ee377958fee6f9743ae6b85a8a5e</anchor>
      <arglist>(const Entity &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>subEntities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga88886f3af629c47559a5274da52e5512</anchor>
      <arglist>(const E &amp;e, Codim&lt; codim &gt; c)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>intersections</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0927181ebf10ed59531e262a63f92daf</anchor>
      <arglist>(const GV &amp;gv, const Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>descendantElements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gae3280c6d5c25ef7993a59b45e401f935</anchor>
      <arglist>(const Entity &amp;e, int maxLevel)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Mapper</name>
    <filename>a02794.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>IndexType</type>
      <name>Index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ab80318f3c2a4543f220375b9d29fa1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a4c0290ee379b1fc0e90bfb69f00dc02b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3081058f1833c266eb0d1768f762a4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>af1a0762b3a23e985aa68c94360e67122</anchor>
      <arglist>(const EntityType &amp;e, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3acf48870c0b79ef9995e2635e7a958b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mapper&lt; GV::Grid, MultipleCodimMultipleGeomTypeMapper&lt; GV &gt;, GV::IndexSet::IndexType &gt;</name>
    <filename>a02794.html</filename>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ab80318f3c2a4543f220375b9d29fa1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a4c0290ee379b1fc0e90bfb69f00dc02b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3081058f1833c266eb0d1768f762a4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>af1a0762b3a23e985aa68c94360e67122</anchor>
      <arglist>(const EntityType &amp;e, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3acf48870c0b79ef9995e2635e7a958b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Mapper&lt; GV::Grid, SingleCodimSingleGeomTypeMapper&lt; GV, c &gt;, GV::IndexSet::IndexType &gt;</name>
    <filename>a02794.html</filename>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ab80318f3c2a4543f220375b9d29fa1ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a4c0290ee379b1fc0e90bfb69f00dc02b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>size</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3081058f1833c266eb0d1768f762a4bf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>af1a0762b3a23e985aa68c94360e67122</anchor>
      <arglist>(const EntityType &amp;e, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3acf48870c0b79ef9995e2635e7a958b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::Geometry::Mapping</name>
    <filename>a03134.html</filename>
    <member kind="function">
      <type></type>
      <name>Mapping</name>
      <anchorfile>a03134.html</anchorfile>
      <anchor>a246bc3086815752a0a4fc325e1f71581</anchor>
      <arglist>(const GeometryType &amp;type, const CoordVector &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addReference</name>
      <anchorfile>a03134.html</anchorfile>
      <anchor>ad66d06ce956eee166c74c44b0f0da1a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>removeReference</name>
      <anchorfile>a03134.html</anchorfile>
      <anchor>a6a48ea45fdfe8dd7f22ae23946a93b01</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices</name>
    <filename>a02310.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices&lt; 2, 1 &gt;</name>
    <filename>a02318.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02318.html</anchorfile>
      <anchor>afe23d9f089caec466caf433a48c50744</anchor>
      <arglist>(int subEntity, int vertex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices&lt; 3, 1 &gt;</name>
    <filename>a02322.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02322.html</anchorfile>
      <anchor>a8299a3154bc04f7a46fe7ce5a49dbf4e</anchor>
      <arglist>(int subEntity, int vertex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices&lt; 3, 2 &gt;</name>
    <filename>a02326.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02326.html</anchorfile>
      <anchor>afbe45349008b42db0de10b1727eb4056</anchor>
      <arglist>(int subEntity, int vertex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices&lt; dim, 0 &gt;</name>
    <filename>a02314.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02314.html</anchorfile>
      <anchor>a2a87fd56c37507c58b12ab80450e0c9e</anchor>
      <arglist>(int subEntity, int vertex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::MapVertices&lt; dim, dim &gt;</name>
    <filename>a02330.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>apply</name>
      <anchorfile>a02330.html</anchorfile>
      <anchor>a4df1748ba781a329780ddff4d7833a06</anchor>
      <arglist>(int subEntity, int vertex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::PeriodicFaceTransformationBlock::Matrix</name>
    <filename>a03406.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a6ec43bb900b0f0eaef60213830506aae</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>const T &amp;</type>
      <name>operator()</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>ae1de4a74098c3eb1a883f45d770acef7</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a079e0455c4c3a324e9a8613d3c62483a</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a00fd62127a21d5fd9021f8c8faee2b3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a5a10ce7a3cf9ef226c34e27c0c94e26a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Matrix&lt; double &gt;</name>
    <filename>a03406.html</filename>
    <member kind="function">
      <type></type>
      <name>Matrix</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a6ec43bb900b0f0eaef60213830506aae</anchor>
      <arglist>(int rows, int cols)</arglist>
    </member>
    <member kind="function">
      <type>const double &amp;</type>
      <name>operator()</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>ae1de4a74098c3eb1a883f45d770acef7</anchor>
      <arglist>(int i, int j) const</arglist>
    </member>
    <member kind="function">
      <type>double &amp;</type>
      <name>operator()</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a079e0455c4c3a324e9a8613d3c62483a</anchor>
      <arglist>(int i, int j)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rows</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a00fd62127a21d5fd9021f8c8faee2b3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>cols</name>
      <anchorfile>a03406.html</anchorfile>
      <anchor>a5a10ce7a3cf9ef226c34e27c0c94e26a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MaybeHaveOrigin</name>
    <filename>a04218.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeOrigin</name>
      <anchorfile>a04218.html</anchorfile>
      <anchor>a4351551514a08edf391fca303077763d</anchor>
      <arglist>(S &amp;, const Coordinates &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readOrigin</name>
      <anchorfile>a04218.html</anchorfile>
      <anchor>ab12ee897382763af1d372164619014b2</anchor>
      <arglist>(S &amp;, Dune::FieldVector&lt; typename Coordinates::ctype, Coordinates::dimension &gt; &amp;)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::YaspGrid&lt; Coordinates::dimension, Coordinates &gt; *</type>
      <name>createGrid</name>
      <anchorfile>a04218.html</anchorfile>
      <anchor>aea321d60ede0b26b271e77046ccdb2ac</anchor>
      <arglist>(const Dune::FieldVector&lt; typename Coordinates::ctype, Coordinates::dimension &gt; &amp;, A... args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::MaybeHaveOrigin&lt; Dune::EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt;</name>
    <filename>a04222.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Dune::EquidistantOffsetCoordinates&lt; ctype, dim &gt;</type>
      <name>Coordinates</name>
      <anchorfile>a04222.html</anchorfile>
      <anchor>aff06be118288b71654ae3a8c3d6972d3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>writeOrigin</name>
      <anchorfile>a04222.html</anchorfile>
      <anchor>a7bdcdae3aa2fbc266117adcd64dbed47</anchor>
      <arglist>(S &amp;s, const Coordinates &amp;coord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>readOrigin</name>
      <anchorfile>a04222.html</anchorfile>
      <anchor>ac79ba8cdaa84991184156b0ad0affb81</anchor>
      <arglist>(S &amp;s, Dune::FieldVector&lt; ctype, dim &gt; &amp;coord)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Dune::YaspGrid&lt; Coordinates::dimension, Coordinates &gt; *</type>
      <name>createGrid</name>
      <anchorfile>a04222.html</anchorfile>
      <anchor>a7955f6333df81767e84f2a385e63815c</anchor>
      <arglist>(const Dune::FieldVector&lt; typename Coordinates::ctype, Coordinates::dimension &gt; &amp;lowerleft, const Dune::FieldVector&lt; typename Coordinates::ctype, Coordinates::dimension &gt; &amp;extension, A... args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::MeshPointer</name>
    <filename>a01854.html</filename>
    <templarg>dim</templarg>
    <class kind="class">Dune::Alberta::MeshPointer::MacroIterator</class>
    <member kind="function">
      <type></type>
      <name>MeshPointer</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ae7430e2555a769a4ebb79d38d2f86935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPointer</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ac7c8ad04f365d5960d1899a7ece8b0de</anchor>
      <arglist>(Mesh *mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Mesh *</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a9c6f65a4478628f806dbac4c8f4fc3ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a6f9c5b16d05cfd92fd7ddfc45a093859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MacroIterator</type>
      <name>begin</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ab479c0f5192b8cece395b5942c69ef94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MacroIterator</type>
      <name>end</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a2282188d52fc42253f46d78a136ae067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numMacroElements</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a06a4c4a4fc6720d3903fa5dcaf1e36f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a84b6dce74191070cb7803a7b333f1ef1</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a92b47cddce9d27fb0370f4bd4ddeb84c</anchor>
      <arglist>(const MacroData&lt; dim &gt; &amp;macroData)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a0efd762fcb0d8fdeaa3443455105640c</anchor>
      <arglist>(const MacroData&lt; dim &gt; &amp;macroData, const ProjectionFactoryInterface&lt; Proj, Impl &gt; &amp;projectionFactory)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a88b2ce7c79a56483af9509e482a230fc</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>read</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a11943fd93f0a2e2ab06f59495807a42c</anchor>
      <arglist>(const std::string &amp;filename, Real &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad63f585c0c5abde61ebf2352232bce5c</anchor>
      <arglist>(const std::string &amp;filename, Real time) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a0f345776454fe688532be65c7fbcd81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchicTraverse</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>aefe77a8d8e890b91807b1191e4da77bb</anchor>
      <arglist>(Functor &amp;functor, typename FillFlags::Flags fillFlags=FillFlags::standard) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTraverse</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a92770b88f2437608657a593024d7e90d</anchor>
      <arglist>(Functor &amp;functor, typename FillFlags::Flags fillFlags=FillFlags::standard) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coarsen</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a6a0e25dccd0720ca36eb3cc1bb0e4c7f</anchor>
      <arglist>(typename FillFlags::Flags fillFlags=FillFlags::nothing)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refine</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad80d5026a2a0d4943efb3b0eb5bf8c23</anchor>
      <arglist>(typename FillFlags::Flags fillFlags=FillFlags::nothing)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a684745e122f951b9b2970218245d2731</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a45cca9b26325a091226e009073f89873</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad965087d2654f9fe5f857c930c1b6c3d</anchor>
      <arglist>(int codim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MeshPointer&lt; dimension &gt;</name>
    <filename>a01854.html</filename>
    <member kind="function">
      <type></type>
      <name>MeshPointer</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ae7430e2555a769a4ebb79d38d2f86935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MeshPointer</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ac7c8ad04f365d5960d1899a7ece8b0de</anchor>
      <arglist>(Mesh *mesh)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator Mesh *</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a9c6f65a4478628f806dbac4c8f4fc3ed</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator bool</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a6f9c5b16d05cfd92fd7ddfc45a093859</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MacroIterator</type>
      <name>begin</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ab479c0f5192b8cece395b5942c69ef94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>MacroIterator</type>
      <name>end</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a2282188d52fc42253f46d78a136ae067</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numMacroElements</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a06a4c4a4fc6720d3903fa5dcaf1e36f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a84b6dce74191070cb7803a7b333f1ef1</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a684745e122f951b9b2970218245d2731</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a45cca9b26325a091226e009073f89873</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad965087d2654f9fe5f857c930c1b6c3d</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a92b47cddce9d27fb0370f4bd4ddeb84c</anchor>
      <arglist>(const MacroData&lt; dim &gt; &amp;macroData)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a0efd762fcb0d8fdeaa3443455105640c</anchor>
      <arglist>(const MacroData&lt; dim &gt; &amp;macroData, const ProjectionFactoryInterface&lt; Proj, Impl &gt; &amp;projectionFactory)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>create</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a88b2ce7c79a56483af9509e482a230fc</anchor>
      <arglist>(const std::string &amp;filename, bool binary=false)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>read</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a11943fd93f0a2e2ab06f59495807a42c</anchor>
      <arglist>(const std::string &amp;filename, Real &amp;time)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>write</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad63f585c0c5abde61ebf2352232bce5c</anchor>
      <arglist>(const std::string &amp;filename, Real time) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a0f345776454fe688532be65c7fbcd81d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>hierarchicTraverse</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>aefe77a8d8e890b91807b1191e4da77bb</anchor>
      <arglist>(Functor &amp;functor, typename FillFlags::Flags fillFlags=FillFlags::standard) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>leafTraverse</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a92770b88f2437608657a593024d7e90d</anchor>
      <arglist>(Functor &amp;functor, typename FillFlags::Flags fillFlags=FillFlags::standard) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>coarsen</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>a6a0e25dccd0720ca36eb3cc1bb0e4c7f</anchor>
      <arglist>(typename FillFlags::Flags fillFlags=FillFlags::nothing)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>refine</name>
      <anchorfile>a01854.html</anchorfile>
      <anchor>ad80d5026a2a0d4943efb3b0eb5bf8c23</anchor>
      <arglist>(typename FillFlags::Flags fillFlags=FillFlags::nothing)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MessageBufferIF</name>
    <filename>a02582.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>MessageBufferIF</name>
      <anchorfile>a02582.html</anchorfile>
      <anchor>a241f3785616b72192bbe24da13df3878</anchor>
      <arglist>(MessageBufferImp &amp;buff)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a02582.html</anchorfile>
      <anchor>ab007f6d86a97356527b42a379b600079</anchor>
      <arglist>(const T &amp;val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>read</name>
      <anchorfile>a02582.html</anchorfile>
      <anchor>aec928187168ac22813a0af3343d5f0c0</anchor>
      <arglist>(T &amp;val)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::MinusExpression</name>
    <filename>a03442.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MinusExpression</name>
      <anchorfile>a03442.html</anchorfile>
      <anchor>a9d0549ba32c58855d56292efe4d9ad4f</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03442.html</anchorfile>
      <anchor>a0ac30c68a61f4f86907089bb9334503a</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::FactoryUtilities::MultiIndex</name>
    <filename>a04082.html</filename>
    <templarg>dim</templarg>
    <member kind="function">
      <type></type>
      <name>MultiIndex</name>
      <anchorfile>a04082.html</anchorfile>
      <anchor>a4cffeb330b319cf46ddde08ae07791d9</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;limits)</arglist>
    </member>
    <member kind="function">
      <type>MultiIndex&lt; dim &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>a04082.html</anchorfile>
      <anchor>aa644e5c27cb04d515dfffe160136880c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>cycle</name>
      <anchorfile>a04082.html</anchorfile>
      <anchor>ae541c3a596ed280cbbe18405c4525282</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::MultipleCodimMultipleGeomTypeMapper</name>
    <filename>a02798.html</filename>
    <templarg></templarg>
    <base>Mapper&lt; GV::Grid, MultipleCodimMultipleGeomTypeMapper&lt; GV &gt;, GV::IndexSet::IndexType &gt;</base>
    <member kind="typedef">
      <type>GV</type>
      <name>GridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ad0f2fcda1251a52413fc5c28e183a924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7ea89039a0b86bb71a60f90a1a8ffee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a549a0c5ad253fb33c80cc4d813f366a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleCodimMultipleGeomTypeMapper</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a25d1ebb578072c2ba8c36c9888a67a34</anchor>
      <arglist>(const GV &amp;gridView, const MCMGLayout &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a5df55b1e1be633b76d990dc7dbed881c</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a24a2624d09e1161517420e051b7a73ec</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a228e977d462d176b5453a6db62e68a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a9facf2614ae77f1b5fcf2bbff6abe824</anchor>
      <arglist>(GeometryType gt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>types</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a75354603bc5fda075a50ed01e55cee9a</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a804ce60c34eabbea7e5758dcc8f7736b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a08247d77c67ce838c3afd3ded6fad8ca</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a109484c93e4a1940b44d127052757bca</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a2dcfe88852a42c40ae22d43d8ffec4e3</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7451c8af09caaa1155939145c5d23c11</anchor>
      <arglist>(const GV &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>afebe1cf0724f2c5dcc132f03b576e306</anchor>
      <arglist>(GV &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>acb1092fcb511e33960a3c3eec3f71cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MCMGLayout &amp;</type>
      <name>layout</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ac5aebc6ce510a418bd447d07e84fa113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridView &amp;</type>
      <name>gridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a056916a77c950e57addc5dbca246f913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultipleCodimMultipleGeomTypeMapper&lt; G::LeafGridView &gt;</name>
    <filename>a02798.html</filename>
    <base>Dune::Mapper</base>
    <member kind="typedef">
      <type>G::LeafGridView</type>
      <name>GridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ad0f2fcda1251a52413fc5c28e183a924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7ea89039a0b86bb71a60f90a1a8ffee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a549a0c5ad253fb33c80cc4d813f366a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleCodimMultipleGeomTypeMapper</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a25d1ebb578072c2ba8c36c9888a67a34</anchor>
      <arglist>(const G::LeafGridView &amp;gridView, const MCMGLayout &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a5df55b1e1be633b76d990dc7dbed881c</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a24a2624d09e1161517420e051b7a73ec</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a228e977d462d176b5453a6db62e68a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a9facf2614ae77f1b5fcf2bbff6abe824</anchor>
      <arglist>(GeometryType gt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>types</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a75354603bc5fda075a50ed01e55cee9a</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a804ce60c34eabbea7e5758dcc8f7736b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a08247d77c67ce838c3afd3ded6fad8ca</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a109484c93e4a1940b44d127052757bca</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a2dcfe88852a42c40ae22d43d8ffec4e3</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7451c8af09caaa1155939145c5d23c11</anchor>
      <arglist>(const G::LeafGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>afebe1cf0724f2c5dcc132f03b576e306</anchor>
      <arglist>(G::LeafGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>acb1092fcb511e33960a3c3eec3f71cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MCMGLayout &amp;</type>
      <name>layout</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ac5aebc6ce510a418bd447d07e84fa113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridView &amp;</type>
      <name>gridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a056916a77c950e57addc5dbca246f913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>MultipleCodimMultipleGeomTypeMapper&lt; G::LevelGridView &gt;</name>
    <filename>a02798.html</filename>
    <base>Dune::Mapper</base>
    <member kind="typedef">
      <type>G::LevelGridView</type>
      <name>GridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ad0f2fcda1251a52413fc5c28e183a924</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7ea89039a0b86bb71a60f90a1a8ffee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a549a0c5ad253fb33c80cc4d813f366a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>MultipleCodimMultipleGeomTypeMapper</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a25d1ebb578072c2ba8c36c9888a67a34</anchor>
      <arglist>(const G::LevelGridView &amp;gridView, const MCMGLayout &amp;layout)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a5df55b1e1be633b76d990dc7dbed881c</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a24a2624d09e1161517420e051b7a73ec</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a228e977d462d176b5453a6db62e68a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a9facf2614ae77f1b5fcf2bbff6abe824</anchor>
      <arglist>(GeometryType gt) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>types</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a75354603bc5fda075a50ed01e55cee9a</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a804ce60c34eabbea7e5758dcc8f7736b</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IntegralRange&lt; Index &gt;</type>
      <name>indices</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a08247d77c67ce838c3afd3ded6fad8ca</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a109484c93e4a1940b44d127052757bca</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a2dcfe88852a42c40ae22d43d8ffec4e3</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a7451c8af09caaa1155939145c5d23c11</anchor>
      <arglist>(const G::LevelGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>afebe1cf0724f2c5dcc132f03b576e306</anchor>
      <arglist>(G::LevelGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>acb1092fcb511e33960a3c3eec3f71cd6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const MCMGLayout &amp;</type>
      <name>layout</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>ac5aebc6ce510a418bd447d07e84fa113</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const GridView &amp;</type>
      <name>gridView</name>
      <anchorfile>a02798.html</anchorfile>
      <anchor>a056916a77c950e57addc5dbca246f913</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridPtr::mygrid_ptr</name>
    <filename>a03610.html</filename>
    <member kind="function">
      <type></type>
      <name>mygrid_ptr</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>aff05d7a6afd92a018432afb7208f83a9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mygrid_ptr</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>a639669a722ca9fdb9de690abef50d6dc</anchor>
      <arglist>(const mygrid_ptr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mygrid_ptr</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>a0a634f1774e55c5ab2bd5fd5945b65d3</anchor>
      <arglist>(GridType *grd)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~mygrid_ptr</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>a2c3bca571b7fe5ac0864423a5ab0d196</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mygrid_ptr &amp;</type>
      <name>operator=</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>a1b9446bc4866a84ee7d72960d6d10170</anchor>
      <arglist>(const mygrid_ptr &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>GridType *</type>
      <name>release</name>
      <anchorfile>a03610.html</anchorfile>
      <anchor>a6171d43f9cc60fefa7d71e91afd0025a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NakedBase64DataArrayWriter</name>
    <filename>a03766.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>NakedBase64DataArrayWriter</name>
      <anchorfile>a03766.html</anchorfile>
      <anchor>adf1f7dd294eebd27c026fbf8b30acada</anchor>
      <arglist>(std::ostream &amp;theStream, int ncomps, int nitems, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>abf42e76c4b1f7c214239f3fb745eb297</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NakedRawDataArrayWriter</name>
    <filename>a03770.html</filename>
    <base>Dune::VTK::DataArrayWriter</base>
    <member kind="function">
      <type></type>
      <name>NakedRawDataArrayWriter</name>
      <anchorfile>a03770.html</anchorfile>
      <anchor>acdab87440db3ab588becaea74296b19c</anchor>
      <arglist>(std::ostream &amp;theStream, int ncomps, int nitems, Precision prec_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>a2e8b577eecbdb43390f5ff0e6eb804ea</anchor>
      <arglist>(T data)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>writeIsNoop</name>
      <anchorfile>a03746.html</anchorfile>
      <anchor>abf42e76c4b1f7c214239f3fb745eb297</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::NodeProjection</name>
    <filename>a02378.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>Dune::Alberta::BasicNodeProjection</base>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02378.html</anchorfile>
      <anchor>af9eabc3b1627a5f5d1ccb080c915c029</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NodeProjection</name>
      <anchorfile>a02378.html</anchorfile>
      <anchor>a459cd27f8baa3683b4958a9fa43ffd9d</anchor>
      <arglist>(unsigned int boundaryIndex, const Projection &amp;projection)</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>boundaryIndex</name>
      <anchorfile>a02374.html</anchorfile>
      <anchor>ab7df4de0c8d3b4268620978c0b1fbd4e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02378.html</anchorfile>
      <anchor>a155589991d62312387b60098d73d72ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NonConformingBoundaryIteratorFactory</name>
    <filename>a03710.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV::Intersection</type>
      <name>Cell</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>adc68b74a8655a836dccacefc2c3931b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundaryIterator&lt; GV &gt;</type>
      <name>CellIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5ae22285ede9e10217fea36098a11e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Corner</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aca019583c6399a3f1a83aaaca270f632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::CornerIterator&lt; CellIterator &gt;</type>
      <name>CornerIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5a469dc6e767492696b215022b453f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Corner</type>
      <name>Point</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aa20b781ab17a0c40310f8dc6dc8495a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CornerIterator</type>
      <name>PointIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>af28e498e637cd1dfb0b2a9475e1fe1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingConnectivityWriter&lt; Cell &gt;</type>
      <name>ConnectivityWriter</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>abde9276afc72434bde8232afb1c1fc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>afa7aa59892174ce7b0bec6169d3630b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonConformingBoundaryIteratorFactory</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>af5597ca2fb54c5a6529b6bea038a04b6</anchor>
      <arglist>(const GV &amp;gv_)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>beginCells</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ab20518bd6f6701e73c5c7459469890b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>endCells</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>af8415e3c6cbbada8cc91bd0873bced3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>beginCorners</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aa2aa13a5f55201fedc4986f39760344e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>endCorners</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ac92a737d025dbf430397a114067b7ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>beginPoints</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a08ac73b743d2a1fe177bf3f8fec1a97c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>endPoints</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>afbcc06c7068f27588f332b4f5e5d4357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityWriter</type>
      <name>makeConnectivity</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a1d15016185666af07ca5e788e41d78b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ab57ee90fbf231139d9e776671e4c459f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimCell</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5913f8236a45bbbf308f6ccb12350286</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NonConformingBoundaryWriter</name>
    <filename>a03714.html</filename>
    <templarg></templarg>
    <base>Dune::VTK::NonConformingBoundaryIteratorFactory</base>
    <base>BasicWriter&lt; NonConformingBoundaryIteratorFactory&lt; GV &gt; &gt;</base>
    <member kind="typedef">
      <type>GV::Intersection</type>
      <name>Cell</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>adc68b74a8655a836dccacefc2c3931b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>BoundaryIterator&lt; GV &gt;</type>
      <name>CellIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5ae22285ede9e10217fea36098a11e84</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Corner</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aca019583c6399a3f1a83aaaca270f632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::CornerIterator&lt; CellIterator &gt;</type>
      <name>CornerIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5a469dc6e767492696b215022b453f74</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Corner</type>
      <name>Point</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aa20b781ab17a0c40310f8dc6dc8495a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CornerIterator</type>
      <name>PointIterator</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>af28e498e637cd1dfb0b2a9475e1fe1a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingConnectivityWriter&lt; Cell &gt;</type>
      <name>ConnectivityWriter</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>abde9276afc72434bde8232afb1c1fc9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>afa7aa59892174ce7b0bec6169d3630b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FunctionWriterBase&lt; Cell &gt;</type>
      <name>FunctionWriter</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ad36d9935215389eea1fd32991cdc4a88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonConformingBoundaryWriter</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>ad8df66b0d920e7ec69ea79545a32c097</anchor>
      <arglist>(const GV &amp;gv_)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>ae0a5a1cd6ac836444836cd31ec621484</anchor>
      <arglist>(const std::shared_ptr&lt; Func &gt; &amp;p, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>a5b71c0bc13605af52de81ebe85ad2b57</anchor>
      <arglist>(Func *p, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>a220353cff60b471a7c79a763f29df5c5</anchor>
      <arglist>(const std::shared_ptr&lt; Func &gt; &amp;p, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>abbea539b0593fb7e0e3bbbc7888c21c5</anchor>
      <arglist>(Func *p, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03714.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>beginCells</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ab20518bd6f6701e73c5c7459469890b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>endCells</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>af8415e3c6cbbada8cc91bd0873bced3a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>beginCorners</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>aa2aa13a5f55201fedc4986f39760344e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>endCorners</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ac92a737d025dbf430397a114067b7ecf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>beginPoints</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a08ac73b743d2a1fe177bf3f8fec1a97c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>endPoints</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>afbcc06c7068f27588f332b4f5e5d4357</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityWriter</type>
      <name>makeConnectivity</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a1d15016185666af07ca5e788e41d78b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>ab57ee90fbf231139d9e776671e4c459f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af4e391b5f3f1058ad1fc96d4e50f66b1</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afd27a72bc7c69f92b6f72efcc5a0869a</anchor>
      <arglist>(const std::shared_ptr&lt; FunctionWriter &gt; &amp;writer)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a895c78454f07359bc12553b73421426e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writePiece</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aedf4d1e27b282df9cb1c44bb46abc2a0</anchor>
      <arglist>(const std::string &amp;filename, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>writeCollection</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a58b0cf56bd71a1462b9370af1b194361</anchor>
      <arglist>(const std::string name, const std::string &amp;piecename, const std::string &amp;piecepath)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9e1789744821b09e22c8fcce67d2f03</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int rank) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9cd727cb23e3cb0cc75140b87bff0fc0</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a3d280097305c7e5ec746ee7932fc8710</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a75860317a0f1e9dfbedd870b68485093</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, OutputType outputType)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>afbc864f3b73fbb8a1e196e00831d5966</anchor>
      <arglist>(const std::string &amp;name, OutputType outputType)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimCell</name>
      <anchorfile>a03710.html</anchorfile>
      <anchor>a5913f8236a45bbbf308f6ccb12350286</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a9082d2d165e818242e1176a06d1f9622</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>add2df4842048164321d57609a15f337d</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCornerFunction</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a91f4353fe0a4de25a06d0dda41b97303</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, FunctionWriter &amp;functionWriter, unsigned ncorners) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeCellData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a0cfe911f621230115e3657820ee8fd7a</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writePointData</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>aaec05e424a6657f4d8d4843364a05444</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned npoints) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeGrid</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a6bb905e9ec13e2452ed1647a6e79eccf</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeAll</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>a7335b24fa49e1d792db7e2132cf436a9</anchor>
      <arglist>(VTUWriter &amp;vtuWriter, unsigned ncells, unsigned npoints, unsigned ncorners)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstScalar</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>af9ba4cc56e221c73e03f98c4701adcae</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::string</type>
      <name>getFirstVector</name>
      <anchorfile>a03698.html</anchorfile>
      <anchor>ac9cd3194e22933f9bee6af141da6ceec</anchor>
      <arglist>(const WriterList &amp;data)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NonConformingConnectivityWriter</name>
    <filename>a03806.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>a74243130ed14766d079126c0fdbe4d10</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>a6254f172506bf9eb8a5249617eb45f7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>a92349a12f297e35bf74909df4761e874</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>aad6f635be4aceda6eae7d282f383643d</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>a7bc41caf27cd1956a2d4904df5075a10</anchor>
      <arglist>(const Cell &amp;, unsigned)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03806.html</anchorfile>
      <anchor>ab15d3e45b27d262bcae661265562f7ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::NonConformingVolumeIteratorFactory</name>
    <filename>a03858.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::Entity</type>
      <name>Cell</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a5be5a8fa24a05ec9445ec7cf68c19b0a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::template Codim&lt; 0 &gt;::template Partition&lt; InteriorBorder_Partition &gt;::Iterator</type>
      <name>CellIterator</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>af34505a8d5f7385cd2a9965e95b54d97</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::Corner&lt; Cell &gt;</type>
      <name>Corner</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>aae20334b5d13f93f6f862786bd84e3e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>VTK::CornerIterator&lt; CellIterator &gt;</type>
      <name>CornerIterator</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>aae0dac7e856d8b554e9efd9617e76095</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Corner</type>
      <name>Point</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>af1b10a08ebef7da7df5c16f2b9a8dd01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CornerIterator</type>
      <name>PointIterator</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>ab1ee9e92aad4764beeeb36eb64c164eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>NonConformingConnectivityWriter&lt; Cell &gt;</type>
      <name>ConnectivityWriter</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a6fd19dab8eef49344e79e5f9a9c07601</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a28d3480031fd61fe6e1ec0be06d12745</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NonConformingVolumeIteratorFactory</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a615fa7083fa364f601d352ee6e4ee0b6</anchor>
      <arglist>(const GV &amp;gv_)</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>beginCells</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a59b0aa21f3efcc8236956d6d3a72d88b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CellIterator</type>
      <name>endCells</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a884623f17418634e1cb26d4888951080</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>beginCorners</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>af287d90f3fd14b5a08d9ac1702d66eea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CornerIterator</type>
      <name>endCorners</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a92bf3f40c401aa2cd33deaf30306b059</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>beginPoints</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a347583d4a62b5a91d8bbf0e4e4c21868</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PointIterator</type>
      <name>endPoints</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>ad8f23089aefabfffcf229e5848fb3248</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ConnectivityWriter</type>
      <name>makeConnectivity</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a6ed38e2922bae98395ce02a8e3e0d818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a2cb7d7a449eab9c9bbf5c8ba4f0efb96</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimCell</name>
      <anchorfile>a03858.html</anchorfile>
      <anchor>a8148bb1efae32bbfc5debdf72cb78e88</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::NormExpression</name>
    <filename>a03446.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>NormExpression</name>
      <anchorfile>a03446.html</anchorfile>
      <anchor>a244af48b205c9d00847267b04a1f9e74</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03446.html</anchorfile>
      <anchor>a16cd78cabf6da2781094f07dcab391d3</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::NumberingMap</name>
    <filename>a02302.html</filename>
    <templarg>dim</templarg>
    <templarg>Numbering</templarg>
    <member kind="function">
      <type></type>
      <name>NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>adce3a91b67cae1cee05162316162297a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aac4d2fd2e5bf92d76e21823f8b0e7cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dune2alberta</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aa9055775b661592289142805cbbfd113</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2dune</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a3f601ee38586c725077d135db44f4ccd</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSubEntities</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a5dc0ecfe62051bad9cfdcdedcc051c5f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberingMap&lt; dimension, Alberta::Dune2AlbertaNumbering &gt;</name>
    <filename>a02302.html</filename>
    <member kind="function">
      <type></type>
      <name>NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>adce3a91b67cae1cee05162316162297a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aac4d2fd2e5bf92d76e21823f8b0e7cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dune2alberta</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aa9055775b661592289142805cbbfd113</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2dune</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a3f601ee38586c725077d135db44f4ccd</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSubEntities</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a5dc0ecfe62051bad9cfdcdedcc051c5f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberingMap&lt; dimension, Dune::Alberta::Dune2AlbertaNumbering &gt;</name>
    <filename>a02302.html</filename>
    <member kind="function">
      <type></type>
      <name>NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>adce3a91b67cae1cee05162316162297a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aac4d2fd2e5bf92d76e21823f8b0e7cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dune2alberta</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aa9055775b661592289142805cbbfd113</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2dune</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a3f601ee38586c725077d135db44f4ccd</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSubEntities</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a5dc0ecfe62051bad9cfdcdedcc051c5f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>NumberingMap&lt; dimension, Dune::Alberta::Generic2AlbertaNumbering &gt;</name>
    <filename>a02302.html</filename>
    <member kind="function">
      <type></type>
      <name>NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>adce3a91b67cae1cee05162316162297a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~NumberingMap</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aac4d2fd2e5bf92d76e21823f8b0e7cd8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dune2alberta</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>aa9055775b661592289142805cbbfd113</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>alberta2dune</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a3f601ee38586c725077d135db44f4ccd</anchor>
      <arglist>(int codim, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numSubEntities</name>
      <anchorfile>a02302.html</anchorfile>
      <anchor>a5dc0ecfe62051bad9cfdcdedcc051c5f</anchor>
      <arglist>(int codim) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities</name>
    <filename>a02214.html</filename>
    <templarg>dim</templarg>
    <templarg>codim</templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; 0, 0 &gt;</name>
    <filename>a02226.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02226.html</anchorfile>
      <anchor>af5ab6052716fcb7dbeaf0f3ce705cd3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; 2, 1 &gt;</name>
    <filename>a02230.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02230.html</anchorfile>
      <anchor>adbb9914478ba697bcd65a52cc50446f3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; 3, 1 &gt;</name>
    <filename>a02234.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02234.html</anchorfile>
      <anchor>a0fecbe2f07d989cd618f6f25ac501850</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; 3, 2 &gt;</name>
    <filename>a02238.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02238.html</anchorfile>
      <anchor>a88a3087ef74cd1878ec6cf79901b6098</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; dim, 0 &gt;</name>
    <filename>a02218.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02218.html</anchorfile>
      <anchor>a8574c73283e36631ae56d1775b176cac</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::NumSubEntities&lt; dim, dim &gt;</name>
    <filename>a02222.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02222.html</anchorfile>
      <anchor>a5540efdfc0043c71faa51ede13a4f07b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::OffsetsWriter</name>
    <filename>a03810.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ab387bfd7d292ca4fccb3fadf4dc69738</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ae0d65ea4d0db7425c7841cfe1a39b8c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a57422e8e365e1df55c01b983ee41693f</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ad956bd323510ab119b344615be3ed348</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>ad2052408f0667f34bfea62ed79aafa2d</anchor>
      <arglist>(const Cell &amp;cell, const typename Base::Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03810.html</anchorfile>
      <anchor>a862864ac5773321ba55db4418cc4aed5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::OneDGrid</name>
    <filename>a03934.html</filename>
    <base>GridDefaultImplementation&lt; 1, 1, OneDGridGeometry&lt; 0, 1, OneDGrid &gt;::ctype, OneDGridFamily &gt;</base>
    <member kind="enumeration">
      <type></type>
      <name>RefinementType</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6391ce2add44142b6004e7e435c2bddd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6391ce2add44142b6004e7e435c2bddda8660cbfb6839f6513f40099bda27a461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6391ce2add44142b6004e7e435c2bddda717acda80ec6df8358bb8839638797fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDGridGeometry&lt; 0, 1, OneDGrid &gt;::ctype</type>
      <name>ctype</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a0462c4fa437a6d4985c6aff5bb282ff0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDGridFamily</type>
      <name>GridFamily</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ac9d025d37a45653c22e20896c5b88bc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>OneDGridFamily::Traits</type>
      <name>Traits</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6fac5617a51d0a68249e6cc63662b73e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6391ce2add44142b6004e7e435c2bddda8660cbfb6839f6513f40099bda27a461</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a6391ce2add44142b6004e7e435c2bddda717acda80ec6df8358bb8839638797fa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDGrid</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a5334f3518144c51c8a1c774adf98a652</anchor>
      <arglist>(const std::vector&lt; ctype &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>OneDGrid</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a95a34391d937bea5815adde316317e78</anchor>
      <arglist>(int numElements, const ctype &amp;leftBoundary, const ctype &amp;rightBoundary)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~OneDGrid</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a716ba22ded322f2347fcc973dbc665c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ad824e37968942aa881dbaed6f79f5e6c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a84310dd773ee4849b36e1d82ecbfb497</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ac21dd02e2aec18d379c0209342ddf833</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a80b3da96e29b79110035be79101cb801</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a505304bbc2555e5ff06dbcc044b1fac3</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a67a831363ccb28831133f17a606b8679</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>adfe82fc3cd88498f68b2a2b7a5ca158d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ae3945902e38329e301346eed94885cfb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a780fe9a8e8c5b73cd07e41a01ba6e901</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ac8fadb9b97c00ade7249e66f5afa7d59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a7bf5f45023b3694d666e7a418bcebecb</anchor>
      <arglist>(int refCount, const Traits::Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>adc0e8813b4835f944356f6b3aeff0dec</anchor>
      <arglist>(const Traits::Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a334ef9026b772557d41b4b440a8dfe35</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a5db7425e8218640dd873359a244cdbc9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a5d47dadd272e48c1d7e85ad7b45635b8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinementType</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a7c1c4fdd477bc864a201b8c5ab27e50d</anchor>
      <arglist>(RefinementType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>af88f66610114160861517f8007668e6e</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a47e296b20a5d6cb15a7d39771329e8af</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a44c4014f62ae386d485bec73938c5b79</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static Traits::template Codim&lt; Seed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a815412bba6b08bccb332db267ee08b10</anchor>
      <arglist>(const Seed &amp;seed)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLevelIterator</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>aec100f804c14d17ee8a1cb0ccdf5aeba</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridHierarchicIterator&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a04224d342d83f7d7375de6a0122be130</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridEntity</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a9745a59f8309ca3be490a15d636c7d1d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridHierarchicIterator&lt; OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a75ab22595050ec39f23935e49293cc48</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLeafIntersection&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a053d93c6ce5d8b112d1bdae3604046fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLevelIntersection&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>abd6a10cb227de644c61e5e7ea683b9a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLeafIntersectionIterator&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a0d6754543bd1b8db9acc758c0df03d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLevelIntersectionIterator&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a998647204abfebac6a01286a0415ecd1</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLevelIndexSet&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>ad413281712dd49c4e83f730d217f20dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLeafIndexSet&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a8d549bd25ab0a369720242fb71744f4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridIdSet&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>affc659ad6d2dda1b3e2ed2a21b07fcbe</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLeafIterator</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a2bc8d3db2e8091f1fcc576c25d7cba31</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLeafGridView&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a8ebd02c98253bc7437fc9faa3f237352</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>OneDGridLevelGridView&lt; const OneDGrid &gt;</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a2a74dbd2e358f7d22414b9dd08b7d393</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GridFactory</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a2b5d6d64d6cf431e026ad53b6b08a080</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Entity</name>
      <anchorfile>a03934.html</anchorfile>
      <anchor>a7373c6e825366fcfb48f78bc329165e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::OneDGridFamily</name>
    <filename>a03930.html</filename>
    <member kind="typedef">
      <type>GridTraits&lt; 1, 1, Dune::OneDGrid, OneDGridGeometry, OneDGridEntity, OneDGridLevelIterator, OneDGridLeafIntersection, OneDGridLevelIntersection, OneDGridLeafIntersectionIterator, OneDGridLevelIntersectionIterator, OneDGridHierarchicIterator, OneDGridLeafIterator, OneDGridLevelIndexSet&lt; const OneDGrid &gt;, OneDGridLeafIndexSet&lt; const OneDGrid &gt;, OneDGridIdSet&lt; const OneDGrid &gt;, unsigned int, OneDGridIdSet&lt; const OneDGrid &gt;, unsigned int, CollectiveCommunication&lt; No_Comm &gt;, OneDGridLevelGridViewTraits, OneDGridLeafGridViewTraits, OneDGridEntitySeed &gt;</type>
      <name>Traits</name>
      <anchorfile>a03930.html</anchorfile>
      <anchor>ad6b8b5f17a881718a58d6e6b62978f6a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P0VTKFunction</name>
    <filename>a03782.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>VTKFunction&lt; GV &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a6de731d9fa91d2669c68f0276d6e4300</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ctype</type>
      <name>ctype</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a385579a416f800143bd291691aef2e1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>abaddd44c69c6a2c9b40fc758e357cee7a33a161569aeee44577a0f35909413f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncomps</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>afbf04148358d8911ade23ec76bd9283b</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a47755e10097a5fd9b2e74064f6f54fd9</anchor>
      <arglist>(int, const Entity &amp;e, const Dune::FieldVector&lt; ctype, dim &gt; &amp;) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a1897d6d2511bbb07c5508c19cdb87627</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>VTK::Precision</type>
      <name>precision</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a5db7461217a7234fe9d35b06a68d244c</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P0VTKFunction</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a59f124c76ab07a509fc3882aa754c8ff</anchor>
      <arglist>(const GV &amp;gv, const V &amp;v_, const std::string &amp;s_, int ncomps=1, int mycomp=0, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P0VTKFunction</name>
      <anchorfile>a03782.html</anchorfile>
      <anchor>a9c8a06b23a799644f45c926756fd5cca</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::P1VTKFunction</name>
    <filename>a03786.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>VTKFunction&lt; GV &gt;</base>
    <member kind="typedef">
      <type>Base::Entity</type>
      <name>Entity</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a502ae31985977b196d8c5886fb3be9b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ctype</type>
      <name>ctype</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a6d4ac1534156008850bf56d58f13a673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>abaddd44c69c6a2c9b40fc758e357cee7a33a161569aeee44577a0f35909413f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ncomps</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>aeed1dd76b95f5a5b3d2076fdd4df83d5</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>evaluate</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a9f6c9f9885eb7d39ebd5165fcdd02a76</anchor>
      <arglist>([[maybe_unused]] int comp, const Entity &amp;e, const Dune::FieldVector&lt; ctype, dim &gt; &amp;xi) const override</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a1328db6ec6682a9652ee7dbae888ca25</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>VTK::Precision</type>
      <name>precision</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a7cba3c9e5409b48db6d287466d424cee</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>P1VTKFunction</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>aea32fef5f28857f4b1878907cc53580e</anchor>
      <arglist>(const GV &amp;gv, const V &amp;v_, const std::string &amp;s_, int ncomps=1, int mycomp=0, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~P1VTKFunction</name>
      <anchorfile>a03786.html</anchorfile>
      <anchor>a2684675071a640c2415958398333aad3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a0cfd0a58483e8ad6a8b4150511529c87</anchor>
      <arglist>(int comp, const Entity &amp;e, const Dune::FieldVector&lt; ctype, dim &gt; &amp;xi) const=0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridFamily::Traits::Codim::Partition</name>
    <filename>a02062.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const GridImp, AlbertaGridLevelIterator&lt; cd, pitype, const GridImp &gt; &gt;</type>
      <name>LevelIterator</name>
      <anchorfile>a02062.html</anchorfile>
      <anchor>a7dadd45840f683b26b019feb53ef680a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const GridImp, AlbertaGridLeafIterator&lt; cd, pitype, const GridImp &gt; &gt;</type>
      <name>LeafIterator</name>
      <anchorfile>a02062.html</anchorfile>
      <anchor>ae51a507eb74f2e7c46b07b3392682a5f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLeafGridViewTraits::Codim::Partition</name>
    <filename>a02098.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a02098.html</anchorfile>
      <anchor>a8aef2c735ec7854e242c0b83191e23ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaLevelGridViewTraits::Codim::Partition</name>
    <filename>a02082.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02082.html</anchorfile>
      <anchor>aa9dae2a12ad27cc8ef502af6a8778a92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLeafGridViewTraits::Codim::Partition</name>
    <filename>a02634.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LeafIterator</type>
      <name>Iterator</name>
      <anchorfile>a02634.html</anchorfile>
      <anchor>aee20d2124492271227bed2af9b52e98f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::DefaultLevelGridViewTraits::Codim::Partition</name>
    <filename>a02618.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Grid ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::LevelIterator</type>
      <name>Iterator</name>
      <anchorfile>a02618.html</anchorfile>
      <anchor>a2e7b693055fc17faedfcc2febdddc4f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridFamily::Traits::Codim::Partition</name>
    <filename>a03166.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>GeoGrid::Iterator&lt; typename HostGrid::LeafGridView, codim, pitype, const Grid &gt;</type>
      <name>LeafIteratorImp</name>
      <anchorfile>a03166.html</anchorfile>
      <anchor>a1cab70a0132c56e7b8602e2dc38d4750</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; codim, const Grid, LeafIteratorImp &gt;</type>
      <name>LeafIterator</name>
      <anchorfile>a03166.html</anchorfile>
      <anchor>a606983f93f8d8ed009612d74f4e3bcfc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::Iterator&lt; typename HostGrid::LevelGridView, codim, pitype, const Grid &gt;</type>
      <name>LevelIteratorImp</name>
      <anchorfile>a03166.html</anchorfile>
      <anchor>a9604c4a8448a72863b52ec0df7601271</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; codim, const Grid, LevelIteratorImp &gt;</type>
      <name>LevelIterator</name>
      <anchorfile>a03166.html</anchorfile>
      <anchor>a5ce34698f9ea08a6c35b0612cbd726e0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridViewTraits::Codim::Partition</name>
    <filename>a03182.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>GeoGrid::Iterator&lt; HostGridView, codim, pit, const Grid &gt;</type>
      <name>IteratorImp</name>
      <anchorfile>a03182.html</anchorfile>
      <anchor>a7bd67aee525e634fb809fbcb9a589ead</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; codim, const Grid, IteratorImp &gt;</type>
      <name>Iterator</name>
      <anchorfile>a03182.html</anchorfile>
      <anchor>ae8cf2d3408f14b28721f6e1f84666895</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeometryGrid::Codim::Partition</name>
    <filename>a03146.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a03146.html</anchorfile>
      <anchor>a2f15a76244e1e80b26e7455a16421cdd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits::template Codim&lt; codim &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a03146.html</anchorfile>
      <anchor>a675a4f2a1d4783fc6023217a2b6cdca7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Grid::Codim::Partition</name>
    <filename>a02718.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>LevelIterator</name>
      <anchorfile>a02718.html</anchorfile>
      <anchor>a36e7255eca313a87c1b38e394fde85d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>LeafIterator</name>
      <anchorfile>a02718.html</anchorfile>
      <anchor>adc94aa36a64454766b47694a03f70594</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridTraits::Codim::Partition</name>
    <filename>a02730.html</filename>
    <templarg>pitype</templarg>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const GridImp, LevelIteratorImp&lt; cd, pitype, const GridImp &gt; &gt;</type>
      <name>LevelIterator</name>
      <anchorfile>a02730.html</anchorfile>
      <anchor>a234f8c7801d28b221f4fd4106b11f897</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; cd, const GridImp, LeafIteratorImp&lt; cd, pitype, const GridImp &gt; &gt;</type>
      <name>LeafIterator</name>
      <anchorfile>a02730.html</anchorfile>
      <anchor>ad92c17a962641618dcfaf66cd5e7b780</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GridView::Codim::Partition</name>
    <filename>a02766.html</filename>
    <templarg>pit</templarg>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6458fcb7553353f4786f006d4a9a6089</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter</name>
    <filename>a03214.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, All_Partition, Grid &gt;</name>
    <filename>a03234.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>a58393b9182102e5b744f26e0ce982372</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>ac2a773e7120c85fd42baf9c2fe7d2cba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>a7ad79c0a6bafc19c472842030ee990ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>a03adff4e8792a178ae5f184b3afb4730</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>a7807a4c12006818ea0ae1bb558c2e33d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>a24d523f321d3d54bb20a08f13ea79011</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03234.html</anchorfile>
      <anchor>acb4d5ab1b098c77223358f6b4510d2ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Ghost_Partition, Grid &gt;</name>
    <filename>a03238.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>a004364ba91db476e1cf848a04910bb3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>a59b84cc1f56bfe94652afa15ff19ae82</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>a2a05ba0f1049d4a5018a0d640c068fe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>aeb5dbe4e973e42713e35b07f72ecf6e1</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>a68c5297631650d3da193f8b0546932e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>aa9ff3198c583b244cc7b1914dd994d80</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03238.html</anchorfile>
      <anchor>a0d03fc0c2607d14848224337f45bd068</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Interior_Partition, Grid &gt;</name>
    <filename>a03218.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>aa003c62d655e1ff58c12b00fafcb05ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>a0b411af811f4fba0ff28c500c330645a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>acde41752d7572b7bdc28054da221bbc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>acce3b0f168420730f655d5469200a423</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>aecd2960dd4c91cc9d204d06dd9cf3768</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>a4aaea606c91b8b0a165502c39d74aa14</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03218.html</anchorfile>
      <anchor>a9f06ad5b53068370808ddca6bb7662f1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, InteriorBorder_Partition, Grid &gt;</name>
    <filename>a03222.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>a194c5405baa0fb5fb1e5f3f2b9a4d753</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>a6cbefc74e8ee79c325e8d3ff74b6aead</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>a0d19294141239b980af3df1c5c0e288f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>a7a38dd9d4cbdbf08aa975afb8e358ca8</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>aa9cbe747d2aea5cbef20f3a95753f3df</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>afcd3e71b9c70d6ba5328525a8bef0911</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03222.html</anchorfile>
      <anchor>aa65614ceec5bd3394c184bfcd4581acb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Overlap_Partition, Grid &gt;</name>
    <filename>a03226.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>a3867cb7364356d490a1a7351690b3097</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>a47da848fb564b4fd778a1b9b0b173264</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>a48ff2b57c2c4ecf9d9cd7e5e5976f1c7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>a98e10c511d714c3f538f29e33f655a44</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>ab26233ad6f0496616fc05e9c5ea53878</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>ad27bb1a401f080674384c9d6c94b0dc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03226.html</anchorfile>
      <anchor>ace38d2c07a6d84e185840de459c38cfd</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::PartitionIteratorFilter&lt; codim, OverlapFront_Partition, Grid &gt;</name>
    <filename>a03230.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::ctype</type>
      <name>ctype</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>aee0db8103164132094e62e18c813f18c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_const&lt; Grid &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity</type>
      <name>Element</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>a5146a7dad5c7cf56ebfe9bc70fc971e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Transitional::ReferenceElement&lt; ctype, Dim&lt; dimension &gt; &gt;</type>
      <name>RefElement</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>ab684a14d7c3a67e04081792ee33a283a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static bool</type>
      <name>apply</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>adcf281dfdcc4e34c96015222defd4d8d</anchor>
      <arglist>(const RefElement &amp;refElement, const Element &amp;element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>a76c36287d657190342926b92ed9394cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>codimension</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>af9cf56ba373a65f6198ca490db58fc7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const PartitionIteratorType</type>
      <name>Element_Partition</name>
      <anchorfile>a03230.html</anchorfile>
      <anchor>a59cdd195b36d3cb9d0ad1462f0d559d0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::PartitionSet</name>
    <filename>a02866.html</filename>
    <templarg>partitions</templarg>
    <member kind="function">
      <type>struct PartitionSet&lt; partitions|p &gt; constexpr</type>
      <name>operator+</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a8bc394cd03eb752f1f2968b704457bba</anchor>
      <arglist>(const PartitionSet&lt; p &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>struct PartitionSet&lt; partitions &amp;~p &gt; constexpr</type>
      <name>operator-</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>ad4e795c747171cc5fd78190473fdafb3</anchor>
      <arglist>(const PartitionSet&lt; p &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a0c1765618f637ab651b9d47dfb315791</anchor>
      <arglist>(PartitionSet&lt; p2 &gt;) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator!=</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a46f4090176f6b136942d94b14d5f784a</anchor>
      <arglist>(PartitionSet&lt; p2 &gt;) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr PartitionIteratorType</type>
      <name>partitionIterator</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a223adaf0542cfadaf621c23f78f6f1c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>ab0ab54bc82eca71980619ae0977ea105</anchor>
      <arglist>(PartitionType pt)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>contains</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a02ad1bb97471a561808c8899ff37dcb3</anchor>
      <arglist>(PartitionSet&lt; contained_partitions &gt;)</arglist>
    </member>
    <member kind="friend">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>a984df65c532c9cb32c51925a5c00ef3b</anchor>
      <arglist>(std::ostream &amp;os, const PartitionSet &amp;)</arglist>
    </member>
    <member kind="function">
      <type>PartitionSet&lt;(1&lt;&lt; p)&gt;</type>
      <name>partitionSet</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gaf3592a03efd8f240a919daba95d47251</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr PartitionSet&lt; derive_partition_set&lt; pitype &gt;::value &gt;</type>
      <name>partitionSet</name>
      <anchorfile>a02866.html</anchorfile>
      <anchor>gaf3592a03efd8f240a919daba95d47251</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::Patch</name>
    <filename>a02386.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>add7dd36645dd06684b3025ab59b7c6a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA RC_LIST_EL</type>
      <name>ElementList</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>aed03c36a49fa6fefe4145209613c7946</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Patch</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a7e49b83df3842e407bd8cefa9b566832</anchor>
      <arglist>(ElementList *list, int count)</arglist>
    </member>
    <member kind="function">
      <type>Element *</type>
      <name>operator[]</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a673020298ebc1414b50264468c25afac</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a42c0948a8df8cc5527f3ae67ade8b2ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ElementInfo</type>
      <name>elementInfo</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a4a85c0c9127874f8b0ca545f7768eaa7</anchor>
      <arglist>(int i, const LevelProvider &amp;levelProvider) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>elementType</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a155544748b887de93c19de8afa0bab0c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasNeighbor</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a7b6386373398f73b71edbdb08abb5b7d</anchor>
      <arglist>(int i, int neighbor) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>neighborIndex</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a05b87135e6ec96cce769c5ad1f86cac7</anchor>
      <arglist>(int i, int neighbor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEach</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a5a33f03c75d2e4dbd51e6c88d6a0b735</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>forEachInteriorSubChild</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a70d741386f63efefbc12b25cb0047e29</anchor>
      <arglist>(Functor &amp;functor) const</arglist>
    </member>
    <member kind="function">
      <type>Patch&lt; 2 &gt;::ElementInfo</type>
      <name>elementInfo</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a07862cd4ce1decda7f6018086bfff83a</anchor>
      <arglist>(int i, const LevelProvider &amp;levelProvider) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02386.html</anchorfile>
      <anchor>a799e4d748b48718e23c9becc29454aca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::PeriodicFaceTransformationBlock</name>
    <filename>a03402.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <class kind="struct">Dune::dgf::PeriodicFaceTransformationBlock::AffineTransformation</class>
    <class kind="class">Dune::dgf::PeriodicFaceTransformationBlock::Matrix</class>
    <member kind="function">
      <type></type>
      <name>PeriodicFaceTransformationBlock</name>
      <anchorfile>a03402.html</anchorfile>
      <anchor>a998a71906fbb033f6682bde65e5d710d</anchor>
      <arglist>(std::istream &amp;in, int dimworld)</arglist>
    </member>
    <member kind="function">
      <type>const AffineTransformation &amp;</type>
      <name>transformation</name>
      <anchorfile>a03402.html</anchorfile>
      <anchor>abd6390453b9c109cddde4301fdd02006</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>numTransformations</name>
      <anchorfile>a03402.html</anchorfile>
      <anchor>a462dfdce6427a6f0fa405b9a183d5e8d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer</name>
    <filename>a04086.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>PersistentContainerMap&lt; G, G::LocalIdSet, std::map&lt; G::LocalIdSet::IdType, T &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a6e77292e6eba67236a5d08cb6da80fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a69b5bc93ba825d1a3edacde3a805bb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>aaedecc4e148bf9df4387be2146f550c9</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const G::LocalIdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;oldData, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const G::LocalIdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; G::LocalIdSet::IdType, T &gt;</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; AlbertaGrid&lt; dim, dimworld &gt;, T &gt;</name>
    <filename>a02354.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <templarg></templarg>
    <base>PersistentContainerVector&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet, std::vector&lt; T &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a02354.html</anchorfile>
      <anchor>aa795a16e7d540b10321c26baec2d5436</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a02354.html</anchorfile>
      <anchor>aaaad097ab4c6787c34613e318f02f626</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::size_type</type>
      <name>Size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a14713ac39fdffada26feef81a796ea37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7cad909e5fa73af7945f32eb968c1a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::iterator</type>
      <name>Iterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a523bed49e279ac3513ee6ddc54a2d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a1deac98135f655365c00d9d806073140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a02354.html</anchorfile>
      <anchor>a469d6986427f9f0b20019d2577301353</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a4fa074b8b0ba22c09780104437372dcb</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adf61fb93f8e8562782903072fde137c5</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a24314e0d8a69035e39d7a2bc70d962bb</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adcfb646755e1bf8b2aea50b94b845315</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>acb2f01a49e86ce07699b714eb710eb51</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7a741863a38be8019c15ebed41e156cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a26802e4f08ffca05ec6f88b15387347b</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>abff4d3d9a5191c777ef1fa5845ff5c4d</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a5dfaf4fd76d3b91dda018bc83f422ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a02b42e068a1dad5d1349257b2643e11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a6e1db57e1292428a4addace99a6ccab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8af5308467d52c9ad4faa00f8de1042b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>aa8835f2051c1fe849ca0c5e1821404d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8666edae866540ef98708e31d65f46fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a739f5da4d6eefbdab0a7b152cac2e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet *</type>
      <name>indexSet_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a3bb66a14e0a32b73fe6905b70d09a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>data_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a83f87b8281d28ccf5290f10756324c5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; const Grid, T &gt;</name>
    <filename>a04090.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>PersistentContainer&lt; Grid, T &gt;</base>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04090.html</anchorfile>
      <anchor>a17eef2bc9db2ee8d9255e4efa8c73f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a6e77292e6eba67236a5d08cb6da80fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04090.html</anchorfile>
      <anchor>a60af4fda4e1cb3de0dadd662a3b67bb3</anchor>
      <arglist>(const typename Base::Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, Map &amp;oldData, Map &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Map</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, T &gt;</name>
    <filename>a03250.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base>PersistentContainerWrapper&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, T &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a03250.html</anchorfile>
      <anchor>a5f12c132867c94dcebe0ada654997675</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a03250.html</anchorfile>
      <anchor>a297c54857cbd89dffe9bcd3c31806b48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Size</type>
      <name>Size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af340645acc92ea8604ed9a3c451a46ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>add716623ea3a47a131e07b4237a981c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a72c357a203983bf8d7d64186fee86c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a03250.html</anchorfile>
      <anchor>afa9fdb8bcece9e78becd28cd75082961</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9b11b2a38e7469c90436f073089af40a</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8cc298d28370516e2290b9ce0fbd5c98</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8a0d28bf443b1ca557dbf75a8a658be0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a219b34db2468bcd2d7c8b605c13b85a7</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a3d6be07042be5c29b8e4353ca0d1bfb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8dd41e83011fa64cfce1cb0ef334986a</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ad9555dd3d487203d76096d43904195e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a21d0bf7393d81489883784d9ab5cb5b6</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>aa24339a5e21f0e3cb02b142e55fcbe88</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a503cd364c00da82611f3529a764efebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>adbe719704a2747b2a57485cf906b104b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ab25ec7d5300baf2c40bdaac16b6753e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>afdafc3c1753d845a8a3ab8da36705c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9d4e8aa75af600f2ede0f42db4710225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PersistentContainer&lt; HostGrid, T &gt;</type>
      <name>hostContainer_</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af333ade27e7373eacc1a5d4267d03ffe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainer&lt; Grid, T &gt;</name>
    <filename>a04086.html</filename>
    <base>Dune::PersistentContainerMap</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a6e77292e6eba67236a5d08cb6da80fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a69b5bc93ba825d1a3edacde3a805bb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>aaedecc4e148bf9df4387be2146f550c9</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, Map &amp;oldData, Map &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Map</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainer&lt; HostGrid, Coordinate &gt;</name>
    <filename>a04086.html</filename>
    <base>Dune::PersistentContainerMap</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a6e77292e6eba67236a5d08cb6da80fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a69b5bc93ba825d1a3edacde3a805bb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>aaedecc4e148bf9df4387be2146f550c9</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, Map &amp;oldData, Map &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Map</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainer&lt; HostGrid, T &gt;</name>
    <filename>a04086.html</filename>
    <base>Dune::PersistentContainerMap</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a6e77292e6eba67236a5d08cb6da80fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>a69b5bc93ba825d1a3edacde3a805bb2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04086.html</anchorfile>
      <anchor>aaedecc4e148bf9df4387be2146f550c9</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, Map &amp;oldData, Map &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Map</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainer&lt; YaspGrid&lt; dim, CoordCont &gt;, T &gt;</name>
    <filename>a04310.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <base protection="private">YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt;</base>
    <base>PersistentContainerVector&lt; YaspGrid&lt; dim, CoordCont &gt;, YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt;, std::vector&lt; T &gt; &gt;</base>
    <member kind="typedef">
      <type>Base::Grid</type>
      <name>Grid</name>
      <anchorfile>a04310.html</anchorfile>
      <anchor>a1df41288e0ed0eae6aa0bde49f5ef4fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::Value</type>
      <name>Value</name>
      <anchorfile>a04310.html</anchorfile>
      <anchor>a3e651f70900b29b658f175ade4713fed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::size_type</type>
      <name>Size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a14713ac39fdffada26feef81a796ea37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7cad909e5fa73af7945f32eb968c1a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::iterator</type>
      <name>Iterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a523bed49e279ac3513ee6ddc54a2d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a1deac98135f655365c00d9d806073140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainer</name>
      <anchorfile>a04310.html</anchorfile>
      <anchor>ad73c43d04c3fcbf742834697cdc6eef8</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04310.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a4fa074b8b0ba22c09780104437372dcb</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adf61fb93f8e8562782903072fde137c5</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a24314e0d8a69035e39d7a2bc70d962bb</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adcfb646755e1bf8b2aea50b94b845315</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>acb2f01a49e86ce07699b714eb710eb51</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7a741863a38be8019c15ebed41e156cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a26802e4f08ffca05ec6f88b15387347b</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>abff4d3d9a5191c777ef1fa5845ff5c4d</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a5dfaf4fd76d3b91dda018bc83f422ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a02b42e068a1dad5d1349257b2643e11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a6e1db57e1292428a4addace99a6ccab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8af5308467d52c9ad4faa00f8de1042b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>aa8835f2051c1fe849ca0c5e1821404d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt; &amp;</type>
      <name>indexSet</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8666edae866540ef98708e31d65f46fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a739f5da4d6eefbdab0a7b152cac2e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt; *</type>
      <name>indexSet_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a3bb66a14e0a32b73fe6905b70d09a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>data_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a83f87b8281d28ccf5290f10756324c5a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a2806f89ae5b327c6f68a1a105ad06439</anchor>
      <arglist>(int) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainerInterface</name>
    <filename>a04094.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>aaf28dd85cc8e3cdfb48ec3d639d1436c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>Value</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a1833f4547351dc31dda536fea8b264ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Size</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a042a4377e10c3fca2c07292c5c077fba</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>ConstIterator</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a4e6c0024121f781d24ca5894e6cab40f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ImplementationDefined</type>
      <name>Iterator</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a48a813a4745f32050705ef8c557c4ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerInterface</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a1394b23dc3e824afe58704cc93aa500c</anchor>
      <arglist>(Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerInterface</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a49ba72f683489cc1fb00a95f1ba6ace6</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const This &amp;</type>
      <name>operator=</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>af328a373ab17f4dcc319a00c79cc9de5</anchor>
      <arglist>(const This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>ab138df3e07064d6bb7caa7ed5f28c52f</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>af15271004b121507d81684050ae35827</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>ab991e2c027e14b83d4a09956546457a5</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a0a40e9fff0f6c2652106c1b162d23220</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a3ad82e212691728e9b75fdf57ef033ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>ac73d321af6e5c7ad86758e8e56b02439</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a8b95603a7d98e57afb62003e77c31f5d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>aef35f7421955dd94173792c47f771fbd</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>ab58d05bb498f5e4fbda449a55d9f1477</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a5484e3b951608f1e5fb034171cca41bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a69214511716038dc8bd728d074bc342d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a5045cf2b5f7cf47ee3e881102e11a426</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a74a7647256c1c1cbbff1ccd84283e5e1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04094.html</anchorfile>
      <anchor>a9b738ee09daa2bd3c308e61cb1e6d54a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainerMap</name>
    <filename>a04098.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="class">Dune::PersistentContainerMap::IteratorWrapper</class>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a148f33f791c8776236f44c201760514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::mapped_type</type>
      <name>Value</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7eb9fff073201cc24a722d05428234a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerMap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aa9ffcdacd9649307488024e18e22ae30</anchor>
      <arglist>(const Grid &amp;grid, int codim, const IdSet &amp;idSet, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, Map &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, Map &amp;oldData, Map &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Map</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainerMap&lt; G, G::LocalIdSet, std::map&lt; G::LocalIdSet::IdType, T &gt; &gt;</name>
    <filename>a04098.html</filename>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a148f33f791c8776236f44c201760514a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::mapped_type</type>
      <name>Value</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7eb9fff073201cc24a722d05428234a7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Map::size_type</type>
      <name>Size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>abc1712ee3dcef8daa2dc4ca4de121153</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; const Value, typename Map::const_iterator &gt;</type>
      <name>ConstIterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2df91a67aa69c25eeba45e6ccd5b094e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IteratorWrapper&lt; Value, typename Map::iterator &gt;</type>
      <name>Iterator</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae1c558bf3354c0a569df33b18e929be0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerMap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aa9ffcdacd9649307488024e18e22ae30</anchor>
      <arglist>(const Grid &amp;grid, int codim, const G::LocalIdSet &amp;idSet, const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a92ee5df0af9cbf8d4d022c776752bddc</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ace193d0c6c9f10fe3463171d42c96a2a</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a1481b442dfa1b7d1a52d369770ae96f0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a59da4933d4dac339d8d93d00b5320b7f</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae0242509604b29711bad1a2747f05ead</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a48d6ac1ae8d5abea6288539acb2d9461</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af896d65b2d42450f0f2ddea606ffae66</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a086b7677af48f8286c7f62b6eb286aa2</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a0738f061eb60675341496d78003c53de</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a53d6067277588335e00fcbd51e0c7527</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ab1c6a44c7cd716a8c008b512d3ee4bff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ac65153f0ec87128eee577d1ce2870cad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a7fba8c9161bc460d9b4580ff5f839241</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a3bdfe5c4c1feda7f2b3255d0f2001577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a260501921dad94dfa64068161653763c</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1e915ee313dfae32af8b8aefc17b706</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>af1ca1e8959d340fc94b8a6e18f5965b4</anchor>
      <arglist>(int level, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;data, std::integral_constant&lt; bool, true &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>migrateLevel</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a04136bd8ff36001fdba173734a871e23</anchor>
      <arglist>(int level, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;data, std::integral_constant&lt; bool, false &gt;)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const G::LocalIdSet &amp;</type>
      <name>idSet</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae19e81d7bab91c4f508af75a0ee82141</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>migrateEntry</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a607a55fd4ac473b7c3f1f89a25a4785c</anchor>
      <arglist>(const typename IdSet::IdType &amp;id, const Value &amp;value, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;oldData, std::map&lt; G::LocalIdSet::IdType, T &gt; &amp;newData)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const Grid *</type>
      <name>grid_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a38e954fcf8d20bf56a4474db517ed1c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>a2e3e7b47ac387c01a2cc86f8dbe5b135</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const G::LocalIdSet *</type>
      <name>idSet_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>ae7bcde9dff8cbb05329d403655dba350</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::map&lt; G::LocalIdSet::IdType, T &gt;</type>
      <name>data_</name>
      <anchorfile>a04098.html</anchorfile>
      <anchor>aca083ceb2ad50d0934e5812268e309ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainerVector</name>
    <filename>a04106.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a2d3c3f900bd1621cbd5b9e9b696016d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::value_type</type>
      <name>Value</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a15354e12c04f170d270ee6b53f3cfd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::size_type</type>
      <name>Size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a14713ac39fdffada26feef81a796ea37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7cad909e5fa73af7945f32eb968c1a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::iterator</type>
      <name>Iterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a523bed49e279ac3513ee6ddc54a2d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a1deac98135f655365c00d9d806073140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerVector</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a00c3c27ebca96585f8a8e12417592eb0</anchor>
      <arglist>(const IndexSet &amp;indexSet, int codim, const Value &amp;value, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a4fa074b8b0ba22c09780104437372dcb</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adf61fb93f8e8562782903072fde137c5</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a24314e0d8a69035e39d7a2bc70d962bb</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adcfb646755e1bf8b2aea50b94b845315</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>acb2f01a49e86ce07699b714eb710eb51</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7a741863a38be8019c15ebed41e156cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a26802e4f08ffca05ec6f88b15387347b</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>abff4d3d9a5191c777ef1fa5845ff5c4d</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a5dfaf4fd76d3b91dda018bc83f422ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a02b42e068a1dad5d1349257b2643e11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a6e1db57e1292428a4addace99a6ccab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8af5308467d52c9ad4faa00f8de1042b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>aa8835f2051c1fe849ca0c5e1821404d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8666edae866540ef98708e31d65f46fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a739f5da4d6eefbdab0a7b152cac2e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const IndexSet *</type>
      <name>indexSet_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a3bb66a14e0a32b73fe6905b70d09a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Vector</type>
      <name>data_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a83f87b8281d28ccf5290f10756324c5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainerVector&lt; AlbertaGrid&lt; dim, dimworld &gt;, AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet, std::vector&lt; T &gt; &gt;</name>
    <filename>a04106.html</filename>
    <member kind="typedef">
      <type>AlbertaGrid&lt; dim, dimworld &gt;</type>
      <name>Grid</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a2d3c3f900bd1621cbd5b9e9b696016d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::value_type</type>
      <name>Value</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a15354e12c04f170d270ee6b53f3cfd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::size_type</type>
      <name>Size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a14713ac39fdffada26feef81a796ea37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7cad909e5fa73af7945f32eb968c1a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::iterator</type>
      <name>Iterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a523bed49e279ac3513ee6ddc54a2d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a1deac98135f655365c00d9d806073140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerVector</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a00c3c27ebca96585f8a8e12417592eb0</anchor>
      <arglist>(const AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet &amp;indexSet, int codim, const Value &amp;value, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a4fa074b8b0ba22c09780104437372dcb</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adf61fb93f8e8562782903072fde137c5</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a24314e0d8a69035e39d7a2bc70d962bb</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adcfb646755e1bf8b2aea50b94b845315</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>acb2f01a49e86ce07699b714eb710eb51</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7a741863a38be8019c15ebed41e156cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a26802e4f08ffca05ec6f88b15387347b</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>abff4d3d9a5191c777ef1fa5845ff5c4d</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a5dfaf4fd76d3b91dda018bc83f422ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a02b42e068a1dad5d1349257b2643e11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a6e1db57e1292428a4addace99a6ccab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8af5308467d52c9ad4faa00f8de1042b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>aa8835f2051c1fe849ca0c5e1821404d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8666edae866540ef98708e31d65f46fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a739f5da4d6eefbdab0a7b152cac2e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const AlbertaGrid&lt; dim, dimworld &gt;::HierarchicIndexSet *</type>
      <name>indexSet_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a3bb66a14e0a32b73fe6905b70d09a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>data_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a83f87b8281d28ccf5290f10756324c5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainerVector&lt; YaspGrid&lt; dim, CoordCont &gt;, YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt;, std::vector&lt; T &gt; &gt;</name>
    <filename>a04106.html</filename>
    <member kind="typedef">
      <type>YaspGrid&lt; dim, CoordCont &gt;</type>
      <name>Grid</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a2d3c3f900bd1621cbd5b9e9b696016d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::value_type</type>
      <name>Value</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a15354e12c04f170d270ee6b53f3cfd59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::size_type</type>
      <name>Size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a14713ac39fdffada26feef81a796ea37</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::const_iterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7cad909e5fa73af7945f32eb968c1a3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::iterator</type>
      <name>Iterator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a523bed49e279ac3513ee6ddc54a2d85d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Vector::allocator_type</type>
      <name>Allocator</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a1deac98135f655365c00d9d806073140</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerVector</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a00c3c27ebca96585f8a8e12417592eb0</anchor>
      <arglist>(const YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt; &amp;indexSet, int codim, const Value &amp;value, const Allocator &amp;allocator=Allocator())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a4fa074b8b0ba22c09780104437372dcb</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adf61fb93f8e8562782903072fde137c5</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a24314e0d8a69035e39d7a2bc70d962bb</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>adcfb646755e1bf8b2aea50b94b845315</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>ab94dfeda7087ea620a08c18cc97ccb8e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>acb2f01a49e86ce07699b714eb710eb51</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a7a741863a38be8019c15ebed41e156cd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a26802e4f08ffca05ec6f88b15387347b</anchor>
      <arglist>(const Value &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>abff4d3d9a5191c777ef1fa5845ff5c4d</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a5dfaf4fd76d3b91dda018bc83f422ee0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a02b42e068a1dad5d1349257b2643e11b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a6e1db57e1292428a4addace99a6ccab1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8af5308467d52c9ad4faa00f8de1042b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>aa8835f2051c1fe849ca0c5e1821404d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt; &amp;</type>
      <name>indexSet</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a8666edae866540ef98708e31d65f46fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>codim_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a739f5da4d6eefbdab0a7b152cac2e2e3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt; *</type>
      <name>indexSet_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a3bb66a14e0a32b73fe6905b70d09a120</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; T &gt;</type>
      <name>data_</name>
      <anchorfile>a04106.html</anchorfile>
      <anchor>a83f87b8281d28ccf5290f10756324c5a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::PersistentContainerWrapper</name>
    <filename>a04110.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>G</type>
      <name>Grid</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a7fab3fd4ed104d5cf17a02e1b2adaa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Value</type>
      <name>Value</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a5a0c03abb9400c1fdc894adb231fc975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Size</type>
      <name>Size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af340645acc92ea8604ed9a3c451a46ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>add716623ea3a47a131e07b4237a981c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a72c357a203983bf8d7d64186fee86c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerWrapper</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ac062054287bad49bed14b61a9f17418a</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9b11b2a38e7469c90436f073089af40a</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8cc298d28370516e2290b9ce0fbd5c98</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8a0d28bf443b1ca557dbf75a8a658be0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a219b34db2468bcd2d7c8b605c13b85a7</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a3d6be07042be5c29b8e4353ca0d1bfb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8dd41e83011fa64cfce1cb0ef334986a</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ad9555dd3d487203d76096d43904195e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a21d0bf7393d81489883784d9ab5cb5b6</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>aa24339a5e21f0e3cb02b142e55fcbe88</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a503cd364c00da82611f3529a764efebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>adbe719704a2747b2a57485cf906b104b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ab25ec7d5300baf2c40bdaac16b6753e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>afdafc3c1753d845a8a3ab8da36705c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9d4e8aa75af600f2ede0f42db4710225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PersistentContainer&lt; HostGrid, T &gt;</type>
      <name>hostContainer_</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af333ade27e7373eacc1a5d4267d03ffe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>PersistentContainerWrapper&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, T &gt;</name>
    <filename>a04110.html</filename>
    <member kind="typedef">
      <type>GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a7fab3fd4ed104d5cf17a02e1b2adaa06</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Value</type>
      <name>Value</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a5a0c03abb9400c1fdc894adb231fc975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Size</type>
      <name>Size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af340645acc92ea8604ed9a3c451a46ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>add716623ea3a47a131e07b4237a981c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PersistentContainer&lt; HostGrid, T &gt;::ConstIterator</type>
      <name>ConstIterator</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a72c357a203983bf8d7d64186fee86c88</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PersistentContainerWrapper</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ac062054287bad49bed14b61a9f17418a</anchor>
      <arglist>(const Grid &amp;grid, int codim, const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9b11b2a38e7469c90436f073089af40a</anchor>
      <arglist>(const Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8cc298d28370516e2290b9ce0fbd5c98</anchor>
      <arglist>(const Entity &amp;entity)</arglist>
    </member>
    <member kind="function">
      <type>const Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8a0d28bf443b1ca557dbf75a8a658be0</anchor>
      <arglist>(const Entity &amp;entity, int subEntity) const</arglist>
    </member>
    <member kind="function">
      <type>Value &amp;</type>
      <name>operator()</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a219b34db2468bcd2d7c8b605c13b85a7</anchor>
      <arglist>(const Entity &amp;entity, int subEntity)</arglist>
    </member>
    <member kind="function">
      <type>Size</type>
      <name>size</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a3d6be07042be5c29b8e4353ca0d1bfb4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>resize</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a8dd41e83011fa64cfce1cb0ef334986a</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>shrinkToFit</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ad9555dd3d487203d76096d43904195e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a21d0bf7393d81489883784d9ab5cb5b6</anchor>
      <arglist>(const Value &amp;value=Value())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>swap</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>aa24339a5e21f0e3cb02b142e55fcbe88</anchor>
      <arglist>(This &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a503cd364c00da82611f3529a764efebc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>adbe719704a2747b2a57485cf906b104b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>ConstIterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>ab25ec7d5300baf2c40bdaac16b6753e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>afdafc3c1753d845a8a3ab8da36705c0f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>codimension</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>a9d4e8aa75af600f2ede0f42db4710225</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>PersistentContainer&lt; HostGrid, T &gt;</type>
      <name>hostContainer_</name>
      <anchorfile>a04110.html</anchorfile>
      <anchor>af333ade27e7373eacc1a5d4267d03ffe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::PointIterator</name>
    <filename>a03818.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>VTK::Corner&lt; typename std::remove_const&lt; typename std::iterator_traits&lt; CellIterator &gt;::value_type &gt;::type &gt;</type>
      <name>Corner</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a222adf6537f8d3e6d9476621c56f83ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PointIterator&lt; CellIterator, IS &gt;</type>
      <name>DerivedType</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a870e66302241e5c1acbfa21391d0b8cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>const Corner</type>
      <name>Value</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a8ef9659d64bebb80291ee2f934a436e6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Value &amp;</type>
      <name>Reference</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>aa56cd564c880642f3ed6244d0788134b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::iterator_traits&lt; CellIterator &gt;::difference_type</type>
      <name>DifferenceType</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a387394a75e2187e9d5da6b20a0b8063a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Reference</type>
      <name>dereference</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a26d4ba5691708690bec9c20653a12d33</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isDereferencable</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>aadd667e101a99048eaea2f02097337d1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a665431802ff74e0838f55da31635ab58</anchor>
      <arglist>(const DerivedType &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a0cb0b0a47717827bf64cd8bdbc37256a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointIterator</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a06b0c844c6cae7c5ae2f063fe075eec6</anchor>
      <arglist>(const CellIterator &amp;cellit, const CellIterator &amp;cellend, const IS &amp;is_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PointIterator</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a5741c102571eae414fa2b1d5891e2599</anchor>
      <arglist>(const CellIterator &amp;cellend_)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>mydim</name>
      <anchorfile>a03818.html</anchorfile>
      <anchor>a48a71990718dc92e728b22435558bd3b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::PolygonBlock</name>
    <filename>a03414.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>PolygonBlock</name>
      <anchorfile>a03414.html</anchorfile>
      <anchor>a217a4a274f05352d1e6713bea7021e6a</anchor>
      <arglist>(std::istream &amp;in, int numVtx, int vtxOfs)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03414.html</anchorfile>
      <anchor>aaa42c3cf4afa0df22d96c06f248bd6d4</anchor>
      <arglist>(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;polygons)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vtxBegin_</name>
      <anchorfile>a03414.html</anchorfile>
      <anchor>aefad44015beb37ef254dfcae5e43eb1f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>vtxEnd_</name>
      <anchorfile>a03414.html</anchorfile>
      <anchor>ac5a064ac711de0630d1c500390c69ec1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::PolyhedronBlock</name>
    <filename>a03418.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>PolyhedronBlock</name>
      <anchorfile>a03418.html</anchorfile>
      <anchor>ab0ed7d78bc32d481f820264844b96744</anchor>
      <arglist>(std::istream &amp;in, int numPolys)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03418.html</anchorfile>
      <anchor>af99c520a1061da7982a47bf69436e265</anchor>
      <arglist>(std::vector&lt; std::vector&lt; int &gt; &gt; &amp;polyhedra)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>const int</type>
      <name>numPolys_</name>
      <anchorfile>a03418.html</anchorfile>
      <anchor>a9bd58ca81ab05f320fb6327ea42b17a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::PowerExpression</name>
    <filename>a03462.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>PowerExpression</name>
      <anchorfile>a03462.html</anchorfile>
      <anchor>a4c91f2d7364b3bce76bc389bb824a23d</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;exprA, const ProjectionBlock::ExpressionPointer &amp;exprB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03462.html</anchorfile>
      <anchor>a1ef1df1d95085a278094d0864f402ee5</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTK::PrintType</name>
    <filename>a03718.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>Type</name>
      <anchorfile>a03718.html</anchorfile>
      <anchor>a31530afed1b4223e23de914d87ed5197</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTK::PrintType&lt; char &gt;</name>
    <filename>a03730.html</filename>
    <member kind="typedef">
      <type>std::conditional&lt; std::numeric_limits&lt; char &gt;::is_signed, int, unsigned &gt;::type</type>
      <name>Type</name>
      <anchorfile>a03730.html</anchorfile>
      <anchor>aa888c76a5d619527c08b0bd3bc8610fc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTK::PrintType&lt; signed char &gt;</name>
    <filename>a03726.html</filename>
    <member kind="typedef">
      <type>int</type>
      <name>Type</name>
      <anchorfile>a03726.html</anchorfile>
      <anchor>a6566eacec6d72f42ab653872d04ead66</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTK::PrintType&lt; unsigned char &gt;</name>
    <filename>a03722.html</filename>
    <member kind="typedef">
      <type>unsigned</type>
      <name>Type</name>
      <anchorfile>a03722.html</anchorfile>
      <anchor>a194ee64e8cd4a0a9679f8d044f479fb3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Torus::ProcListIterator</name>
    <filename>a04282.html</filename>
    <member kind="function">
      <type></type>
      <name>ProcListIterator</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a0e540947f45341b95cea4b8d6c8683c3</anchor>
      <arglist>(typename std::deque&lt; CommPartner &gt;::const_iterator iter)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a88446323b82fa4c922e6a7d500dd6b38</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>delta</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a9d9256367d0060ba7a08bd6c868426ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a6afda7f8a7585e0dd197933596175127</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>distance</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a434c499b7db1e7679c3113c3c5c7b5a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a8e87a28ff62c494e915e1d04930d398d</anchor>
      <arglist>(const ProcListIterator &amp;iter) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>ace0543b61061e611dcfcad667a9ee0c6</anchor>
      <arglist>(const ProcListIterator &amp;iter) const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator &amp;</type>
      <name>operator++</name>
      <anchorfile>a04282.html</anchorfile>
      <anchor>a8f87ad613cd4effeb2b0cc4ac2cba3b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::ProductExpression</name>
    <filename>a03474.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProductExpression</name>
      <anchorfile>a03474.html</anchorfile>
      <anchor>adeb8174d42147cf958f2ecc78c08db11</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;exprA, const ProjectionBlock::ExpressionPointer &amp;exprB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03474.html</anchorfile>
      <anchor>ad6820ff83952a8bab1e108160b26cb36</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::ProjectionBlock</name>
    <filename>a03482.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <class kind="struct">Dune::dgf::ProjectionBlock::Expression</class>
    <member kind="typedef">
      <type>std::shared_ptr&lt; Expression &gt;</type>
      <name>ExpressionPointer</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a6c07e77d18c8457d5cd3514648d71fce</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::pair&lt; ExpressionPointer, std::string &gt;</type>
      <name>ExpressionPair</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a9d2731dead29823233dbcb65cfca7f49</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionBlock</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a6c21f41244ce6e08f26cdec6ce25aad8</anchor>
      <arglist>(std::istream &amp;in, int dimworld)</arglist>
    </member>
    <member kind="function">
      <type>const DuneBoundaryProjection&lt; dimworld &gt; *</type>
      <name>defaultProjection</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>ac008cdc9bd9f7e368af33a16b7f0e30f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundaryProjections</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a1d46ce585581ad0b4125eaffc015e1bb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; unsigned int &gt; &amp;</type>
      <name>boundaryFace</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>acaf429767971c9fe348432889f76cbbf</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>const DuneBoundaryProjection&lt; dimworld &gt; *</type>
      <name>boundaryProjection</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a04838a5014fdb0f4f2d4814f3f116bbf</anchor>
      <arglist>(const size_t i) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionPointer</type>
      <name>function</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a81982e98094d136d49f7ab6299bbca26</anchor>
      <arglist>(const std::string &amp;name) const</arglist>
    </member>
    <member kind="function">
      <type>ExpressionPair</type>
      <name>lastFunctionInserted</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a99391394d5ea76e83df1d5bc22f40825</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static ProjectionBlock::ExpressionPair</type>
      <name>createExpression</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a00853550068f2fba776c69bc15fb2e14</anchor>
      <arglist>(const std::string &amp;funcexpr, const int dimworld)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::map&lt; std::string, ExpressionPair &gt;</type>
      <name>FunctionMap</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>af8b41bb66389d3aa9f890ab210b9bcd4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::pair&lt; std::vector&lt; unsigned int &gt;, ExpressionPair &gt;</type>
      <name>BoundaryFunction</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>aa8c1822737a15a2745f8b4a597cb415f</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Token</type>
      <name>token</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>aaabee7ac701135a91e46352cebe39362</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>FunctionMap</type>
      <name>functions_</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a84a965c68339cb7b7a6d62022f0d7c0d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>ExpressionPair</type>
      <name>defaultFunction_</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>afa318341e15a7e9f8a7c5994c4b7dcf4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::vector&lt; BoundaryFunction &gt;</type>
      <name>boundaryFunctions_</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>ac9221d067fa058583597639425e74880</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a03482.html</anchorfile>
      <anchor>a20b13339f589a56cb60ea9fdbddf84ca</anchor>
      <arglist>(std::ostream &amp;, const Token &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::ProjectionFactory</name>
    <filename>a02358.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>Dune::Alberta::ProjectionFactoryInterface</base>
    <member kind="typedef">
      <type>Base::Projection</type>
      <name>Projection</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>af0738e03fb3e5e072b904d2081542adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>a3b4f880689c0a3c727b4114311750826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProjectionFactory</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>ac80d402a82fa492bfdcb0ec3a819e19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;::ProjectionFactory</name>
    <filename>a02022.html</filename>
    <base>ProjectionFactory&lt; Alberta::DuneBoundaryProjection&lt; dim &gt;, ProjectionFactory &gt;</base>
    <member kind="typedef">
      <type>Base::Projection</type>
      <name>Projection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>a3c5761fb318960902847bcacdf3bbcae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>a3549e08a7d8077a96257e6168b8e2faa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Projection::Projection</type>
      <name>DuneProjection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>aabb6de44138fd611262526591e7d6f62</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>ProjectionFactory</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>a6b45c9931761a0ad6da20e58a0c26fae</anchor>
      <arglist>(const GridFactory &amp;gridFactory)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>acfce8545788de9d01ca5525ef8005e17</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>a316e3b20d92ac23a8faf5abefecb22cd</anchor>
      <arglist>(const ElementInfo &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>aa5e2df1aaa18e8a39fbef08d3f223c6e</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>ab11a8c5aaa3aea8e44bab457555de835</anchor>
      <arglist>(const ElementInfo &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>const GridFactory &amp;</type>
      <name>gridFactory</name>
      <anchorfile>a02022.html</anchorfile>
      <anchor>a264a07c77a7c783b0a7029b3707b0ad7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProjectionFactory&lt; Alberta::DuneBoundaryProjection&lt; dim &gt;, ProjectionFactory &gt;</name>
    <filename>a02358.html</filename>
    <base>Dune::Alberta::ProjectionFactoryInterface</base>
    <member kind="typedef">
      <type>Base::Projection</type>
      <name>Projection</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>af0738e03fb3e5e072b904d2081542adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>a3b4f880689c0a3c727b4114311750826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProjectionFactory</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>ac80d402a82fa492bfdcb0ec3a819e19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>ProjectionFactory&lt; DuneBoundaryProjection&lt; dim &gt;, DuneGlobalBoundaryProjectionFactory&lt; dim &gt; &gt;</name>
    <filename>a02358.html</filename>
    <base>Dune::Alberta::ProjectionFactoryInterface</base>
    <member kind="typedef">
      <type>Base::Projection</type>
      <name>Projection</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>af0738e03fb3e5e072b904d2081542adf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Base::ElementInfo</type>
      <name>ElementInfo</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>a3b4f880689c0a3c727b4114311750826</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>ProjectionFactory</name>
      <anchorfile>a02358.html</anchorfile>
      <anchor>ac80d402a82fa492bfdcb0ec3a819e19b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::ProjectionFactoryInterface</name>
    <filename>a02366.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>Proj</type>
      <name>Projection</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a76fea749f25b269f49eddf429f3270de</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Alberta::ElementInfo&lt; dimension &gt;</type>
      <name>ElementInfo</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>ad1550f4077465c7fc0d05491fb509a50</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a7761890bf7cc6ea218e2cdb070647d2a</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasProjection</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a92a7bd950690d26d875ef66c8806ecb6</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>ad9cf448acc7acf3f3d631f85ed8c48cd</anchor>
      <arglist>(const ElementInfo &amp;elementInfo, const int face) const</arglist>
    </member>
    <member kind="function">
      <type>Projection</type>
      <name>projection</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>afbd1d4e9a5f13b1947c883c1cc7fc021</anchor>
      <arglist>(const ElementInfo &amp;elementInfo) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a3f051b09b9c1cd336235b12db36c5216</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const Impl &amp;</type>
      <name>asImpl</name>
      <anchorfile>a02366.html</anchorfile>
      <anchor>a0307986c91a1737dca60fa8e1ed14c3b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::PVTUWriter</name>
    <filename>a03822.html</filename>
    <member kind="function">
      <type></type>
      <name>PVTUWriter</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a7027e4054f07696a2aff3ab888bc6d7b</anchor>
      <arglist>(std::ostream &amp;stream_, FileType fileType_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~PVTUWriter</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a0c13ee229553c4adff45cca48d423623</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPointData</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a501fc2f31cf0191ee295a2ae9ac6c461</anchor>
      <arglist>(const std::string &amp;scalars=&quot;&quot;, const std::string &amp;vectors=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPointData</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a96e94f37d4c094da2579e26fea3a1366</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginCellData</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a4f8ab5eff05c013fb706fd041277d264</anchor>
      <arglist>(const std::string &amp;scalars=&quot;&quot;, const std::string &amp;vectors=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endCellData</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a2a4b38c703d70d2d2438961729074fa4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPoints</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>aec478c72119a9f55e4d39688b6226b76</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPoints</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a9934734d0ef582a2f7adc15567e57387</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginMain</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a4c240f9f4c77aebbf428a497075d2b2a</anchor>
      <arglist>(unsigned ghostLevel=0)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endMain</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a208501a765e54b73e183d529df40700f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addArray</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a3df4501fbc4a7bcd5e8cbfee7d93bcb5</anchor>
      <arglist>(const std::string &amp;name, unsigned ncomps, Precision prec)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addPiece</name>
      <anchorfile>a03822.html</anchorfile>
      <anchor>a6bbbc54ea28814e6fdacd63a7fbd6583</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::QuotientExpression</name>
    <filename>a03478.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>QuotientExpression</name>
      <anchorfile>a03478.html</anchorfile>
      <anchor>a8388a03192f36d53a546ca24e9bea1d9</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;exprA, const ProjectionBlock::ExpressionPointer &amp;exprB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03478.html</anchorfile>
      <anchor>a5a7241371e59cf01bb48b1473ccc30a0</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::RawStream</name>
    <filename>a03842.html</filename>
    <member kind="function">
      <type></type>
      <name>RawStream</name>
      <anchorfile>a03842.html</anchorfile>
      <anchor>ae90a2afd5f9649c6ea71418224e2b4cc</anchor>
      <arglist>(std::ostream &amp;theStream)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03842.html</anchorfile>
      <anchor>adf41844c46341d33726479291c162a5f</anchor>
      <arglist>(T data)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::RefinementEdge</name>
    <filename>a02270.html</filename>
    <templarg>dim</templarg>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02270.html</anchorfile>
      <anchor>ae45e94119e39525f4311809ccac9ed7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::RefinementEdge&lt; 2 &gt;</name>
    <filename>a02274.html</filename>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>value</name>
      <anchorfile>a02274.html</anchorfile>
      <anchor>ab734952d4d48ab2a2b86c955afc16dd3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::ElementInfo::Seed</name>
    <filename>a01918.html</filename>
    <member kind="function">
      <type></type>
      <name>Seed</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>a46b88a130b6d095ed29cc0aba2a7b2cf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Seed</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>a04b94d6cde6aa2b52a64810fe7d88c78</anchor>
      <arglist>(const int macroIndex, const int level, const unsigned long path)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>aa0ea52cee334e39127dbd02e865a6af5</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>af88d60318de41c544ae1093afff18770</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>ad9bdf81834bb1c23020b93abaf0e2508</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>a32b73a9907ef6b7c66e55c9912c8bab7</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>a453fc77bac90a6ee5f75d4efc8c07907</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>a18e9116f2d529d37bf41788f0ce37115</anchor>
      <arglist>(const Seed &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>acf1befccdbd46fe02abc0b86a889ea64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>macroIndex</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>adea1bf967a3ea4157ecfafd9ea3e2dab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>ac204349b68881af924d234fb73fc405a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned long</type>
      <name>path</name>
      <anchorfile>a01918.html</anchorfile>
      <anchor>ad8359945540f61375b681928a9bcc885</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::AlbertaGridLevelProvider::SetLocal</name>
    <filename>a02166.html</filename>
    <member kind="function">
      <type></type>
      <name>SetLocal</name>
      <anchorfile>a02166.html</anchorfile>
      <anchor>a5a950ec3f435581df7b4c2fceafc7906</anchor>
      <arglist>(const DofVectorPointer &amp;level)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>operator()</name>
      <anchorfile>a02166.html</anchorfile>
      <anchor>aa659d51891dcb20ec0331d892384bc06</anchor>
      <arglist>(const Alberta::ElementInfo&lt; dim &gt; &amp;elementInfo) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::SimplexBlock</name>
    <filename>a03498.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>SimplexBlock</name>
      <anchorfile>a03498.html</anchorfile>
      <anchor>a5d3bdc7f0b0b8f8806ee45e60890a71d</anchor>
      <arglist>(std ::istream &amp;in, int pnofvtx, int pvtxoffset, int &amp;pdimgrid)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03498.html</anchorfile>
      <anchor>a59747611df7eba86825d7feb3903e504</anchor>
      <arglist>(std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt; &amp;simplex, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;params, int &amp;nofp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03498.html</anchorfile>
      <anchor>aedc72359a5017a980acb4a4d25e3a2bb</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>nofsimplex</name>
      <anchorfile>a03498.html</anchorfile>
      <anchor>ad536933a614a933d2a72ee71801e5d7e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>cube2simplex</name>
      <anchorfile>a03498.html</anchorfile>
      <anchor>a527a232da7e5617a2721697b3e553c1e</anchor>
      <arglist>(std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;vtx, std ::vector&lt; std ::vector&lt; unsigned int &gt; &gt; &amp;elements, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;params)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::SimplexGenerationBlock</name>
    <filename>a03502.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>SimplexGenerationBlock</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>acc7b61bc7ad9d721bc856fe9d8dd6992</anchor>
      <arglist>(std ::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>maxArea</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a0fd175f8258055c740534a7482ae04fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>minAngle</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>ad05ed1ffa776160e9f2365112d581bcf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>display</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>ab342699bd3c3bb64c01dac7b4dde401b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>haspath</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a120e56172c34589ed71468bfd58fd654</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std ::string</type>
      <name>path</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a70c246bf38813acde1ef2e5757fc8afc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasfile</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>aeceedfab04bc8db5527673c6ea202f06</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std ::string</type>
      <name>filename</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a62c702c425fa18377296559f1a4248fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std ::string</type>
      <name>filetype</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a11b9352b7ada322336765e62cd3a9952</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dimension</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a52e924299ac618e1e2f2e76a46135cd3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std ::string</type>
      <name>parameter</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>abcceaebb902912a9f03e300e9c6b2527</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string</type>
      <name>dumpFileName</name>
      <anchorfile>a03502.html</anchorfile>
      <anchor>a925c8d09726d14a1b4fe7720aa0e381f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::SinExpression</name>
    <filename>a03454.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SinExpression</name>
      <anchorfile>a03454.html</anchorfile>
      <anchor>aca40c857ae1020ec05e873829145a9f9</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03454.html</anchorfile>
      <anchor>a1cc791ac8798d84ef526e068304df1d0</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SingleCodimSingleGeomTypeMapper</name>
    <filename>a02870.html</filename>
    <templarg></templarg>
    <templarg>c</templarg>
    <base>Mapper&lt; GV::Grid, SingleCodimSingleGeomTypeMapper&lt; GV, c &gt;, GV::IndexSet::IndexType &gt;</base>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a215a4cc8b8b0c8f4723897fbf92f1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a2e28c04ec4df13ed044684c3c34d4c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleCodimSingleGeomTypeMapper</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a69ddb323c2d0a94eb80641bbc67bb564</anchor>
      <arglist>(const GV &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a4cb0a235f822bd67b5b7dae837398ae1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a690eb1d3d6926fec953c4f6a05e03e60</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a8ed7ee283d0db22d212b97aabcb6d7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a08774ef34409405b0a24b0ec017e344d</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a280b387f987575c3cc92633e445cda87</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>af98aac62ffd09f31e7360fcdedb2968a</anchor>
      <arglist>(const GV &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a7df0ace18ccc1f1f3c75a63205d1448a</anchor>
      <arglist>(GV &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a94e6db094297b9badca09c16c7c6e053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, GV::IndexSet::IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleCodimSingleGeomTypeMapper&lt; G::LeafGridView, c &gt;</name>
    <filename>a02870.html</filename>
    <base>Dune::Mapper</base>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a215a4cc8b8b0c8f4723897fbf92f1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a2e28c04ec4df13ed044684c3c34d4c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleCodimSingleGeomTypeMapper</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a69ddb323c2d0a94eb80641bbc67bb564</anchor>
      <arglist>(const G::LeafGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a4cb0a235f822bd67b5b7dae837398ae1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a690eb1d3d6926fec953c4f6a05e03e60</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a8ed7ee283d0db22d212b97aabcb6d7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a08774ef34409405b0a24b0ec017e344d</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a280b387f987575c3cc92633e445cda87</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>af98aac62ffd09f31e7360fcdedb2968a</anchor>
      <arglist>(const G::LeafGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a7df0ace18ccc1f1f3c75a63205d1448a</anchor>
      <arglist>(G::LeafGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a94e6db094297b9badca09c16c7c6e053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SingleCodimSingleGeomTypeMapper&lt; G::LevelGridView, c &gt;</name>
    <filename>a02870.html</filename>
    <base>Dune::Mapper</base>
    <member kind="typedef">
      <type>GV::IndexSet::IndexType</type>
      <name>Index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a215a4cc8b8b0c8f4723897fbf92f1e2e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; typename GV::IndexSet &gt;().size(0))</type>
      <name>size_type</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a2e28c04ec4df13ed044684c3c34d4c41</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SingleCodimSingleGeomTypeMapper</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a69ddb323c2d0a94eb80641bbc67bb564</anchor>
      <arglist>(const G::LevelGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>index</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a4cb0a235f822bd67b5b7dae837398ae1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a690eb1d3d6926fec953c4f6a05e03e60</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a8ed7ee283d0db22d212b97aabcb6d7c5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a08774ef34409405b0a24b0ec017e344d</anchor>
      <arglist>(const EntityType &amp;e, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a280b387f987575c3cc92633e445cda87</anchor>
      <arglist>(const typename GV::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, Index &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>af98aac62ffd09f31e7360fcdedb2968a</anchor>
      <arglist>(const G::LevelGridView &amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a7df0ace18ccc1f1f3c75a63205d1448a</anchor>
      <arglist>(G::LevelGridView &amp;&amp;gridView)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02870.html</anchorfile>
      <anchor>a94e6db094297b9badca09c16c7c6e053</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Index</type>
      <name>subIndex</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>ae07866494fdaac4477284509cdccfbc6</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>aee3cf2d8ab3b88110247706b26df2223</anchor>
      <arglist>(const typename G::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, int cc, IndexType &amp;result) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a02794.html</anchorfile>
      <anchor>a3a17f4d28a75ce575c690a1afddb9443</anchor>
      <arglist>(GridView &amp;&amp;gridView)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SizeCache</name>
    <filename>a02882.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>SizeCache</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a66085bfd24f7087e62388547f39900ee</anchor>
      <arglist>(const GridType &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>aeb800f6726890d4663e5e1df3915ffe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a3fe43181b28fe711f7b630fd3ede4d4b</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a1dd96e09c621d82372b282c8ce5b7ae3</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a655ea7c7dbf4e0e3e930a269c0cc7c59</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>ac873b03f4324b2734145a4f1e1410ecb</anchor>
      <arglist>(const GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>SizeCache&lt; Dune::AlbertaGrid &gt;</name>
    <filename>a02882.html</filename>
    <member kind="function">
      <type></type>
      <name>SizeCache</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a66085bfd24f7087e62388547f39900ee</anchor>
      <arglist>(const GridType &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>aeb800f6726890d4663e5e1df3915ffe9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a3fe43181b28fe711f7b630fd3ede4d4b</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a1dd96e09c621d82372b282c8ce5b7ae3</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>a655ea7c7dbf4e0e3e930a269c0cc7c59</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a02882.html</anchorfile>
      <anchor>ac873b03f4324b2734145a4f1e1410ecb</anchor>
      <arglist>(const GeometryType type) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::SkeletonFunctionInterface</name>
    <filename>a03830.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>SkeletonFunctionTraits&lt; GV, RF &gt;</type>
      <name>Traits</name>
      <anchorfile>a03830.html</anchorfile>
      <anchor>ab152b0b186bd68359f7d1e886525ddc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>unsigned</type>
      <name>dimRange</name>
      <anchorfile>a03830.html</anchorfile>
      <anchor>a152c7c8590640e5b14e101396dac729f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>evaluate</name>
      <anchorfile>a03830.html</anchorfile>
      <anchor>ac08e8510473ca8be2433231dfc549491</anchor>
      <arglist>(const typename Traits::Cell &amp;c, const typename Traits::Domain &amp;xl, typename Traits::Range &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTK::SkeletonFunctionTraits</name>
    <filename>a03826.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GV</type>
      <name>GridView</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a13af3e440924ee095e0d58229bc2c9a9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::Intersection</type>
      <name>Cell</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a63959f24979824650eef7805e221a3e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GV::ctype</type>
      <name>DomainField</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a7f9ec6ffce67576e058bd10276d5adb0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; DomainField, dimDomain &gt;</type>
      <name>Domain</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a0c6592324eabe4ca38c29aaedad99d64</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>RF</type>
      <name>RangeField</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a09009cbc818d96daed06727e21139856</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::vector&lt; RangeField &gt;</type>
      <name>Range</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>a33bc61c73346d79da9f68d6a3b88cf5c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const unsigned</type>
      <name>dimDomain</name>
      <anchorfile>a03826.html</anchorfile>
      <anchor>aea6d9f6ef0c5b36aad976471ac4fac1c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::SkeletonFunctionWriter</name>
    <filename>a03834.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Func::Traits::Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Func::Traits::Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SkeletonFunctionWriter</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>ad37c6517c4b5b541fd50455860eb548a</anchor>
      <arglist>(const std::shared_ptr&lt; const Func &gt; &amp;func_, const std::string &amp;name, unsigned dimR_, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SkeletonFunctionWriter</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>a462a70c8b67d05da7af04ba8c4eeb5bf</anchor>
      <arglist>(const std::shared_ptr&lt; const Func &gt; &amp;func_, const std::string &amp;name, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>a0ec3a91d83c7db6d353398b59aa405b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>aefe076f6207396c3816cbb3d051bd7c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>a9d71da72a53911f599d49431e8a6dbb3</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>aa18690886f804223f66777be7ccc36fb</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>a9f3193ac7f4209cac6572d5f31a9146f</anchor>
      <arglist>(const typename Func::Traits::Cell &amp;cell, const typename Func::Traits::Domain &amp;xl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03834.html</anchorfile>
      <anchor>ae40f2a42c081e10d34e4f0724d5799e7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::SqrtExpression</name>
    <filename>a03450.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SqrtExpression</name>
      <anchorfile>a03450.html</anchorfile>
      <anchor>a221ed2cf0bf4c437befb466dc8a4f1ae</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;expression)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03450.html</anchorfile>
      <anchor>a20590aec2aca2e9893fb56106ac08fb0</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Alberta::ElementInfo::Stack</name>
    <filename>a01914.html</filename>
    <member kind="function">
      <type></type>
      <name>Stack</name>
      <anchorfile>a01914.html</anchorfile>
      <anchor>a945bcf629844244a8fe5f584eec3c5c5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~Stack</name>
      <anchorfile>a01914.html</anchorfile>
      <anchor>a4bec2b3234374334f32817757f4fdee2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>InstancePtr</type>
      <name>allocate</name>
      <anchorfile>a01914.html</anchorfile>
      <anchor>addc52a1e38ff2f7126ca7469d8e4f82a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>release</name>
      <anchorfile>a01914.html</anchorfile>
      <anchor>a70701d88e15f33d17348a69e347d8bee</anchor>
      <arglist>(InstancePtr &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>InstancePtr</type>
      <name>null</name>
      <anchorfile>a01914.html</anchorfile>
      <anchor>a0bfae7b55bacd45babbdbcf38843bbc8</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StarCDReader</name>
    <filename>a03690.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>read</name>
      <anchorfile>a03690.html</anchorfile>
      <anchor>aac1885e502f76440edb18a2194b28ed1</anchor>
      <arglist>(const std::string &amp;fileName, bool verbose=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory</name>
    <filename>a02426.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createCubeGrid</name>
      <anchorfile>a02426.html</anchorfile>
      <anchor>adac75a916bda7ad2e1e8a4f8b40b6692</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createCubeGrid</name>
      <anchorfile>a02426.html</anchorfile>
      <anchor>a932ec5f62efcf841cd60a11488b79e2f</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createSimplexGrid</name>
      <anchorfile>a02426.html</anchorfile>
      <anchor>aa26f549f74b3b4aa10bc2e8107d81cd7</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createSimplexGrid</name>
      <anchorfile>a02426.html</anchorfile>
      <anchor>a0bc8b49ba4d7214fc86569c37fbfbe90</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</name>
    <filename>a02430.html</filename>
    <templarg>dim</templarg>
    <templarg>dimworld</templarg>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createSimplexGrid</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>af4016920676c92ed2835218af81f9fb2</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createSimplexGrid</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>a6677510fa3751b17243f6550d10dcf6b</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>createCubeGrid</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>a36823008ecff2b5c7ce34706a05dc1e4</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createCubeGrid</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>a867e7b0c9df2a41c83fd41c5210b94ce</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>typename GridType::ctype</type>
      <name>ctype</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>a9e47a5e8cdc78b2af0457a9cd93d97d2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>insertElement</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>ad18799b7329c5a082d59bea87b88670d</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const GeometryType &amp;type, const std::vector&lt; unsigned int &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>insertVertices</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>aba5bd44a9c9aceb672f4d3cd95514f7e</anchor>
      <arglist>(GridFactory&lt; GridType &gt; &amp;factory, const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;vertices)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static std::array&lt; unsigned int, dim &gt;</type>
      <name>computeUnitOffsets</name>
      <anchorfile>a02430.html</anchorfile>
      <anchor>ae8e04c6c4aeba21999a492b8b7ebe7e5</anchor>
      <arglist>(const std::array&lt; unsigned int, dim &gt; &amp;vertices)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a04262.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createCubeGrid</name>
      <anchorfile>a04262.html</anchorfile>
      <anchor>a57a5e3998fffd0b35edefa4f1b39c572</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createSimplexGrid</name>
      <anchorfile>a04262.html</anchorfile>
      <anchor>a1dfbe50cb813e2a5b13e59acbe7436e8</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a04266.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createCubeGrid</name>
      <anchorfile>a04266.html</anchorfile>
      <anchor>a6819d5f9f060b9f657a3692eb0da89b4</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; GridType &gt;</type>
      <name>createSimplexGrid</name>
      <anchorfile>a04266.html</anchorfile>
      <anchor>a4077c6b3b39e8db1941eb741b79b5ab4</anchor>
      <arglist>(const FieldVector&lt; ctype, dimworld &gt; &amp;lowerLeft, const FieldVector&lt; ctype, dimworld &gt; &amp;upperRight, const std::array&lt; unsigned int, dim &gt; &amp;elements)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GlobalIndexSet::SubPartitionTypeProvider</name>
    <filename>a04030.html</filename>
    <templarg></templarg>
    <templarg>Codim</templarg>
    <member kind="function" static="yes">
      <type>static PartitionType</type>
      <name>get</name>
      <anchorfile>a04030.html</anchorfile>
      <anchor>aef1fd3fdbd2d16ee2efb46844ed2d312</anchor>
      <arglist>(const Entity &amp;entity, int codim, int i)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GlobalIndexSet::SubPartitionTypeProvider&lt; Entity, 0 &gt;</name>
    <filename>a04034.html</filename>
    <templarg></templarg>
    <member kind="function" static="yes">
      <type>static PartitionType</type>
      <name>get</name>
      <anchorfile>a04034.html</anchorfile>
      <anchor>aa193a238faa3f02e4a301dd20a1eb0b7</anchor>
      <arglist>(const Entity &amp;entity, int codim, int i)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::SubsamplingVTKWriter</name>
    <filename>a03846.html</filename>
    <templarg></templarg>
    <base>Dune::VTKWriter</base>
    <member kind="typedef">
      <type>Dune::VTKFunction&lt; GridView &gt;</type>
      <name>VTKFunction</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2ff7710cee12690b6945c10d813d45b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SubsamplingVTKWriter</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a90394e06e96db88ec6c93d672f583a51</anchor>
      <arglist>(const GridView &amp;gridView, Dune::RefinementIntervals intervals_, bool coerceToSimplex_=false, VTK::Precision coordPrecision=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a2dcb8df3c88f07030a4e4c2441646fb3</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a5288e710fa416805a17c21e6d378e97d</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>accc5a7166202a5017580e1d0436886ab</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a43be130859f7bdde8a4f35cbed06b3e7</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>ac9f1ecb419bb3eb23a97c894db6eef6e</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a04f91f906aaae58fac7c59fdb60be07f</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a43be130859f7bdde8a4f35cbed06b3e7</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ac9f1ecb419bb3eb23a97c894db6eef6e</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a04f91f906aaae58fac7c59fdb60be07f</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2dcb8df3c88f07030a4e4c2441646fb3</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a5288e710fa416805a17c21e6d378e97d</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>accc5a7166202a5017580e1d0436886ab</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a183c0e4e3bd05c14920177438d159897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VTK::Precision</type>
      <name>coordPrecision</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ab445a9f7f8fa50bbed7416c146fd5c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a1d2383b717eed3f5c5782b487b3ea0bf</anchor>
      <arglist>(const std::string &amp;name, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af792fcc20c23c5b12e4a957decb90adc</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>countEntities</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>aa614b9ee78c3a687803c973a0e95f984</anchor>
      <arglist>(int &amp;nvertices_, int &amp;ncells_, int &amp;ncorners_)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeCellData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>ac69e8f7a99c666764f185df07205ce55</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeVertexData</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a625f59b820c5bf94134537dd9e452848</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeGridPoints</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>a5004b871e555cbba50a2b995ea7749b5</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeGridCells</name>
      <anchorfile>a03846.html</anchorfile>
      <anchor>aeddaf2126fdaa927783b5b35ed559107</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CellIterator</type>
      <name>cellBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a712d991fceb8305b506fee51d0ab9007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CellIterator</type>
      <name>cellEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3069b3c2a53fd55a86ff31aef83c44bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexIterator</type>
      <name>vertexBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a247bdfe6c0268fdd21e71eadb5f95baf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexIterator</type>
      <name>vertexEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>aee5406947e96ea159cc1fcfddbdd127d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CornerIterator</type>
      <name>cornerBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3a8b11649276aed0bfa4143440be6db4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CornerIterator</type>
      <name>cornerEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a07980c2da6199ed3df22b893c57eb89e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>aa0c0419f5cd9320e6390e08b52f8dbc3</anchor>
      <arglist>(const std::string &amp;name, VTK::OutputType type, const int commRank, const int commSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af6c83e8777206ab5744bccb32db87745</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, VTK::OutputType ot, const int commRank, const int commSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a7100858de954f5fb47cf1840fafcf117</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int commRank, int commSize) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2d5b6bcb279af7ec520460a48f6a0a0a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int commSize) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a41fc8dc0937e0b4e32e06c2dd91af65a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getFormatString</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a43fc9036675ece92111a967175953f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeString</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a285c1f94fab9aa93de12989c1e7ef5e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::tuple&lt; std::string, std::string &gt;</type>
      <name>getDataNames</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3a840d2c36f57f7b2234e23fb46e008f</anchor>
      <arglist>(const T &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>adf295736545d9c3e3c6a4a2573d3c018</anchor>
      <arglist>(VTK::VTUWriter &amp;writer, const Data &amp;data, const Iterator begin, const Iterator end, int nentries)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForPolyhedralCells</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a4bda3ec739a5d46252ba2f5cb1aee368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeCellFaces</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a88333f5ef542f0be5d836f6a7a79a882</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillFaceVertices</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a91cd0d1e9ed9ba62686b51ccceb33708</anchor>
      <arglist>(CornerIterator it, const CornerIterator end, const IndexSet &amp;indexSet, std::vector&lt; T &gt; &amp;faces, std::vector&lt; T &gt; &amp;faceOffsets)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fillFacesForElement</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>adebe70388f02922a89b64a252d7d8c6f</anchor>
      <arglist>(const Entity &amp;element, const IndexSet &amp;indexSet, const std::vector&lt; T &gt; &amp;vertices, T &amp;offset, std::vector&lt; T &gt; &amp;faces, std::vector&lt; T &gt; &amp;faceOffsets)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridView</type>
      <name>gridView_</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a8688962cb55dc765c2ff9f300057e627</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::SumExpression</name>
    <filename>a03466.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>SumExpression</name>
      <anchorfile>a03466.html</anchorfile>
      <anchor>a70bb270b32e117dd745c1fba48d369e5</anchor>
      <arglist>(const ProjectionBlock::ExpressionPointer &amp;exprA, const ProjectionBlock::ExpressionPointer &amp;exprB)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03466.html</anchorfile>
      <anchor>a4146d7c0e9bd1340a91ef88654e0b94d</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TensorGridFactory</name>
    <filename>a04118.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>acd7f64a2c67553dea9c39e29d94aeca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2b59b17f93462f93b33eb6d4d15a2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a402377a41a9908e65a62ad10657c2fe7</anchor>
      <arglist>(Comm comm=Comm())</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; std::vector&lt; ctype &gt;, dim &gt;</type>
      <name>coords</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a54e52884a1e192de3b684739dfdd2848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3cdcd9df36ec97c121c9e5e069cb3ee6</anchor>
      <arglist>(std::size_t d)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>ab36c309ba6cd0f51445dfcc76cd40721</anchor>
      <arglist>(std::size_t d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a6fe5730bfc009f6f4e942f7012621145</anchor>
      <arglist>(int d, ctype value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a55863e33b89dcc050965e1e319606ced</anchor>
      <arglist>(int d, int n, ctype h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a01833fc934834259aab1cc392d540de9</anchor>
      <arglist>(int d, int n, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2cc08c4ddc58003ca5aff1ca5bbba960</anchor>
      <arglist>(int d, ctype h, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a761c8e62b26fae8ed5b0e336f0822f71</anchor>
      <arglist>(int d, int n, ctype ratio, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3147108d4ea0cac318c8c47688298012</anchor>
      <arglist>(int d, ctype ratio, ctype end, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a1a0962536779df9ca7fee075fa79e10a</anchor>
      <arglist>(int d, int n, ctype end, ctype h=static_cast&lt; ctype &gt;(0), bool first=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a42cb850a7442226caf7a7207175c8a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a352c1fe5a25631f7d9ab488484dc0755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorGridFactory&lt; Dune::Grid &gt;</name>
    <filename>a04118.html</filename>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>acd7f64a2c67553dea9c39e29d94aeca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2b59b17f93462f93b33eb6d4d15a2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Dune::Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a402377a41a9908e65a62ad10657c2fe7</anchor>
      <arglist>(Comm comm=Comm())</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; std::vector&lt; ctype &gt;, dim &gt;</type>
      <name>coords</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a54e52884a1e192de3b684739dfdd2848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3cdcd9df36ec97c121c9e5e069cb3ee6</anchor>
      <arglist>(std::size_t d)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>ab36c309ba6cd0f51445dfcc76cd40721</anchor>
      <arglist>(std::size_t d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a6fe5730bfc009f6f4e942f7012621145</anchor>
      <arglist>(int d, ctype value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a55863e33b89dcc050965e1e319606ced</anchor>
      <arglist>(int d, int n, ctype h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a01833fc934834259aab1cc392d540de9</anchor>
      <arglist>(int d, int n, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2cc08c4ddc58003ca5aff1ca5bbba960</anchor>
      <arglist>(int d, ctype h, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a761c8e62b26fae8ed5b0e336f0822f71</anchor>
      <arglist>(int d, int n, ctype ratio, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3147108d4ea0cac318c8c47688298012</anchor>
      <arglist>(int d, ctype ratio, ctype end, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a1a0962536779df9ca7fee075fa79e10a</anchor>
      <arglist>(int d, int n, ctype end, ctype h=static_cast&lt; ctype &gt;(0), bool first=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a42cb850a7442226caf7a7207175c8a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a352c1fe5a25631f7d9ab488484dc0755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>TensorGridFactory&lt; Dune::YaspGrid &gt;</name>
    <filename>a04118.html</filename>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>acd7f64a2c67553dea9c39e29d94aeca1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2b59b17f93462f93b33eb6d4d15a2c56</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Dune::YaspGrid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a402377a41a9908e65a62ad10657c2fe7</anchor>
      <arglist>(Comm comm=Comm())</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; std::vector&lt; ctype &gt;, dim &gt;</type>
      <name>coords</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a54e52884a1e192de3b684739dfdd2848</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3cdcd9df36ec97c121c9e5e069cb3ee6</anchor>
      <arglist>(std::size_t d)</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; ctype &gt; &amp;</type>
      <name>operator[]</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>ab36c309ba6cd0f51445dfcc76cd40721</anchor>
      <arglist>(std::size_t d) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setStart</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a6fe5730bfc009f6f4e942f7012621145</anchor>
      <arglist>(int d, ctype value)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a55863e33b89dcc050965e1e319606ced</anchor>
      <arglist>(int d, int n, ctype h)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a01833fc934834259aab1cc392d540de9</anchor>
      <arglist>(int d, int n, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a2cc08c4ddc58003ca5aff1ca5bbba960</anchor>
      <arglist>(int d, ctype h, ctype end)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillIntervals</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a761c8e62b26fae8ed5b0e336f0822f71</anchor>
      <arglist>(int d, int n, ctype ratio, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillUntil</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a3147108d4ea0cac318c8c47688298012</anchor>
      <arglist>(int d, ctype ratio, ctype end, ctype h0=static_cast&lt; ctype &gt;(0))</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>geometricFillRange</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a1a0962536779df9ca7fee075fa79e10a</anchor>
      <arglist>(int d, int n, ctype end, ctype h=static_cast&lt; ctype &gt;(0), bool first=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a42cb850a7442226caf7a7207175c8a88</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04118.html</anchorfile>
      <anchor>a352c1fe5a25631f7d9ab488484dc0755</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TensorGridFactoryCreator</name>
    <filename>a04114.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Grid::Traits::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04114.html</anchorfile>
      <anchor>ab1d85329dc10d7dcfc13c9578fb14bcd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a04114.html</anchorfile>
      <anchor>a010895b38990e945f6afb238c7e9f3f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TensorGridFactoryCreator</name>
      <anchorfile>a04114.html</anchorfile>
      <anchor>a4b0fbc80e94d06ce80fc712e5bb8dca1</anchor>
      <arglist>(const TensorGridFactory&lt; Grid &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a04114.html</anchorfile>
      <anchor>ae7f9a341644313278451aa4acad7d9ff</anchor>
      <arglist>(Comm comm)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04114.html</anchorfile>
      <anchor>abe77990df8b40c2dafa6ad6dfb4ef559</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TensorGridFactoryCreator&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</name>
    <filename>a04122.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt;</type>
      <name>Grid</name>
      <anchorfile>a04122.html</anchorfile>
      <anchor>ad7202468bf0e74c9b417f5b764e948b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::CollectiveCommunication</type>
      <name>Comm</name>
      <anchorfile>a04122.html</anchorfile>
      <anchor>ab5d18ff54ee2b9683e2cd23a5a801e8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TensorGridFactoryCreator</name>
      <anchorfile>a04122.html</anchorfile>
      <anchor>a8b0d9160e4db31e3bd093839c6b89551</anchor>
      <arglist>(const TensorGridFactory&lt; Grid &gt; &amp;factory)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Grid &gt;</type>
      <name>createGrid</name>
      <anchorfile>a04122.html</anchorfile>
      <anchor>a330c84cea6650f59d371a26feb675ed7</anchor>
      <arglist>(Comm comm)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::TensorProductCoordinates</name>
    <filename>a04242.html</filename>
    <templarg></templarg>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>ct</type>
      <name>ctype</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>aa77b0d8fe988e857fe0587e42a41d6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TensorProductCoordinates</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a9402a0a2e1fb10048e6749ea1cb15129</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>TensorProductCoordinates</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a881630eb41a2696327c6f147bad6eace</anchor>
      <arglist>(const std::array&lt; std::vector&lt; ct &gt;, dim &gt; &amp;c, const std::array&lt; int, dim &gt; &amp;offset)</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>meshsize</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a0dffcc98cbb7d5b02cb4af4e89d6da0d</anchor>
      <arglist>(int d, int i) const</arglist>
    </member>
    <member kind="function">
      <type>ct</type>
      <name>coordinate</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a29b5f1182d9a733da374f07d88bed043</anchor>
      <arglist>(int d, int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>aeed633f7ec31e7c92fe614fb60945fa9</anchor>
      <arglist>(int d) const</arglist>
    </member>
    <member kind="function">
      <type>TensorProductCoordinates&lt; ct, dim &gt;</type>
      <name>refine</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a4f7ec0072ff668529d6f42150a8efe14</anchor>
      <arglist>(std::bitset&lt; dim &gt; ovlp_low, std::bitset&lt; dim &gt; ovlp_up, int overlap, bool keep_ovlp) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a0c20e883a9656ccec5f48a352a736c82</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a04242.html</anchorfile>
      <anchor>a4d02c41393134f561fcd507abfc714f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::threadSafe</name>
    <filename>a02534.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02534.html</anchorfile>
      <anchor>a7b46c122a5b131dd56d209047d1c3157</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::threadSafe&lt; const Grid &gt;</name>
    <filename>a02574.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02574.html</anchorfile>
      <anchor>a19ce5877d1640ddcc53ee46416a4d623</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::threadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02958.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02958.html</anchorfile>
      <anchor>a6dbe340eccd818fb9aeabc28bc9ee240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::Torus</name>
    <filename>a04270.html</filename>
    <templarg></templarg>
    <templarg>d</templarg>
    <class kind="class">Dune::Torus::ProcListIterator</class>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>adfc4fc84a4338ef1b5e82734a15b460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Torus</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a032c95fd40cf68a3aba13793e908b4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Torus</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a7e10f967412159b235718340376274f8</anchor>
      <arglist>(CollectiveCommunication comm, int tag, iTupel size, const YLoadBalance&lt; d &gt; *lb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a3cdc556659e3a3c6205b35bebec5eb37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>coord</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ac883cee50b812dbbc5dd58ad69f39d23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>procs</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a6dc23152d93bd3546fa3eb19889594d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>dims</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a9061a49d11e7716058c685cbead520e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dims</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a69b4618ca7c410b5486f3f56a2b9dfdb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>CollectiveCommunication</type>
      <name>comm</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab4d8e8d09e1cb5857be934f342536900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tag</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ad52c0b4683cbf16f8ad869952c27c5c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ad29192b44573ad1dab9d1e533e213b68</anchor>
      <arglist>(iTupel c) const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>rank_to_coord</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a31bed0864e74c41164a72c626d5d3527</anchor>
      <arglist>(int rank) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coord_to_rank</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a65d43ba6f717d8f86e4bed1f1ffcbe89</anchor>
      <arglist>(iTupel coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank_relative</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a5ee0eeed9a76139e410ccce3ba10969b</anchor>
      <arglist>(int rank, int dir, int cnt) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>color</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a39e2c020f948a446616146b1bf8edbaf</anchor>
      <arglist>(const iTupel &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>color</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab18f135459694f8d4e361cbc0c27bf7e</anchor>
      <arglist>(int rank) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>neighbors</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a2196433e175210e355a022cd564841ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neighbor</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>aa475f0c77da20e622ce79f5c30393eea</anchor>
      <arglist>(iTupel delta, std::bitset&lt; d &gt; periodic) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>partition</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>abbd01e63bd23743fc40c595d38674246</anchor>
      <arglist>(int rank, iTupel origin_in, iTupel size_in, iTupel &amp;origin_out, iTupel &amp;size_out) const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>sendbegin</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a34dd742e2c21370eadd9467e1b4b485b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>sendend</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>afa9f04fd4fdf2d6248786c0c4b520e57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>recvbegin</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a4e9e90631b462cf8c981234613b9a2f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>recvend</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a93f3d8e0d2e49b2acd5be9b9f1282643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab5d55613bb3e3fa39aeaac97828ea220</anchor>
      <arglist>(int rank, void *buffer, int size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recv</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a636981542b903f2ec3e4b9edd45376ee</anchor>
      <arglist>(int rank, void *buffer, int size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>adf964439c275cabe9daf8dc33c6d0e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>global_max</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a96710c7d1787f1f919e1f9442a6962ce</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>aba68b5f36e8e58d6628bfb36a24c00de</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Torus&lt; CollectiveCommunicationType, dim &gt;</name>
    <filename>a04270.html</filename>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>adfc4fc84a4338ef1b5e82734a15b460e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Torus</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a032c95fd40cf68a3aba13793e908b4e8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>Torus</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a7e10f967412159b235718340376274f8</anchor>
      <arglist>(CollectiveCommunicationType comm, int tag, iTupel size, const YLoadBalance&lt; d &gt; *lb)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a3cdc556659e3a3c6205b35bebec5eb37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>coord</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ac883cee50b812dbbc5dd58ad69f39d23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>procs</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a6dc23152d93bd3546fa3eb19889594d9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>dims</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a9061a49d11e7716058c685cbead520e3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>dims</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a69b4618ca7c410b5486f3f56a2b9dfdb</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>CollectiveCommunicationType</type>
      <name>comm</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab4d8e8d09e1cb5857be934f342536900</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>tag</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ad52c0b4683cbf16f8ad869952c27c5c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ad29192b44573ad1dab9d1e533e213b68</anchor>
      <arglist>(iTupel c) const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>rank_to_coord</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a31bed0864e74c41164a72c626d5d3527</anchor>
      <arglist>(int rank) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>coord_to_rank</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a65d43ba6f717d8f86e4bed1f1ffcbe89</anchor>
      <arglist>(iTupel coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>rank_relative</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a5ee0eeed9a76139e410ccce3ba10969b</anchor>
      <arglist>(int rank, int dir, int cnt) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>color</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a39e2c020f948a446616146b1bf8edbaf</anchor>
      <arglist>(const iTupel &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>color</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab18f135459694f8d4e361cbc0c27bf7e</anchor>
      <arglist>(int rank) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>neighbors</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a2196433e175210e355a022cd564841ca</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_neighbor</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>aa475f0c77da20e622ce79f5c30393eea</anchor>
      <arglist>(iTupel delta, std::bitset&lt; d &gt; periodic) const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>partition</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>abbd01e63bd23743fc40c595d38674246</anchor>
      <arglist>(int rank, iTupel origin_in, iTupel size_in, iTupel &amp;origin_out, iTupel &amp;size_out) const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>sendbegin</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a34dd742e2c21370eadd9467e1b4b485b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>sendend</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>afa9f04fd4fdf2d6248786c0c4b520e57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>recvbegin</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a4e9e90631b462cf8c981234613b9a2f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>ProcListIterator</type>
      <name>recvend</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a93f3d8e0d2e49b2acd5be9b9f1282643</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>send</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>ab5d55613bb3e3fa39aeaac97828ea220</anchor>
      <arglist>(int rank, void *buffer, int size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>recv</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a636981542b903f2ec3e4b9edd45376ee</anchor>
      <arglist>(int rank, void *buffer, int size) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>exchange</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>adf964439c275cabe9daf8dc33c6d0e7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double</type>
      <name>global_max</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>a96710c7d1787f1f919e1f9442a6962ce</anchor>
      <arglist>(double x) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04270.html</anchorfile>
      <anchor>aba68b5f36e8e58d6628bfb36a24c00de</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::AlbertaGridFamily::Traits</name>
    <filename>a02054.html</filename>
    <class kind="struct">Dune::AlbertaGridFamily::Traits::Codim</class>
    <member kind="typedef">
      <type>GridImp</type>
      <name>Grid</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a0b6f08456af5a90fd500f0e728262e51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, AlbertaGridLeafIntersection&lt; const GridImp &gt; &gt;</type>
      <name>LeafIntersection</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a71b24dea08f344ff24f9ad28617eec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const GridImp, AlbertaGridLeafIntersection&lt; const GridImp &gt; &gt;</type>
      <name>LevelIntersection</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a1ed4f9d51a647994ae350244363c0e7a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const GridImp, AlbertaGridLeafIntersectionIterator&lt; const GridImp &gt;, AlbertaGridLeafIntersection&lt; const GridImp &gt; &gt;</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a9f897ce26912fa2bb0d3f371e293a078</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const GridImp, AlbertaGridLeafIntersectionIterator&lt; const GridImp &gt;, AlbertaGridLeafIntersection&lt; const GridImp &gt; &gt;</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a589b863216afa8d55e83a4773346bfbb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; 0, const GridImp, AlbertaGridHierarchicIterator&lt; const GridImp &gt; &gt;</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>ae70d5f540bf46888f19f30426b407b87</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdType</type>
      <name>GlobalIdType</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>add0ee46cf8597c475e088ecbe262263d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdType</type>
      <name>LocalIdType</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a55a11f674702b111a5610b2e55c4d4a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; AlbertaLevelGridViewTraits&lt; const GridImp &gt; &gt;</type>
      <name>LevelGridView</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a2309ef84a42d2cbc9ad8e1b43344ee2d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; AlbertaLeafGridViewTraits&lt; const GridImp &gt; &gt;</type>
      <name>LeafGridView</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>aed10356204e735416e10c2dc1a747056</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; GridImp, LevelIndexSetImp, int, std::array&lt; GeometryType, 1 &gt; &gt;</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>ac4aa9beea599798b2850962b229e1140</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IndexSet&lt; GridImp, LeafIndexSetImp, int, std::array&lt; GeometryType, 1 &gt; &gt;</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a4a8a386ed35b73588a12d7ea90199f13</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AlbertaGridHierarchicIndexSet&lt; dim, dimworld &gt;</type>
      <name>HierarchicIndexSet</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a255ae70881d585fa229da9db73ea5321</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; GridImp, IdSetImp, IdType &gt;</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>a61b1f5a4dba6f3e29aed8e59b925cf9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>IdSet&lt; GridImp, IdSetImp, IdType &gt;</type>
      <name>LocalIdSet</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>ab3281ed3da84fc725d0830133f713634</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::CollectiveCommunication&lt; No_Comm &gt;</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02054.html</anchorfile>
      <anchor>af579115fa613c95e437e280014b96df0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::GeoGrid::GridFamily::Traits</name>
    <filename>a03158.html</filename>
    <class kind="struct">Dune::GeoGrid::GridFamily::Traits::Codim</class>
    <member kind="typedef">
      <type>GeometryGrid&lt; HG, CF, Allocator &gt;</type>
      <name>Grid</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>ad465ef2a7997dc40056c7856baa201ad</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HG</type>
      <name>HostGrid</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>aaaf86a3a53af4fe7577ff28c9fef112c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CF</type>
      <name>CoordFunction</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a8c54fb7102183c61cd8d0df34b70cc01</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::ctype</type>
      <name>ctype</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>ae4a69dae64d2a53dffabd358a91441cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const Grid, GeoGrid::Intersection&lt; const Grid, typename HostGrid::LeafIntersection &gt; &gt;</type>
      <name>LeafIntersection</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a1144fcd346413c513ecb166cb1fdbb34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; const Grid, GeoGrid::Intersection&lt; const Grid, typename HostGrid::LevelIntersection &gt; &gt;</type>
      <name>LevelIntersection</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a9c38972a81177d1d5b4065c3b2e269e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, GeoGrid::IntersectionIterator&lt; const Grid, typename HostGrid::LeafIntersectionIterator &gt;, GeoGrid::Intersection&lt; const Grid, typename HostGrid::LeafIntersection &gt; &gt;</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a7ec8e7b404db964a8334749c626bacb4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::IntersectionIterator&lt; const Grid, GeoGrid::IntersectionIterator&lt; const Grid, typename HostGrid::LevelIntersectionIterator &gt;, GeoGrid::Intersection&lt; const Grid, typename HostGrid::LevelIntersection &gt; &gt;</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a7e0d3c7e4ff4716e65010b5564751443</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::EntityIterator&lt; 0, const Grid, GeoGrid::HierarchicIterator&lt; const Grid &gt; &gt;</type>
      <name>HierarchicIterator</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a1b452f18d5c122b2ca3b8f79a5295684</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::IndexSet&lt; const Grid, typename HostGrid::Traits::LeafIndexSet &gt;</type>
      <name>LeafIndexSet</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a7ba09349a6c0d0a0684004c9695d2e9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::IndexSet&lt; const Grid, typename HostGrid::Traits::LevelIndexSet &gt;</type>
      <name>LevelIndexSet</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a0374b04656de8bb6b8ccc80e4c8bdf9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::IdSet&lt; const Grid, typename HostGrid::Traits::GlobalIdSet &gt;</type>
      <name>GlobalIdSet</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a57c9cd60caf7f866cad8c9d30127ae15</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GeoGrid::IdSet&lt; const Grid, typename HostGrid::Traits::LocalIdSet &gt;</type>
      <name>LocalIdSet</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>acf22ca4efca5f9eecf407d1930283515</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>HostGrid::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a04f24a3ec63e5485ee06129436cd2d04</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; GeoGrid::GridViewTraits&lt; typename HostGrid::LeafGridView, CoordFunction, Allocator &gt; &gt;</type>
      <name>LeafGridView</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a7acc008f0addb2341268e8c6af7e2a4d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::GridView&lt; GeoGrid::GridViewTraits&lt; typename HostGrid::LevelGridView, CoordFunction, Allocator &gt; &gt;</type>
      <name>LevelGridView</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a24cb88c2ebabd7363217806ee2465348</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>a9432444950205980faae999af3c80c4a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimensionworld</name>
      <anchorfile>a03158.html</anchorfile>
      <anchor>aa3cc8fc934c581ea5ce2006184d271ec</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Twist</name>
    <filename>a02334.html</filename>
    <templarg>dim</templarg>
    <templarg>subdim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a02334.html</anchorfile>
      <anchor>a2b10bb22c035b522d9934668dce9e229</anchor>
      <arglist>([[maybe_unused]] const Element *element, [[maybe_unused]] int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02334.html</anchorfile>
      <anchor>aff015aac087acdabe343d47f147ed5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minTwist</name>
      <anchorfile>a02334.html</anchorfile>
      <anchor>a55521737ef179b4bf588d41bf706a6bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxTwist</name>
      <anchorfile>a02334.html</anchorfile>
      <anchor>a1c822aefb53637a509b14d7b65663d7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Twist&lt; 1, 1 &gt;</name>
    <filename>a02342.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a02342.html</anchorfile>
      <anchor>ad7ad8c9496eabc9e49c60615231d03f7</anchor>
      <arglist>([[maybe_unused]] const Element *element, [[maybe_unused]] int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minTwist</name>
      <anchorfile>a02342.html</anchorfile>
      <anchor>aaf56ee9d1f7d39567f902a829b9a4a8a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxTwist</name>
      <anchorfile>a02342.html</anchorfile>
      <anchor>a298b24b055c67dc049b95190e2103c1f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Twist&lt; 2, 2 &gt;</name>
    <filename>a02350.html</filename>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a02350.html</anchorfile>
      <anchor>a63d6ab5985b0cb61c62c17671b7fd443</anchor>
      <arglist>([[maybe_unused]] const Element *element, [[maybe_unused]] int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minTwist</name>
      <anchorfile>a02350.html</anchorfile>
      <anchor>a9e968bb5fc0ea4cfea306efedb43344c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxTwist</name>
      <anchorfile>a02350.html</anchorfile>
      <anchor>ab0fad8f541b32b21d3b97546b15901b5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Twist&lt; dim, 1 &gt;</name>
    <filename>a02338.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a02338.html</anchorfile>
      <anchor>a77f058eaa04ae484ca44af17d6a4bb67</anchor>
      <arglist>(const Element *element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02338.html</anchorfile>
      <anchor>a64f815379748c4a52821d5392058903b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minTwist</name>
      <anchorfile>a02338.html</anchorfile>
      <anchor>a27e43bdbd20c5c3af53101d9aaadb6dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxTwist</name>
      <anchorfile>a02338.html</anchorfile>
      <anchor>a4e64fa8d40b0005ec72e2861e5b58fbb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Alberta::Twist&lt; dim, 2 &gt;</name>
    <filename>a02346.html</filename>
    <templarg>dim</templarg>
    <member kind="function" static="yes">
      <type>static int</type>
      <name>twist</name>
      <anchorfile>a02346.html</anchorfile>
      <anchor>ae727f79df6a86d2c1388b0ac5efe3401</anchor>
      <arglist>(const Element *element, int subEntity)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>numSubEntities</name>
      <anchorfile>a02346.html</anchorfile>
      <anchor>a53a5f2d9c9022223d10f687b45a23cc0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>minTwist</name>
      <anchorfile>a02346.html</anchorfile>
      <anchor>af48fd3baf26b1e2555edb6f7f46a34ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>maxTwist</name>
      <anchorfile>a02346.html</anchorfile>
      <anchor>ad02c93443b5800e60bb036f8d01db41c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::TypesWriter</name>
    <filename>a03814.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Cell &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Cell</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>a8bc4033ef85cfacdcc1473e5fcc3efda</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>a37ce9419b50321db77d550d515ea528b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>a9647b397a6ea90a173aeb04235592b62</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>a6442561038046b67262f7391e8b42d8f</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>a95d823f94f52ab7cfdea0c9b59db355f</anchor>
      <arglist>(const Cell &amp;cell, const typename Base::Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03814.html</anchorfile>
      <anchor>af560d62829f5a279ab8fe1ebf58a04c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::UGGrid</name>
    <filename>a03962.html</filename>
    <templarg>dim</templarg>
    <base>GridDefaultImplementation&lt; dim, dim, double, UGGridFamily&lt; dim &gt; &gt;</base>
    <member kind="typedef">
      <type>UGGridFamily&lt; dim &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a48808ef15d505b05d6e8133a81a4aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UGGridFamily&lt; dim &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a3bc00513d660384b4fe3ad2dc3afd380</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UG::DOUBLE</type>
      <name>ctype</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a8bcdb7069f49ac6cade41e3a23d5f50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Rank</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad51545e1ddb567381bb64f63074ec918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fbae06c5d78b1b104ce8c12bc065fc0ede2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fba27d7f8aa313fd4d8bde04746370b9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREEN</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08a291003834b7f001bf74eb7bb0da6d5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08ab36a704df45a683f4f7d4cb5e473649c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UGGrid</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a651016ab341e358553c3dfb3229cb807</anchor>
      <arglist>(UGCollectiveCommunication comm={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UGGrid</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a305af6450899bdd43419ef212fb35b5f</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a6553576487aa7154457458212f706966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; Seed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>acf0b78a530c63b580e9cb7a07de0ec3c</anchor>
      <arglist>(const Seed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a89046c4cc09829eaee8d51b49fb14119</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>af81affe8030a89c00421c364048092f5</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a76c44817265abda97ea3974189b15b92</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a7aaba2d05ac23bdea19133c7267dbb6d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0ec74a5640c8db1560df605038c9261f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a73d512fef588584e05fb695649a10bb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a9425c79c76b691542100de06b0604091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aa6dfa171ce16aeb31ae41d53f8b654dd</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad2e5e55414372de3e3026fa6fd4c30d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridGeometry&lt; 0, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ac0496126ed64f6a5a180bf2770dff99c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridGeometry&lt; dim, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a91db71e0b88497491939092b24910ca0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridGeometry&lt; 1, 2, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a32666bb97ce1fe3367a9eac629eff54a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridGeometry&lt; 2, 3, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a798aea66158d999aa605e8d407d90da8</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridEntity&lt; 0, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ab53bea23d9fa816843d57ac642b0c251</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridEntity&lt; 1, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0ef90987259c7d290a4447c5bbe8daec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridEntity&lt; 2, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a4fb09ed9925d07400e629a3825d7778c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridEntity&lt; dim, dim, const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>adf6208bee4e9ae661059261611c74d29</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridHierarchicIterator&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a2ee7bac48651da0d6205e25d6639c7a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLeafIntersection&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a670839e40a41d79eae3e2ec4d34569cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLevelIntersection&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae478f6d89febcdc572055df2bd60f376</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLeafIntersectionIterator&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ab4d093b5c28b2d99b268b1f6fae67a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLevelIntersectionIterator&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a73e35313c1e5ed30f9937d22a30b6ee4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLevelIndexSet&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a5f50b407f1fb838dec7b5aba2ec735e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLeafIndexSet&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a7849222ede967d278e004a71c8e5797e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridIdSet&lt; const UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aa72038379c6bfccf289bcdf56f385962</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLeafGridView</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ab26c7a238bd797e04d7acdf2d38eeef4</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLevelGridView</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a46b0eacbbf9b8493d1f15f6a4ad4c8c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>GridFactory&lt; UGGrid&lt; dim &gt; &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aada16211082ee0ea00ff6bfbe3920b7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLeafIterator</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a1b221fc55e95c9e6e2c6cee187b8fb27</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGridLevelIterator</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a3cfa969b794871694a3f56dd07472f3e</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGrid&lt; 2 &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ab59915b91d88c822d8ab92632f86469c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>UGGrid&lt; 3 &gt;</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a65c553ee0e60f26915270674cade50c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RefinementType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fbae06c5d78b1b104ce8c12bc065fc0ede2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fba27d7f8aa313fd4d8bde04746370b9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ClosureType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREEN</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08a291003834b7f001bf74eb7bb0da6d5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08ab36a704df45a683f4f7d4cb5e473649c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a16d060aa72b5369d9098eac2b206083f</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a5e8cd0ca4d1f2f21d44d32431443a41f</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e, typename UG_NS&lt; dim &gt;::RefinementRule rule, int side=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a14f1b61a413dbf35fff0b337e8f75856</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad8049428931bf4e04a2d18fdcdff3b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aa3fe65d750889dc3e875dcc8b3981f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0baec872b4bbe8132eb62fe10d5219e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ac7d6404bfd07bf3735b971e0f0f57ef6</anchor>
      <arglist>(DataHandle &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a1e1318c2479ecef40a1bcee8a04222f2</anchor>
      <arglist>(int minlevel=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a56357ecba8bf60a498a1e02ff42057e7</anchor>
      <arglist>(const std::vector&lt; Rank &gt; &amp;targetProcessors, unsigned int fromLevel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a3f5f67f8bc720ef58e54818c49d3347f</anchor>
      <arglist>(const std::vector&lt; Rank &gt; &amp;targetProcessors, unsigned int fromLevel, DataHandle &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>const UGCollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a37825baf26ae140c430d041c16373da2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildrenOfSubface</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a44a31bb7c16ced87b8fea42382e2b18d</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int elementSide, int maxl, std::vector&lt; typename Traits::template Codim&lt; 0 &gt;::Entity &gt; &amp;childElements, std::vector&lt; unsigned char &gt; &amp;childElementSides) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinementType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0f6da85df8d4df8d3c8c19f5fe2d74b1</anchor>
      <arglist>(RefinementType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosureType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a6c1309f835cd9698ddb42fa8bf0ac25c</anchor>
      <arglist>(ClosureType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a7c76941abe2dd74c3102c1875391a752</anchor>
      <arglist>(const typename Traits::template Codim&lt; dim &gt;::Entity &amp;e, const FieldVector&lt; double, dim &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad8a86eb51c3aba71eee7650d90898835</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad69f609c92677774cfe477e68e9da5de</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadState</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ac0aafcb31c706f319fc6c3e5252a1950</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>UGGrid&lt; dimworld &gt;</name>
    <filename>a03962.html</filename>
    <base>GridDefaultImplementation&lt; dim, dim, double, UGGridFamily&lt; dim &gt; &gt;</base>
    <member kind="typedef">
      <type>UGGridFamily&lt; dim &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a48808ef15d505b05d6e8133a81a4aaa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UGGridFamily&lt; dim &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a3bc00513d660384b4fe3ad2dc3afd380</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>UG::DOUBLE</type>
      <name>ctype</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a8bcdb7069f49ac6cade41e3a23d5f50c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Rank</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad51545e1ddb567381bb64f63074ec918</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOCAL</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fbae06c5d78b1b104ce8c12bc065fc0ede2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COPY</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fba27d7f8aa313fd4d8bde04746370b9a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GREEN</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08a291003834b7f001bf74eb7bb0da6d5ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NONE</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08ab36a704df45a683f4f7d4cb5e473649c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UGGrid</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a651016ab341e358553c3dfb3229cb807</anchor>
      <arglist>(UGCollectiveCommunication comm={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~UGGrid</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a305af6450899bdd43419ef212fb35b5f</anchor>
      <arglist>() noexcept(false)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a6553576487aa7154457458212f706966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; Seed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>acf0b78a530c63b580e9cb7a07de0ec3c</anchor>
      <arglist>(const Seed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a89046c4cc09829eaee8d51b49fb14119</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>af81affe8030a89c00421c364048092f5</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a76c44817265abda97ea3974189b15b92</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a7aaba2d05ac23bdea19133c7267dbb6d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0ec74a5640c8db1560df605038c9261f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a73d512fef588584e05fb695649a10bb7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a9425c79c76b691542100de06b0604091</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aa6dfa171ce16aeb31ae41d53f8b654dd</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad2e5e55414372de3e3026fa6fd4c30d3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>RefinementType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a77f385a0019e340ffe3ecd7509bbc3fb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>ClosureType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ae0b21dc1efd8553d4fa4ff9c6ee20c08</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a16d060aa72b5369d9098eac2b206083f</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a5e8cd0ca4d1f2f21d44d32431443a41f</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e, typename UG_NS&lt; dim &gt;::RefinementRule rule, int side=0)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a14f1b61a413dbf35fff0b337e8f75856</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad8049428931bf4e04a2d18fdcdff3b70</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>aa3fe65d750889dc3e875dcc8b3981f0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0baec872b4bbe8132eb62fe10d5219e6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ac7d6404bfd07bf3735b971e0f0f57ef6</anchor>
      <arglist>(DataHandle &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a1e1318c2479ecef40a1bcee8a04222f2</anchor>
      <arglist>(int minlevel=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a56357ecba8bf60a498a1e02ff42057e7</anchor>
      <arglist>(const std::vector&lt; Rank &gt; &amp;targetProcessors, unsigned int fromLevel)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a3f5f67f8bc720ef58e54818c49d3347f</anchor>
      <arglist>(const std::vector&lt; Rank &gt; &amp;targetProcessors, unsigned int fromLevel, DataHandle &amp;dataHandle)</arglist>
    </member>
    <member kind="function">
      <type>const UGCollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a37825baf26ae140c430d041c16373da2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>getChildrenOfSubface</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a44a31bb7c16ced87b8fea42382e2b18d</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int elementSide, int maxl, std::vector&lt; typename Traits::template Codim&lt; 0 &gt;::Entity &gt; &amp;childElements, std::vector&lt; unsigned char &gt; &amp;childElementSides) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setRefinementType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a0f6da85df8d4df8d3c8c19f5fe2d74b1</anchor>
      <arglist>(RefinementType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setClosureType</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a6c1309f835cd9698ddb42fa8bf0ac25c</anchor>
      <arglist>(ClosureType type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setPosition</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>a7c76941abe2dd74c3102c1875391a752</anchor>
      <arglist>(const typename Traits::template Codim&lt; dim &gt;::Entity &amp;e, const FieldVector&lt; double, dim &gt; &amp;pos)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad8a86eb51c3aba71eee7650d90898835</anchor>
      <arglist>(int n)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>saveState</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ad69f609c92677774cfe477e68e9da5de</anchor>
      <arglist>(const std::string &amp;filename) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>loadState</name>
      <anchorfile>a03962.html</anchorfile>
      <anchor>ac0aafcb31c706f319fc6c3e5252a1950</anchor>
      <arglist>(const std::string &amp;filename)</arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::UGGridFamily</name>
    <filename>a03958.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>GridTraits&lt; dim, dim, Dune::UGGrid&lt; dim &gt;, UGGridGeometry, UGGridEntity, UGGridLevelIterator, UGGridLeafIntersection, UGGridLevelIntersection, UGGridLeafIntersectionIterator, UGGridLevelIntersectionIterator, UGGridHierarchicIterator, UGGridLeafIterator, UGGridLevelIndexSet&lt; const UGGrid&lt; dim &gt; &gt;, UGGridLeafIndexSet&lt; const UGGrid&lt; dim &gt; &gt;, UGGridIdSet&lt; const UGGrid&lt; dim &gt; &gt;, typename UG_NS&lt; dim &gt;::UG_ID_TYPE, UGGridIdSet&lt; const UGGrid&lt; dim &gt; &gt;, typename UG_NS&lt; dim &gt;::UG_ID_TYPE, UGCollectiveCommunication, UGGridLevelGridViewTraits, UGGridLeafGridViewTraits, UGGridEntitySeed, UGGridLocalGeometry &gt;</type>
      <name>Traits</name>
      <anchorfile>a03958.html</anchorfile>
      <anchor>ad4c6ad97bd1d2e1e6d236eadc6afe95d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::UGGridParameterBlock</name>
    <filename>a03570.html</filename>
    <base>Dune::dgf::GridParameterBlock</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Flags</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a4ff7f9f323ce7542d96973e20ab53f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>UGGridParameterBlock</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>a465d9f78fde9e0e059a6f96dfd75cc6c</anchor>
      <arglist>(std::istream &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>noClosure</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>ad8badd255b92daa7a873f73278818424</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>noCopy</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>aa16966f939abc2c6cd5785926696cf9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>heapSize</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>a0099f4bc6253f44175f2f410bc62df86</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a24b88ddc41ed0197f6088ad536a82b5b</anchor>
      <arglist>(const std::string &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>dumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6aaded57bfd0a0738edcd4eea285272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>ae1a78a247bd46cfa8fc20e4b00d79f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a78e57a95f2299ae56d090a84562e07c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a0bf00acfb6eb31b179006d48d80e7920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundDumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a06bb232c4b906ce7c2e36c7161dea168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af075ecb976aa895aebdeaac9a3693a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noClosure_</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>a8dd2ac2d550a7210fbcb3021487baecc</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>noCopy_</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>a44c05028d546abb690376f5ce040e5e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_t</type>
      <name>heapSize_</name>
      <anchorfile>a03570.html</anchorfile>
      <anchor>a609e9e48ca262cbf6d5e8a94af663a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Flags</type>
      <name>foundFlags_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a94afe8c549e83f70b9eb6a8c11e8b497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6dec65f7ec6a9c4e229e5ff93763c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>dumpFileName_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a753a31290c5bc38146388bece7070dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>markLongestEdge_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af6cb6850ba239a44db3addbbf62536ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::VariableExpression</name>
    <filename>a03426.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03426.html</anchorfile>
      <anchor>adae4d4270d1c714f1d8e6540d5915b68</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::dgf::Expr::VectorExpression</name>
    <filename>a03434.html</filename>
    <base>Dune::dgf::ProjectionBlock::Expression</base>
    <member kind="typedef">
      <type>std::vector&lt; double &gt;</type>
      <name>Vector</name>
      <anchorfile>a03494.html</anchorfile>
      <anchor>acb5172a14bb237eec2093e09c59d0907</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VectorExpression</name>
      <anchorfile>a03434.html</anchorfile>
      <anchor>af376d958930193c1751e2225c88b2585</anchor>
      <arglist>(const std::vector&lt; ProjectionBlock::ExpressionPointer &gt; &amp;expressions)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>evaluate</name>
      <anchorfile>a03434.html</anchorfile>
      <anchor>a7e64767cc34f20f0a5713fb70616c6c8</anchor>
      <arglist>(const Vector &amp;argument, Vector &amp;result) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::VertexBlock</name>
    <filename>a03506.html</filename>
    <base>Dune::dgf::BasicBlock</base>
    <member kind="function">
      <type></type>
      <name>VertexBlock</name>
      <anchorfile>a03506.html</anchorfile>
      <anchor>adfbadb01a083558703488c60a34a5b3a</anchor>
      <arglist>(std ::istream &amp;in, int &amp;pdimworld)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>get</name>
      <anchorfile>a03506.html</anchorfile>
      <anchor>a0b0615c18f98ce5f382508efe35c01c3</anchor>
      <arglist>(std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;vtx, std ::vector&lt; std ::vector&lt; double &gt; &gt; &amp;param, int &amp;nofp)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03506.html</anchorfile>
      <anchor>ae990631ee10909bc3d41a21738244df9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a03506.html</anchorfile>
      <anchor>ac1f2d1006aad296866a7ea287a351851</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKWriter::VertexIterator</name>
    <filename>a03918.html</filename>
    <member kind="function">
      <type></type>
      <name>VertexIterator</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>a61f857c9b0c539f0a8b057d8c01b33f1</anchor>
      <arglist>(const GridCellIterator &amp;x, const GridCellIterator &amp;end, const VTK::DataMode &amp;dm, const VertexMapper &amp;vm)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>a6e5a8d92581b58a5d7adf9274780b027</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>ac5018d62c4d4d841f0d97d6757c12225</anchor>
      <arglist>(const VertexIterator &amp;cit) const</arglist>
    </member>
    <member kind="function">
      <type>EntityReference</type>
      <name>dereference</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>a7b872786f4b4715f8139e0286a678beb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>localindex</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>aff5d4974306d392bd1c1fd73cce7d8ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; DT, n &gt;</type>
      <name>position</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>a4bc5bea2580b2c12df9a601fdbb5bc1d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>basicIncrement</name>
      <anchorfile>a03918.html</anchorfile>
      <anchor>a67eb0eb3ae489c06dd4b90f2f26ad4c6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VertexOrderByIdFactory::VertexOrder</name>
    <filename>a04130.html</filename>
    <templarg>dim</templarg>
    <member kind="typedef">
      <type>GeneralVertexOrder&lt; dim, Index &gt;</type>
      <name>type</name>
      <anchorfile>a04130.html</anchorfile>
      <anchor>a114a03e5e4ba2c7a20ecbfadf6aa10ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VertexOrderByIdFactory</name>
    <filename>a04126.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <class kind="struct">Dune::VertexOrderByIdFactory::VertexOrder</class>
    <member kind="function">
      <type></type>
      <name>VertexOrderByIdFactory</name>
      <anchorfile>a04126.html</anchorfile>
      <anchor>a4c82bdf862bd2c84e37ad5837893919c</anchor>
      <arglist>(const IdSet &amp;idset_)</arglist>
    </member>
    <member kind="function">
      <type>VertexOrder&lt; Element::mydimension &gt;::type</type>
      <name>make</name>
      <anchorfile>a04126.html</anchorfile>
      <anchor>aa60bd518959e040058e15124be9238ec</anchor>
      <arglist>(const Element &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::viewThreadSafe</name>
    <filename>a02538.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02538.html</anchorfile>
      <anchor>a7f3e6fdf95afc48f67d30b036f24900b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::viewThreadSafe&lt; const Grid &gt;</name>
    <filename>a02578.html</filename>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02578.html</anchorfile>
      <anchor>aea50131255378f1b15fec2784b84d6fa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::Capabilities::viewThreadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</name>
    <filename>a02962.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="variable" static="yes">
      <type>static const bool</type>
      <name>v</name>
      <anchorfile>a02962.html</anchorfile>
      <anchor>a9c80e5560fee8ad0b4d45f75ecf8b709</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKFunction</name>
    <filename>a03778.html</filename>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>abaddd44c69c6a2c9b40fc758e357cee7a33a161569aeee44577a0f35909413f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridView::ctype</type>
      <name>ctype</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a375d112f78ab8533a20e9d9832721719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridView::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a71b0ae032fa093c064942e43ced311cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>abaddd44c69c6a2c9b40fc758e357cee7a33a161569aeee44577a0f35909413f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ncomps</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>ad726a6679525b54b24a6e2ea096bb83c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a0cfd0a58483e8ad6a8b4150511529c87</anchor>
      <arglist>(int comp, const Entity &amp;e, const Dune::FieldVector&lt; ctype, dim &gt; &amp;xi) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a8ef4ebb43ef9a48b93bbd52aac8bf20c</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VTK::Precision</type>
      <name>precision</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>ac5d76ab9984b1354f886dac3d0e058df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VTKFunction</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>af9f5c0a7d70e6f62433ae924e9638dd3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>VTKFunction&lt; GV &gt;</name>
    <filename>a03778.html</filename>
    <member kind="typedef">
      <type>GridView::ctype</type>
      <name>ctype</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a375d112f78ab8533a20e9d9832721719</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridView::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a71b0ae032fa093c064942e43ced311cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dim</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>abaddd44c69c6a2c9b40fc758e357cee7a33a161569aeee44577a0f35909413f48</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual int</type>
      <name>ncomps</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>ad726a6679525b54b24a6e2ea096bb83c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual double</type>
      <name>evaluate</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a0cfd0a58483e8ad6a8b4150511529c87</anchor>
      <arglist>(int comp, const Entity &amp;e, const Dune::FieldVector&lt; ctype, dim &gt; &amp;xi) const=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>a8ef4ebb43ef9a48b93bbd52aac8bf20c</anchor>
      <arglist>() const=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual VTK::Precision</type>
      <name>precision</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>ac5d76ab9984b1354f886dac3d0e058df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VTKFunction</name>
      <anchorfile>a03778.html</anchorfile>
      <anchor>af9f5c0a7d70e6f62433ae924e9638dd3</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::VTKWriter::VTKLocalFunction::VTKFunctionWrapper</name>
    <filename>a03910.html</filename>
    <base>Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</base>
    <member kind="function">
      <type></type>
      <name>VTKFunctionWrapper</name>
      <anchorfile>a03910.html</anchorfile>
      <anchor>a2ecb3b11779a91286ab53d52515bf72e</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;f)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>bind</name>
      <anchorfile>a03910.html</anchorfile>
      <anchor>a994c898988cc289572b066efa8c15a94</anchor>
      <arglist>(const Entity &amp;e)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>unbind</name>
      <anchorfile>a03910.html</anchorfile>
      <anchor>a1b7d95714648008449decf90da6556fd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03910.html</anchorfile>
      <anchor>a59ccf5487ed5bc1ae4d7422e08a4d90a</anchor>
      <arglist>(const Coordinate &amp;pos, Writer &amp;w, std::size_t count) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::VTKFunctionWriter</name>
    <filename>a03794.html</filename>
    <templarg></templarg>
    <base>FunctionWriterBase&lt; Func::Entity &gt;</base>
    <member kind="typedef">
      <type>FieldVector&lt; DF, mydim &gt;</type>
      <name>Domain</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a9ff85ac0d90a8192dc9517b18b313d98</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Func::Entity</type>
      <name>Cell</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a4cd0e1ac0e27b4c9a4d780a4e8ac4378</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKFunctionWriter</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>a03d18f45377bb57cf9ea86394dfd43ec</anchor>
      <arglist>(const std::shared_ptr&lt; const Func &gt; &amp;func_, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::string</type>
      <name>name</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>a55ef89f548858bb9e4c8e001abee382d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual unsigned</type>
      <name>ncomps</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>a698445b13855c0debb594ae6c8251fb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>addArray</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>aaf8900f37a333a9a9e7c74dab41d7cfe</anchor>
      <arglist>(PVTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>beginWrite</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>a8d4600ea2a287defaa9eaea91ab90611</anchor>
      <arglist>(VTUWriter &amp;writer, std::size_t nitems)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>ab8132892c59fa669babed25b802f56a3</anchor>
      <arglist>(const typename Base::Cell &amp;cell, const typename Base::Domain &amp;xl)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>endWrite</name>
      <anchorfile>a03794.html</anchorfile>
      <anchor>ae56babd9e5c8f8bd47971061973cd179</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>a3464d52ef71da99329b4654c2d00694d</anchor>
      <arglist>(const Cell &amp;, const Domain &amp;)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>write</name>
      <anchorfile>a03790.html</anchorfile>
      <anchor>aeea6449e895e5ae35b371bd3fda5e7d3</anchor>
      <arglist>(const Cell &amp;cell, unsigned cornerIndex)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKWriter::VTKLocalFunction</name>
    <filename>a03894.html</filename>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::FunctionWrapper</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::FunctionWrapperBase</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::GlobalFunctionWrapper</class>
    <class kind="struct">Dune::VTKWriter::VTKLocalFunction::VTKFunctionWrapper</class>
    <member kind="typedef">
      <type>VTK::DataArrayWriter</type>
      <name>Writer</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a8f848c19dae048dbb39cdf5a15d54c52</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKLocalFunction</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a224177519e53fb994cdcc565f19bd074</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo fieldInfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKLocalFunction</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a224177519e53fb994cdcc565f19bd074</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo fieldInfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKLocalFunction</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a224177519e53fb994cdcc565f19bd074</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo fieldInfo)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKLocalFunction</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>ab133907a5132ced08b85fbe21c6e2f53</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;vtkFunctionPtr)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a2790e76a5e13f59efdc905c09ddcea3b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const VTK::FieldInfo &amp;</type>
      <name>fieldInfo</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a4de4e6be494f5c02b2dd944cf48b693c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>bind</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>aa88c98900f2157b42fc8ac458c832dbd</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unbind</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a21a15720d08951bbd1c76400cfc2cec9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>aef3af95824ac5def78c16e0dbad8d75d</anchor>
      <arglist>(const Coordinate &amp;pos, Writer &amp;w) const</arglist>
    </member>
    <member kind="variable">
      <type>std::shared_ptr&lt; FunctionWrapperBase &gt;</type>
      <name>_f</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>ae90de533460afe527187ef6467c4e7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>VTK::FieldInfo</type>
      <name>_fieldInfo</name>
      <anchorfile>a03894.html</anchorfile>
      <anchor>a6bb7162542e792894c52eb5c0f59042e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKSequenceWriter</name>
    <filename>a03866.html</filename>
    <templarg></templarg>
    <base>Dune::VTKSequenceWriterBase</base>
    <member kind="function">
      <type></type>
      <name>VTKSequenceWriter</name>
      <anchorfile>a03866.html</anchorfile>
      <anchor>ad39612067ab624b45eea75dd04732e88</anchor>
      <arglist>(std::shared_ptr&lt; VTKWriter&lt; GridView &gt; &gt; vtkWriter, const std::string &amp;name)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKSequenceWriter</name>
      <anchorfile>a03866.html</anchorfile>
      <anchor>a57619c6237719240bbf7b3b737bd624f</anchor>
      <arglist>(std::shared_ptr&lt; VTKWriter&lt; GridView &gt; &gt; vtkWriter, const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKSequenceWriter</name>
      <anchorfile>a03866.html</anchorfile>
      <anchor>addc39a56ff51d13b49b03e09aa298603</anchor>
      <arglist>(const GridView &amp;gridView, const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, VTK::DataMode dm=VTK::conforming)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; VTKWriter&lt; GridView &gt; &gt; &amp;</type>
      <name>vtkWriter</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ac6ea362b3697861791a86ece1a4619a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae17d4ef4e3e9e1efb85c06642599b56a</anchor>
      <arglist>(const std::shared_ptr&lt; const typename VTKWriter&lt; GridView &gt;::VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a69a250ed69c701cb39ce1a05130b6696</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a30d25862cc38db51f4b17928ee15e7da</anchor>
      <arglist>(const std::shared_ptr&lt; const typename VTKWriter&lt; GridView &gt;::VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a02b87a4b40d3ea8936068c71fe1b7cce</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a2dbb46447969815b263ddc5561e7c1e6</anchor>
      <arglist>(double time, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>aef98392a871f1cf1548770fcf4d9445c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getTimeSteps</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae3f7e2e7f479d20df34cba54ac2341fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeSteps</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae6eebaeceb002b1cb47b910634d531ad</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;timesteps)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKSequenceWriterBase</name>
    <filename>a03870.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>VTKSequenceWriterBase</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ab6240fddd9df67d5035b83654480c4e2</anchor>
      <arglist>(std::shared_ptr&lt; VTKWriter&lt; GridView &gt; &gt; vtkWriter, const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, int rank, int size)</arglist>
    </member>
    <member kind="function">
      <type>const std::shared_ptr&lt; VTKWriter&lt; GridView &gt; &gt; &amp;</type>
      <name>vtkWriter</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ac6ea362b3697861791a86ece1a4619a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae17d4ef4e3e9e1efb85c06642599b56a</anchor>
      <arglist>(const std::shared_ptr&lt; const typename VTKWriter&lt; GridView &gt;::VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a69a250ed69c701cb39ce1a05130b6696</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a30d25862cc38db51f4b17928ee15e7da</anchor>
      <arglist>(const std::shared_ptr&lt; const typename VTKWriter&lt; GridView &gt;::VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a02b87a4b40d3ea8936068c71fe1b7cce</anchor>
      <arglist>(const V &amp;v, const std::string &amp;name, int ncomps=1)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>a2dbb46447969815b263ddc5561e7c1e6</anchor>
      <arglist>(double time, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>aef98392a871f1cf1548770fcf4d9445c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; double &gt; &amp;</type>
      <name>getTimeSteps</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae3f7e2e7f479d20df34cba54ac2341fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setTimeSteps</name>
      <anchorfile>a03870.html</anchorfile>
      <anchor>ae6eebaeceb002b1cb47b910634d531ad</anchor>
      <arglist>(const std::vector&lt; double &gt; &amp;timesteps)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTKWriter</name>
    <filename>a03890.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::VTKWriter::CellIterator</class>
    <class kind="class">Dune::VTKWriter::CornerIterator</class>
    <class kind="class">Dune::VTKWriter::VertexIterator</class>
    <class kind="class">Dune::VTKWriter::VTKLocalFunction</class>
    <member kind="typedef">
      <type>Dune::VTKFunction&lt; GridView &gt;</type>
      <name>VTKFunction</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2ff7710cee12690b6945c10d813d45b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTKWriter</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af35d660201968997980173df15c56b23</anchor>
      <arglist>(const GridView &amp;gridView, VTK::DataMode dm=VTK::conforming, VTK::Precision coordPrecision=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a43be130859f7bdde8a4f35cbed06b3e7</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ac9f1ecb419bb3eb23a97c894db6eef6e</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a04f91f906aaae58fac7c59fdb60be07f</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2dcb8df3c88f07030a4e4c2441646fb3</anchor>
      <arglist>(const std::shared_ptr&lt; const VTKFunction &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a5288e710fa416805a17c21e6d378e97d</anchor>
      <arglist>(F &amp;&amp;f, VTK::FieldInfo vtkFieldInfo)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>addVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>accc5a7166202a5017580e1d0436886ab</anchor>
      <arglist>(const Container &amp;v, const std::string &amp;name, int ncomps=1, VTK::Precision prec=VTK::Precision::float32)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>clear</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a183c0e4e3bd05c14920177438d159897</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>VTK::Precision</type>
      <name>coordPrecision</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ab445a9f7f8fa50bbed7416c146fd5c06</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~VTKWriter</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ad6bb5ad178ba4431baac8e3b48640891</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a1d2383b717eed3f5c5782b487b3ea0bf</anchor>
      <arglist>(const std::string &amp;name, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af792fcc20c23c5b12e4a957decb90adc</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, VTK::OutputType type=VTK::ascii)</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>std::list&lt; VTKLocalFunction &gt;::const_iterator</type>
      <name>FunctionIterator</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ab5793f7e9c35d5557fbd01a617768ec0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CellIterator</type>
      <name>cellBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a712d991fceb8305b506fee51d0ab9007</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CellIterator</type>
      <name>cellEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3069b3c2a53fd55a86ff31aef83c44bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexIterator</type>
      <name>vertexBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a247bdfe6c0268fdd21e71eadb5f95baf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>VertexIterator</type>
      <name>vertexEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>aee5406947e96ea159cc1fcfddbdd127d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CornerIterator</type>
      <name>cornerBegin</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3a8b11649276aed0bfa4143440be6db4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CornerIterator</type>
      <name>cornerEnd</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a07980c2da6199ed3df22b893c57eb89e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getParallelPieceName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a7100858de954f5fb47cf1840fafcf117</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int commRank, int commSize) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getParallelHeaderName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a2d5b6bcb279af7ec520460a48f6a0a0a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, int commSize) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getSerialPieceName</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a41fc8dc0937e0b4e32e06c2dd91af65a</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>write</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>aa0c0419f5cd9320e6390e08b52f8dbc3</anchor>
      <arglist>(const std::string &amp;name, VTK::OutputType type, const int commRank, const int commSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>pwrite</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af6c83e8777206ab5744bccb32db87745</anchor>
      <arglist>(const std::string &amp;name, const std::string &amp;path, const std::string &amp;extendpath, VTK::OutputType ot, const int commRank, const int commSize)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getFormatString</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a43fc9036675ece92111a967175953f47</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::string</type>
      <name>getTypeString</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a285c1f94fab9aa93de12989c1e7ef5e9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>countEntities</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a5be4473980f78fb51aea1a5f66a7f5b7</anchor>
      <arglist>(int &amp;nvertices_, int &amp;ncells_, int &amp;ncorners_)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>std::tuple&lt; std::string, std::string &gt;</type>
      <name>getDataNames</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a3a840d2c36f57f7b2234e23fb46e008f</anchor>
      <arglist>(const T &amp;data) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>writeData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>adf295736545d9c3e3c6a4a2573d3c018</anchor>
      <arglist>(VTK::VTUWriter &amp;writer, const Data &amp;data, const Iterator begin, const Iterator end, int nentries)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeCellData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a54707169e06f91e1cd26fa2ff4fbada9</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeVertexData</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ac70d80706298d5e99ed9db694f876893</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeGridPoints</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ab8f9986c9a7463aef3e64a9310cebf66</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeGridCells</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a7e583f14e2c0f5e87949d368f7828bdc</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>checkForPolyhedralCells</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a4bda3ec739a5d46252ba2f5cb1aee368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected" virtualness="virtual">
      <type>virtual void</type>
      <name>writeCellFaces</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a88333f5ef542f0be5d836f6a7a79a882</anchor>
      <arglist>(VTK::VTUWriter &amp;writer)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>fillFaceVertices</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a91cd0d1e9ed9ba62686b51ccceb33708</anchor>
      <arglist>(CornerIterator it, const CornerIterator end, const IndexSet &amp;indexSet, std::vector&lt; T &gt; &amp;faces, std::vector&lt; T &gt; &amp;faceOffsets)</arglist>
    </member>
    <member kind="function" protection="protected" static="yes">
      <type>static void</type>
      <name>fillFacesForElement</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>adebe70388f02922a89b64a252d7d8c6f</anchor>
      <arglist>(const Entity &amp;element, const IndexSet &amp;indexSet, const std::vector&lt; T &gt; &amp;vertices, T &amp;offset, std::vector&lt; T &gt; &amp;faces, std::vector&lt; T &gt; &amp;faceOffsets)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VTKLocalFunction &gt;</type>
      <name>celldata</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a9dbec108bfcb591dcd191904c29ada56</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::list&lt; VTKLocalFunction &gt;</type>
      <name>vertexdata</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a34337462dcfcbab3f2ec615027b47182</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>GridView</type>
      <name>gridView_</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a8688962cb55dc765c2ff9f300057e627</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ncells</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ae4bf72c5ed8de7d8a3557939b34043d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>nvertices</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ac97ec2b3dda17b2e2aad67c77011430a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>ncorners</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>af8e8ed0c450ad5b2efeff3a5f4516762</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>VTK::OutputType</type>
      <name>outputtype</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>a7e486608ebbf70f38186c1fa82812068</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VTKSequenceWriterBase&lt; GridView &gt;</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>ab2ed71b762b08e7b1cb1464b7ec255ec</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>VTKSequenceWriter&lt; GridView &gt;</name>
      <anchorfile>a03890.html</anchorfile>
      <anchor>aa9eb9ad111406479bec0cfd89adb1a6d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::VTK::VTUWriter</name>
    <filename>a03926.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Phase</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a864bfade604f62de29b0c9d22fe56eac</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>main</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a864bfade604f62de29b0c9d22fe56eaca3f584fab190e72a3609003a39b4e56f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appended</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a864bfade604f62de29b0c9d22fe56eaca24411658c400565529f8e23fc59d5387</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>main</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a864bfade604f62de29b0c9d22fe56eaca3f584fab190e72a3609003a39b4e56f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appended</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a864bfade604f62de29b0c9d22fe56eaca24411658c400565529f8e23fc59d5387</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>VTUWriter</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a2657eeed4ff2ec44ddd284d6979b1355</anchor>
      <arglist>(std::ostream &amp;stream_, OutputType outputType, FileType fileType_)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~VTUWriter</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>ad8ec82d0907179ac0e52886c9a48623f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPointData</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>aa48122cfc3736872be26954e43ac3189</anchor>
      <arglist>(const std::string &amp;scalars=&quot;&quot;, const std::string &amp;vectors=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPointData</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a6fd6eb2ded9f066b689bfeae231249f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginCellData</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a8fc5e8aa9b1af6b9a238b041f2580ca5</anchor>
      <arglist>(const std::string &amp;scalars=&quot;&quot;, const std::string &amp;vectors=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endCellData</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a46daa30e79223bbe4ac659c7fe4a0e01</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginPoints</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>ae44529329e5140868825d583261f04f8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endPoints</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>ad75242bda0ac0213d9a6f5e186d7005a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginCells</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a62f75abab0401db8fa39b0b3c8e8c7be</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endCells</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>addffcb94878f8436c203798c8637acd5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>beginMain</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a542ecbd2324941504d4d8dcca764588f</anchor>
      <arglist>(unsigned ncells, unsigned npoints)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endMain</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>afb331371ab9b06a430f764098c29215e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>beginAppended</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a072e2a2df0679c490698d7cc711015fa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>endAppended</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a1a044d17163d62e0ac7e1e094b31bf4a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>DataArrayWriter *</type>
      <name>makeArrayWriter</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>ac9d0f0756010ba60ef7f2c7319f6839f</anchor>
      <arglist>(const std::string &amp;name, unsigned ncomps, unsigned nitems, Precision prec)</arglist>
    </member>
    <member kind="variable">
      <type>std::ostream &amp;</type>
      <name>stream</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>a3bc11d23ff3b28b586d68d9097dfe333</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>enum Dune::VTK::VTUWriter::Phase</type>
      <name>phase</name>
      <anchorfile>a03926.html</anchorfile>
      <anchor>aff9fd6600331072f7f92aed6da4232ef</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspEntity</name>
    <filename>a04142.html</filename>
    <templarg>codim</templarg>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; codim, dim, GridImp, YaspEntity &gt;</base>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a18fb35d4ffc93ea3693c43259257c51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>abceb06a7d3707630d92733e965cb3512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::Traits::template Codim&lt; codim &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a5c70123582e5bbba9caeea232b7c526b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a814ec1db307d9af33b294c68ed8ca03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a6b0913ee20d3920f9269fba01aea753a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a741a860619654c6b9d427ff8d2371f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::PersistentIndexType</type>
      <name>PersistentIndexType</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>adc44834cbbb15efea2575ae78231eec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a0bf2892fa9b2f3052b5197c558502324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a866a70f94c20dcb8c0dc49c86d906da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a16075781a0d07e02cf7c6ecb0d0cad9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>afb758b8a2b3dbc160427c0179207bb39</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a555c236cb0161be98585095187582b12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>abaf071a1ad6153668c300f88e94654b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8ef537b52b6711973a5a504013a21509</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8492f3a994eb138dd510f08f0719a2a4</anchor>
      <arglist>(YGLI &amp;&amp;g, const I &amp;&amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a4fecb65c56a70934daff75e7b7c7708c</anchor>
      <arglist>(const YaspEntity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>PersistentIndexType</type>
      <name>persistentIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a32917af7fd51c73c13fcb53ee2c97f48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compressedIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8e5462a155d0f59136e6f191518f2292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subCompressedIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a67abd7e1b44074fdffbebb5103d80c2c</anchor>
      <arglist>(int i, unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>ae3a965e695bd46b6da53c9930f6255c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>af4355ff2088b7181b361511d388485d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a2dbb409fca7ebbbc874042a4a2ffd295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a939e9e3ef94452f64b49f295a809691f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GridImp *</type>
      <name>yaspgrid</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>aa6f264549acdbfcd4c19cb0b70605a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I</type>
      <name>_it</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>aa45c8283c126150f39a3fde82efaaf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>YGLI</type>
      <name>_g</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a4d982d7e2133018d0acaeaf35a50b715</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>aa99e7e5b820ebba2e139fae92d60ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, true &gt;</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a06888df1b59bee0dc3083ae2c2f5a77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, false &gt;</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a5396f3d2aaf2fa0e4812114731b5f67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspGlobalIdSet&lt; GridImp &gt;</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>af91d3d34eb11b2b2be2fce3597465401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspEntity&lt; 0, dim, GridImp &gt;</name>
    <filename>a04286.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; 0, dim, GridImp, YaspEntity &gt;</base>
    <class kind="struct">Dune::YaspEntity&lt; 0, dim, GridImp &gt;::Codim</class>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a355295be4e4ceddf29e1c47e822e0dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ad57c1aa3a1345cdbaf6ff30c14dc190a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a9182f651f931cf474e9b21536b31ce18</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a4a265137c5518210414ff11906c957b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a98c16429247e552988c60d2f5b2b85af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a69828736bfd0700bf317375d468ae4eb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a2a46419e26b3245f0e063ab3161ab8af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::LevelIntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ae4134c5d40c0ba1ed5f6bd45e2805f3b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ae82088f33ae5ce0b746f4e854c2b7508</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a5ad3e629d4de1fb571340e8b3b40b8bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a68ce48bc980b8525fabec354aa1941ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::PersistentIndexType</type>
      <name>PersistentIndexType</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a2db2cc7ad81758048b16c0d044777ce8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::iTupel</type>
      <name>iTupel</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a31e981c07440c822027e95945263ac67</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a8d6c71c54c8451bbf852ba549291b2b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a49ee04ce1e98ea9dfe1c484aba924463</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a2094bd15a6499b406c89e0ea041609b2</anchor>
      <arglist>(const YGLI &amp;g, I &amp;&amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a5b1aa0b867b5bf9b02162b99782412bd</anchor>
      <arglist>(YGLI &amp;&amp;g, I &amp;&amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a0981c755d66b9e73a7fbd907b6ec98e3</anchor>
      <arglist>(const YaspEntity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a5a29746c98654894d8a4bdae98dc27ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ab7c8c487a2d21f8fe0ee746f32e5ac5a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a5d4c11e9b5b103323b72f6a1e6afbf0c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>aadef50e079bc98c970a6be37300168de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>count</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a209dfc84a8340d11bf211d5f560ae759</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ad9247cd860047297bb0f98478f34b16c</anchor>
      <arglist>(unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cc &gt;::Entity</type>
      <name>subEntity</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ace77a46342164a4cc802b639ea921238</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>father</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ab360b56c7dc092f8b9dd20bd13dd3729</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>hasFather</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>affeab8ad8d57937aa164b864e8d9e731</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInFather</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ae04b92f7ae1f4f60454b686330c09368</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a16766b01c50cc2d0645accd8bd021898</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>aac04d7551c3152206ebc361da38f4b41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>abc59e24b6ece900a8b1fb0ffeabf0d3f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ae6cb2872fb0c005667e84f515ee1967c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GridImp *</type>
      <name>yaspgrid</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ae76015b62b84597d5d247cab8c3a14b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isLeaf</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>afef735421d7b1d54a07853d990777769</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isNew</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ab39a50ec2cb708fdc95b834918bd919b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mightVanish</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a6844216504384750fc0b23d6993d3ac4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ac3fdac9d08989a0eab68ab1cf2043ce9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeafIntersectionIterator</type>
      <name>ileafbegin</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a057893822b2d4bbf47b81782646a9dba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelIntersectionIterator</type>
      <name>ilevelbegin</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a6c641262939cb0c824c060c1c8127f01</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a336e97517b6685656ec0949206f1dc40</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LeafIntersectionIterator</type>
      <name>ileafend</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a6cc90cdcb71b61421f6f268f06bbdc35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LevelIntersectionIterator</type>
      <name>ilevelend</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a61a021f99264a3835de5e618a82ae721</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hbegin</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>ac079595447e16652077927aa2df07db7</anchor>
      <arglist>(int maxlevel) const</arglist>
    </member>
    <member kind="function">
      <type>HierarchicIterator</type>
      <name>hend</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a11c029d70daadd44ae1d1fc89046f406</anchor>
      <arglist>(int) const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>aa99e7e5b820ebba2e139fae92d60ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspHierarchicIterator</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a677eeb8f1c5b741215fdceb7aba0693a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, true &gt;</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a06888df1b59bee0dc3083ae2c2f5a77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, false &gt;</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>a5396f3d2aaf2fa0e4812114731b5f67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspGlobalIdSet&lt; GridImp &gt;</name>
      <anchorfile>a04286.html</anchorfile>
      <anchor>af91d3d34eb11b2b2be2fce3597465401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>YaspEntity&lt; 0, GridImp::dimension, GridImp &gt;</name>
    <filename>a04142.html</filename>
    <base>EntityDefaultImplementation&lt; codim, dim, GridImp, YaspEntity &gt;</base>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a18fb35d4ffc93ea3693c43259257c51a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>abceb06a7d3707630d92733e965cb3512</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::Traits::template Codim&lt; codim &gt;::GeometryImpl</type>
      <name>GeometryImpl</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a5c70123582e5bbba9caeea232b7c526b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a814ec1db307d9af33b294c68ed8ca03c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a6b0913ee20d3920f9269fba01aea753a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a741a860619654c6b9d427ff8d2371f51</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::PersistentIndexType</type>
      <name>PersistentIndexType</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>adc44834cbbb15efea2575ae78231eec2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a0bf2892fa9b2f3052b5197c558502324</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a866a70f94c20dcb8c0dc49c86d906da1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a16075781a0d07e02cf7c6ecb0d0cad9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>afb758b8a2b3dbc160427c0179207bb39</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a555c236cb0161be98585095187582b12</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>abaf071a1ad6153668c300f88e94654b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8ef537b52b6711973a5a504013a21509</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8492f3a994eb138dd510f08f0719a2a4</anchor>
      <arglist>(YGLI &amp;&amp;g, const I &amp;&amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a4fecb65c56a70934daff75e7b7c7708c</anchor>
      <arglist>(const YaspEntity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>PersistentIndexType</type>
      <name>persistentIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a32917af7fd51c73c13fcb53ee2c97f48</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compressedIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a8e5462a155d0f59136e6f191518f2292</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subCompressedIndex</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a67abd7e1b44074fdffbebb5103d80c2c</anchor>
      <arglist>(int i, unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>ae3a965e695bd46b6da53c9930f6255c3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a2dbb409fca7ebbbc874042a4a2ffd295</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>af4355ff2088b7181b361511d388485d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a939e9e3ef94452f64b49f295a809691f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GridImp *</type>
      <name>yaspgrid</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>aa6f264549acdbfcd4c19cb0b70605a18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I</type>
      <name>_it</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>aa45c8283c126150f39a3fde82efaaf17</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>YGLI</type>
      <name>_g</name>
      <anchorfile>a04142.html</anchorfile>
      <anchor>a4d982d7e2133018d0acaeaf35a50b715</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspEntity&lt; dim, dim, GridImp &gt;</name>
    <filename>a04294.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>EntityDefaultImplementation&lt; dim, dim, GridImp, YaspEntity &gt;</base>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a5e83ad54bc5e214f3fb3810992a08780</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a6849c5311dce8d79b5f2d072de2e794e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a8d7ec8f2d7112f8809349dc5586242b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; dim &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>acff32fce252d9bd55b4023730d59ed6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; dim &gt;::EntitySeed</type>
      <name>EntitySeed</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>ae55772f6d33427824172bc55698aa302</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::PersistentIndexType</type>
      <name>PersistentIndexType</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a74e12ae49bb801402383b422d3ccbd52</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::iTupel</type>
      <name>iTupel</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>abc6bcfc8982d054018261a4a407a521f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a87d4d2ce8b75dcd27ad3b94cafd55f31a27b6ed058f4e2d7a0a599ccecc2d8c34</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>a69ddd3ea85d5e94d026b147b84acd0d4a070acbf3d62c79e25b8d51c1bb450ace</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>mydimension</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ace490edce81ed677b236446189ad5fc7a12e7253fb28a4300a5110200c0eb2e29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>ae4db39154a361a8e5c4230a7f9fc17bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a29e0f5b197cff91b5e64d9e1a93de72f</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntity</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>ae2e612e11708bea679386c8ea184e26c</anchor>
      <arglist>(YGLI &amp;&amp;g, I &amp;&amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a18b4185998ecb47186b6834f992e8e52</anchor>
      <arglist>(const YaspEntity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a117b4b93a256b68608d91e5af3b4cfea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>EntitySeed</type>
      <name>seed</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a78cb6b66a5d6b3f30e622feb15a3cc94</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>unsigned int</type>
      <name>subEntities</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a49e91125d25cc85a0ae1b55d10a126ed</anchor>
      <arglist>(unsigned int cc) const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a26b896abfe318a23cae8f46c35261534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>PartitionType</type>
      <name>partitionType</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a4cb53b351cca6cba988ad99da698f101</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>subCompressedIndex</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a966b3363c35fbb8af640543a82f7d2f3</anchor>
      <arglist>(int, unsigned int) const</arglist>
    </member>
    <member kind="function">
      <type>const I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a30611124cf24be62ca4eb8bef3acbe20</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a48107183899cfed3ae30c0b0f302ebfd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>I &amp;</type>
      <name>transformingsubiterator</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>adeca19d812b89eb4c4526230d795011f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>YGLI &amp;</type>
      <name>gridlevel</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>ae1e058baef3bbbd02f0c758c989ed7fe</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const GridImp *</type>
      <name>yaspgrid</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a3b2184c086cf90b8e79e989c819e1ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a02654.html</anchorfile>
      <anchor>ae8205047643af955c81ebe79eec0a306</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>I</type>
      <name>_it</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>ab324e14b7a0841b67ca3e86c4ff73c0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>YGLI</type>
      <name>_g</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a5dc64759ffe89ca7373c5805c47a4d79</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>aa99e7e5b820ebba2e139fae92d60ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, true &gt;</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a06888df1b59bee0dc3083ae2c2f5a77d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; GridImp, false &gt;</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>a5396f3d2aaf2fa0e4812114731b5f67d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspGlobalIdSet&lt; GridImp &gt;</name>
      <anchorfile>a04294.html</anchorfile>
      <anchor>af91d3d34eb11b2b2be2fce3597465401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspEntitySeed</name>
    <filename>a04146.html</filename>
    <templarg>codim</templarg>
    <templarg></templarg>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>af0aa69fbecbb9253990fdf9e0eb89315a8eae8b27a251bbb9d89b6eed551aa03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>codimension</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>af0aa69fbecbb9253990fdf9e0eb89315a8eae8b27a251bbb9d89b6eed551aa03a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntitySeed</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a773cb8b14826633ee022c14167298fe6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspEntitySeed</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a906fed882264711b4386e725dd8848a9</anchor>
      <arglist>(int level, std::array&lt; int, dim &gt; coord, int o=0)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isValid</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>af828a8ec9444ff8bf6c7e01b0890cc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>level</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a5139fe422d0b73d10885aa49427eaefb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::array&lt; int, dim &gt; &amp;</type>
      <name>coord</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a35c34bade303f75ad8eb3c1a6878e254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>ad659dd001feb331bf7f962008e72be63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_l</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a4758b907723b558a4d0d913d4bf273c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::array&lt; int, dim &gt;</type>
      <name>_c</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a3350345ce4ee0fe45c648cd934e96e6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_o</name>
      <anchorfile>a04146.html</anchorfile>
      <anchor>a0a8efd203e9c589837ac0ed91b464006</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspFixedSizePartitioner</name>
    <filename>a04258.html</filename>
    <templarg>d</templarg>
    <base>Dune::YLoadBalance</base>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04246.html</anchorfile>
      <anchor>aff6c1817d7290b72c628d45f54a9c590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspFixedSizePartitioner</name>
      <anchorfile>a04258.html</anchorfile>
      <anchor>a39d7dc26492e408116093158af089bba</anchor>
      <arglist>(const std::array&lt; int, d &gt; &amp;dims)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YaspFixedSizePartitioner</name>
      <anchorfile>a04258.html</anchorfile>
      <anchor>a92a1bba8601e794a2d39c51a18495b1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadbalance</name>
      <anchorfile>a04258.html</anchorfile>
      <anchor>acd5c1f83a1377b789c0a796626229f46</anchor>
      <arglist>(const std::array&lt; int, d &gt; &amp;, int P, std::array&lt; int, d &gt; &amp;dims) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspGeometry</name>
    <filename>a04138.html</filename>
    <templarg>mydim</templarg>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04138.html</anchorfile>
      <anchor>a53e1e4f7c3a892f71d14b6fc49cc028e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGeometry</name>
      <anchorfile>a04138.html</anchorfile>
      <anchor>a0b05fcd4911ea30adc1d61664802f3bf</anchor>
      <arglist>(const FieldVector&lt; ctype, cdim &gt; &amp;ll, const FieldVector&lt; ctype, cdim &gt; &amp;ur, const std::bitset&lt; cdim &gt; &amp;shift)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspGeometry&lt; 0, cdim, GridImp &gt;</name>
    <filename>a04302.html</filename>
    <templarg>cdim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04302.html</anchorfile>
      <anchor>ade4a09c31cfd3d019324a6b5c8e98086</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGeometry</name>
      <anchorfile>a04302.html</anchorfile>
      <anchor>acf034db8dd5dfbf5a341bed7ab39031a</anchor>
      <arglist>(const FieldVector&lt; ctype, cdim &gt; &amp;p)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGeometry</name>
      <anchorfile>a04302.html</anchorfile>
      <anchor>a38add5c63a14b9071340cb402b257c2f</anchor>
      <arglist>(const FieldVector&lt; ctype, cdim &gt; &amp;p, const FieldVector&lt; ctype, cdim &gt; &amp;, const std::bitset&lt; cdim &gt; &amp;)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspGeometry&lt; mydim, mydim, GridImp &gt;</name>
    <filename>a04298.html</filename>
    <templarg>mydim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::ctype</type>
      <name>ctype</name>
      <anchorfile>a04298.html</anchorfile>
      <anchor>a442147a0f8790937fe392451f896c880</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGeometry</name>
      <anchorfile>a04298.html</anchorfile>
      <anchor>abf4eff089cd4a208687560da0f75f46a</anchor>
      <arglist>(const FieldVector&lt; ctype, mydim &gt; &amp;ll, const FieldVector&lt; ctype, mydim &gt; &amp;ur)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGeometry</name>
      <anchorfile>a04298.html</anchorfile>
      <anchor>a22972f07eb8893d9e9f3e99f0a5027f9</anchor>
      <arglist>(const YaspGeometry &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspGlobalIdSet</name>
    <filename>a04170.html</filename>
    <templarg></templarg>
    <base>IdSet&lt; GridImp, YaspGlobalIdSet&lt; GridImp &gt;, std::remove_const&lt; GridImp &gt;::type::PersistentIndexType &gt;</base>
    <member kind="typedef">
      <type>std::remove_const&lt; GridImp &gt;::type::PersistentIndexType</type>
      <name>IdType</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>a65ee9a60e36f50cf6c9cfd77496412db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGlobalIdSet</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>ae08bc939b3a98e9328215bc3ef71dd0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>ae09b59080ce0e920d49e1487ae43c5bd</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>a216b83fb3c5f77892fcc0e7759951598</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>YaspGlobalIdSet&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;</name>
    <filename>a04170.html</filename>
    <base>Dune::IdSet</base>
    <member kind="typedef">
      <type>std::remove_const&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;::type::PersistentIndexType</type>
      <name>IdType</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>a65ee9a60e36f50cf6c9cfd77496412db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGlobalIdSet</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>ae08bc939b3a98e9328215bc3ef71dd0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>ae09b59080ce0e920d49e1487ae43c5bd</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;::type::Traits::template Codim&lt; cd &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a04170.html</anchorfile>
      <anchor>a216b83fb3c5f77892fcc0e7759951598</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;::type::Traits::template Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>acd8bc36100463a37d02e9cca7232c11a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>id</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a7323c485c81a7656ebf6ffb93f536487</anchor>
      <arglist>(const typename Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IdType</type>
      <name>subId</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a01494bdcefef66d680e6e4fc101a593a</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr auto</type>
      <name>dimension</name>
      <anchorfile>a02706.html</anchorfile>
      <anchor>a462d836a78a9c9c960fa46ff6d61b3fb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspGrid</name>
    <filename>a04134.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <base>GridDefaultImplementation&lt; dim, dim, Coordinates::ctype, YaspGridFamily&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;</base>
    <member kind="typedef">
      <type>Coordinates::ctype</type>
      <name>ctype</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>af7f0ce203743a301290613299c97e629</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspCollectiveCommunication</type>
      <name>CollectiveCommunicationType</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a2d54fcdb397bf0845dee756038d17828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ReservedVector&lt; YGridLevel, 32 &gt;::const_iterator</type>
      <name>YGridLevelIterator</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ada9fd16dffb2213a6f832af8b0ddabaa</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>bigunsignedint&lt; dim *yaspgrid_dim_bits+yaspgrid_level_bits+dim &gt;</type>
      <name>PersistentIndexType</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae43577168f9c4d0a9b3dbd3c88469ccc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspGridFamily&lt; dim, Coordinates &gt;</type>
      <name>GridFamily</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a11be426d19aa3fb65792a769b0c20cf9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspGridFamily&lt; dim, Coordinates &gt;::Traits</type>
      <name>Traits</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a6391b289a67bcdf8ad4de2f215b40be6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspIndexSet&lt; YaspGrid&lt; dim, Coordinates &gt;, false &gt;</type>
      <name>LevelIndexSetType</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a12c2f2f485d7537f4428b0e058ef42f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspIndexSet&lt; YaspGrid&lt; dim, Coordinates &gt;, true &gt;</type>
      <name>LeafIndexSetType</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a45986005ae66fc70f2b949eb393bd726</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>YaspGlobalIdSet&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</type>
      <name>GlobalIdSetType</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad51361808e7816785f5db7d77dd640c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>const Torus&lt; CollectiveCommunicationType, dim &gt; &amp;</type>
      <name>torus</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad5b189a5af3b5eddae9f68538442842e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>globalSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a526824a6aba6a293bb9903f68551c4d5</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>globalSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aef3254943587707f6ba3c0fb649f224d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>levelSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>afa5e5571b0f5218c3885a507e12d26e6</anchor>
      <arglist>(int l, int i) const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>levelSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a9e537896c7a920d6d364b57f6cc60fbb</anchor>
      <arglist>(int l) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isPeriodic</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ab608359f1f9707b259b94b6918b0497c</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>getRefineOption</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a33a7a419e7cad9f123fe171406d00994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>YGridLevelIterator</type>
      <name>begin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>afaece86f8e06626c66dbc196a94ca849</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>YGridLevelIterator</type>
      <name>begin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>af459fc4c00e4a0a2242623ab88384752</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>YGridLevelIterator</type>
      <name>end</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a65f135cdb15d667d5e8501e61d8bc4ba</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGrid</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>af8e264add405e85cdb61330043850748</anchor>
      <arglist>(const Coordinates &amp;coordinates, std::bitset&lt; dim &gt; periodic=std::bitset&lt; dim &gt;(0ULL), int overlap=1, CollectiveCommunicationType comm=CollectiveCommunicationType(), const YLoadBalance&lt; dim &gt; *lb=defaultLoadbalancer())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGrid</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a1b5d73ee98cbd0f6cf2212dcb49c0d5a</anchor>
      <arglist>(Dune::FieldVector&lt; ctype, dim &gt; L, std::array&lt; int, std::size_t{dim}&gt; s, std::bitset&lt; std::size_t{dim}&gt; periodic=std::bitset&lt; std::size_t{dim}&gt;{0ULL}, int overlap=1, CollectiveCommunicationType comm=CollectiveCommunicationType(), const YLoadBalance&lt; dim &gt; *lb=defaultLoadbalancer())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGrid</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aeebb0e2de1fd7a2396c1a851cf87729e</anchor>
      <arglist>(Dune::FieldVector&lt; ctype, dim &gt; lowerleft, Dune::FieldVector&lt; ctype, dim &gt; upperright, std::array&lt; int, std::size_t{dim}&gt; s, std::bitset&lt; std::size_t{dim}&gt; periodic=std::bitset&lt; std::size_t{dim}&gt;(0ULL), int overlap=1, CollectiveCommunicationType comm=CollectiveCommunicationType(), const YLoadBalance&lt; dim &gt; *lb=defaultLoadbalancer())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGrid</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aeaf23217c086c8e3f401079927374c83</anchor>
      <arglist>(std::array&lt; std::vector&lt; ctype &gt;, std::size_t{dim}&gt; coords, std::bitset&lt; std::size_t{dim}&gt; periodic=std::bitset&lt; std::size_t{dim}&gt;(0ULL), int overlap=1, CollectiveCommunicationType comm=CollectiveCommunicationType(), const YLoadBalance&lt; dim &gt; *lb=defaultLoadbalancer())</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>maxLevel</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a781e2b11e787a2d28649bc5dbdc06bcd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>globalRefine</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a38cea0bdb077710568c56e0388d055ea</anchor>
      <arglist>(int refCount)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>refineOptions</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>abf714a78ee6fa84d1d3a4979ba425fe7</anchor>
      <arglist>(bool keepPhysicalOverlap)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aa05c60252aa34c2bd4c4d495bd918d76</anchor>
      <arglist>(int refCount, const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a3c3f895e1fcd500bdd9384f34e8a153c</anchor>
      <arglist>(const typename Traits::template Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>adapt</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ada58afc817edd5a1a7b5f0e6d8ef6d44</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>preAdapt</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a98a0038a695fc2fdd12820b7a5082a34</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>postAdapt</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a60f6d2c88e1969f41de509552059cdf7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aed66b56853c02566977af45e4adb20bd</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae23d80aa750205c23b0fd4d0053050a0</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>lbegin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a3d9cf31ae2486c8e499a9272f43a0c3b</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LevelIterator</type>
      <name>lend</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad5d4a76a65e70af74d6f1c53fb2fac60</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae9cfd792f4a14df8c6fb07464c5b4c23</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a854f805c2a8f893de96c022792a547df</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>leafbegin</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a575b777580f273b5eb9c85e00faca257</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; cd &gt;::template Partition&lt; All_Partition &gt;::LeafIterator</type>
      <name>leafend</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a2cfcc780d534a0d7ea0624fa9e34e1c8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::template Codim&lt; Seed::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a329c8f0f72f825c3da1020d2f6a4f079</anchor>
      <arglist>(const Seed &amp;seed) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a866f68713a5e726750e22f1695dc290d</anchor>
      <arglist>(int level, [[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad89387a1ea1f43e441cb907f03c6679e</anchor>
      <arglist>([[maybe_unused]] int odim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aa6be7a4f9fe75900f7f22112c6d09400</anchor>
      <arglist>([[maybe_unused]] int level, [[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a5467352e2e813fb0a41bb54c8daaed59</anchor>
      <arglist>([[maybe_unused]] int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad14e6d6973701c5ce29ff5aef6fa940d</anchor>
      <arglist>(int level, int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ab09d185546a0240c297feaa559565ac1</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a255afc4749f005d7206773434557d7ed</anchor>
      <arglist>(int level, GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a74e999a57689152ae92a4b9b5865b4a9</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>numBoundarySegments</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>add158d93723825ecb092c34083f556eb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Dune::FieldVector&lt; ctype, dim &gt; &amp;</type>
      <name>domainSize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a57a646d8f211d7b6e37fc56c11912867</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a898f965435e439047ff01cc7c008c845</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, int level) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicate</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aaeee89b9ec4fc8e43775d4ac8d9d8f39</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>communicateCodim</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>adf368a88902452d65822711360a0c252</anchor>
      <arglist>(DataHandle &amp;data, InterfaceType iftype, CommunicationDirection dir, int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::GlobalIdSet &amp;</type>
      <name>globalIdSet</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ab51a65e6702bd18cbcab5aa6cb682788</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LocalIdSet &amp;</type>
      <name>localIdSet</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a25ee09e9a19e675ff1a2e802d5e85ed2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LevelIndexSet &amp;</type>
      <name>levelIndexSet</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>af9b2abbdc9a740291cc56a966096b00f</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>const Traits::LeafIndexSet &amp;</type>
      <name>leafIndexSet</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae81fc2464861b85aca2ad020bc08b6fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunicationType &amp;</type>
      <name>comm</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a6feb575fd0538f473cb3c533473b8411</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae3ad6ba7e3493b5edbf8904fc69fee6e</anchor>
      <arglist>(int level) const</arglist>
    </member>
    <member kind="function">
      <type>Traits::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>adc04e686c0482d3f5ac7fdaac8b56c62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a3976f2a34c52a445f18068a203de4745</anchor>
      <arglist>(int refCount, const typename Traits ::template Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>ae0ed8cbb63b8740a5e7b1a112eebe5af</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02678.html</anchorfile>
      <anchor>a4c83dd556fff769d3d26631f1b58d641</anchor>
      <arglist>([[maybe_unused]] DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const YLoadBalanceDefault&lt; dim &gt; *</type>
      <name>defaultLoadbalancer</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a935c3253bdb4103c925a016542cf6024</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="typedef" protection="protected">
      <type>const YaspGrid&lt; dim, Coordinates &gt;</type>
      <name>GridImp</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>af36d2f1a3fa1c758497bc488c05f67bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>makelevel</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae3894ff1d22d8bd55f27717676e7c1ff</anchor>
      <arglist>(const Coordinates &amp;coords, std::bitset&lt; dim &gt; periodic, iTupel o_interior, int overlap)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>intersections</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a92b1fdc80440156946e3150448b5838f</anchor>
      <arglist>(const YGridComponent&lt; Coordinates &gt; &amp;sendgrid, const YGridComponent&lt; Coordinates &gt; &amp;recvgrid, std::deque&lt; Intersection &gt; &amp;sendlist, std::deque&lt; Intersection &gt; &amp;recvlist)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>init</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a24afc690f431f215c3d3f496ff43d531</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>boundarysegmentssize</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a3fc086e5d39b537a74e1cc7163b04e53</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>aa99e7e5b820ebba2e139fae92d60ee4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspHierarchicIterator</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a677eeb8f1c5b741215fdceb7aba0693a</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend struct</type>
      <name>BackupRestoreFacility&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a49d52f93cf1e3fff54b90a3a283fbac9</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt;, true &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad66d133004626aa60fe8b6387ec5b054</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIndexSet&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt;, false &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ada06fc401b5c1b42809e4f08fd5c528b</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspGlobalIdSet&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a2e559286b7a3e4177cf0ef98ac6efd6c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspPersistentContainerIndex&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ad06ea7a19f8fba0862f3a413e8daf8a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIntersectionIterator&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a4b8f47e26e4b2443ff016c72ef323a74</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspIntersection&lt; const Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a37be21cfaf9011cb8a82d5a034ec86c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>Dune::YaspEntity&lt; 0, dim, const Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>ae9d8be2ee4a160f74141b0ce7eeefabf</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>Entity</name>
      <anchorfile>a04134.html</anchorfile>
      <anchor>a7373c6e825366fcfb48f78bc329165e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ad60b40e40ac87b01ad0b1f05ab4925b1a3d6a22a414566af9b4a356f760fce944</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab4f3c3433e4d9b46504c91b3e5c3bfb1a7829985ca62f22ec6c57c5feba1e0604</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafGridView</type>
      <name>LeafGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ac6cc7c5deb4a5f9be193ad538386e129</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelGridView</type>
      <name>LevelGridView</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a43e36b0156d9791dce24c97af9590fae</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersection</type>
      <name>LeafIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a45739c02b5a9029551508f4a434b2c9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersection</type>
      <name>LevelIntersection</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa7f95858ca7788d75fab631504f85632</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIntersectionIterator</type>
      <name>LeafIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a12fe2d3b85009e0d5a7d6f5af54f4671</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIntersectionIterator</type>
      <name>LevelIntersectionIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a54c44d26eaedf4a7d07f8b60ecd9e68c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::HierarchicIterator</type>
      <name>HierarchicIterator</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3cb3ea05314097b76de6420d6a931830</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LevelIndexSet</type>
      <name>LevelIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a15ae95ae6345d8796c4d02e7cc6759e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LeafIndexSet</type>
      <name>LeafIndexSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a8c32cd2b2a4426f124fffcb45aedd653</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::GlobalIdSet</type>
      <name>GlobalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a57a9c8a29d1af5611593ac5c57c600f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::LocalIdSet</type>
      <name>LocalIdSet</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a0dc537d9da8ca9f954885f79b54c38f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridFamily::Traits::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a207a985384df3916550501a433b5cebe</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>mark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a724b2f84bf6e59409a8fa663310929a4</anchor>
      <arglist>(int refCount, const typename Codim&lt; 0 &gt;::Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>getMark</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa37b82d0326ee5a9997d6b4bf301c5c3</anchor>
      <arglist>(const typename Codim&lt; 0 &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>loadBalance</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>ab7e6fa41d4f65c7357dfcc2b9b18ae5d</anchor>
      <arglist>(DataHandle &amp;data)</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; EntitySeed ::codimension &gt;::Entity</type>
      <name>entity</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>aa793697a7fd34f091718974c719041cf</anchor>
      <arglist>(const EntitySeed &amp;seed) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>af57ab2babe7fc1b3311888586abcdfc2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>const GridImp &amp;</type>
      <name>asImp</name>
      <anchorfile>a02710.html</anchorfile>
      <anchor>a3b73ea50148a770c757339ded8e7c654</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>Dune::YaspGridFamily</name>
    <filename>a04178.html</filename>
    <templarg>dim</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>YaspCollectiveCommunication</type>
      <name>CCType</name>
      <anchorfile>a04178.html</anchorfile>
      <anchor>a516ace9707181fc1718d716ded8b5f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridTraits&lt; dim, dim, Dune::YaspGrid&lt; dim, Coordinates &gt;, YaspGeometry, YaspEntity, YaspLevelIterator, YaspIntersection, YaspIntersection, YaspIntersectionIterator, YaspIntersectionIterator, YaspHierarchicIterator, YaspLevelIterator, YaspIndexSet&lt; const YaspGrid&lt; dim, Coordinates &gt;, false &gt;, YaspIndexSet&lt; const YaspGrid&lt; dim, Coordinates &gt;, true &gt;, YaspGlobalIdSet&lt; const YaspGrid&lt; dim, Coordinates &gt; &gt;, bigunsignedint&lt; dim *yaspgrid_dim_bits+yaspgrid_level_bits+dim &gt;, YaspGlobalIdSet&lt; const YaspGrid&lt; dim, Coordinates &gt; &gt;, bigunsignedint&lt; dim *yaspgrid_dim_bits+yaspgrid_level_bits+dim &gt;, CCType, DefaultLevelGridViewTraits, DefaultLeafGridViewTraits, YaspEntitySeed &gt;</type>
      <name>Traits</name>
      <anchorfile>a04178.html</anchorfile>
      <anchor>a020687defde3518586d44aa842f67d82</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::dgf::YaspGridParameterBlock</name>
    <filename>a03578.html</filename>
    <base>Dune::dgf::GridParameterBlock</base>
    <member kind="typedef">
      <type>unsigned int</type>
      <name>Flags</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a4ff7f9f323ce7542d96973e20ab53f27</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspGridParameterBlock</name>
      <anchorfile>a03578.html</anchorfile>
      <anchor>a99ffe13a44b28f2929f526578b0186be</anchor>
      <arglist>(std::istream &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlap</name>
      <anchorfile>a03578.html</anchorfile>
      <anchor>adbe19133761f9383910518c56e189818</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>name</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a24b88ddc41ed0197f6088ad536a82b5b</anchor>
      <arglist>(const std::string &amp;defaultValue) const</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>dumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6aaded57bfd0a0738edcd4eea285272</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>markLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>ae1a78a247bd46cfa8fc20e4b00d79f67</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ok</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a78e57a95f2299ae56d090a84562e07c3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isactive</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ac5f6236a2034acfc08d7fa492d1104f0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>isempty</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>aa03fbcfabe3f9891e34fbfd2ad7e9445</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int &amp;</type>
      <name>noflines</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a3c6d8bcf4fab8a69d092241a49825ba7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>linenumber</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad073ac8f1535c23df5cfbc3dd7228f79</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const std::string &amp;</type>
      <name>id</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a408137baed3c3cb28ac225addd265afb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a0bf00acfb6eb31b179006d48d80e7920</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundDumpFileName</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a06bb232c4b906ce7c2e36c7161dea168</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const Flags</type>
      <name>foundLongestEdge</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af075ecb976aa895aebdeaac9a3693a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" protection="protected">
      <type>void</type>
      <name>reset</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a03e10ffe0ec5e21e5ac302c54f6d57db</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextline</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a1e0d3a75117e72e3e53bf2caebc39dd2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>getnextentry</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a5225f6a7e05f698a469be85623b1f287</anchor>
      <arglist>(ENTRY &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>gettokenparam</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>af78118720f017c7a158e4cea9dd5a9c9</anchor>
      <arglist>(std ::string token, std ::string &amp;entry)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>bool</type>
      <name>findtoken</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>a37d2569487847078f8b2f101fa5d48cf</anchor>
      <arglist>(std ::string token)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>int</type>
      <name>_overlap</name>
      <anchorfile>a03578.html</anchorfile>
      <anchor>a5ddaca5746b2882bb6cd71ca86bd040c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Flags</type>
      <name>foundFlags_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a94afe8c549e83f70b9eb6a8c11e8b497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>name_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>aa6dec65f7ec6a9c4e229e5ff93763c71</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::string</type>
      <name>dumpFileName_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>a753a31290c5bc38146388bece7070dc2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool</type>
      <name>markLongestEdge_</name>
      <anchorfile>a03390.html</anchorfile>
      <anchor>af6cb6850ba239a44db3addbbf62536ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::stringstream</type>
      <name>line</name>
      <anchorfile>a03358.html</anchorfile>
      <anchor>ad8f07dabc591e8c033787aa3f21c8f3d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspHierarchicIterator</name>
    <filename>a04162.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a75dbb72dda46d467717ef5d2d2c1292b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a5298436f7417a24bd87b98d161b4b4b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a10b2d931104d91d4d80ab7a0021e3a29</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspHierarchicIterator</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a03a8686ccd527e04b17b484e5ec1680b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspHierarchicIterator</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>afe24d1cfaf20fe30b8dffc55d672aad9</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it, int maxlevel)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>ad4605098bd99f8c0e4ecc8bb58816c32</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>aecd835d066ce545a4b65be6aaa81a8d4</anchor>
      <arglist>(const YaspHierarchicIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a1b40f69a8b2037853ce869bc6d08e17b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>print</name>
      <anchorfile>a04162.html</anchorfile>
      <anchor>a19309165d502182d0701e81d05944bc5</anchor>
      <arglist>(std::ostream &amp;s) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspIndexSet</name>
    <filename>a04166.html</filename>
    <templarg></templarg>
    <templarg>isLeafIndexSet</templarg>
    <base>IndexSet&lt; GridImp, YaspIndexSet&lt; GridImp, isLeafIndexSet &gt;, unsigned int &gt;</base>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aeea9874de00c04c17222993f3e0f0a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypesImp</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIndexSet</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a176efdcb5a05ccc716dfb2a12fb6e718</anchor>
      <arglist>(const GridImp &amp;g, int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIndexSet</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a10ac68c86409fb9a06051e48a91ac495</anchor>
      <arglist>(const GridImp &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a17f2418dcce26ae4e67823ab532d4c7f</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a679d52e80d51c003f7b0231d04f3de87</anchor>
      <arglist>(const typename std::remove_const&lt; GridImp &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a2464530e13fd82b0741a1a7e2fe3c27d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>ab03684917466bb78cd4607e39bf56af4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a218c27582ccd3e3ba0c878065ee5a840</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; GeometryType &gt;</type>
      <name>types</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aa8ab21402bffd94bf772da5e54ff984d</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aaffe93fd55ee659e8b8e5812339d014e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>YaspIndexSet&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt;, true &gt;</name>
    <filename>a04166.html</filename>
    <base>Dune::IndexSet</base>
    <member kind="typedef">
      <type>Base::IndexType</type>
      <name>IndexType</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aeea9874de00c04c17222993f3e0f0a24</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>TypesImp</type>
      <name>Types</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a837d5173a783cdf6693f0a20329092e5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIndexSet</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a176efdcb5a05ccc716dfb2a12fb6e718</anchor>
      <arglist>(const const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &amp;g, int l)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIndexSet</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a10ac68c86409fb9a06051e48a91ac495</anchor>
      <arglist>(const const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &amp;g)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a17f2418dcce26ae4e67823ab532d4c7f</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a679d52e80d51c003f7b0231d04f3de87</anchor>
      <arglist>(const typename std::remove_const&lt; const Dune::YaspGrid&lt; dim, EquidistantCoordinates&lt; double, dim &gt; &gt; &gt;::type::Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a2464530e13fd82b0741a1a7e2fe3c27d</anchor>
      <arglist>(GeometryType type) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>ab03684917466bb78cd4607e39bf56af4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>a218c27582ccd3e3ba0c878065ee5a840</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; GeometryType &gt;</type>
      <name>types</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aa8ab21402bffd94bf772da5e54ff984d</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>const std::vector&lt; GeometryType &gt; &amp;</type>
      <name>geomTypes</name>
      <anchorfile>a04166.html</anchorfile>
      <anchor>aaffe93fd55ee659e8b8e5812339d014e</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimension</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a53b8ee710f958e0b2d902831dbb708e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>aa1d76fee51dee6af50132a65f5c791b9</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>adbd3a9abd10be944d188274584b1d3d8</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a7ea552ac95b90a26d65efed9c8616e72</anchor>
      <arglist>(const typename Traits::template Codim&lt; cc &gt;::Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>a3f7d3c897da5ae5b9649422ffed42d79</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a02702.html</anchorfile>
      <anchor>afba1972a0dbbd275e0de4fd4d9674ad0</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspIntersection</name>
    <filename>a04158.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>ae0f5b535a716cbf4d82f78def0b265cb</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>acb1a20965159cf7841a4cb3bbb6770b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 0 &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a75cbdced9394b480a8bdad893d40c4e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a5290c428e772df1d58014c35061a6631</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; 1 &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a16fc3aa4b860ed5ce9452550269f08be</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>update</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>af4caeec9e7cf7a274e0daadeb9090f90</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>boundary</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>aee31223b559044fbc014ec3e433cd207</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>neighbor</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a75f387af8c82b28687ce81f070df29b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>conforming</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a553f7f5ea22a383870b3346c0bce62de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>inside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a0c755a86965c55d61c30e53cfecdfaaf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Entity</type>
      <name>outside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>ae407499faf94dbc7b4bd8ff56b427a1c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>boundarySegmentIndex</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a51d273e2deefb0891c4cc9ee77eb3b4c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>outerNormal</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>aec8102c678db5c8641cf904e8a99b1c1</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>unitOuterNormal</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a04f532fdf4880dce5b761c16c1fb2f96</anchor>
      <arglist>(const FieldVector&lt; ctype, dim-1 &gt; &amp;) const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>centerUnitOuterNormal</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>af0ddc137f55629717a2e4ee21a9983d0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>FieldVector&lt; ctype, dimworld &gt;</type>
      <name>integrationOuterNormal</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>ad0279b23f8777dcd982e4b30b972226f</anchor>
      <arglist>([[maybe_unused]] const FieldVector&lt; ctype, dim-1 &gt; &amp;local) const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInInside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a466b2f5aab3ef3cf4389ffdae3a38b82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>LocalGeometry</type>
      <name>geometryInOutside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>add107880041f9fb44877c42aae019522</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Geometry</type>
      <name>geometry</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a1565499caec1738907dd2b43e083828e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>type</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a94ffb60b387a77a70af929a99eb11a6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInInside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>ab989efc6c7e3d39e21cc4cfb5fcb063b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>indexInOutside</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a3f6e0448644defc765d7f7f6bbae3b15</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIntersection</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a3f2765d01543d1a61d1fdd8d9f8b216a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIntersection</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a7802e88ae28da99f0c5721ae0c99dccd</anchor>
      <arglist>(const YaspEntity&lt; 0, dim, GridImp &gt; &amp;myself, bool toend)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>assign</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>ab194e519bb251765d5eb38919dc2372e</anchor>
      <arglist>(const YaspIntersection &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a06eaeb7053a6f7f685a6e12837a927f8</anchor>
      <arglist>(const YaspIntersection &amp;other) const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>YaspIntersectionIterator&lt; GridImp &gt;</name>
      <anchorfile>a04158.html</anchorfile>
      <anchor>a6c38772a78e49f74f56b0316d81073c0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspIntersectionIterator</name>
    <filename>a04154.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>Dune::YaspIntersection&lt; GridImp &gt;</type>
      <name>IntersectionImp</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>a26fca5fec52ab48bda31115f55f4abdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Dune::Intersection&lt; GridImp, IntersectionImp &gt;</type>
      <name>Intersection</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>a27b843ddcb07ed504ad442911703d6e1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>a6f6b1eab1a1dbb89f8272ba96a014a8a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>ace574844259a2fbf26a270f3afb5c8dc</anchor>
      <arglist>(const YaspIntersectionIterator &amp;other) const</arglist>
    </member>
    <member kind="function">
      <type>const Intersection &amp;</type>
      <name>dereference</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>a3559d5408b35bee0ccfdf0cc55916405</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIntersectionIterator</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>ae681e35e72004cdcf17d73dc756850f3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIntersectionIterator</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>ab8da3638a238760279f8cfb1f163f423</anchor>
      <arglist>(const YaspEntity&lt; 0, dim, GridImp &gt; &amp;myself, bool toend)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspIntersectionIterator</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>a1301dd24d3e8ddf5043a5639308f585d</anchor>
      <arglist>(const YaspIntersectionIterator &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>YaspIntersectionIterator &amp;</type>
      <name>operator=</name>
      <anchorfile>a04154.html</anchorfile>
      <anchor>af3d108ae972b69602611cadfaaff7990</anchor>
      <arglist>(const YaspIntersectionIterator &amp;other)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspLevelIterator</name>
    <filename>a04150.html</filename>
    <templarg>codim</templarg>
    <templarg>pitype</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>GridImp::template Codim&lt; codim &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>a6fb7440c61a3072927104cee585c3b56</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGridLevelIterator</type>
      <name>YGLI</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>a4396545a46133d320ca28d8ab5184796</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>GridImp::YGrid::Iterator</type>
      <name>I</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>ac616fa5438ee8c56c88502301e92becd</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>ae43e79fcb64f3f3e65a71e5284d759ff</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspLevelIterator</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>ad07bba3e5ac1d67a0441533ffaa35155</anchor>
      <arglist>(const YGLI &amp;g, const I &amp;it)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>increment</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>aae5d151f7eb89f063bfc2c1582e1a116</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equals</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>ad501d40befc059b0703aaeb80b95999f</anchor>
      <arglist>(const YaspLevelIterator &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>const Entity &amp;</type>
      <name>dereference</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>a7328e9471c7cfae007495223b71d0d9f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Entity</type>
      <name>_entity</name>
      <anchorfile>a04150.html</anchorfile>
      <anchor>a07020e66f4a3911ffa62ee4c731798e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YaspPersistentContainerIndex</name>
    <filename>a04174.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>IndexType</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>acc97799d77743808c24b4cb17e1949f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspPersistentContainerIndex</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a3ccf162629ed3ba1ac86dcd3c47cbabc</anchor>
      <arglist>(const Grid &amp;grid, int codim)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a18d3412b83bbc65807cb8161da90ac8a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a317263e82e143db8e6e18f2015e6c0d8</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a2806f89ae5b327c6f68a1a105ad06439</anchor>
      <arglist>(int) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>YaspPersistentContainerIndex&lt; const YaspGrid&lt; dim, CoordCont &gt; &gt;</name>
    <filename>a04174.html</filename>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>IndexType</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>acc97799d77743808c24b4cb17e1949f4</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YaspPersistentContainerIndex</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a3ccf162629ed3ba1ac86dcd3c47cbabc</anchor>
      <arglist>(const const YaspGrid&lt; dim, CoordCont &gt; &amp;grid, int codim)</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>index</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a18d3412b83bbc65807cb8161da90ac8a</anchor>
      <arglist>(const Entity &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>IndexType</type>
      <name>subIndex</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a317263e82e143db8e6e18f2015e6c0d8</anchor>
      <arglist>(const Entity &amp;e, int i, unsigned int codim) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size</name>
      <anchorfile>a04174.html</anchorfile>
      <anchor>a2806f89ae5b327c6f68a1a105ad06439</anchor>
      <arglist>(int) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YGrid</name>
    <filename>a04322.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::YGrid::Iterator</class>
    <member kind="typedef">
      <type>YGridComponent&lt; Coordinates &gt; *</type>
      <name>DAI</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>afc45056535261124fe201481f87faadd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; int, dim &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>aa75616788b48c339407477829acf4bb3</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBegin</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>ae08f1d95cfe734a2bf46fe7ea8973a8d</anchor>
      <arglist>(DAI begin)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>shiftmapping</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>a41e0fb4ebd43ffae21d53c82865fcd2c</anchor>
      <arglist>(const std::bitset&lt; dim &gt; &amp;shift) const</arglist>
    </member>
    <member kind="function">
      <type>DAI</type>
      <name>dataBegin</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>a707bf0d561157d98d3f9bbf956e1226b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DAI</type>
      <name>dataEnd</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>a9aef2a802516b7e88f1f0e331e06ee32</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>ae1f547753b824e8d673679ac2c6966f6</anchor>
      <arglist>(const iTupel &amp;coord, const std::bitset&lt; dim &gt; &amp;shift=std::bitset&lt; dim &gt;()) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>a9aaca84a89c8ace3500c5933ef937adf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>af2d0ffbe68dbeb0f8c4a5aba75e7aa14</anchor>
      <arglist>(const std::array&lt; int, dim &gt; &amp;coord, int which=0) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>affe096141b2fd2d426ad6b71428c6eab</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>superindex</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>ae86889f49a19d0ad4e9c68a619f06add</anchor>
      <arglist>(const iTupel &amp;coord, int which) const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>afe0f9d52c2489686f9fbcaf8a9304998</anchor>
      <arglist>(const DAI &amp;end, int artificialOffset=0)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>ac11f8c44a60ddb064e2c106dd28805d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>YGrid&lt; Coordinates &gt;::Iterator</name>
      <anchorfile>a04322.html</anchorfile>
      <anchor>a85c949ab02916bf2f8771515ce222240</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YGridComponent</name>
    <filename>a04314.html</filename>
    <templarg></templarg>
    <class kind="class">Dune::YGridComponent::Iterator</class>
    <member kind="typedef">
      <type>Coordinates::ctype</type>
      <name>ct</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a3fcc1cc3f33ea8f73cd1ddb2a50ad094</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a18ed7fcd6f8e2824f4aa7c0a4ef72864</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>FieldVector&lt; ct, d &gt;</type>
      <name>fTupel</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a8bc72880287dea7ff9a30d2b23266aa9</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YGridComponent</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a9d55b79de76d9291582637f16904c9f5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YGridComponent</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a5e086a3db134896fbdb0235944bac5b3</anchor>
      <arglist>(iTupel origin, iTupel size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YGridComponent</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a6cee5f7572c07420cd1d7a4b103d388a</anchor>
      <arglist>(iTupel origin, iTupel size, const YGridComponent&lt; Coordinates &gt; &amp;enclosing)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>YGridComponent</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a733142a899040ff1e284cfbb323c82de</anchor>
      <arglist>(iTupel origin, std::bitset&lt; d &gt; shift, Coordinates *coords, iTupel size, iTupel offset, iTupel supersize)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>origin</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a9f94a5e10fd9b81c88c9f0618110d806</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>origin</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a95965a316b64950b970c67b52f2d8cc9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>shift</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>ac4c3421458054556f174fdf44c876861</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const std::bitset&lt; d &gt; &amp;</type>
      <name>shift</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>aadf5a0930f35f6ebfb775e88ce58253b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Coordinates *</type>
      <name>getCoords</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>aab0e4c27a4bd5fa7cc94c24aa0eaf40e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>offset</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a066ffd5efd380536fe2cd63b31fb479d</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>offset</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>afe43d8f007d25c6ff32a603cb99a07a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>supersize</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>aa313787c8d8d949d1fb3d8a10fb0f11b</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>const iTupel &amp;</type>
      <name>supersize</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a5a579965fe0ad0d47c325007b07af68b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>abb65aac4c96fc23483f9866d89e15fc8</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>iTupel</type>
      <name>size</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a28e1dc5bca6e2f3f95548532406c78a9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>totalsize</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a6b6b6be7ed5644f2839c37c5d1c57821</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a591868ae0811483e1de550a70dc04b49</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>abd1f2ef7bf3de3cdf29d17c7a15eda00</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>empty</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>aebf0ed7d147553aac3a3ac4c6f9e5a90</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>inside</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>ae3429edbdd9f2febd501657ae887d2d2</anchor>
      <arglist>(const iTupel &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>index</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a03d45ce77d620ca77e4a47b3f5003a55</anchor>
      <arglist>(const iTupel &amp;coord) const</arglist>
    </member>
    <member kind="function">
      <type>YGridComponent&lt; Coordinates &gt;</type>
      <name>move</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a9012243ad120b4df960c2774007ecb89</anchor>
      <arglist>(iTupel v) const</arglist>
    </member>
    <member kind="function">
      <type>YGridComponent&lt; Coordinates &gt;</type>
      <name>intersection</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>acbd974d25d9422638bad7a1e315e9f5f</anchor>
      <arglist>(const YGridComponent&lt; Coordinates &gt; &amp;r) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>superindex</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a77b6b4d7dc391aa438ed052b51f9aada</anchor>
      <arglist>(iTupel coord) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>superincrement</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>ac4782a52d0424c290d9e2ba96c29eae0</anchor>
      <arglist>(int i) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a804d453699c18101e15c6e746e6553bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a90a2b35298839f67aeb0d7bf995c1222</anchor>
      <arglist>(const iTupel &amp;co) const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>acbdbdc137f57b5566e8624e331d17d64</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>d</name>
      <anchorfile>a04314.html</anchorfile>
      <anchor>a2af9dafe3cf099d09f4940d003bcde40</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YGridList</name>
    <filename>a04330.html</filename>
    <templarg></templarg>
    <class kind="struct">Dune::YGridList::Intersection</class>
    <class kind="class">Dune::YGridList::Iterator</class>
    <member kind="typedef">
      <type>std::array&lt; std::deque&lt; Intersection &gt;, StaticPower&lt; 2, dim &gt;::power &gt;::iterator</type>
      <name>DAI</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a4e5a703b1b3925806c3982b46839379c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>begin</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a90df99e94e01d82019eaca6243f48a52</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Iterator</type>
      <name>end</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a614a98f0df98b7c465576bc6d36aae71</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>setBegin</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a8fac580d311506aa7e3912cae28b857e</anchor>
      <arglist>(typename std::array&lt; std::deque&lt; Intersection &gt;, StaticPower&lt; 2, dim &gt;::power &gt;::iterator begin)</arglist>
    </member>
    <member kind="function">
      <type>DAI</type>
      <name>dataBegin</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>abef2c9506e02a5a365d7a7355c60d176</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>DAI</type>
      <name>dataEnd</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a801cffe4a0dabea03e4455906f81f142</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a47edf7f19d5b1e3e9cf911c5f188eb63</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>finalize</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>a322cdf17b39cab204790852ec073f18a</anchor>
      <arglist>(DAI end, const YGrid&lt; Coordinates &gt; &amp;ygrid)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dim</name>
      <anchorfile>a04330.html</anchorfile>
      <anchor>abaee207da8080704f1563f3c8ced50e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YLoadBalance</name>
    <filename>a04246.html</filename>
    <templarg>d</templarg>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04246.html</anchorfile>
      <anchor>aff6c1817d7290b72c628d45f54a9c590</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YLoadBalance</name>
      <anchorfile>a04246.html</anchorfile>
      <anchor>ae8887f86ebf7a6098ba442180a47156b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>loadbalance</name>
      <anchorfile>a04246.html</anchorfile>
      <anchor>ae7995b1c6d66c615f64631453ea2fe7c</anchor>
      <arglist>(const iTupel &amp;, int, iTupel &amp;) const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YLoadBalanceDefault</name>
    <filename>a04250.html</filename>
    <templarg>d</templarg>
    <base>Dune::YLoadBalance</base>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04250.html</anchorfile>
      <anchor>add714942041ab1c0d5d358a259c9faf1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YLoadBalanceDefault</name>
      <anchorfile>a04250.html</anchorfile>
      <anchor>a2f2fd81418e6ecfc1b7c2aa09b046a1c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadbalance</name>
      <anchorfile>a04250.html</anchorfile>
      <anchor>a6c816fac482ccc2c7e519aa93b56d7b6</anchor>
      <arglist>(const iTupel &amp;size, int P, iTupel &amp;dims) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>Dune::YLoadBalancePowerD</name>
    <filename>a04254.html</filename>
    <templarg>d</templarg>
    <base>Dune::YLoadBalance</base>
    <member kind="typedef">
      <type>std::array&lt; int, d &gt;</type>
      <name>iTupel</name>
      <anchorfile>a04254.html</anchorfile>
      <anchor>a409375fafc152aac14aeb42860ab8527</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~YLoadBalancePowerD</name>
      <anchorfile>a04254.html</anchorfile>
      <anchor>abd74562edd023b8177997da92be19a42</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>loadbalance</name>
      <anchorfile>a04254.html</anchorfile>
      <anchor>ab845061f9040b74b73042885c0212578</anchor>
      <arglist>(const iTupel &amp;size, int P, iTupel &amp;dims) const</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune</name>
    <filename>a00940.html</filename>
    <namespace>Dune::Alberta</namespace>
    <namespace>Dune::Capabilities</namespace>
    <namespace>Dune::dgf</namespace>
    <namespace>Dune::FactoryUtilities</namespace>
    <namespace>Dune::GeoGrid</namespace>
    <namespace>Dune::Partitions</namespace>
    <namespace>Dune::VTK</namespace>
    <namespace>Dune::Yasp</namespace>
    <class kind="struct">Dune::DGFGridFactory</class>
    <class kind="class">Dune::AlbertaGrid</class>
    <class kind="class">Dune::AlbertaReader</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::Intersection</class>
    <class kind="struct">Dune::DGFGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridTreeIterator</class>
    <class kind="class">Dune::AlbertaGridHierarchicIterator</class>
    <class kind="class">Dune::AlbertaGridLeafIntersection</class>
    <class kind="class">Dune::AlbertaGridLeafIntersectionIterator</class>
    <class kind="class">Dune::AlbertaGridEntity</class>
    <class kind="class">Dune::AlbertaGridEntity&lt; 0, dim, Grid &gt;</class>
    <class kind="class">Dune::AlbertaGridEntitySeed</class>
    <class kind="class">Dune::AlbertaGridEntitySeed&lt; codim, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridEntitySeed&lt; 0, const AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::AlbertaGridCoordinateReader</class>
    <class kind="class">Dune::AlbertaGridGeometry</class>
    <class kind="class">Dune::AlbertaGridGlobalGeometry</class>
    <class kind="class">Dune::AlbertaGridGlobalGeometry&lt; dim, cdim, const AlbertaGrid&lt; dim, cdim &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridLocalGeometryProvider</class>
    <class kind="class">Dune::GeometryReference</class>
    <class kind="class">Dune::LocalGeometryReference</class>
    <class kind="class">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGridEntityPointer</class>
    <class kind="class">Dune::AlbertaGridHierarchicIndexSet</class>
    <class kind="class">Dune::AlbertaGridIdSet</class>
    <class kind="class">Dune::AlbertaGridIndexSet</class>
    <class kind="class">Dune::AlbertaGridLeafIterator</class>
    <class kind="class">Dune::AlbertaGridLevelIterator</class>
    <class kind="struct">Dune::AlbertaGridFamily</class>
    <class kind="class">Dune::AlbertaLevelGridView</class>
    <class kind="class">Dune::AlbertaLeafGridView</class>
    <class kind="struct">Dune::AlbertaLevelGridViewTraits</class>
    <class kind="struct">Dune::AlbertaLeafGridViewTraits</class>
    <class kind="class">Dune::IndexStack</class>
    <class kind="class">Dune::AlbertaGridIntersectionBase</class>
    <class kind="class">Dune::AlbertaGridLeafIterator&lt; codim, Ghost_Partition, GridImp &gt;</class>
    <class kind="class">Dune::AlbertaGridLevelProvider</class>
    <class kind="class">Dune::AlbertaGridLevelIterator&lt; codim, Ghost_Partition, GridImp &gt;</class>
    <class kind="class">Dune::AlbertaError</class>
    <class kind="class">Dune::AlbertaIOError</class>
    <class kind="class">Dune::PersistentContainer&lt; AlbertaGrid&lt; dim, dimworld &gt;, T &gt;</class>
    <class kind="class">Dune::StructuredGridFactory</class>
    <class kind="class">Dune::StructuredGridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaTransformation</class>
    <class kind="class">Dune::AlbertaMarkerVector</class>
    <class kind="class">Dune::AdaptDataHandle</class>
    <class kind="class">Dune::AdaptDataHandleInterface</class>
    <class kind="class">Dune::CombinedAdaptProlongRestrict</class>
    <class kind="class">Dune::BackupRestoreFacility</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; const Grid &gt;</class>
    <class kind="struct">Dune::DuneBoundaryProjection</class>
    <class kind="class">Dune::BoundaryProjectionWrapper</class>
    <class kind="class">Dune::BoundarySegmentWrapper</class>
    <class kind="struct">Dune::CircleBoundaryProjection</class>
    <class kind="struct">Dune::BoundarySegment</class>
    <class kind="class">Dune::BoundarySegmentBackupRestore</class>
    <class kind="class">Dune::MessageBufferIF</class>
    <class kind="class">Dune::CommDataHandleIF</class>
    <class kind="class">Dune::DefaultLevelGridView</class>
    <class kind="class">Dune::DefaultLeafGridView</class>
    <class kind="struct">Dune::DefaultLevelGridViewTraits</class>
    <class kind="struct">Dune::DefaultLeafGridViewTraits</class>
    <class kind="class">Dune::Entity</class>
    <class kind="class">Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;</class>
    <class kind="class">Dune::EntityDefaultImplementation</class>
    <class kind="class">Dune::EntityDefaultImplementation&lt; 0, dim, GridImp, EntityImp &gt;</class>
    <class kind="class">Dune::EntityIterator</class>
    <class kind="class">Dune::EntitySeed</class>
    <class kind="class">Dune::GridError</class>
    <class kind="class">Dune::GridDefaultImplementation</class>
    <class kind="class">Dune::Geometry</class>
    <class kind="class">Dune::GeometryDefaultImplementation</class>
    <class kind="class">Dune::GeometryDefaultImplementation&lt; 0, cdim, GridImp, GeometryImp &gt;</class>
    <class kind="class">Dune::GlobalGeometryReference</class>
    <class kind="class">Dune::IntersectionIterator</class>
    <class kind="class">Dune::IndexSet</class>
    <class kind="class">Dune::IdSet</class>
    <class kind="class">Dune::Grid</class>
    <class kind="struct">Dune::GridTraits</class>
    <class kind="struct">Dune::MakeableInterfaceObject</class>
    <class kind="class">Dune::GridFactoryInterface</class>
    <class kind="class">Dune::GridFactory</class>
    <class kind="class">Dune::GridView</class>
    <class kind="class">Dune::IndexSetDefaultImplementation</class>
    <class kind="class">Dune::IntersectionDefaultNormalVectors</class>
    <class kind="class">Dune::Mapper</class>
    <class kind="class">Dune::MultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LeafMultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LevelMultipleCodimMultipleGeomTypeMapper</class>
    <class kind="struct">Dune::PartitionSet</class>
    <class kind="class">Dune::SingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LeafSingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LevelSingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::SizeCache</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="class">Dune::CachedCoordFunction</class>
    <class kind="class">Dune::AnalyticalCoordFunction</class>
    <class kind="class">Dune::DiscreteCoordFunction</class>
    <class kind="class">Dune::AnalyticalCoordFunctionInterface</class>
    <class kind="class">Dune::DiscreteCoordFunctionInterface</class>
    <class kind="class">Dune::GeometryGrid</class>
    <class kind="class">Dune::DefaultCoordFunction</class>
    <class kind="class">Dune::IdenticalCoordFunction</class>
    <class kind="class">Dune::PersistentContainer&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, T &gt;</class>
    <class kind="class">Dune::IdentityGrid</class>
    <class kind="class">Dune::HostGridAccess</class>
    <class kind="struct">Dune::IdentityGridFamily</class>
    <class kind="class">Dune::IdentityGridEntity</class>
    <class kind="class">Dune::IdentityGridLevelIterator</class>
    <class kind="class">Dune::IdentityGridLevelIntersectionIterator</class>
    <class kind="class">Dune::IdentityGridLeafIntersectionIterator</class>
    <class kind="class">Dune::IdentityGridHierarchicIterator</class>
    <class kind="class">Dune::IdentityGridEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="class">Dune::IdentityGridEntitySeed</class>
    <class kind="class">Dune::IdentityGridGeometry</class>
    <class kind="class">Dune::IdentityGridLevelIndexSet</class>
    <class kind="class">Dune::IdentityGridLeafIndexSet</class>
    <class kind="class">Dune::IdentityGridGlobalIdSet</class>
    <class kind="class">Dune::IdentityGridLocalIdSet</class>
    <class kind="class">Dune::IdentityGridLeafIntersection</class>
    <class kind="class">Dune::IdentityGridLevelIntersection</class>
    <class kind="class">Dune::IdentityGridLeafIterator</class>
    <class kind="class">Dune::AmiraMeshWriter</class>
    <class kind="class">Dune::LevelAmiraMeshWriter</class>
    <class kind="class">Dune::LeafAmiraMeshWriter</class>
    <class kind="class">Dune::DGFException</class>
    <class kind="class">Dune::DGFCoordFunction</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, false &gt;</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, CoordFunction, true &gt;</class>
    <class kind="struct">Dune::DGFCoordFunctionFactory&lt; HostGrid, DGFCoordFunction&lt; dimD, dimR &gt;, false &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; OneDGrid &gt;</class>
    <class kind="class">Dune::DGFPrintInfo</class>
    <class kind="struct">Dune::DGFGridInfo</class>
    <class kind="class">Dune::DGFWriter</class>
    <class kind="struct">Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFGridInfo&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="struct">Dune::DGFEntityKey</class>
    <class kind="struct">Dune::ElementFaceUtil</class>
    <class kind="struct">Dune::GridPtr</class>
    <class kind="class">Dune::MacroGrid</class>
    <class kind="struct">Dune::DGFBoundaryParameter</class>
    <class kind="class">Dune::DuneGridFormatParser</class>
    <class kind="struct">Dune::GmshReaderOptions</class>
    <class kind="class">Dune::GmshReaderParser</class>
    <class kind="class">Dune::GmshReader</class>
    <class kind="class">Dune::GmshWriter</class>
    <class kind="class">Dune::GnuplotWriter</class>
    <class kind="class">Dune::LeafGnuplotWriter</class>
    <class kind="class">Dune::LevelGnuplotWriter</class>
    <class kind="class">Dune::StarCDReader</class>
    <class kind="struct">Dune::b64chunk</class>
    <class kind="class">Dune::VTKFunction</class>
    <class kind="class">Dune::P0VTKFunction</class>
    <class kind="class">Dune::P1VTKFunction</class>
    <class kind="class">Dune::Base64Stream</class>
    <class kind="class">Dune::RawStream</class>
    <class kind="class">Dune::SubsamplingVTKWriter</class>
    <class kind="class">Dune::VTKSequenceWriter</class>
    <class kind="class">Dune::VTKSequenceWriterBase</class>
    <class kind="class">Dune::VTKWriter</class>
    <class kind="struct">Dune::OneDGridFamily</class>
    <class kind="class">Dune::OneDGrid</class>
    <class kind="struct">Dune::UGGridFamily</class>
    <class kind="class">Dune::UGGrid</class>
    <class kind="class">Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;</class>
    <class kind="struct">Dune::EntityCommHelper</class>
    <class kind="struct">Dune::EntityCommHelper&lt; InteriorBorder_InteriorBorder_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; InteriorBorder_All_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; Overlap_OverlapFront_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; Overlap_All_Interface &gt;</class>
    <class kind="struct">Dune::EntityCommHelper&lt; All_All_Interface &gt;</class>
    <class kind="class">Dune::GlobalIndexSet</class>
    <class kind="struct">Dune::EntityInfo</class>
    <class kind="struct">Dune::GridViewInfoGTCompare</class>
    <class kind="struct">Dune::GridViewInfo</class>
    <class kind="class">Dune::HierarchicSearch</class>
    <class kind="struct">Dune::HostGridAccess&lt; GeometryGrid&lt; HG, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::HostGridAccess&lt; IdentityGrid&lt; HG &gt; &gt;</class>
    <class kind="class">Dune::PersistentContainer</class>
    <class kind="class">Dune::PersistentContainer&lt; const Grid, T &gt;</class>
    <class kind="class">Dune::PersistentContainerInterface</class>
    <class kind="class">Dune::PersistentContainerMap</class>
    <class kind="class">Dune::PersistentContainerVector</class>
    <class kind="class">Dune::PersistentContainerWrapper</class>
    <class kind="class">Dune::TensorGridFactoryCreator</class>
    <class kind="class">Dune::TensorGridFactory</class>
    <class kind="class">Dune::TensorGridFactoryCreator&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="class">Dune::VertexOrderByIdFactory</class>
    <class kind="class">Dune::YaspGrid</class>
    <class kind="class">Dune::YaspGeometry</class>
    <class kind="class">Dune::YaspEntity</class>
    <class kind="class">Dune::YaspEntitySeed</class>
    <class kind="class">Dune::YaspLevelIterator</class>
    <class kind="class">Dune::YaspIntersectionIterator</class>
    <class kind="class">Dune::YaspIntersection</class>
    <class kind="class">Dune::YaspHierarchicIterator</class>
    <class kind="class">Dune::YaspIndexSet</class>
    <class kind="class">Dune::YaspGlobalIdSet</class>
    <class kind="class">Dune::YaspPersistentContainerIndex</class>
    <class kind="struct">Dune::YaspGridFamily</class>
    <class kind="struct">Dune::MaybeHaveOrigin</class>
    <class kind="struct">Dune::MaybeHaveOrigin&lt; Dune::EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt;</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; Dune::YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::BackupRestoreFacility&lt; YaspGrid&lt; dim, TensorProductCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="class">Dune::EquidistantCoordinates</class>
    <class kind="class">Dune::EquidistantOffsetCoordinates</class>
    <class kind="class">Dune::TensorProductCoordinates</class>
    <class kind="class">Dune::YLoadBalance</class>
    <class kind="class">Dune::YLoadBalanceDefault</class>
    <class kind="class">Dune::YLoadBalancePowerD</class>
    <class kind="class">Dune::YaspFixedSizePartitioner</class>
    <class kind="class">Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="class">Dune::StructuredGridFactory&lt; YaspGrid&lt; dim, EquidistantOffsetCoordinates&lt; ctype, dim &gt; &gt; &gt;</class>
    <class kind="class">Dune::Torus</class>
    <class kind="class">Dune::YaspEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="class">Dune::YaspEntity&lt; dim, dim, GridImp &gt;</class>
    <class kind="class">Dune::YaspGeometry&lt; mydim, mydim, GridImp &gt;</class>
    <class kind="class">Dune::YaspGeometry&lt; 0, cdim, GridImp &gt;</class>
    <class kind="class">Dune::PersistentContainer&lt; YaspGrid&lt; dim, CoordCont &gt;, T &gt;</class>
    <class kind="class">Dune::YGridComponent</class>
    <class kind="class">Dune::YGrid</class>
    <class kind="class">Dune::YGridList</class>
    <member kind="typedef">
      <type>std::function&lt; size_t(GeometryType, int)&gt;</type>
      <name>MCMGLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gad8aa4cc3c8ae1053f70788625f0b5857</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>AxisAlignedCubeGeometry&lt; double, mydim, coorddim &gt;</type>
      <name>OneDGridGeometry</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a95dfaabfd00063ad5bd988583a6629c1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CollectiveCommunication&lt; No_Comm &gt;</type>
      <name>UGCollectiveCommunication</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>aca0e244f2315c2955492bfa4c7804ae7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>CollectiveCommunication&lt; MPI_Comm &gt;</type>
      <name>YaspCollectiveCommunication</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a40da26e5936a3d0e4224ae8cf6a6330a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PartitionType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabd89b77709db1d9e56bb17cd0aa44c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da1cdad324759fb0e56c7f035d91f7e4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BorderEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da5886f9fc2fac0eb986874fb2e682fb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3daec5e1e5ba1c055301aae842f46640850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrontEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da0eb7fb9965359955e50690291d9f6d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GhostEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da4db612fa448bc15ef7581235c17e17ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gae799a4296824c1d4ae0d82e71287b722</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_InteriorBorder_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a8b8e3364d9c34ed2e31f038479012f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a05cadca133ee23c967950c19bcbe4b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_OverlapFront_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a63cd8ac44d5a4cbb8cd1a4176e6b2965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a41fd52a5f00a85c7df011f9c532ed98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a22b151c5173503a7f39a3bd93ed6300d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PartitionIteratorType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gaa5b9e8102d7f70f3f4178182629d98b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Interior_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a842081c435caefdae9580c93720e35b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a8da384ab42a2918b7cf88220328cff19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a906b14970777b3ed8927c95029f6158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapFront_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a5fc7e992b7cd9112ef84af4daa417a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a3026c69cd558fe3687c11f45966905e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ghost_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a90c5b1d5dc07ddecbf0fc09db7544216</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CommunicationDirection</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacf00ef51e7964e5797de12e1bdf8d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a16096429617fc1e0db063aa7d0539703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a109be42b107eef1f3de8fdcf3df59dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static void</type>
      <name>checkAlbertaDimensions</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a9add90da0373ad65d2bb698209911981</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>referenceElement</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ab0aca997f2038524be12174596d09262</anchor>
      <arglist>(const Geometry&lt; mydim, cdim, GridImp, GeometryImp &gt; &amp;geo) -&gt; decltype(referenceElement(geo, geo.impl()))</arglist>
    </member>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga905f92edbd804596d2735d3045a3cc30</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga54897a506a84f9b94f0acc75b176b0cd</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>PartitionName</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga93b58eeb427bbeafe9bd7d460a1603cc</anchor>
      <arglist>(PartitionType type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacac688b252435fccd21c3199ffaaf076</anchor>
      <arglist>(std::ostream &amp;out, const PartitionType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabe3ea0bc4acb9ad23a40a4761a0f72ad</anchor>
      <arglist>(std::ostream &amp;out, const InterfaceType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga9641e43de5a57f7c1a2345cfdcef3d33</anchor>
      <arglist>(std::ostream &amp;out, const PartitionIteratorType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridinfo</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga24b86a9e333c8b8aaaa95acd627327b3</anchor>
      <arglist>(const G &amp;grid, std::string prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridlevellist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga7590ed575bdde97f4488d05b343398cf</anchor>
      <arglist>(const G &amp;grid, int level, std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridleaflist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>gab8979891c5f4fce47692eaf01cd4b985</anchor>
      <arglist>(const G &amp;grid, std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga2e82df0d1c8ad3e2db3a7c765c431b72</anchor>
      <arglist>(Codim&lt; codim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga08aae36ce3194378c4aafa398bfdec70</anchor>
      <arglist>(Dim&lt; dim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgElementLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga3f08c3fdd04f64bac3140926732b4b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgVertexLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gae9caf92c46fedd5287c5e011dcbdd3b5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static const std::string</type>
      <name>dgfid</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a03a08fe7daf28835f1dbf203d777c47e</anchor>
      <arglist>(&quot;DGF&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printGrid</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a404bf57dcdbc6881d6d7bd4258a05416</anchor>
      <arglist>(const GridType &amp;grid, const Dune::MPIHelper &amp;helper, std::string output_file=&quot;printgrid&quot;, int size=2000, bool execute_plot=true, bool png=true, bool local_corner_indices=true, bool local_intersection_indices=true, bool outer_normals=true)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fillGridViewInfoSerial</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a4217251cdcb94f8bf2db77f8eafe0323</anchor>
      <arglist>(const GV &amp;gv, GridViewInfo&lt; typename GV::ctype &gt; &amp;gridViewInfo)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ae3df34f7b610ec0f8d564e7e10de8d2e</anchor>
      <arglist>(std::ostream &amp;s, const YaspGrid&lt; d, CC &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ae5cc7b42420505a8484774dcd6df6538</anchor>
      <arglist>(std::ostream &amp;s, EquidistantCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a3ef78eb9a547d8401cc2b452429e3598</anchor>
      <arglist>(std::ostream &amp;s, EquidistantOffsetCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a4b79ad3b0e1489f0ac98c284bbb8956b</anchor>
      <arglist>(std::ostream &amp;s, TensorProductCoordinates&lt; ct, dim &gt; &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>adbcd9c9928bb5c66940cd3e96486373c</anchor>
      <arglist>(std::ostream &amp;s, const Torus&lt; CollectiveCommunication, d &gt; &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a646977476ed08ee0a87ac20b1e3562d9</anchor>
      <arglist>(std::ostream &amp;s, YGridComponent&lt; Coordinates &gt; e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0184436d38874e153094f1aa630012b5</anchor>
      <arglist>(std::ostream &amp;s, typename YGridComponent&lt; Coordinates &gt;::Iterator &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>ada57b0fd9328de17641ea3ce9f99c235</anchor>
      <arglist>(std::ostream &amp;s, const YGrid&lt; Coordinates &gt; &amp;e)</arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>yaspgrid_dim_bits</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a47d82c4597a3245c5fa19240ae467d9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const int</type>
      <name>yaspgrid_level_bits</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a2ddc8e6630dbaa4fb81725387d035e7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>base64table</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0f8eaefa183de6150378561ac93d210a</anchor>
      <arglist>[]</arglist>
    </member>
    <member kind="variable">
      <type>const char</type>
      <name>base64table</name>
      <anchorfile>a00940.html</anchorfile>
      <anchor>a0f8eaefa183de6150378561ac93d210a</anchor>
      <arglist>[]</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Alberta</name>
    <filename>a00941.html</filename>
    <class kind="class">Dune::Alberta::CoordCache</class>
    <class kind="class">Dune::Alberta::AdaptRestrictProlongHandler</class>
    <class kind="class">Dune::Alberta::MeshPointer</class>
    <class kind="class">Dune::Alberta::DofAccess</class>
    <class kind="class">Dune::Alberta::HierarchyDofNumbering</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; int &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; signed char &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; unsigned char &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; Real &gt;</class>
    <class kind="struct">Dune::Alberta::DofVectorProvider&lt; GlobalVector &gt;</class>
    <class kind="class">Dune::Alberta::DofVectorPointer</class>
    <class kind="class">Dune::Alberta::ElementInfo</class>
    <class kind="class">Dune::Alberta::GeometryCache</class>
    <class kind="struct">Dune::Alberta::GeometryCacheProxy</class>
    <class kind="class">Dune::Alberta::MacroData</class>
    <class kind="struct">Dune::Alberta::MacroElement</class>
    <class kind="class">Dune::Alberta::GlobalSpace</class>
    <class kind="struct">Dune::Alberta::NumSubEntities</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 0, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::NumSubEntities&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::CodimType&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::FillFlags</class>
    <class kind="struct">Dune::Alberta::RefinementEdge</class>
    <class kind="struct">Dune::Alberta::RefinementEdge&lt; 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Dune2AlbertaNumbering</class>
    <class kind="struct">Dune::Alberta::Dune2AlbertaNumbering&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; dim, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; 1, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Generic2AlbertaNumbering&lt; 3, 2 &gt;</class>
    <class kind="class">Dune::Alberta::NumberingMap</class>
    <class kind="struct">Dune::Alberta::MapVertices</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::MapVertices&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::Twist</class>
    <class kind="struct">Dune::Alberta::Twist&lt; dim, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; 1, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; dim, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::Twist&lt; 2, 2 &gt;</class>
    <class kind="class">Dune::Alberta::ProjectionFactory</class>
    <class kind="class">Dune::Alberta::DuneBoundaryProjection</class>
    <class kind="class">Dune::Alberta::ProjectionFactoryInterface</class>
    <class kind="class">Dune::Alberta::DuneGlobalBoundaryProjectionFactory</class>
    <class kind="struct">Dune::Alberta::BasicNodeProjection</class>
    <class kind="class">Dune::Alberta::NodeProjection</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild</class>
    <class kind="class">Dune::Alberta::Patch</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; dim, 0 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; dim, dim &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 2, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 3, 1 &gt;</class>
    <class kind="struct">Dune::Alberta::ForEachInteriorSubChild&lt; 3, 2 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 1 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 2 &gt;</class>
    <class kind="struct">Dune::Alberta::GeometryInFather&lt; 3 &gt;</class>
    <member kind="typedef">
      <type>Dune::IndexStack&lt; int, 100000 &gt;</type>
      <name>IndexStack</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1347de0929889ac7902b4b0840febe38</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL</type>
      <name>Real</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a86b942cdffce80f98973c987ea6246da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_B</type>
      <name>LocalVector</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a507da1d491ffc23d26a668371592cea7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_D</type>
      <name>GlobalVector</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>af1650cccce3ce5a4c8ab8eb240d3c58a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA REAL_DD</type>
      <name>GlobalMatrix</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a3982ba26d2ca1b978ad5dfc99225babc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA AFF_TRAFO</type>
      <name>AffineTransformation</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a3a811627cd147103ac01aa962c25a98d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA MESH</type>
      <name>Mesh</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a177e94fd8d51ddcd47f3fa3f7add13b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA EL</type>
      <name>Element</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a738666cf4bcd352ecee6a5dc484bb92c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA BNDRY_TYPE</type>
      <name>BoundaryId</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a763532db520e16a3ea6d45e06f6acf53</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>U_CHAR</type>
      <name>ElementType</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae4208ed076c295f716febf9bbecb7eaf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ALBERTA FE_SPACE</type>
      <name>DofSpace</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ab91172fc7cfde36bfa7dc9be768e71c2</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static FieldVector&lt; K, 3 &gt;</type>
      <name>vectorProduct</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ac9ec1689c4568d01644db2bfee5947f6</anchor>
      <arglist>(const FieldVector&lt; K, 3 &gt; &amp;u, const FieldVector&lt; K, 3 &gt; &amp;v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a98df257ae8b8275f40f1d10e6c939542</anchor>
      <arglist>([[maybe_unused]] const FieldMatrix&lt; K, 0, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>afc60da48ba5f2c2004ed04c7b82c0348</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ac94d97a6c966088af621ff3215125ab8</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a0c69724eeab70701d1104137cef01693</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a81beb9f173349a78b42547a5fe103355</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 3 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a0a2b233c25e9dbc55a5671d0b2225d19</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, m &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>determinant</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a8a2ac848ea222d8ddc7860b8c2348460</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a376a2bb46f272e0b676174c4e0432598</anchor>
      <arglist>([[maybe_unused]] const FieldMatrix&lt; K, 0, m &gt; &amp;matrix, [[maybe_unused]] FieldMatrix&lt; K, m, 0 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a74e11a373cb5034654a0014c09aed9a5</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, 1 &gt; &amp;matrix, FieldMatrix&lt; K, 1, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a365df9ca0786933adddf610931f50ebb</anchor>
      <arglist>(const FieldMatrix&lt; K, 1, m &gt; &amp;matrix, FieldMatrix&lt; K, m, 1 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>adfb3a843fe4f2ab42b4243e5d307cd12</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, 2 &gt; &amp;matrix, FieldMatrix&lt; K, 2, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a2c7c32c5be01d881c2a7e854bb16ce4a</anchor>
      <arglist>(const FieldMatrix&lt; K, 2, m &gt; &amp;matrix, FieldMatrix&lt; K, m, 2 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static K</type>
      <name>invert</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a80ef0155e5a1707187ac43a86b4e3295</anchor>
      <arglist>(const FieldMatrix&lt; K, 3, 3 &gt; &amp;matrix, FieldMatrix&lt; K, 3, 3 &gt; &amp;inverse)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>abs</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a32f1dea9b87299c0e24ab46760391400</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>max</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ad67366c3c67a2ca2e728b4276e37324e</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>min</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>aca064a9bc66806f78ea771e804e5582d</anchor>
      <arglist>(const DofVectorPointer&lt; int &gt; &amp;dofVector)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>acff75bf43c12bbb2ccaa33cc3ba0f385</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memCAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a4145abe871ba99fcd65272c451140ba8</anchor>
      <arglist>(size_t size)</arglist>
    </member>
    <member kind="function">
      <type>Data *</type>
      <name>memReAlloc</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae736c05b749416fe30934406d0cd9beb</anchor>
      <arglist>(Data *ptr, size_t oldSize, size_t newSize)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>memFree</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1cd9e29864c4d60bb638421fafe4b21d</anchor>
      <arglist>(Data *ptr, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyTwist</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a17ad1f259da15d8dc2fb02ddff20c24f</anchor>
      <arglist>(int twist, int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>applyInverseTwist</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a1419951e5bb7d86001f1e3b09ba8f6ae</anchor>
      <arglist>(int twist, int i)</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static void *</type>
      <name>adaptationDataHandler_</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ae8607628dd0ee8dfb96046221b374752</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>dimWorld</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>acc4a01c16d41d4e3e6e5d058b86376ca</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>meshRefined</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>aa5da9b62cec15c9358c9a588a2e47e77</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>meshCoarsened</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>af15315ba707766140aa520c2b4aac497</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>InteriorBoundary</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>a786cfa45de7b3e49635a43ad99326681</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static const int</type>
      <name>DirichletBoundary</name>
      <anchorfile>a00941.html</anchorfile>
      <anchor>ab69512acf0aeb91b093af2ef4ce2de4b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Capabilities</name>
    <filename>a00942.html</filename>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHierarchicIndexSet</class>
    <class kind="struct">Dune::Capabilities::hasHierarchicIndexSet&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType</class>
    <class kind="struct">Dune::Capabilities::isCartesian</class>
    <class kind="struct">Dune::Capabilities::hasEntity</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator</class>
    <class kind="struct">Dune::Capabilities::hasGeometry</class>
    <class kind="struct">Dune::Capabilities::canCommunicate</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
    <class kind="struct">Dune::Capabilities::threadSafe</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::isCartesian&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::threadSafe&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe&lt; const Grid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; Grid&lt; dim, dimworld, ct, GridFamily &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; GridDefaultImplementation&lt; dim, dimworld, ct, GridFamily &gt;, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::threadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHostEntity</class>
    <class kind="struct">Dune::Capabilities::hasHostEntity&lt; const Grid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasHostEntity&lt; GeometryGrid&lt; HostGrid, CoordFunction, Allocator &gt;, codim &gt;</class>
    <class kind="class">Dune::Capabilities::CodimCache</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; OneDGrid, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; OneDGrid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, 0 &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, dim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isCartesian&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::dgf</name>
    <filename>a00946.html</filename>
    <namespace>Dune::dgf::Expr</namespace>
    <class kind="class">Dune::dgf::BasicBlock</class>
    <class kind="struct">Dune::dgf::DomainData</class>
    <class kind="struct">Dune::dgf::Domain</class>
    <class kind="class">Dune::dgf::BoundaryDomBlock</class>
    <class kind="class">Dune::dgf::BoundarySegBlock</class>
    <class kind="class">Dune::dgf::CubeBlock</class>
    <class kind="class">Dune::dgf::DimBlock</class>
    <class kind="class">Dune::dgf::GeneralBlock</class>
    <class kind="class">Dune::dgf::GridParameterBlock</class>
    <class kind="struct">Dune::dgf::IntervalBlock</class>
    <class kind="struct">Dune::dgf::PeriodicFaceTransformationBlock</class>
    <class kind="struct">Dune::dgf::PolygonBlock</class>
    <class kind="struct">Dune::dgf::PolyhedronBlock</class>
    <class kind="class">Dune::dgf::ProjectionBlock</class>
    <class kind="class">Dune::dgf::SimplexBlock</class>
    <class kind="class">Dune::dgf::SimplexGenerationBlock</class>
    <class kind="class">Dune::dgf::VertexBlock</class>
    <class kind="struct">Dune::dgf::UGGridParameterBlock</class>
    <class kind="class">Dune::dgf::YaspGridParameterBlock</class>
    <member kind="function">
      <type>void</type>
      <name>makeupcase</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>abb5725b92483f9a9581a95eba48de26b</anchor>
      <arglist>(std ::string &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>ae7864ae46a8cd05b47abaa6f6ab38123</anchor>
      <arglist>(std::ostream &amp;out, const IntervalBlock::Interval &amp;interval)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>a01f2a15383a88901742abfa93e3ed88b</anchor>
      <arglist>(std::ostream &amp;out, const PeriodicFaceTransformationBlock::AffineTransformation &amp;trafo)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00946.html</anchorfile>
      <anchor>a0404555c6f1763aa0e2c532e9c2a5c8e</anchor>
      <arglist>(std::ostream &amp;out, const ProjectionBlock::Token &amp;token)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::dgf::Expr</name>
    <filename>a00947.html</filename>
    <class kind="struct">Dune::dgf::Expr::ConstantExpression</class>
    <class kind="struct">Dune::dgf::Expr::VariableExpression</class>
    <class kind="struct">Dune::dgf::Expr::FunctionCallExpression</class>
    <class kind="struct">Dune::dgf::Expr::VectorExpression</class>
    <class kind="struct">Dune::dgf::Expr::BracketExpression</class>
    <class kind="struct">Dune::dgf::Expr::MinusExpression</class>
    <class kind="struct">Dune::dgf::Expr::NormExpression</class>
    <class kind="struct">Dune::dgf::Expr::SqrtExpression</class>
    <class kind="struct">Dune::dgf::Expr::SinExpression</class>
    <class kind="struct">Dune::dgf::Expr::CosExpression</class>
    <class kind="struct">Dune::dgf::Expr::PowerExpression</class>
    <class kind="struct">Dune::dgf::Expr::SumExpression</class>
    <class kind="struct">Dune::dgf::Expr::DifferenceExpression</class>
    <class kind="struct">Dune::dgf::Expr::ProductExpression</class>
    <class kind="struct">Dune::dgf::Expr::QuotientExpression</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::FactoryUtilities</name>
    <filename>a00953.html</filename>
    <class kind="class">Dune::FactoryUtilities::MultiIndex</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::GeoGrid</name>
    <filename>a00945.html</filename>
    <class kind="class">Dune::GeoGrid::BackupRestoreFacilities</class>
    <class kind="class">Dune::GeoGrid::BackupRestoreFacilities&lt; Grid, true &gt;</class>
    <class kind="class">Dune::GeoGrid::CoordCache</class>
    <class kind="struct">Dune::GeoGrid::isCoordFunctionInterface</class>
    <class kind="struct">Dune::GeoGrid::isDiscreteCoordFunctionInterface</class>
    <class kind="struct">Dune::GeoGrid::AdaptCoordFunction</class>
    <class kind="class">Dune::GeoGrid::CoordFunctionCaller</class>
    <class kind="class">Dune::GeoGrid::CoordVector</class>
    <class kind="class">Dune::GeoGrid::CoordVector&lt; mydim, Grid, false &gt;</class>
    <class kind="class">Dune::GeoGrid::CoordVector&lt; mydim, Grid, true &gt;</class>
    <class kind="class">Dune::GeoGrid::IntersectionCoordVector</class>
    <class kind="class">Dune::GeoGrid::CornerStorage</class>
    <class kind="class">Dune::GeoGrid::CommDataHandle</class>
    <class kind="class">Dune::GeoGrid::EntityBase</class>
    <class kind="class">Dune::GeoGrid::Entity</class>
    <class kind="class">Dune::GeoGrid::HierarchicIterator</class>
    <class kind="class">Dune::GeoGrid::IntersectionIterator</class>
    <class kind="class">Dune::GeoGrid::EntityBase&lt; codim, Grid, false &gt;</class>
    <class kind="class">Dune::GeoGrid::EntityBase&lt; codim, Grid, true &gt;</class>
    <class kind="class">Dune::GeoGrid::Entity&lt; 0, dim, Grid &gt;</class>
    <class kind="class">Dune::GeoGrid::EntitySeed</class>
    <class kind="class">Dune::GeoGrid::EntitySeed&lt; codim, Grd, false &gt;</class>
    <class kind="class">Dune::GeoGrid::EntitySeed&lt; codim, Grd, true &gt;</class>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType</class>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 1 &gt;</class>
    <class kind="struct">Dune::GeoGrid::InferHasSingleGeometryType&lt; hasSingleGeometryType, dim, 0 &gt;</class>
    <class kind="struct">Dune::GeoGrid::GeometryTraits</class>
    <class kind="class">Dune::GeoGrid::Geometry</class>
    <class kind="class">Dune::GeoGrid::ExportParams</class>
    <class kind="struct">Dune::GeoGrid::GridFamily</class>
    <class kind="class">Dune::GeoGrid::GridView</class>
    <class kind="class">Dune::GeoGrid::GridViewTraits</class>
    <class kind="class">Dune::GeoGrid::HostCorners</class>
    <class kind="class">Dune::GeoGrid::IdSet</class>
    <class kind="class">Dune::GeoGrid::IndexSet</class>
    <class kind="class">Dune::GeoGrid::Intersection</class>
    <class kind="class">Dune::GeoGrid::Iterator</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Interior_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, InteriorBorder_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Overlap_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, OverlapFront_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, All_Partition, Grid &gt;</class>
    <class kind="struct">Dune::GeoGrid::PartitionIteratorFilter&lt; codim, Ghost_Partition, Grid &gt;</class>
    <class kind="class">Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, false &gt;</class>
    <class kind="class">Dune::GeoGrid::Iterator&lt; HostGridView, codim, pitype, G, true &gt;</class>
  </compound>
  <compound kind="namespace">
    <name>Dune::Partitions</name>
    <filename>a00944.html</filename>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Interior</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a819a107a31ef27ef8fb96bd4f0293499</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Border</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a35269dd45107decfaa18bcdbbbfdee54</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Overlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a67f9a78701aa72f9f4886a60ea3d54e4</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Front</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a41cd6cf71a28a82f0bb64f2c141b63c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>Ghost</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad5d419a9a7677c67d9f4b5adf9f7e42c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorder</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a0f2a664762b0085418afbf32f37abccf</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorderOverlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ada242b3d12c48d8b29ea67ed233a23cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>InteriorBorderOverlapFront</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>adc4235a043fdeec47a156ff90b0502af</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>PartitionSet&lt;... &gt;</type>
      <name>All</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a0373c95b5fd8584adb547b79ae42062f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Interior</type>
      <name>interior</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>af39b89b2239cd60e67d1a45de71213e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Border</type>
      <name>border</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a7ace900600d4eaf40626e68237d70b9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Overlap</type>
      <name>overlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a007ce60f383ed3ed9162055da65ce905</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Front</type>
      <name>front</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad9489ba36997b7037af38158600d3f12</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr Ghost</type>
      <name>ghost</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a36e6d3125f6bdda6488c873124dec872</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorder</type>
      <name>interiorBorder</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ad531da03bde889c2e7db8a87d4017cb5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorderOverlap</type>
      <name>interiorBorderOverlap</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>ae8bc465a17c4ea80baaabf3bc8d2b97e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr InteriorBorderOverlapFront</type>
      <name>interiorBorderOverlapFront</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a4dd92bd13a3fad78c24a5440f79a2f7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr All</type>
      <name>all</name>
      <anchorfile>a00944.html</anchorfile>
      <anchor>a1db4b787d5e75e6a56002e915d5a5c92</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::VTK</name>
    <filename>a00951.html</filename>
    <class kind="class">Dune::VTK::BasicWriter</class>
    <class kind="class">Dune::VTK::BoundaryIterator</class>
    <class kind="class">Dune::VTK::IntersectionIndexSet</class>
    <class kind="class">Dune::VTK::NonConformingBoundaryIteratorFactory</class>
    <class kind="class">Dune::VTK::NonConformingBoundaryWriter</class>
    <class kind="struct">Dune::VTK::PrintType</class>
    <class kind="struct">Dune::VTK::PrintType&lt; unsigned char &gt;</class>
    <class kind="struct">Dune::VTK::PrintType&lt; signed char &gt;</class>
    <class kind="struct">Dune::VTK::PrintType&lt; char &gt;</class>
    <class kind="class">Dune::VTK::FieldInfo</class>
    <class kind="class">Dune::VTK::Corner</class>
    <class kind="class">Dune::VTK::CornerIterator</class>
    <class kind="class">Dune::VTK::DataArrayWriter</class>
    <class kind="class">Dune::VTK::AsciiDataArrayWriter</class>
    <class kind="class">Dune::VTK::BinaryDataArrayWriter</class>
    <class kind="class">Dune::VTK::AppendedRawDataArrayWriter</class>
    <class kind="class">Dune::VTK::AppendedBase64DataArrayWriter</class>
    <class kind="class">Dune::VTK::NakedBase64DataArrayWriter</class>
    <class kind="class">Dune::VTK::NakedRawDataArrayWriter</class>
    <class kind="class">Dune::VTK::DataArrayWriterFactory</class>
    <class kind="class">Dune::VTK::FunctionWriterBase</class>
    <class kind="class">Dune::VTK::VTKFunctionWriter</class>
    <class kind="class">Dune::VTK::CoordinatesWriter</class>
    <class kind="class">Dune::VTK::ConformingConnectivityWriter</class>
    <class kind="class">Dune::VTK::NonConformingConnectivityWriter</class>
    <class kind="class">Dune::VTK::OffsetsWriter</class>
    <class kind="class">Dune::VTK::TypesWriter</class>
    <class kind="class">Dune::VTK::PointIterator</class>
    <class kind="class">Dune::VTK::PVTUWriter</class>
    <class kind="struct">Dune::VTK::SkeletonFunctionTraits</class>
    <class kind="class">Dune::VTK::SkeletonFunctionInterface</class>
    <class kind="class">Dune::VTK::SkeletonFunctionWriter</class>
    <class kind="class">Dune::VTK::ConformingVolumeIteratorFactory</class>
    <class kind="class">Dune::VTK::NonConformingVolumeIteratorFactory</class>
    <class kind="class">Dune::VTK::ConformingVolumeWriter</class>
    <class kind="class">Dune::VTK::VTUWriter</class>
    <member kind="enumeration">
      <type></type>
      <name>OutputType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ascii</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8a21edb20202b6eaae84d2a13937efda27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>base64</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8ac373bd09607ef8537181b4cd476db211</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appendedraw</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8a8d9882e8146514d4b8e3b1e69239aaf5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>appendedbase64</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a256815237356e8c99c97e7debb1dabf8ab582a7ce6102d5a4f413d930d44f2a25</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>DataMode</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312a293015461843c4dee42c41191a82f60d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>nonconforming</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a4e39cac1185c9bce3ad9f4e72bd36312aad7b0e41ffa9e0f8000ecee2b36bd91a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>GeometryType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>vertex</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faa73937549503da3b2e8acd20e667f041</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>line</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa0ccb47e66e9e878460066ff83b95ce44</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>triangle</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faef7040fbdcd298cfe28bd275bc3c344c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polygon</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44faf3c7b04406fb9a5407c4c3ae5ad1ef1c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>quadrilateral</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa93b095b5c9bda1d364e6e7bf636229e2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>tetrahedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fad0a3de136ec998196fef52bf33370fc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>hexahedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fae59e8366bab2005e87da6ba5cbea66fe</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>prism</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fad5d0ae3dd1aa17ac4f92e5fe35867c5e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>pyramid</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa234c09b720019d3750ad7506608c4fe2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polyhedron</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>aceb67a16cc6beb52f71ba8a06d6ef44fa6245fd8594b847416946701d85c7ebb2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>FileType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>polyData</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4a109b9e75c1921dd6b8df25eedea009be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>unstructuredGrid</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a419fffea9dd82b7dda0e7078889da6d4a2967b7a61021e24289adcd0b7d60bd0b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Precision</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a1a23264dcb4d2ffc9b85507ffa2741af</anchor>
      <arglist></arglist>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa0241adbbd83925f051b694d40f02747f">int32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa5f423e669d0a8f4ab7c4c3e6da27161a">uint8</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afa3de84ad0700f2a1571f633d399e1900e">uint32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afad33ec2b0bbea6d471a4706cea030e1e3">float32</enumvalue>
      <enumvalue file="a00951.html" anchor="a1a23264dcb4d2ffc9b85507ffa2741afafb7fa22ede616c04c68a7663d0f81e92">float64</enumvalue>
    </member>
    <member kind="function">
      <type>GeometryType</type>
      <name>geometryType</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a61dcce1ca0a60b52e4021bcd09db1dad</anchor>
      <arglist>(const Dune::GeometryType &amp;t)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>renumber</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a2efc42a6a41effe62a8ea3560a5b8a8d</anchor>
      <arglist>(const Dune::GeometryType &amp;t, int i)</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>renumber</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>abe32a5b3a9cda5294c113258e3bc174f</anchor>
      <arglist>(const T &amp;t, int i)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>getEndiannessString</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a8bce02a1111502dd0245e7888a532fc5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>toString</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a48c0538f36588dc8d46cdd54163cdcd1</anchor>
      <arglist>(Precision p)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>typeSize</name>
      <anchorfile>a00951.html</anchorfile>
      <anchor>a559af2a4ab217c95a0b9738920cf9391</anchor>
      <arglist>(Precision p)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>Dune::Yasp</name>
    <filename>a00954.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>checkIfMonotonous</name>
      <anchorfile>a00954.html</anchorfile>
      <anchor>a33c1f696f7736c183ec2af79ab5e0ce8</anchor>
      <arglist>(const std::array&lt; std::vector&lt; ctype &gt;, dim &gt; &amp;coords)</arglist>
    </member>
    <member kind="function">
      <type>std::array&lt; int, d &gt;</type>
      <name>sizeArray</name>
      <anchorfile>a00954.html</anchorfile>
      <anchor>a42876f9b3603ca618b3f5fa44409a627</anchor>
      <arglist>(const std::array&lt; std::vector&lt; ct &gt;, d &gt; &amp;v)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>Grid</name>
    <title>dune-grid</title>
    <filename>a00905.html</filename>
    <subgroup>GridInterface</subgroup>
    <subgroup>Mapper</subgroup>
    <subgroup>GridImplementations</subgroup>
    <subgroup>IO</subgroup>
    <subgroup>GridDevel</subgroup>
    <member kind="function">
      <type>void</type>
      <name>gridinfo</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga24b86a9e333c8b8aaaa95acd627327b3</anchor>
      <arglist>(const G &amp;grid, std::string prefix=&quot;&quot;)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridlevellist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>ga7590ed575bdde97f4488d05b343398cf</anchor>
      <arglist>(const G &amp;grid, int level, std::string prefix)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>gridleaflist</name>
      <anchorfile>a00905.html</anchorfile>
      <anchor>gab8979891c5f4fce47692eaf01cd4b985</anchor>
      <arglist>(const G &amp;grid, std::string prefix)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>grid_recipes</name>
    <title>dune-grid recipes</title>
    <filename>a00906.html</filename>
    <page>a00906</page>
  </compound>
  <compound kind="group">
    <name>GridInterface</name>
    <title>The Grid Interface</title>
    <filename>a00907.html</filename>
    <subgroup>GIRelatedTypes</subgroup>
    <subgroup>GIGrid</subgroup>
    <subgroup>GIGridView</subgroup>
    <subgroup>GIEntity</subgroup>
    <subgroup>GIGeometry</subgroup>
    <subgroup>GIEntityPointer</subgroup>
    <subgroup>GIIntersectionIterator</subgroup>
    <subgroup>GIIteration</subgroup>
    <subgroup>IndexIdSets</subgroup>
    <subgroup>GICollectiveCommunication</subgroup>
    <subgroup>GIMiscellaneous</subgroup>
    <subgroup>GICapabilities</subgroup>
  </compound>
  <compound kind="group">
    <name>GIRelatedTypes</name>
    <title>Related types and enumerations</title>
    <filename>a00908.html</filename>
    <class kind="struct">Dune::PartitionSet</class>
    <member kind="enumeration">
      <type></type>
      <name>PartitionType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabd89b77709db1d9e56bb17cd0aa44c3d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da1cdad324759fb0e56c7f035d91f7e4b8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BorderEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da5886f9fc2fac0eb986874fb2e682fb80</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3daec5e1e5ba1c055301aae842f46640850</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>FrontEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da0eb7fb9965359955e50690291d9f6d9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>GhostEntity</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggabd89b77709db1d9e56bb17cd0aa44c3da4db612fa448bc15ef7581235c17e17ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>InterfaceType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gae799a4296824c1d4ae0d82e71287b722</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_InteriorBorder_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a8b8e3364d9c34ed2e31f038479012f4f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a05cadca133ee23c967950c19bcbe4b85</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_OverlapFront_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a63cd8ac44d5a4cbb8cd1a4176e6b2965</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a41fd52a5f00a85c7df011f9c532ed98f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_All_Interface</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggae799a4296824c1d4ae0d82e71287b722a22b151c5173503a7f39a3bd93ed6300d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>PartitionIteratorType</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gaa5b9e8102d7f70f3f4178182629d98b6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Interior_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a842081c435caefdae9580c93720e35b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>InteriorBorder_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a8da384ab42a2918b7cf88220328cff19</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Overlap_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a906b14970777b3ed8927c95029f6158d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>OverlapFront_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a5fc7e992b7cd9112ef84af4daa417a84</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>All_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a3026c69cd558fe3687c11f45966905e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>Ghost_Partition</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggaa5b9e8102d7f70f3f4178182629d98b6a90c5b1d5dc07ddecbf0fc09db7544216</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>CommunicationDirection</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacf00ef51e7964e5797de12e1bdf8d755</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ForwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a16096429617fc1e0db063aa7d0539703</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>BackwardCommunication</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ggacf00ef51e7964e5797de12e1bdf8d755a109be42b107eef1f3de8fdcf3df59dd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>PartitionName</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga93b58eeb427bbeafe9bd7d460a1603cc</anchor>
      <arglist>(PartitionType type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gacac688b252435fccd21c3199ffaaf076</anchor>
      <arglist>(std::ostream &amp;out, const PartitionType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gabe3ea0bc4acb9ad23a40a4761a0f72ad</anchor>
      <arglist>(std::ostream &amp;out, const InterfaceType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>std::ostream &amp;</type>
      <name>operator&lt;&lt;</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>ga9641e43de5a57f7c1a2345cfdcef3d33</anchor>
      <arglist>(std::ostream &amp;out, const PartitionIteratorType &amp;type)</arglist>
    </member>
    <member kind="function">
      <type>PartitionSet&lt;(1&lt;&lt; p)&gt;</type>
      <name>partitionSet</name>
      <anchorfile>a00908.html</anchorfile>
      <anchor>gaf3592a03efd8f240a919daba95d47251</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>GIGrid</name>
    <title>Grid Abstract Base Class</title>
    <filename>a00909.html</filename>
    <class kind="class">Dune::Grid</class>
  </compound>
  <compound kind="group">
    <name>GIGridView</name>
    <title>GridView</title>
    <filename>a00910.html</filename>
    <class kind="class">Dune::GridView</class>
    <class kind="struct">Dune::GridView::Codim</class>
    <class kind="struct">Dune::GridView::Codim::Partition</class>
    <class kind="struct">Dune::GridView::DeprecatedMethodEmptyFuture</class>
    <member kind="typedef">
      <type>ViewTraits ::GridViewImp</type>
      <name>Implementation</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6f7280bd69cfb603432165d70b3a0fc9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTraits ::GridViewImp</type>
      <name>GridViewImp</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad5b0cd877cf707823f4266ef1ac25e9e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>ViewTraits</type>
      <name>Traits</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga26b2114a4034a33473d01926c6b21b6b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Grid</type>
      <name>Grid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad6482279521362048503475e72e8adef</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IndexSet</type>
      <name>IndexSet</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga5f1345dd3b5cf92a0470c9ce7ea24910</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::Intersection</type>
      <name>Intersection</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gad52e1af6a8085784dd1a047ec003d1d1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::IntersectionIterator</type>
      <name>IntersectionIterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga04a58d035da1949e02b84757999e3f9c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::CollectiveCommunication</type>
      <name>CollectiveCommunication</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga14c83b500679183b9095a0c0ea551128</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga7385fa4dc126599c549127cd47cb5b77</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Entity</type>
      <name>Entity</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga9d69742c24c2b313aa7b9f8c8e695f00</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::Geometry</type>
      <name>Geometry</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga94fbe1afe6bda8fccf93d05651686d08</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::LocalGeometry</type>
      <name>LocalGeometry</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gacdf8721c364a1afcd769ca1cef9194b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Traits ::template Codim&lt; cd &gt;::template Partition&lt; pit &gt;::Iterator</type>
      <name>Iterator</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6458fcb7553353f4786f006d4a9a6089</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Grid::ctype</type>
      <name>ctype</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gac2778afeec5a6e768c882746f7baecc5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga470166ab4c35a0b7366204d19c430221af1aa25dd4bbb7ed513bd7b08a3e63926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga5c76b0a0ed3fdcf2bd9ab2bbb2df0847a7170531f3c1c62b7904410099cf37a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga45c3ae7dec727cca6837cd1c2360029aa440aff832b6f4ffea3f9f334f016c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>conforming</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga470166ab4c35a0b7366204d19c430221af1aa25dd4bbb7ed513bd7b08a3e63926</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimension</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga5c76b0a0ed3fdcf2bd9ab2bbb2df0847a7170531f3c1c62b7904410099cf37a37</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>dimensionworld</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gga45c3ae7dec727cca6837cd1c2360029aa440aff832b6f4ffea3f9f334f016c266</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LevelGridView</type>
      <name>levelGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga905f92edbd804596d2735d3045a3cc30</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid, int level)</arglist>
    </member>
    <member kind="function">
      <type>Grid&lt; dim, dimworld, ct, GridFamily &gt;::LeafGridView</type>
      <name>leafGridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga54897a506a84f9b94f0acc75b176b0cd</anchor>
      <arglist>(const Grid&lt; dim, dimworld, ct, GridFamily &gt; &amp;grid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>printMessage</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga4a04fd36c9c3c266208cfc4f33a994e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>ready</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gab0bfe5d07834bb795dc995af5f1a0970</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>wait</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf16802326f0f3e83fe23902d986db4b9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>valid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga6bee0be62a2fbce3e89cc27d0f3a82a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>Implementation</type>
      <name>impl_</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga3fc41fda2ed6fe1dbd5cd4ebfea1b69b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaaf68cc574df6dc419a2c903bd5009ecf</anchor>
      <arglist>(const Implementation &amp;imp)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>GridView</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf3b626d766afd77c38be8ec47149f789</anchor>
      <arglist>(const ThisType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>ThisType &amp;</type>
      <name>operator=</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaa4c3d548fb5ca47cdd845e54377a7f27</anchor>
      <arglist>(const ThisType &amp;other)</arglist>
    </member>
    <member kind="function">
      <type>const Grid &amp;</type>
      <name>grid</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaabc68b134636fde0a5384017d7047e9d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const IndexSet &amp;</type>
      <name>indexSet</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gae3f0803a7bc8cc409f98bd87af16b55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga5ddcf4f66ca883711fcdbcd23d0ed28c</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>size</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga4793d740d8824a946e81674e098c3d53</anchor>
      <arglist>(const GeometryType &amp;type) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gacc036e7e6c42d7b6e88bfdce4a3b1ac1</anchor>
      <arglist>(const EntityType &amp;e) const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga92860a4a6cc8a9853597651813e28928</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaf937633517b9e222b7651caf8b8dc5e2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::Iterator</type>
      <name>begin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga8c6d10ebfc0d41495af02fdccc3997ef</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>Codim&lt; cd &gt;::template Partition&lt; pitype &gt;::Iterator</type>
      <name>end</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga932de218f79e8e9fcfdb4f97451d5159</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>ibegin</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga2ebb9b611e85170ca9b7caed8c92ea48</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>IntersectionIterator</type>
      <name>iend</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gab4cdba181dd6bd5d6d0efd4604a2d1b6</anchor>
      <arglist>(const typename Codim&lt; 0 &gt; ::Entity &amp;entity) const</arglist>
    </member>
    <member kind="function">
      <type>const CollectiveCommunication &amp;</type>
      <name>comm</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gaceb2ef5865dc5e6b3931a36b634db1a5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>overlapSize</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga426f2a232840d3d059e9dc1adfca7eb4</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>ghostSize</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gafac7df15b7cfd83142180db8092940b7</anchor>
      <arglist>(int codim) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga604f7725dc34709f70c328de872bf881</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir) const</arglist>
    </member>
    <member kind="function">
      <type>Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga3711aa01cd12780440d7e531ec7da344</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>const Implementation &amp;</type>
      <name>impl</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga03ec4aa1955491927ee99629b94f3128</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>ga608b5a299cc350230a4a0c65651a292b</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, std::integral_constant&lt; bool, false &gt;) const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>auto</type>
      <name>communicate</name>
      <anchorfile>a00910.html</anchorfile>
      <anchor>gac5921a9aa4ab7dd0b45ee8e5e80cb7cf</anchor>
      <arglist>(CommDataHandleIF&lt; DataHandleImp, DataType &gt; &amp;data, InterfaceType iftype, CommunicationDirection dir, std::integral_constant&lt; bool, true &gt;) const</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>GIEntity</name>
    <title>Entity</title>
    <filename>a00911.html</filename>
    <class kind="class">Dune::Entity</class>
    <class kind="class">Dune::Entity&lt; 0, dim, GridImp, EntityImp &gt;</class>
  </compound>
  <compound kind="group">
    <name>GIGeometry</name>
    <title>Geometry</title>
    <filename>a00912.html</filename>
    <class kind="class">Dune::Geometry</class>
  </compound>
  <compound kind="group">
    <name>GIEntityPointer</name>
    <title>EntityIterators</title>
    <filename>a00913.html</filename>
  </compound>
  <compound kind="group">
    <name>GIIntersectionIterator</name>
    <title>Intersections</title>
    <filename>a00914.html</filename>
    <class kind="class">Dune::Intersection</class>
    <class kind="class">Dune::IntersectionIterator</class>
  </compound>
  <compound kind="group">
    <name>GIIteration</name>
    <title>Iterating over grid entities and intersections</title>
    <filename>a00915.html</filename>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9bbe243bea9b505e0fa4f3ab0005c7f5</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad2988e47e63b21c5d21cf344a3604e82</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gadc6db5e0e39171ba2d9d50d55ec70b80</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0b3a52863a2cefddd5af1b80a63f8226</anchor>
      <arglist>(const GV &amp;gv)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>intersections</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga0927181ebf10ed59531e262a63f92daf</anchor>
      <arglist>(const GV &amp;gv, const Entity &amp;e)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>descendantElements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gae3280c6d5c25ef7993a59b45e401f935</anchor>
      <arglist>(const Entity &amp;e, int maxLevel)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gacc8f311deabddf0c759465f623e87886</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga4f194e5ca8f8dc43e3552316925eb885</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>elements</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga163b69ed0f5787171662b67ee84af991</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>facets</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>gad05c567186a050cda1b13cd8a8ca9399</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>edges</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga238916c208f9e3ead728a253d101fda6</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>vertices</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga9259fd91c0202503a0fd9d3436360bd4</anchor>
      <arglist>(const GV &amp;gv, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga1a59901aedb79caf93090e4211243fa7</anchor>
      <arglist>(const GV &amp;gv, Codim&lt; codim &gt; cd, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>entities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga3deab7ac40c219b9c381bd9de2f3e06b</anchor>
      <arglist>(const GV &amp;gv, Dim&lt; dim &gt; d, PartitionSet&lt; partitions &gt; ps)</arglist>
    </member>
    <member kind="function">
      <type>IteratorRange&lt;... &gt;</type>
      <name>subEntities</name>
      <anchorfile>a00915.html</anchorfile>
      <anchor>ga88886f3af629c47559a5274da52e5512</anchor>
      <arglist>(const E &amp;e, Codim&lt; codim &gt; c)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>IndexIdSets</name>
    <title>IndexSet and IdSet</title>
    <filename>a00916.html</filename>
    <class kind="class">Dune::IndexSet</class>
    <class kind="class">Dune::IdSet</class>
  </compound>
  <compound kind="group">
    <name>GICollectiveCommunication</name>
    <title>CollectiveCommunication</title>
    <filename>a00917.html</filename>
    <class kind="class">Dune::MessageBufferIF</class>
    <class kind="class">Dune::CommDataHandleIF</class>
  </compound>
  <compound kind="group">
    <name>GIMiscellaneous</name>
    <title>Miscellaneous</title>
    <filename>a00918.html</filename>
    <class kind="struct">Dune::GridTraits</class>
  </compound>
  <compound kind="group">
    <name>GICapabilities</name>
    <title>Capabilities</title>
    <filename>a00919.html</filename>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType</class>
    <class kind="struct">Dune::Capabilities::isCartesian</class>
    <class kind="struct">Dune::Capabilities::hasEntity</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator</class>
    <class kind="struct">Dune::Capabilities::hasGeometry</class>
    <class kind="struct">Dune::Capabilities::canCommunicate</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
    <class kind="struct">Dune::Capabilities::threadSafe</class>
    <class kind="struct">Dune::Capabilities::viewThreadSafe</class>
  </compound>
  <compound kind="group">
    <name>Mapper</name>
    <title>Mappers</title>
    <filename>a00920.html</filename>
    <class kind="class">Dune::Mapper</class>
    <class kind="class">Dune::MultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LeafMultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::LevelMultipleCodimMultipleGeomTypeMapper</class>
    <class kind="class">Dune::SingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LeafSingleCodimSingleGeomTypeMapper</class>
    <class kind="class">Dune::LevelSingleCodimSingleGeomTypeMapper</class>
    <member kind="typedef">
      <type>std::function&lt; size_t(GeometryType, int)&gt;</type>
      <name>MCMGLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gad8aa4cc3c8ae1053f70788625f0b5857</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga2e82df0d1c8ad3e2db3a7c765c431b72</anchor>
      <arglist>(Codim&lt; codim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga08aae36ce3194378c4aafa398bfdec70</anchor>
      <arglist>(Dim&lt; dim &gt;)</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgElementLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>ga3f08c3fdd04f64bac3140926732b4b30</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>MCMGLayout</type>
      <name>mcmgVertexLayout</name>
      <anchorfile>a00920.html</anchorfile>
      <anchor>gae9caf92c46fedd5287c5e011dcbdd3b5</anchor>
      <arglist>()</arglist>
    </member>
    <docanchor file="a00920.html" title="What is a Mapper ?">Mapper1</docanchor>
    <docanchor file="a00920.html" title="Different Kinds of Mappers">Mapper2</docanchor>
    <docanchor file="a00920.html" title="Index based Mappers">para1</docanchor>
    <docanchor file="a00920.html" title="Id based Mappers">para2</docanchor>
    <docanchor file="a00920.html" title="Mapper Interface">Mapper3</docanchor>
    <docanchor file="a00920.html" title="Overview of Different Mapper Implementations">Mapper4</docanchor>
    <docanchor file="a00920.html" title="Mappers and Mesh Changes">Mapper5</docanchor>
  </compound>
  <compound kind="group">
    <name>GridImplementations</name>
    <title>Grid Implementations</title>
    <filename>a00921.html</filename>
    <subgroup>GeoGrid</subgroup>
    <subgroup>IdentityGrid</subgroup>
    <subgroup>OneDGrid</subgroup>
    <subgroup>UGGrid</subgroup>
    <subgroup>YaspGrid</subgroup>
    <subgroup>AlbertaGrid</subgroup>
    <class kind="class">Dune::IdentityGrid</class>
    <class kind="class">Dune::OneDGrid</class>
    <class kind="class">Dune::UGGrid</class>
    <class kind="class">Dune::YaspGrid</class>
    <class kind="class">Dune::AlbertaGrid</class>
  </compound>
  <compound kind="group">
    <name>GeoGrid</name>
    <title>GeometryGrid</title>
    <filename>a00922.html</filename>
    <class kind="class">Dune::GeoGrid::EntityBase</class>
    <class kind="class">Dune::GeoGrid::Entity</class>
    <class kind="class">Dune::GeometryGrid</class>
    <docanchor file="a00922.html" title="Features">features</docanchor>
    <docanchor file="a00922.html" title="Usage">usage</docanchor>
  </compound>
  <compound kind="group">
    <name>IdentityGrid</name>
    <title>IdentityGrid</title>
    <filename>a00923.html</filename>
    <class kind="class">Dune::IdentityGrid</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; IdentityGrid&lt; HostGrid &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; IdentityGrid&lt; HostGrid &gt; &gt;</class>
    <class kind="class">Dune::IdentityGridEntity</class>
    <class kind="class">Dune::IdentityGridEntity&lt; 0, dim, GridImp &gt;</class>
    <class kind="class">Dune::IdentityGridEntitySeed</class>
    <class kind="class">Dune::IdentityGridHierarchicIterator</class>
    <class kind="class">Dune::IdentityGridLeafIntersectionIterator</class>
    <class kind="class">Dune::IdentityGridLeafIntersection</class>
    <class kind="class">Dune::IdentityGridLeafIterator</class>
    <class kind="class">Dune::IdentityGridLevelIterator</class>
  </compound>
  <compound kind="group">
    <name>OneDGrid</name>
    <title>OneDGrid</title>
    <filename>a00924.html</filename>
    <class kind="class">Dune::OneDGrid</class>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; OneDGrid, cdim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; OneDGrid, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; OneDGrid &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
    <class kind="struct">IsUnstructured</class>
  </compound>
  <compound kind="group">
    <name>UGGrid</name>
    <title>UGGrid</title>
    <filename>a00925.html</filename>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, 0 &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; UGGrid&lt; dim &gt;, dim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; UGGrid&lt; dim &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; UGGrid&lt; dim &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
    <class kind="struct">IsUnstructured</class>
  </compound>
  <compound kind="group">
    <name>YaspGrid</name>
    <title>YaspGrid</title>
    <filename>a00926.html</filename>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isCartesian&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::canCommunicate&lt; YaspGrid&lt; dim, Coordinates &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; YaspGrid&lt; dim, Coordinates &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities</class>
  </compound>
  <compound kind="group">
    <name>AlbertaGrid</name>
    <title>AlbertaGrid</title>
    <filename>a00927.html</filename>
    <class kind="struct">Dune::Capabilities::hasSingleGeometryType&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntity&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::hasEntityIterator&lt; AlbertaGrid&lt; dim, dimworld &gt;, codim &gt;</class>
    <class kind="struct">Dune::Capabilities::isLevelwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::isLeafwiseConforming&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="struct">Dune::Capabilities::hasBackupRestoreFacilities&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::AlbertaGrid</class>
    <class kind="class">Dune::AlbertaMarkerVector</class>
  </compound>
  <compound kind="group">
    <name>IO</name>
    <title>I/O</title>
    <filename>a00928.html</filename>
    <subgroup>GridFactory</subgroup>
    <subgroup>DuneGridFormatParser</subgroup>
    <subgroup>AmiraMesh</subgroup>
    <subgroup>VTK</subgroup>
    <subgroup>Gnuplot</subgroup>
    <subgroup>Gmsh</subgroup>
    <subgroup>StarCD</subgroup>
  </compound>
  <compound kind="group">
    <name>GridFactory</name>
    <title>GridFactory</title>
    <filename>a00929.html</filename>
    <class kind="class">Dune::GridFactory&lt; AlbertaGrid&lt; dim, dimworld &gt; &gt;</class>
    <class kind="class">Dune::GridFactoryInterface</class>
    <class kind="class">Dune::GridFactory</class>
    <class kind="class">Dune::GridFactory&lt; UGGrid&lt; dimworld &gt; &gt;</class>
  </compound>
  <compound kind="group">
    <name>DuneGridFormatParser</name>
    <title>The Dune Grid Format (DGF)</title>
    <filename>a00930.html</filename>
    <subgroup>DGFGridParameter</subgroup>
    <class kind="class">Dune::DGFWriter</class>
    <docanchor file="a00930.html">General</docanchor>
    <docanchor file="a00930.html">Usage</docanchor>
    <docanchor file="a00930.html" title="First line">START</docanchor>
    <docanchor file="a00930.html" title="Work in progress">OPEN</docanchor>
    <docanchor file="a00930.html" title="Examples">EXAMPLES</docanchor>
    <docanchor file="a00930.html" title="Manual Grid Construction">dgfexample1</docanchor>
    <docanchor file="a00930.html" title="Automated Grid Construction">dgfexample2</docanchor>
    <docanchor file="a00930.html" title="Using Parameters">dgfexampleParam</docanchor>
    <docanchor file="a00930.html" title="Interval Domain">dgfexample3</docanchor>
  </compound>
  <compound kind="group">
    <name>DGFGridParameter</name>
    <title>DGF grid parameter for different grids</title>
    <filename>a00931.html</filename>
    <class kind="class">Dune::dgf::GridParameterBlock</class>
    <class kind="class">Dune::dgf::YaspGridParameterBlock</class>
  </compound>
  <compound kind="group">
    <name>AmiraMesh</name>
    <title>AmiraMesh</title>
    <filename>a00932.html</filename>
    <class kind="class">Dune::AmiraMeshWriter</class>
    <class kind="class">Dune::LevelAmiraMeshWriter</class>
    <class kind="class">Dune::LeafAmiraMeshWriter</class>
  </compound>
  <compound kind="group">
    <name>VTK</name>
    <title>Visualization ToolKit (VTK)</title>
    <filename>a00933.html</filename>
    <file>boundaryiterators.hh</file>
    <file>skeletonfunction.hh</file>
    <class kind="class">Dune::VTKFunction</class>
    <class kind="class">Dune::P0VTKFunction</class>
    <class kind="class">Dune::P1VTKFunction</class>
    <class kind="class">Dune::SubsamplingVTKWriter</class>
    <class kind="class">Dune::VTKSequenceWriter</class>
    <class kind="class">Dune::VTKWriter</class>
  </compound>
  <compound kind="group">
    <name>Gnuplot</name>
    <title>Gnuplot</title>
    <filename>a00934.html</filename>
    <class kind="class">Dune::GnuplotWriter</class>
    <class kind="class">Dune::LeafGnuplotWriter</class>
    <class kind="class">Dune::LevelGnuplotWriter</class>
  </compound>
  <compound kind="group">
    <name>Gmsh</name>
    <title>Gmsh grid format</title>
    <filename>a00935.html</filename>
    <class kind="struct">Dune::GmshReaderOptions</class>
    <class kind="class">Dune::GmshReader</class>
    <class kind="class">Dune::GmshWriter</class>
  </compound>
  <compound kind="group">
    <name>StarCD</name>
    <title>StarCD</title>
    <filename>a00936.html</filename>
    <class kind="class">Dune::StarCDReader</class>
  </compound>
  <compound kind="group">
    <name>GridDevel</name>
    <title>Grid Developer API</title>
    <filename>a00937.html</filename>
    <class kind="class">Dune::EntityDefaultImplementation</class>
    <class kind="class">Dune::EntityDefaultImplementation&lt; 0, dim, GridImp, EntityImp &gt;</class>
    <class kind="class">Dune::GridDefaultImplementation</class>
    <class kind="class">Dune::IndexSetDefaultImplementation</class>
    <class kind="class">Dune::IntersectionDefaultNormalVectors</class>
  </compound>
  <compound kind="group">
    <name>gridpartitions</name>
    <title>Parallel Grid Partitions</title>
    <filename>a00938.html</filename>
  </compound>
  <compound kind="page">
    <name>modules</name>
    <title>Modules</title>
    <filename>a06628.html</filename>
  </compound>
  <compound kind="page">
    <name>recipe-integration</name>
    <title>Integrate a function on a grid</title>
    <filename>a06629.html</filename>
  </compound>
  <compound kind="page">
    <name>recipe-iterate-over-grid</name>
    <title>Iterating over a grid</title>
    <filename>a06630.html</filename>
  </compound>
  <compound kind="page">
    <name>all_grid_recipes</name>
    <title>dune-grid recipes</title>
    <filename>a00906.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>dune-grid Automatic Documentation</title>
    <filename>index.html</filename>
    <docanchor file="index.html" title="Introduction">intro</docanchor>
    <docanchor file="index.html" title="Modules">mods</docanchor>
  </compound>
</tagfile>
